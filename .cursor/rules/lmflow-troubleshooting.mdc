---
description: 
globs: 
alwaysApply: true
---
---
description: "LMFlow troubleshooting and debugging guide"
globs: ["**/*.py", "**/*.sh", "**/*.json", "**/*.yaml", "log/**/*"]
always: true
---

# LMFlow 故障排除与调试指南

## 常见训练问题
1. **内存溢出 (OOM)**:
   - **症状**: CUDA out of memory 错误
   - **解决方案**: 
     - 降低 `per_device_train_batch_size`
     - 增加 `gradient_accumulation_steps`
     - 使用更高级的 ZeRO 策略 (ZeRO-2 → ZeRO-3)
     - 启用 CPU offloading

2. **分布式训练失败**:
   - **症状**: 进程间通信错误或挂起
   - **解决方案**:
     - 检查 `--master_port` 是否被占用
     - 确认所有节点的环境一致
     - 增加 `--ddp_timeout` 值
     - 验证网络连接和防火墙设置

3. **数据加载缓慢**:
   - **症状**: 训练过程中 GPU 利用率低
   - **解决方案**:
     - 调整 `--dataloader_num_workers`
     - 优化 `--preprocessing_num_workers`
     - 使用更快的存储设备
     - 预先处理和缓存数据

## 配置相关问题
1. **DeepSpeed 配置错误**:
   - **症状**: DeepSpeed 初始化失败
   - **检查项**:
     - 确认 JSON 配置文件语法正确
     - 验证 ZeRO 阶段与模型大小的匹配
     - 检查 optimizer 和 scheduler 配置
     - 确保 batch size 设置一致

2. **模型加载失败**:
   - **症状**: 找不到模型文件或权重不匹配
   - **解决方案**:
     - 检查模型路径是否正确
     - 验证 `trust_remote_code` 设置
     - 确认模型和 tokenizer 的兼容性
     - 检查缓存目录权限

## 评估相关问题
1. **ELMB 评估失败**:
   - **症状**: lm_eval 执行报错
   - **解决方案**:
     - 确认已正确安装 lm-evaluation-harness
     - 检查模型路径和权重是否已合并
     - 验证 CUDA 设备可用性
     - 确保有足够的内存运行评估

2. **评估结果异常**:
   - **症状**: 分数过低或不合理
   - **检查项**:
     - 确认使用了正确的合并模型
     - 验证 tokenizer 设置
     - 检查数据预处理是否正确
     - 对比 baseline 模型的结果

## 环境与依赖问题
1. **CUDA 版本不兼容**:
   - **症状**: CUDA 相关错误或性能问题
   - **解决方案**:
     - 检查 PyTorch 和 CUDA 版本匹配
     - 重新安装对应版本的 PyTorch
     - 验证 GPU 驱动版本
     - 检查 CUDA 工具包安装

2. **依赖版本冲突**:
   - **症状**: 导入错误或功能异常
   - **解决方案**:
     - 严格按照 requirements.txt 安装
     - 使用独立的虚拟环境
     - 检查关键依赖的版本兼容性
     - 清理旧版本的缓存文件

## 调试工具与方法
1. **日志分析**:
   - **训练日志**: 检查 `log/` 目录下的文件
   - **错误日志**: 查看 `.err` 文件的详细错误信息
   - **WandB 监控**: 观察损失曲线和性能指标
   - **系统监控**: 使用 `htop`, `nvidia-smi` 监控资源

2. **逐步调试**:
   - **小数据集测试**: 使用少量数据验证流程
   - **单GPU训练**: 先在单GPU上验证配置
   - **参数缩减**: 减小模型或批次大小测试
   - **中间输出**: 打印关键变量和状态

## 性能优化建议
1. **训练速度优化**:
   - 选择合适的精度模式 (bf16/fp16)
   - 调整数据并行和模型并行策略
   - 优化数据预处理和加载流程
   - 使用 gradient checkpointing 平衡内存和速度

2. **内存使用优化**:
   - 使用适当的 ZeRO 阶段
   - 启用 activation checkpointing
   - 调整 batch size 和序列长度
   - 考虑使用 CPU offloading

## 常见错误代码
1. **错误码 137**: 内存不足被系统杀死
   - 解决: 减少内存使用或增加系统内存

2. **错误码 1**: 一般性错误
   - 解决: 检查详细错误日志，通常是配置或数据问题

3. **错误码 2**: 文件未找到
   - 解决: 检查所有文件路径是否正确

## 应急处理流程
1. **训练中断处理**:
   - 检查最新的检查点
   - 使用 `--resume_from_checkpoint` 恢复
   - 验证恢复后的训练状态
   - 监控是否有数据或状态异常

2. **结果异常处理**:
   - 对比多个检查点的结果
   - 重新运行关键步骤验证
   - 检查随机种子和数据顺序
   - 与基准结果进行对比分析

## 社区支持渠道
1. **官方渠道**:
   - GitHub Issues: 技术问题和 bug 报告
   - Discord: 实时讨论和快速帮助
   - 文档: 查阅最新的使用指南

2. **调试信息收集**:
   - 系统环境信息 (OS, CUDA, Python 版本)
   - 完整的错误日志
   - 使用的配置文件
   - 重现问题的最小示例
