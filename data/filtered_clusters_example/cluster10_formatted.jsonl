{"text": "Visual FUPROLAN (Futured Programming language )Is a programming language for programming in multiple paradigms, such procedural programming, object-oriented programming, and generic programming. But which is characterized by a clear syntax, rigorous and"}
{"text": "Perl\n\nALSO CALLED:\nPractical Extraction and Reporting Language DEFINITION: Perl is a script programming language that is similar in syntax to the C language and that includes a number of popular UNIX facilities such as sed, awk, and tr. Perl is an interpreted language that can optionally be compiled just before execution into either C code or cross-platform bytecode. When compiled, a Perl program is almost (but not quite) as fast as a fully precompiled C language program.\nDefinition continues belowPERL DEFINITION (continued): Perl is regarded as a good choice for developing common gateway interface (CGI) programs because it has good text manipulation facilities (although it also handles binary files). It was invented by Larry Wall.In general, Perl is easier to learn and faster to code in than the more structured C and C++ languages. Perl programs can, however, be quite sophisticated. Perl tends to have devoted adherents. A plug-in can be installed for some servers (Apache, for example) so that Perl is loaded permanently in memory, thus reducing compile time and resulting in faster execution of CGI Perl scripts.Perl Perl"}
{"text": "Using the C API\n\nThis chapter describes how to use C functions to accomplish specific tasks and\nprovides brief code samples to illustrate some of these tasks. (For clarity, the\ncode examples shown in the following sections omit a function call status check.)\n\nFollowing a brief discussion of overall design and a summary of client tasks,\nthe topics covered include the following:"}
{"text": "When you post content to the resources section, please follow these guidelines:\n\n1. Always use first letter of every sentence as Capital letter.\n\n2. Do not use any chat keywords in resource content.\n\n3. Use a blank line between each paragraph.\n\n4. Do not use all upper case in title or description\n\n5. Do not copy content from any sites or other sources. Copying content is a serious violation of copy right laws.\n\nYou may refer to other sources, but the resource you post in this site should be completely written in your own words. Even source code, you must use your own variable names and other class/method names."}
{"text": "Perl Debugged\n\nSynopses & Reviews\n\nBook News Annotation:\n\nThis guide for novice to intermediate software developers focuses on the process of Perl programming and identifying and correcting mistakes. Beginning with an overview of the Perl documentation, the text then covers debugging, testing, and performance issues. An entire chapter is devoted to CGI programming in Perl. A comprehensive reference of Perl debugger commands also is included"}
{"text": "This course uses a lower-level programming language, IBM Assembly Language. Students will be shown the efficiencies that can be gained using this lower-level language through the actual coding of programs and their running on the IBM PC. Prerequisite: CI 211."}
{"text": "Introduces object-oriented programming and provides a foundation in the Access object model and the Visual Basic for Applications (VBA) programming language.\n\nCurt Frye\n\n4h 38"}
{"text": "1.6. What's Python Good For?\n\nBecause Python is used in a wide variety of ways, it's\nalmost impossible to give an authoritative answer to this question. As\na general-purpose language, Python can be used\nfor almost anything computers are capable of. Its feature set applies\nto both rapid and longer-term development modes. And from an abstract perspective, any project\nthat can benefit from the inclusion of a language optimized for speed\nof development is a good target Python application domain. Given the\never-shrinking schedules in software development, this is a very broad\ncategory.\n\nA more specific answer is less easy to formulate. For instance,\nsome use Python as an embedded extension language, and others use it\nexclusively as a standalone programming tool. To some extent, this\nentire book will answer this very question\u2014it explores some of\nPython's most common roles. For now, here's a summary of some of the\nmore common ways Python is being applied today:"}
{"text": "Section 1: C Programming Lab Question 1: Write an interactive program in C language to manage the Clinic Information with menu options like Patient's details, Doctor's details, Doctor's and Patient's visits, Laboratory details, Bills, Payments etc. using the file handling concepts. The application should be designed user-friendly. Note: You must execute the program and submit [...]\n\nQuestion 1: Read the following passage carefully and answer the questions that follow: Thanatos, the god of death, is one of the second generation deities of the Greek pantheon. From Thanatos we get \"thanatophobia\": the abnormal, irrational fear of death. It may be fear of the pain and physical agony of dying; or the fear"}
{"text": "PYTHON Articles\n\nPython is a dynamically and strongly typed programming language whose design philosophy emphasizes code readability. Python is used for developing a wide range of applications. Python has two major versions in use."}
{"text": "Install Python 3\n\nBefore you write and run Python code, you need to make sure the Python interpreter is on your computer. In this book, you'll start out with Release 3 of Python, the very latest (and best) version of the language.\n\nA release of Python might already be on your computer. Mac OS X comes with Python 2 preinstalled, as do most versions of Linux (which can also ship with Release 3). Windows, in contrast, doesn't include any release of Python. Let's check your computer for Python 3. Open up a command-line prompt and, if you are using Mac OS X or Linux, type:\n\nOn Windows, use this command:\n\nDo this!\n\nIf Python 3 is missing from your computer, download a copy for your favorite OS from the  website.\n\nWhen you install Python 3, you also get IDLE, Python's simple\u2014yet surprisingly useful\u2014integrated development environment. IDLE includes a color syntax-highlighting editor, a debugger, the Python Shell, and a complete copy of Python 3's online documentation set."}
{"text": "Scheme is a multi-paradigm programming language that is often used in computer science curricula and programming language research, due to its ability to represent many programming abstractions with its simple primitives\n\nCommon Lisp is a multiparadigm, general-purpose programming language that supports a combination of imperative, functional and object-oriented programming paradigms."}
{"text": "David Ascher is the lead for Python projects at ActiveState, including Komodo, ActiveState's integrated development environment written mostly in Python. David has taught courses about Python to corporations, in universities, and at conferences. He also organized the Python track at the 1999 and 2000 O'Reilly Open Source Conventions, and was the program chair for the 10th International Python Conference. In addition, he co-wrote Learning Python (both editions) and serves as a director of the Python Software Foundation. David holds a B.S. in physics and a Ph.D. in cognitive science, both from Brown University."}
{"text": "Edit TopTenList: Why Eclipse is the best book\n\nSpecial page\n\n [ CLICK HERE TO LOG IN OR CREATE AN ACCOUNT]"}
{"text": "2.1. An overview of Python\n\nAs we mentioned earlier, Python supports several different programming techniques. For simple tasks, which there may be many of in a complex program, functions can be more appropriate than making everything a class. Functional programming can make it hard for others to follow your code if it's overused, but it can also be extremely powerful. With Python, you're free to mix procedural, functional, and object-oriented programming to your heart's delight; and, because they all have their place, you probably will. First things first, though\u2014to do this, you need to know the language.\n\nThe core object model of Python is similar to imperative languages such as C#, Java, and VB.NET.[4] If you've used any of these languages before, even if aspects of the syntax are unfamiliar, you'll find learning Python easy. Python does differ from these languages in how it delimits blocks of code. Instead of using curly braces, Python uses indentation to mark blocks of code. Here's a simple example using an if block:\n\n[4] Whereas languages like Ruby inherit more from Smalltalk in their core object model."}
{"text": "Programming languages"}
{"text": "Programming languages"}
{"text": "A Brief History of C\n\nBefore we dive deep into our discussion of functions, a bit of background on the evolution of the C language is in order.\n\nWay back when, in the early 1970s, a group of programmers at AT&T's research arm, Bell Laboratories, created the first C compiler. Two of the programmers on that team, Brian Kernighan and Dennis Ritchie, wrote a book that described the rules a well-formed C program must follow. That book was called The C Programming Language and became the de facto standard reference for all C programmers. The book was fondly referred to as K&R, named for the initials of the authors' last names.\n\nDuring the 1980s, the American National Standards Institute (ANSI) worked to establish a more formal, national standard for the C programming language. This standard was formally ratified in 1989 and became known as ANSI C. The new standard was also commonly referred to as C89. A new version of K&R was published in 1988 based on the updated ANSI C standard."}
{"text": "Working with Constants and Variables\n\nConstants and variables create a set of elements to be used in coding. Although constants and variables are common to almost all programming languages, the way a particular language handles them varies. This section outlines the basics of constants and variables in PL/SQL. You find out how to declare variables, assign values to them, define their scope, and more."}
{"text": "Fortran 90\n\nFORTRAN programming is presented in the context of using the language as a tool for solving engineering or scientific problems. Students need to know which FORTRAN language features are more important/useful than others so explanations are included to give students an overview of key ideas. The presentation of FORTRAN is complemented by specific examples that show how the FORTRAN feature being discussed is used in the context of mathematical, scientific or engineering related problems (i.e. Fibonnaci sequence, factorials, Newton's Method, trigonometric functions, statistics, isotopes, polar form)."}
{"text": "Project Summary\n\nAnalyzed 8 months\nago based on code collected 8 months ago.\n\nThe Nx language is intended to be a strictly typed array programming language. The language is a imperative one but allows to use some concepts of functional languages like anonymous functions. A major feature of this language is a powerful type inference allowing to omit all type declarations."}
{"text": "Python is a popular and versatile programming language used for everything from creating websites to scientific computing to building games. This class will introduce beginning programmers to Python through an interactive lecture; by the end of the class, students will have hands-on exposure to many core programming concepts, be able to write useful Python programs, and have a roadmap for continuing to learn and practice programming in Python.\n\nLinux users, you already have Python and a good text editor installed!\n\nIf\nyou have trouble installing and setting up these programs, the\ninstructor/class aides will be available before class begins - please\nshow up at least 30 minutes before class if you want help.\n\nAbout the Instructor\n\nJessica McKellar is a Director for the Python Software Foundation and an organizer for the Boston Python User Group, the largest Python user group in the world. She uses Python every day as the VP of Engineering at a local startup."}
{"text": "Available Libraries\n\nAWS provides libraries, sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of SOAP and Query.\nThese libraries provide basic functions (not included in the APIs), such as request authentication, request retries, and error handling so that it is easier to get started.\nLibraries and resources are available for the following languages:"}
{"text": "2.1. Jump Right In\n\nBefore we cover some of the fundamental structure and logic of ActionScript 3.0, let's write another script to help get the feel of the language and build a little confidence. Specifically, we'll build on the Hello World! exercise from Chapter 1 to introduce some of the material explained in detail in this chapter. We'll give you a brief explanation here and then expand on each relevant topic as you read on. Create a new ActionScript 3.0 FLA file and type the following code into frame 1 using the Actions panel. You can compare your work with the hello_world_if_loop.fla source file."}
{"text": "Here we will use the python programming language to make a game of hangman, starting from scratch, working on a Macintosh. Python comes with OS X, so nothing special needs to be installed to follow along on your Mac. To use python on Windows, you can download and install python here . It takes a couple hours to learn enough programming to make a simple game. We will learn about:\n\nNavigation How to Think Like a Computer Scientist \u00b6 Learning with Python \u00b6\n\nI frequently see a problem when people (especially techies) try to teach programming to someone (especially non-techies). Many programming tutorials begin with basic programming principles: variables, loops, data types. This is both an obvious way to teach programming and almost certainly a wrong way to teach programming."}
{"text": "Programming in C in 7 Days!\n\nBy Sarmady, Siamak\n\nDescription\nTechnical Reference Publication\n\nExcerpt\nIntroduction: This course is a quick tutorial on C Programming language. We assume that you are familiar with at least one of famous operating systems. For this course you can use the following compilers or Programming Environments: // - cc in Unix or gcc in Linux operating systems // - Borland C or Turbo C in DOS operating system // - Visual C++ (create a simple win32 console application.) in Windows // - C++Builder (create a console application using console app wizard) in windows..."}
{"text": "Preprocessors are the Source of our Program those are Executed whey they are passing to Compiler and Preprocessors are always executed at the Time of Compilations. Preprocessors provide many features called Preprocessor directives and Each Preprocessor is declared with # symbol and This Directive must be written before a main program.\n\nA Program is a set of Instructions and a Programmer is that who develops the program .For creating a program a programmer must use a language called as the programming language So generally a programming language is used for creating the software's.\n\nWe know that a computer can understand only Machine Language But the Program Written by a user is in the Form of English Language So it very necessary to convert the human Language into the Machine Language. So for this purpose we use Compiler which Converts human code into the machine code.\n\nAs we know that Software is a Program. And a Program is that which Contains set of instructions, and an Instruction contains Some Tokens. So Tokens are used for Writing the Programs the various Types of Tokens those are contained by the Programs.\n\nThe Memory is allocated in two ways either in Static and either in Dynamic. In Static Memory Allocation the Size of Memory may be Fixed and pre-defined but the Limitation of Static Memory is that when a user Stores Large Amount of data or Large Number of Elements are Increased instead the Declarable size of Numbers So The Concept of Dynamic Memory Allocation is used When we doesn't know about the actual size or when we doesn't known about the Number of elements For this purpose we uses Dynamic Memory Allocation.\n\nType Conversion is that which converts to data type into another for example converting a int into float converting a float into double The Type Conversion is that which automatically converts the one data type into another but remember we can store a large data type into the other for example we can't store a float into int because a float is greater than int."}
{"text": "Chapter 7. Building Applications\n\nThe tutorial in RealView Debugger v1.8 Essentials\nGuide introduces how to build an image, but the build\nprocess, and how to customize it, are covered in more detail in\nthis chapter. It contains the following sections:"}
{"text": "online C compiler onlineC compiler I am working on my final year engineering project in which I am making an onlineC compiler\u00e2\u00e2?\u00ac\u00c2\u00a6I am working in windows\u00e2\u00e2?\u00ac\u00c2...?\u00ac\u00c2\u00a6.i need to integrate the Ccompiler with the server\u00e2\u00e2?\u00ac\u00c2\u00a6can anyone explain\n\nJava Compiler,Java Compiler Example\nJava Compiler\nTo commence with Java programming, we must know the\nsignificance of Java Compiler. When we write any program in a text editor like\nNotepad, we use Java compiler\n\nJava Compiler\nJava Compiler\nTo commence with Java programming, we must know the\nsignificance of Java Compiler. When we write any program in a text editor like\nNotepad, we use Java compiler\n\nC++Tutorials --the most common is Dev-C++ around GNU's G++ compiler. Some, such as G... as reference.\nU will need a C++ compiler of some sort, if you are using...;\nOnlineC++ Tutorial\nC++ is a third generation\n\nC++GraphicsTutorials OpenIL working under Windows and the FREE Dev-C++ IDE/compiler! This probably...\nC++ Graphics Tutorials\n&nbsp... in this document is correct.\nC/C++ Windows programmers who want to learn\n\nOnline exam using c# and SQL server Online exam using c# and SQL server hello, i'm making the (window based)online examination system using C#.net and SQL SERVER. my database is stored on server. my question is: if during the examination server gets failed\n\nC/C++ Programming Books :\nThe compiler offers improved support for the ANSI C++ standard. Boolean...;\nCompilers and Compiler Generators: an introduction with C++\nThis site... and Compiler Generators - an introduction with C++\", published in 1997\n\nAsk C/C++ Questions online\nAsk C/C++ Questions onlineC and C++ are different programming language, but both the languages are popular among programmers. C is a general\n\nObjective C on Windows on Windows machine. We\nwill download and install Objective C Windows compiler. On windows GNU Ccompiler can be used to compile the Objective C program.\nObjective CCompiler for Windows\nThe GNUstep windows installer can be downloadedC and C++ books-page1 C and C++ books-page1\nThe C Books\nThis is the online version of The C Book, second... learning C++ fast and easy.\nThe onlineC\n\nC and C++ books C and C++ books\nPage 1\nThis is the online version of The C Book, second\nedition...\nC and C++ are widely promoted as ideal portable, fast, and - in the case of C java compiler error I am trying to compile a simple program which is as follows:\npublic class A\n{\npublic static void main(String args... as well.But putting class B in different file named B.java compiler complains about\n\nC and C++ books-page10 C and C++ books-page10\nThe programming language C\nAs a programming language, C is rather....\nOf the three languages, C allows the most precise control of input and output. C\n\nc++ - Development process c++ how the user create our own header file in c++ programs.i have coding but i can't create header file .please help me.code is shown below.reply... .At that time compiler generate one error (line 3:class Arm).error is declaraion syntaxC and C++ books-page8 and online at Microsoft's web site.\nThe learning GNU C...\nC and C++ books-page8\nThe ODBC from C Tutorial\nIn this section for example-based C\n\nc++ c++ use a prgrm as an example to xplain-:\na)class\nb)object\nc)message\nd)cope resolution operator\n\nC and C++ books-page6 ;\nThe Scientific C++ for techniques\nEvery compiler supports a different...++ compiler. Another exception is the SGI C++ compiler, which does a reasonably good...\nC and C++ books-page6\n&nbspLinux Books is to explain the use of the GNU C and C++ compilers, gcc and g++. After... compiler options for optimization and debugging. This book does not attempt to teach the C or C++ languages themselves, since this material can be foundC and C++ books-page12\nAlthough Visual C++ is first and foremost a C++ compiler, it also offers a complete...\nC and C++ books-page12\nIntroduction to C programming\nThis section is designed"}
{"text": "C APIs in Extension and Extensible Languages\n\nAbstract: Scripting languages are used in conjuction with C code in two ways: as extension languages, where the interpreter is embedded as a library into an application; or as extensible languages, where the interpreter loads C code as add-on modules. These two scenarios share many similarities, as in both of them two-way communication of code and data needs to take place. However, the differences between them impose design tradeoffs that affect the C API that bridges the two languages, often making a scripting language more suitable for extending than embedding, or vice-versa. This paper discusses how these tradeoffs are handled in the APIs of popular scripting languages, and the impact on their use as embedded or extensible languages."}
{"text": "updated edition of an authoritative guide contains a full explanation of Perl version 5.6 features, covering Perl language and syntax, functions, library modules, references, object-oriented features, threading, Unicode, the compiler, and other new and improved features of Perl. Original. (Intermediate)\n(view table of contents)\n\nAmazon.com description:Product Description:\n\nPerl is a powerful programming language that has grown in popularity since it first appeared in 1988. The first edition of this book, Programming Perl, hit the shelves in 1990, and was quickly adopted as the undisputed bible of the language. Since then, Perl has grown with the times, and so has this book.\n\nProgramming Perl is not just a book about Perl. It is also a unique introduction to the language and its culture, as one might expect only from its authors. Larry Jon Orwant is the editor of The Perl Journal, which has brought together the Perl community as a common forum for new developments in Perl.\n\nAny Perl book can show the syntax of Perl's functions, but only this one is a comprehensive guide to all the nooks and crannies of the language. Any Perl book can explain typeglobs, pseudohashes, and closures, but only this one shows how they really work. Any Perl book can say that my is faster than local, but only this one explains why. Any Perl book can have a title, but only this book is affectionately known by all Perl programmers as \"The Camel.\"\n\nThis third edition of Programming Perl has been expanded to cover version 5.6 of this maturing language. New topics include threading, the compiler, Unicode, and other new features that have been added since the previous edition"}
{"text": "1.3. Using expressions and statements\n\nThe basic components of the RealView Debugger command-line language\ncan be classified as either expressions or statements, or a combination\nof both, where statements are typically contained in include files\n(see the chapter that describes how to get started with the CLI\nin the RealView Debugger v1.8 Essentials Guide)."}
{"text": "Introduction\n\nWhat programming languages do you like"}
{"text": "Question: Can I audit the course? Answer: I don't mind if you do not take the course for a grade; however, I ask you then to register as an auditor for the course. If this is difficult (e.g., you are up against the enrollment limit), please talk to the instructor.\n\nQuestion: I have not yet enrolled in the course, but I would like to subscribe to the discussion/announcement list. How do I do that?\nAnswer: Please send an email to the instructor to be added to the mailing list.\n\nQuestion: What programming language can I use for my homework assignments? Answer: You are not restricted to any specific programming language. However, your turned in assignments have to clearly explain what the code does and have to process the test cases and to produce correct output.\n\nQuestion: How to submit the programming part of the homework assignment? Answer: Please use Blackboard Vista to submit your programming assignments; make sure to use the correct assignment link. Please use attachments, one for each programming exercises, and include the directions for how to run your code.\n\nQuestion How to submit the written part of the homework? Answer: If you wish to submit a PDF with your work, you can use Blackboard Vista to do so; in this case, please make sure to use the correct assignment link. Otherwise, you can submit a printed version before the start of the class on the due date.\n\nQuestion: What programming language/platform can I use for the project? Answer: You can use any programming language or platform you choose. Your final project submission generally would not include your code. However, your experimental results have to be reproducible.\n\nQuestion: Can I work on the project alone or do I need to find a partner? Answer: I ask the students to work in pairs on the course project. There might be exceptions (e.g., odd number of students); however, such exceptions have to be discussed in advance."}
{"text": "MATLAB - a high-level technical computing language, interactive environment for algorithm development and modern tools of data analysis. Also present in the assembly library of books on the package MATLAB & Simulink.\n\nMATLAB - a high-level technical computing language, interactive environment for algorithm development and modern tools of data analysis. Also present in the assembly library of books on the package MATLAB & Simulink.\n\nMATLAB, the language of technical computing, is a programming environment for algorithm development, data analysis, visualization, and numeric computation. Simulink is a graphical environment for simulation and Model-Based Design of multidomain dynamic and embedded systems.\n\nRelease 2012b includes major new releases of MATLAB and Simulink, featuring the new MATLAB Desktop, Simulink Editor, and Documentation Center. In addition, there is one new product and updates and bug fixes to 81 other products.\n\nGet started using MATLAB right away with help from this hands-on guide. MATLAB Demystified offers an effective and enlightening method for learning how to get the most out this powerful computational mathematics tool.\n\nAdditional materials for the program Matlab. help files to learn and work with the program Matlab and Simulink. Distributing is a continuation of THIS and THIS ... Seems they are \"dried up\". In the future when I'll make one of those matermal hands they can be close ... but so far noA great MATLAB Book collection featuring 73 titles plus exercise files. MATLAB (matrix laboratory) is a numerical computing environment and fourth-generation programming language. Developed by MathWorks, MATLAB allows matrix manipulations, plotting of functions and data, implementation of algorithms, creation of user interfaces, and interfacing with programs written in other languages, including C, C++, Java, and FortranMATLAB\u00ae MATLAB provides a number of features for documenting and sharing your work. You can integrate your MATLAB code with other languages and applications, and distribute your MATLAB algorithms and applications.\n\nContains Seventy-Three selected books on MATLAB and its applications.MATLAB is an incredibly powerful tool that integrates computation, visualization, and programming in a flexible, open environment. It offers engineers, scientists, and mathematicians an intuitive language for expressing problems and their solutions mathematically and graphically. Complex numeric and symbolic problems can be solved in a short time by interfacing it with a programming language such as C, Fortran, or Java."}
{"text": "ActionScript 2.0 Essential Training\n\nwith Joey Lott\n\nActionScript 2.0 is a powerful scripting language that allows you to create complex and highly interactive Flash applications. In ActionScript 2.0 Essential Training, Joey Lott will teach you the essential skills and reveal the insider information you need to begin developing Flash applications. The training begins with an overview of programming terms and concepts used in ActionScript such as datatypes, variables, expressions and operators, switch statements, arrays, functions, etc., and then quickly moves on to show apply the concepts using practical examples Learning ActionScript 2.0 in Flash MX 2004"}
{"text": "A programming language is an artificial language designed to communicate instructions to a machine, particularly a computer. Programming languages can be used to create programs that control the behavior of a machine and/or to express algorithms precisely....\n\ns. These words have special meaning within the language and are predefined in the language's formal specifications. Typically, reserved words include labels\n\nLabel (programming language)\n\nA label in a programming language is a sequence of characters that identifies a location within source code. In most languages labels take the form of an identifier, often followed by a punctuation character . In many high level programming languages the purpose of a label is to act as the...\n\nA type system associates a type with each computed value. By examining the flow of these values, a type system attempts to ensure or prove that no type errors can occur...\n\ncapabilities in a traditionally procedural language. Sometimes the specification for a programming language will have reserved words that are intended for possible use in future versions. InReserved word vs. keyword\n\nA keyword is a word that is special only in certain contexts but a reserved word is a special word that cannot be used as a user-defined nameSpecification\" uses the term \"keyword\".\n\nThe ISO 9899 standard for the C programming language uses the term \"keyword\".\n\nComparison by language\n\nNot all languages have the same numbers of reserved words. For example, Java (and other C\n\nC (programming language)\n\nC is a general-purpose computer programming language developed between 1969 and 1973 by Dennis Ritchie at the Bell Telephone Laboratories for use with the Unix operating system....\n\nderivatives) has a rather sparse complement of reserved words\u2014approximately 50 \u2013 whereasProlog is a general purpose logic programming language associated with artificial intelligence and computational linguistics.Prolog has its roots in first-order logic, a formal logic, and unlike many other programming languages, Prolog is declarative: the program logic is expressed in terms of...\n\nhas\n\nTuring completeness\n\nIn computability theory, a system of data-manipulation rules is said to be Turing complete or computationally universal if and only if it can be used to simulate any single-taped Turing machine and thus in principle any computer. A classic example is the lambda calculusspecification\n\nVisual Basic .NET\n\nVisual Basic .NET , is an object-oriented computer programming language that can be viewed as an evolution of the classic Visual Basic , which is implemented on the .NET Frameworkdefinition such as:\n\n' Class Definition of This in Visual Basic.NET:\n\nPublic Class this\n' This class does something...\nEnd Class\n\nthis x = new this; //\n@this x = new @this; // Will compile!\n\nFor consistency, this usage is also permitted in non-public settings such as local variables, parameter names, and private members."}
{"text": "Description: Free computer tutorials from F1Tutorials. All the tutorials are aimed at complete beginners. We currently have Introduction to Visual Basic .NET, HTML Basics, Basics of PHP, Introduction to Visual Basic 6.0, Introduction to Computer Hardware, Introductio"}
{"text": "Introduction to Problem Solving using Computer Programming\n\nIntroduction to Problem Solving using\nComputer Programming by Erik Albert is a textbook currently\nunder development for the COS 125 course at the\nUniversity of Maine.\n\nThis textbook is not designed to be an introduction to, or reference\nfor, any particular programming language. Instead, the focus is\nprimarily on concepts and techniques for programming in general.\nR5RS Scheme is used as the target language due to its syntactic\nsimplicity, the short \"lead-time\" required before\nchallenging problems can be attempted, and the availability of an\nexcellent development environment.\n\nTopics in Introduction to Problem\nSolving using Computer Programming include:\n\nComputer systems, the programming process, and\nprogramming paradigms.\n\nProgramming concepts such as variables,\nprocedures and functions, recursion, loops, and assignment."}
{"text": "Python Tutorials\n\nDissecting A Python...Program - Python\n\nKnown for its power, flexibility and elegance - much like its namesake - Python is one of the most interesting programming languages around. In this introductory tutorial, find out how learning Python will earn you respect, affection and bags of money. Oh yeah...you might also learn a little bit about the origins, features and syntactical rules of the language.\n\nis used to indicate the location of the Python binary. As I've just explained,\nthis line must be included in each and every Python script, and its omission is a common cause of heartache for novice programmers. Make it a habit to include it, and you'll live a healthier, happier life.\n\nNext up, we have a comment.\n\n# eyes.py - print a line of output\n\nComments in Python are preceded by a hash (#) symbol. If you're planning to make\nyour code publicly available on the Internet, a comment is a great way to tell members of the opposite sex all about yourself - try including your phone number for optimum results. And, of course, it makes it easier for other developers (not to mention you, circa 2010) to read and understand your code.\n\nAnd finally, the meat of the script:\n\nprint \"Snake Eyes\"\n\nIn Python, a line of code like the one above is called a \"statement\". Every Python\nprogram is a collection of statements, and a statement usually contains instructions to be carried out by the Python interpreter. In this particular statement, the print() function has been used to send a line of text to the screen. Like all programming languages, Python comes with a set of built-in functions - the print() function is one you'll be seeing a lot of in the future. The text to be printed is included within single or double quotes.\n\nAlthough every Python statement usually begins on a new line, a single statement\ncan be split across lines with a backslash (). It is not necessary to end each statement with a semicolon (;), as in Perl and PHP."}
{"text": "97807637029Data Abstraction and Structures Using C++\n\nData Abstraction and Structures Using C++ is the ideal text for introducing computer science students to C++. A powerful alternative for second courses in computer science, the text is thoroughly rooted in the concepts of data abstraction and object-oriented software development that have transformed the subject of data structures. The text introduces the abstract properties of important data types in Part I and discusses their implementation later in Part II. This separation of concepts helps students understand the difference between the properties of a data structure and it's implementation, so that they can develop the alternative data representations best suited to specific programming problems. Data Abstraction and Structures Using C++ is intended for use after a first course in programming with a high-level language, but does not require specific knowledge of C++ itself. Instead, the text helps students make the transition from Pascal or C to C++ through clear explanations and specific information included in the appendices. The authors' disciplined, careful presentation is designed to steer students clear of the pitfalls that sometimes accompany the use of this powerful and increasingly popular language"}
{"text": "Provides the core knowledge to begin programming in any language, using JavaScript to explore the syntax of a programming language, and shows how to write and execute your first application and understand what's going on under the hood."}
{"text": "Covers the new features, tools, and technologies in Office 2003 and demonstrates how developers can extend, enhance, and customize the suite using VisualBasic for Applications (VBA)\n\nMore than 800 pages of clear and friendly For Dummies advice and instructions help developers get up to speed fast, improve workflow, and get the job done\n\nPacked with helpful real-world examples, including creating an Office document collaboration manager, automating e-mail routing, administering the Task Pane from within an application, and building a distributed business system using Web services\n\nThe eight minibooks cover Office 2003 essentials; understanding Office programming; maximizing Word; making the most of Excel; advanced Access; exploiting Outlook; InterOffice; working as a team; and power techniques such as advanced Office automation, VBA, and .NET\n\nBiography\n\nRichard Mansfield's recent titles include Visual Basic .NET All-in-One Desk Reference For Dummies, Visual Basic .NET Weekend Crash Course, Visual Basic .NET Database Programming For Dummies, Visual Basic 6 Database Programming For Dummies (all from Wiley), Hacker Attack (Sybex), and The Wi-Fi Experience: Everyone's Guide to 802.11b Wireless Networking (Que). From 1981 through 1987, he was editor of COMPUTE! magazine, during which time he wrote hundreds of magazine articles and two columns. From 1987 to 1991, he was editorial director and partner in Signal Research and began writing books full-time in 1991. He has written 34 computer books since 1982. Of those, four became bestsellers: Machine Language for Beginners (COMPUTE! Books), The Second Book of Machine Language (COMPUTE! Books), The Visual Guide to Visual Basic (Ventana), and The Visual Basic Power Toolkit (Ventana, with Evangelos Petroutsos). Overall, his books have sold more than 500,000 copies worldwide and have been translated into 11 languages.\n\nTable of Contents\n\nIntroduction.\n\nBook I: Office 2003 Essentials.\n\nChapter 1: Getting with the Program.\n\nChapter 2: Programming Lite: Making the Most of Macros.\n\nChapter 3: What's New in 2003?\n\nBook II: Understanding Office Programming.\n\nChapter 1: The Basics of Office Development with VBA.\n\nChapter 2: Managing Data.\n\nChapter 3: Looping and Branching.\n\nChapter 4: Managing Files and UserForms.\n\nChapter 5: Moving to the Internet.\n\nChapter 6: Debugging.\n\nBook III: Maximizing Word.\n\nChapter 1: The Word Object Model.\n\nChapter 2: Power Editing.\n\nChapter 3: Using XML in Word.\n\nChapter 4: The Internet Connection.\n\nChapter 5: Advanced Word Macros.\n\nBook IV: Making the Most of Excel.\n\nChapter 1: The Excel Object Model.\n\nChapter 2: Handling Excel Events.\n\nChapter 3: Advanced Worksheet Editing.\n\nChapter 4: Data Diving with Pivot Tables.\n\nChapter 5: Business Analysis with Excel.\n\nChapter 6: Ten Excellent Excel Macro Techniques.\n\nBook V: Advanced Access.\n\nChapter 1: Access Today.\n\nChapter 2: Programming Access.\n\nChapter 3: Manipulating Datasets.\n\nChapter 4: Automating Access.\n\nChapter 5: Troubleshooting in Access.\n\nChapter 6: Access Macro Techniques.\n\nBook VI: Exploiting Outlook.\n\nChapter 1: Outlook Power Tools.\n\nChapter 2: Programming Outlook.\n\nChapter 3: Managing Work and Life.\n\nChapter 4: Expert E-Mail Administration.\n\nChapter 5: Group Management in Outlook.\n\nChapter 6: Advanced Outlook Macros.\n\nBook VII: InterOffice: Working as a Team.\n\nChapter 1: Collaboration Features Overview.\n\nChapter 2: Managing Shared Documents.\n\nChapter 3: XML and Office.\n\nChapter 4: Working with InfoPath.\n\nChapter 5: Adding Smart Tags.\n\nChapter 6: Exploring Smart Documents.\n\nChapter 7: Using Project 2003.\n\nChapter 8: Employing SharePoint.\n\nBook VIII: Power Techniques: Advanced Office Automation, VBA, and .NET"}
{"text": "Python is a free, portable, very-high-level object-oriented programming language. Its simplicity and elegance make it a perfect language for beginning programmers and enhance the productivity of experienced professionals. Python is now a standard tool in many areas of software development and has found a home at places like Google and NASA. Using Python as the primary language in our CS curriculum at Wartburg College has allowed our students to focus more on fundamental concepts of computer science and less on arcane language issues. This talk is an introduction to the Python language emphasizing its uses in teaching, especially for introductory programming courses.CS&IT Symposium 2008Teachers (Professional Development)Python"}
{"text": "Java Programming: Chapter 7 Quiz Quiz Questions\nFor Chapter7\nTHIS PAGE CONTAINS A SAMPLE quiz on material from\nChapter7 of this on-line\nJava textbook. You should be able to answer these questions after\nstudying that chapter. Sample answers to all\n\nquiz\nquiz using core java concepts purely not html ,Define a Question... question has a complexity (difficulty) level. Use the Question class to define a Quiz class. A quiz can be composed of up to 10 questions. Define the add method\n\nJava Programming: Chapter 2 Quiz Quiz Questions\nFor Chapter 2\nTHIS PAGE CONTAINS A SAMPLE quiz on material from\nChapter 2 of this on-line\nJava textbook. You should be able to answer these questions after\nstudying that chapter. Sample answers to all\n\nJava Programming: Chapter 4 Quiz Quiz Questions\nFor Chapter 4\nTHIS PAGE CONTAINS A SAMPLE quiz on material from\nChapter 4 of this on-line\nJava textbook. You should be able to answer these questions after\nstudying that chapter. Sample answers to all\n\nJava Programming: Chapter 9 Quiz Quiz Questions\nFor Chapter 9\nTHIS PAGE CONTAINS A SAMPLE quiz on material from\nChapter 9 of this on-line\nJava textbook. You should be able to answer these questions after\nstudying that chapter. Sample answers to all\n\nJava Programming, Chapter 12 Quiz Quiz Questions\nFor Chapter 12\nTHIS PAGE CONTAINS A SAMPLE quiz on material from\nChapter 12 of this on-line\nJava textbook. You should be able to answer these questions after\nstudying that chapter. Sample answers to all\n\nJava Programming: Chapter 1 Quiz Quiz Questions\nFor Chapter 1\nTHIS PAGE CONTAINS A SAMPLE quiz on material from\nChapter 1 of this on-line\nJava textbook. You should be able... is a subroutine?\nQuestion 7:\nJava is an object-oriented programming language. What\n\nJava Programming: Chapter 6 Quiz Quiz Questions\nFor Chapter 6\nTHIS PAGE CONTAINS A SAMPLE quiz on material from\nChapter 6 of this on-line\nJava textbook. You should be able to answer these questions after\nstudying that chapter. Sample answers to all\n\nJava Programming: Chapter 10 Quiz QuJava Programming: Chapter 3 Quiz Quiz Questions\nFor Chapter 3\nTHIS PAGE CONTAINS A SAMPLE quiz on material from\nChapter 3 of this on-line\nJava textbook. You should be able to answer these questions after\nstudying that chapter. Sample answers to all\n\nJava Programming: Chapter 5 Quiz Quiz Questions\nFor Chapter 5\nTHIS PAGE CONTAINS A SAMPLE quiz on material from\nChapter 5 of this on-line\nJava textbook. You should be able to answer these questions after\nstudying that chapter. Sample answers to all\n\nJava Programming, Chapter 11 Quiz Quiz Questions\nFor Chapter 11\nTHIS PAGE CONTAINS A SAMPLE quiz on material from\nChapter 11 of this on-line\nJava textbook. You should be able to answer these questions after\nstudying that chapter. Sample answers to all\n\nJava Programming: Chapter 8 Quiz Quiz Questions\nFor Chapter 8\nTHIS PAGE CONTAINS A SAMPLE quiz on material from\nChapter 8 of this on-line\nJava textbook. You should be able to answer these questions after\nstudying that chapter. Sample answers to all\n\nOnline Quiz Application in JSP\nOnline Quiz Application in JSP\n&nbsp... are going to implement of Online quiz application using of JSP.\nStep 1: Create... quiz question and answer form using with JSP or JDBC database.\nHere\n\nJava Programming: Chapter 2 Quiz Answers\nSample Quiz Answers\nFor Chapter 2\nTHIS PAGE CONTAINS SAMPLE ANSWERS to the Quiz on\nChapter 2 of this on-line\nJava textbook. Note... of the primitive types in Java is boolean. What is the boolean type?\nWhere are boolean\n\nJava Programming: Chapter 4 Quiz Answers\nSample Quiz Answers\nFor Chapter 4\nTHIS PAGE CONTAINS SAMPLE ANSWERS to the Quiz on\nChapter 4 of this on-line\nJava textbook. Note... is the\nstandard Java API which describes the interfaces of all the subroutines in all\n\nonline quiz\n) level. Use the Question class to define a\nQuiz class. A quiz can be composed of up to 10 questions. Define the add method of the Quiz\nclass to add a question to a quiz. Define the giveQuiz method of the Quiz class to present each\nquestionJava Programming: Chapter 6 Quiz Answers\nSample Quiz Answers\nFor Chapter 6\nTHIS PAGE CONTAINS SAMPLE ANSWERS to the Quiz on\nChapter 6 of this on-line\nJava textbook. Note...\nProcess the event\nThis is called an event loop. In Java, the event"}
{"text": "A researched article about the history of the C++ programming language, including information provided by Bjarne Stroustrup. Bibiliography and related links"}
{"text": "Python is an interpreted, interactive,\nobject-oriented programming language. It combines\nremarkable power with very clear syntax, and isn't\ndifficult to learn. It has modules, classes,\nexceptions, very high level data types, and\ndynamic typing. There are interfaces to many\nsystem calls and libraries, as well as to various\nwindowing systems (Tk, Mac, MFC, GTK+, Qt,\nwxWindows). New built-in modules are easily\nwritten in C or C++. Python is also usable as an\nextension language for applications that need a\nprogrammable interface"}
{"text": "My main research interests surround programming languages and domain\nspecific languages. One of my major contributions has been through the Converge programming language which allows\nsyntactically distinct domain specific languages to be embedded in normal\nprogram files and compiled out at compile-time. My publications are available separately as is a\nlarger list of the software I have written.\n\nI have been an invited speaker and panelist at several international\nconferences on topics including domain specific languages, UML 2, model\ntransformations, and meta-modelling. A partial list of professional\nresponsibilities is as follows:"}
{"text": "Naming conventions\n\nBefore this chapter closes, let's take a quick look at an aspect of programming practice called naming conventions. You might have noticed something peculiar about the kinds of names that you gave the file, class, and method names. Look at the choice of file name for the AS file:\n\nHelloWorld\n\nDoes it look a little strange to you? It should. You'll notice that the H and W are uppercase, and there's no space between the two words. This is a style of giving things names that programmers affectionately call camel case (also known as humpBackNotation). Can you guess why it's called that? I'm sure you can!\n\nWith camel case, you can write a compound phrase using more than one word. The words are not separated with blank spaces, and the phrase is still easily readable by you and by AS3.0. Blank spaces in the middle of compound names are the programming equivalent to foxes in a chicken coop\u2014avoid them at all cost! The AS3.0 code compiler throws its hands in the air when it encounters a blank space where there shouldn't be one, so camel case was developed by programmers as an efficient way of writing compound words or phrases without spaces. You should also avoid blank spaces in any of your folder names, because if you're using an IDE other than Flash Builder, the underlying Flex SDK that compiles your code can't process paths to files that inclu...."}
{"text": "Computer Applications is an important subject especially in today's times where the computer is an indispensable part of the life. The subject of computer applications usually deals with topics that are related to the different application, software, programming and language of the computer that helps the computer to function and display certain information after the data is fed into it. In one of the computer language papers the programming of C Paper is very significant. Some of the topics taught under this course and paper are Hamming distance, compiler and interpreter and the differences between them, purpose of malloc function, evaluation of binary expression source code, object code and executable code, different storage classes available in C, different data types in C with examples, control structures, advantages and disadvantages of a recursive algorithm, structural data file and steps involved in creating a new file , pointer variable and its different features. The paper consists of 2 marks and 10 marks questions. Ten 2 marks questions and five 10 marks questions should be attempted. Below are attached some of the previous year's question papers for your help."}
{"text": "In this line of conduct, you'll learn about the features that are available in SQL Server, in what way to design and create a database, and how to build basic queries using Transact-SQL, the speech of SQL Server. Then, you'll learn how to build sufficient views, stored procedures, triggers, and user-defined functions using T\n\nMicrosoft Visual Basic 6.0 Enterprise Edition Visual Basic (VB) is the third-generation event-driven programming language and integrated development environment (IDE) from Microsoft with a view to its COM programming model. VB is also considered a relatively flowing to learn and use programming language, because of its graphical increase features and BASIC heritage.\n\nIn Visual Training Company's tutorial Microsoft Visual Basic by reason of Excel, Pravah Pugh helps you get started by going over macros, the VBA programming speech, and the VBA development environment. He then teaches you a\n\nTeach yourself the volatile tools and techniques for Visual Basic 2010-one step at a time. No good sense what your skill level, you'll find the practical guidance and examples you want to start building professional applications for Windows and the Web.\n\nDiscover how to: * Work in the Microsoft\u00ae Visual Studio\u00ae 2010 Integrated Development Environment (IDE)"}
{"text": "In this line of conduct, you'll learn about the features that are available in SQL Server, in what way to design and create a database, and how to build basic queries using Transact-SQL, the speech of SQL Server. Then, you'll learn how to build sufficient views, stored procedures, triggers, and user-defined functions using T\n\nMicrosoft Visual Basic 6.0 Enterprise Edition Visual Basic (VB) is the third-generation event-driven programming language and integrated development environment (IDE) from Microsoft with a view to its COM programming model. VB is also considered a relatively flowing to learn and use programming language, because of its graphical increase features and BASIC heritage.\n\nIn Visual Training Company's tutorial Microsoft Visual Basic by reason of Excel, Pravah Pugh helps you get started by going over macros, the VBA programming speech, and the VBA development environment. He then teaches you a\n\nTeach yourself the volatile tools and techniques for Visual Basic 2010-one step at a time. No good sense what your skill level, you'll find the practical guidance and examples you want to start building professional applications for Windows and the Web.\n\nDiscover how to: * Work in the Microsoft\u00ae Visual Studio\u00ae 2010 Integrated Development Environment (IDE)"}
{"text": "Python\n\nDEFINITION: Python is an interpreted, object-oriented programming language similar to PERL, that has gained popularity because of its clear syntax and readability. Python is said to be relatively easy to learn and portable, meaning its statements can be interpreted in a number of operating systems, including UNIX-based systems, Mac OS, MS-DOS, OS/2, and various versions of Microsoft Windows 98. Python was createdPYTHON DEFINITION (continued): by Guido van Rossum, a former resident of the Netherlands, whose favorite comedy group at the time was Monty Python's Flying Circus. The source code is freely available and open for modification and reuse. Python has a significant number of users.A notable feature of Python is its indenting of source statements to make the code easier to read. Python offers dynamic data type, ready-made class, and interfaces to many system calls and libraries. It can be extended, using the C or C++ language.Python can be used as the script in Microsoft's Active Server Page (ASP) technology. The scoreboard Python"}
{"text": "The Structure and Interpretation of Computer Programs\n\nIntroduction several significant programming projects, programmed in a dialect of the LISP language"}
{"text": "Card Range To Study\n\n25 Cards in this Set\n\nThe process of finding and removing any of the three kinds of programming errors.\n\nexception\n\nAnother name for a runtime error.\n\nexecutable\n\nAnother name for object code that is ready to be executed.\n\nformal language\n\nAny one of the languages that people have designed for specific purposes, such as representing mathematical ideas or computer programs; all programming languages are formal languages.\n\nhigh-level language\n\nA programming language like Python that is designed to be easy for humans to read and write.\n\ninterpret\n\nTo execute a program in a high-level language by translating it one line at a time.\n\nlow-level language\n\nA programming language that is designed to be easy for a computer to execute; also called machine language or assembly language.\n\nnatural language\n\nAny one of the languages that people speak that evolved naturally.\n\nobject code\n\nThe output of the compiler after it translates the program.\n\nparse\n\nTo examine a program and analyze the syntactic structure.\n\nportability\n\nA property of a program that can run on more than one kind of computer.\n\nprint statement\n\nAn instruction that causes the Python interpreter to display a value on the screen.\n\nproblem solving\n\nThe process of formulating a problem, finding a solution, and expressing the solution.\n\nprogram\n\na sequence of instructions that specifies to a computer actions and computations to be performed.\n\nPython shell\n\nAn interactive user interface to the Python interpreter. The user of a Python shell types commands at the prompt (>>>), and presses the return key to send these commands immediately to the interpreter for processing.\n\nruntime error\n\nAn error that does not occur until the program has started to execute but that prevents the program from continuing.\n\nscript\n\nA program stored in a file (usually one that will be interpreted).\n\nsemantic error\n\nAn error in a program that makes it do something other than what the programmer intended.\n\nsemantics\n\nThe meaning of a program.\n\nsource code\n\nA program in a high-level language before being compiled.\n\nsyntax\n\nThe structure of a program.\n\nsyntax error\n\nAn error in a program that makes it impossible to parse \u2014 and therefore impossible to interpret.\n\ntoken\n\nOne of the basic elements of the syntactic structure of a program, analogous to a word in a natural language."}
{"text": "Professional VB 2005 with .NET 3.0\n\nThis comprehensive book offers you everything you'll need to make the transition to the newest version of the world's most popular programming language. You'll get detailed information on how to use VB 2005 in the ever-expanding .NET world using both essential explanations of the topics and key code demonstrations and you'll learn how to build everything from traditional console applications to ASP.\n\nThis project-based guide from Adobe will teach readers all they need to know to create engaging interactive content with ActionScript 3.0 for Flash Professional CS5. Using step-by-step instructions ..."}
{"text": "The Practice of Computing Using Python CS1 courses in Python Programming including majors and non-majors alike.A problem-solving approach to programming with Python.The Practice of Computing Using Python introduces CS1 students (majors and non-majors) to computational thinking using Python. With data-manipulation as a theme, students quickly see the value in what they're learning and leave the course with a set of immediately useful computational skills that can be applied to problems they encounter in future pursuits. The book takes an \"object-use-first\" approachwriting classes... MORE are covered only after students have mastered using objects. A problem-solving approach to programming with Python.The Practice of Computing using Python, first editionis intended to teach problem solving within the context of CS1 to both majors and non-majors using Python as a vehicle. As such the authors cover general concepts like hardware, complexity, and software engineering as well as general concepts of programming using the Python language. In the end, if a student takes no other programming course than one such as this, they can be productive programmers who understand general principles of computation and can produce useful, meaningful results in their respective fields of study. The Study of Computer Science; Starting to ProgramBeginnings, Control, Algorithms and Program Development; Organizing: Data Structures and FunctionsWorking with Strings, FunctionsQuickStart, Lists and Tuples, Dictionaries and Sets, Files; Classes: Making Your Own Data Structures & AlgorithmsProgram Development with Classes; Becoming a Better ProgrammerExceptions and Exception Handling, Testing, Recursion-another control mechanism, Getting and Using Python, Simple Drawing with Turtle Graphics, Plotting and Numeric Tools, Python 3.0. Anyone interested in learning Python or computer programming skills in general."}
{"text": "Parametric Programming\n\nHi,\n\nIve heard a little about parametric programming (MACRO B). I know nothing about it. What Ive read sounds great - I need to learn more...but can't find much literature about it particularly literature which is available in South Africa. Any one know how I get get hold of some???\n\nI haven't heard of parametric programming either... is it a name for something I already do. but call something else or am I just thick?\n\nThis is usually an option on many machines, its a way of enhancing the G code programming to include mathematical and logic routines to be written, it uses variable storage registers for values to act on etc, also machine function registers can be read that will monitor the state of the machine, like servo position etc for writing probe routines as an example.\nAl."}
{"text": "Apache Pig\n\nOverview\n\nThis course will provide students with an introduction to Apache Pig. Apache Pig is a platform for analyzing large data sets that consists of a high-level language for writing data analysis programs, coupled with an infrastructure for executing these programs. Pig, in conjunction with Apache Hadoop, can handle very large data sets with relatively simple programs.\n\nAudience\n\nThe course is intended for programmers, architects, and project managers who have to process and analyze large amounts of data.\n\nPrerequisites\n\nStudents should have some structured programming experience. Familiarity with SQL databases is helpful but not required."}
{"text": "Alex Martelli\n\nAlex Martelli in Argentina (Cafeconf 2006)\n\nAlex Martelli (born October 5, 1955) is an Italian computer engineer and member of the Python Software Foundation. Since early 2005, he works as \"\u00dcber Tech Lead\" for Google, Inc. in Mountain View, California. He holds a Laurea in Electrical Engineering from Bologna University (1980); he is the author of Python in a Nutshell, co-editor of the Python Cookbook, and has written other (mostly Python-related) materials. Martelli won the 2002 Activators' Choice Award, and the 2006 Frank Willison award for outstanding contributions to the Python community."}
{"text": "Editorial Reviews\n\nWin32 Programming, by Brent E. Rector and John M. Newcomer is a massive, 1,500-page guide to Win32 C programming, something of a lost art these days. Although even the authors admit they use C++ and MFC in their own work, this text, as a one volume document of the powerful Win32 API programming, is truly comprehensive and can replace any number of texts on a programmer's bookshelf. Win32 Programming examines the basics of programming in Windows: from a minimal skeleton program to aspects of the Win32 API, from graphics, menus, user interface components (including the Windows 95 common controls) to more advanced topics like memory management, multithreaded programming, and synchronization objects. (These last topics are useful in that system programmers--or those who write device drivers--may need access to the C API directly.) In addition to presenting reference material (including all the API calls themselves), the authors explain the ideas of how to program in a clearly written style. Though some of the material feels dated (from 16-bit Windows 3.x programming), by and large, the authors do a good job of updating this to Windows 95 and Windows NT. Sections and tips that apply only to one API or operating system are clearly marked. The CD-ROM also includes over 140,000 lines of source code to experiment with, truly a historical treasure trove for the Win32 C programmer. Developers who need to use C calls, or prefer to have printed documentation instead of online help in their compiler, should consider making space on the bookshelf for this enormous title.\n\nThis book covers all the material necessary to understand and write 32-bit Windows application targeted for both Windows 95 and Window NT 3.51. Unlike other books on the topic, it is a strictly 32-bit book, covering both operating system aspects and user interface topics, including input and output"}
{"text": "Python, for easy programming\n\nPython code must be indented\n(Monty Python at work )\n\nPython is an interpreted language widely used, one of the easiest to learn and use.\nA day is enough to start programming with Python and you can write scripts in a few hours while you need for days with other languages\u200b\u200b. It has powerful features such as lists, tuples, dictionaries that allow you to translate your ideas into lines of code directly.\nThe lists are integrated and made it a successor to the Awk and any other word processor language.\n\nThere is a version for Windows, Linux and other platforms.\n\nThe name is a tribute to the comedy group \"Monty Python\", but the same name snake is still became the symbol of the language.\nThe creator of the language, Guido Van Rossum, was Google employee from 2005 to 2012 and works for Dropbox since.\n\nEvolution\n\nDesigned on the base of the ABC language that was a model for simplifying a programming language (the variables for example retain their value from one session to another), Python is initially a very simple to read language.\nBut programmers never resist their evil demon that incites to write more and more convoluted and crytographic code, bringing the language to have an evolution in the complication that with the time make it approaching C++. The same function in the same language can become less and less comprehensible to the delight of the \"genius programmer\".\n\nFeatures\n\nPython is an object oriented, interpreted language.\n\nVariables are dynamic, the type is not declared and may change.\n\nIndentation is used for block recognition and this is unic to Python.\n\nTuples are variables or object packed all together, for functions'\nreturn, for example.\n\nLists and dictionaries are other built-in composed objects.\n\nFunctions may be embedded inside other functions.\n\nCan be extended with C modules.\n\nPython 3.0 changes the syntax of the language which makes it partially incompatible with the previous ones.\n\nprint x is replaced by print (x).\n\nTwo types of string, data and str not compatible.\n\nLists are replaced by views and iterators.\n\nThat is often blamed in the language:\n\nCode execution is slow. This is why it tends to be replaced by Go.\n\nYou can not declare a variable like in JavaScript with var. This reduces clarity and security of the code.\n\nThe object orientation is rather rustic and improvised.\n\nUsing indentation to define a block is a design choice often contested. So if you comment a line, that changes the structure!\n\nSome builtin global functions should be object methods instead (but PHP is much worse in this regard).\n\nBrython\nTo use Python in the browser instead of JavaScript. This is actually a pre-compiler that converts the Python language. There are already other implementations: Sculpt, Repl.it, Pyjaco, Pyjs, Empythoned. On the server-side, there is Oink."}
{"text": "Development Editors\n-\nBorland C++ Compiler 32-bit C++ native code compiler, which Borland is now making available as a free download, along with associated command line tools. It includes the latest ANSI/ISO C++ compliance including the RTL, the STL framework and C++ template support. (7.8...\n\nDevelopment Editors\n-\nVB Decompiler 9.0 VB...\n\n4.65 MB\n\nDevelopment Editors\n-\nLCC Win32 3.2 Once you write a program in any language, for example in C language, it is necessary to pass it through a compiler, to create a runnable file from the source code you+ve just written. More specifically for C language, there are many that exist,..."}
{"text": "Document Preview Primitive Data\nNow we can explore some more fundamental\nprogramming concepts\nChapter 2 focuses on:\npredefined objects primitive data the declaration and use of variables expressions and operator precedence creating and using objects class libraries Java applets drawing shapes\n2\nI ntroduction to Objects\nAn object represents something with which we can\ninteract in a program\nAn object provides a collection of services that we\ncan tell it to perform for us\nThe services are defined by methods in a class that\ndefines the object\nA class represents a concept, and an object\nrepresents the embodiment of a class\nA class can be used to create multiple objects\n3\nObjects and Classes\nA class (the concept) An object (the realization)\nJohn's Bank Account Balance: $5,257 Bill's Bank Account Balance: $1,245,069 Mary's Bank Account Balance: $16,833\nBank Account\nMultiple objects from the same class\n4\nI nheritance\nOne class can be used to derive another via\ninheritance\nClasses can be organized into inheritance\nhierarchies\nAccount\nCharge Account\nBank Account\nSavings Account\nChecking Account\n5\nUsing Objects\nThe System.out object represents a destination to\nwhich we can send output\nIn the Lincoln program, we invoked the println\nmethod of the System.out object:\nSystem.out.println (\"Whatever you are, be a good one.\");\nobject\nmeth\n\nHOW TO USE THE SIC ASSEMBLER This is a simple assembler for SIC (standard version). It uses the following external files: SRCFILE OBJFILE LISFILE INTFILE -the source program to be assembled the object program generated by the assembly the assembly li\n\nWrite 5 SIC/XE pgms that will run using the \"six\" interpreter.(1) Given a number of integers in SIZE, compute their average. Use PC-relative addressing (the default); do not use extended, immediate, or BASE-relative. Place the resul\n\nSystem Software Summer 2000 Semester ProjectsCodes for turnin: rbutler.cop3601.proj1 rbutler.cop3601.proj2The two projects for this semester are to implement passes 1 and 2 ofan assembler for a subset of the SIC/XE asse\n\nSIC Assembly Macro ProcessorVersion 1.1Dirk FrullaJanuary, 2002The purpose of this document is to explain the SIC assembly macro processor, its abilities, and how to use it. I. Compiling the SIC macro processorThe macro processor comes as a\n\nCOP3221 - Fall 1992 Assignment 5 - Third C program DUE: 12/09/92 Your last C assignment is a program to do the following: Parse the argument list. For each argument that is a file, print the file name, date and size on a single line. For each argumenUse my SimpleLabel which I created and TextLabel, et.al.from the Exploring Java book.In the ExploringJava dir, get into the beans subdir, and: - copy TestBeans.* to . (i.e. to the beans subdir) note that this pgm uses magicbeans.*\n\nRecommended Reading Outline for IBM Smalltalk (and VisualAge) on-line Development Guide These are the topics I suggest you read in the Development Guide. If I leave a topic out, I am suggesting you skip it. I have included some notes and exercises. I"}
{"text": "Technical and Research Skills: IT Skills\n\nC++ for Beginners\n\n3 days\n\nThis three-day course will provide an introduction to the C++ programming language and its use. After attending you will have acquired the basic skills in programming in C++ and an understanding of the ideas of object oriented programming. Topics include:\n\nan introduction to classes and objects;\n\narithmetic operators;\n\nsimple input and output;\n\ncomparison operators and the use of conditional and iterative control statements;\n\nformatting of output;\n\nlogical operators and De Morgan's law;\n\nbitwise operators;\n\ncreation of user defined functions;\n\nintroduction to pointers;\n\ndata validation using character arrays;\n\nintroduction to arrays;\n\nusing classes containing static functions and static variables;\n\nensuring character array bounds are not exceeded for data input;\n\nthe string class;\n\ndata validation using the string class;\n\ncommunication between objects.\n\nThis course will have a mixture of taught and practical work. Prior programming experience is not necessary but would be advantageous."}
{"text": "Python\n\nWelcome to the interactive Python tutorial.\n\nWhether you are an experienced programmer or not, this pearl & website is intended for everyone who wishes to learn the Python programming language.\n\nPython is a programming language that lets you work more quickly and integrate your systems more effectively. You can learn to use Python and see almost immediate gains in productivity and lower maintenance costs.\n\nPython runs on Windows, Linux/Unix, Mac OS X, and has been ported to the Java and .NET virtual machines.\n\nPython is free to use, even for commercial products, because of its OSI-approved open source license. avayaoliJul 16\n\nPython is a great object-oriented, interpreted, and interactive programming language. It is often compared (favorably of course ) to Lisp, Tcl, Perl, Ruby, C#, Visual Basic, Visual Fox Pro, Scheme or Java... and it's much more fun. Python combines remarkable power with very clear syntax."}
{"text": "Beginner books\n\nA tutorial book, covering how\nyou could spend the first 30 to 40 hours with Perl. The sixth edition\ncovers up to Perl 5.14. Reflecting years of classroom testing and\nexperience, this edition is packed with exercises that let you\npractice the concepts while you follow the text.\n\nRead the entire book free online...\nAlthough a bit old, this book is available online for free,\nit is useful for learning some of the basics of Perl, once you have\nmastered these then look at the Modern Perl book (also online for free)\nbelow for more current best practices.\n\nRead the entire book free online...\nModern Perl is suitable for programmers of every level. It's more than a Perl tutorial\u2014only Modern Perl focuses on Perl 5.12 and 5.14, to demonstrate the latest and most effective time-saving features. Only Modern Perl explains how and why the language works, to let you unlock the full power of Perl.\n\nBeginning Perl is a different kind of Perl book. It's written\nparticularly with the beginning programmer in mind, but experienced programmers will not feel patronised.\nIt covers a lot of ground, from the very basics of programming, right\nthrough to developing CGI applications for the web. More importantly, it\nemphasises good Perl practice, and readable and maintainable code."}
{"text": "This book is a short, focused introduction to MATLAB. and should be useful to both beginning and experienced users. It contains concise explanations of essential MATLAB commands, as well as easily understood instructions for using MATLAB's programming features, graphical capabilities, and desktop interface. An especially attractive feature are the... more... more..."}
{"text": "Programming language\n\nFrom Wikipedia, the free encyclopedia\n\nA programming language is a machine-readable artificial language designed to express computations that can be performed by a machine, particularly a computer. Programming languages can be used to create programs that specify the behavior of a machine, to express algorithms precisely, or as a mode of human communication.\n\nMany programming languages have some form of written specification of their syntax and semantics, since computers require precisely defined instructions. Some (such as C) are defined by a specification document (for example, an ISO Standard), while others (such as Perl) have a dominant implementation.\n\nThe earliest programming languages predate the invention of the computer, and were used to direct the behavior of machines such as Jacquard looms and player pianos. Thousands of different programming languages have been created, mainly in the computer field,[1] with many more being created every year.\n\nTarget: Programming languages differ from natural languages in that natural languages are only used for interaction between people, while programming languages also allow humans to communicate instructions to machines. Some programming languages are used by one device to control another. For example PostScript programs are frequently created by another program to control a computer printer or display.\n\nExpressive power: The theory of computation classifies languages by the computations they are capable of expressing. All Turing complete languages can implement the same set of algorithms. ANSI/ISO SQL and Charity are examples of languages that are not Turing complete, yet often called programming languages.[4][5]\n\nSome authors restrict the term \"programming language\" to those languages that can express all possible algorithms;[6] sometimes the term \"computer language\" is used for more limited artificial languages.\n\nNon-computational languages, such as markup languages like HTML or formal grammars like BNF, are usually not considered programming languages. A programming language (which may or may not be Turing complete) may be embedded in these non-computational (host) languages.\n\nA programming language provides a structured mechanism for defining pieces of data, and the operations or transformations that may be carried out automatically on that data. A programmer uses the abstractions present in the language to represent the concepts involved in a computation. These concepts are represented as a collection of the simplest elements available (called primitives). [7]\n\nProgramming languages differ from most other forms of human expression in that they require a greater degree of precision and completeness. When using a natural language to communicate with other people, human authors and speakers can be ambiguous and make small errors, and still expect their intent to be understood. However, figuratively speaking, computers \"do exactly what they are told to do\", and cannot \"understand\" what code the programmer intended to write. The combination of the language definition, a program, and the program's inputs must fully specify the external behavior that occurs when the program is executed, within the domain of control of that program.\n\nMany languages have been designed from scratch, altered to meet new needs, combined with other languages, and eventually fallen into disuse. Although there have been attempts to design one \"universal\" computer language that serves all purposes, all of them have failed to be generally accepted as filling this role.[8] The need for diverse computer languages arises from the diversity of contexts in which languages are used:\n\nPrograms range from tiny scripts written by individual hobbyists to huge systems written by hundreds of programmers.\n\nProgrammers range in expertise from novices who need simplicity above all else, to experts who may be comfortable with considerable complexity.\n\nPrograms may be written once and not change for generations, or they may undergo nearly constant modification.\n\nFinally, programmers may simply differ in their tastes: they may be accustomed to discussing problems and expressing them in a particular language.\n\nOne common trend in the development of programming languages has been to add more ability to solve problems using a higher level of abstraction. The earliest programming languages were tied very closely to the underlying hardware of the computer. As new programming languages have developed, features have been added that let programmers express ideas that are more remote from simple translation into underlying hardware instructions. Because programmers are less tied to the complexity of the computer, their programs can do more computing with less effort from the programmer. This lets them write more functionality per time unit.[9]\n\nNatural language processors have been proposed as a way to eliminate the need for a specialized language for programming. However, this goal remains distant and its benefits are open to debate. Edsger Dijkstra took the position that the use of a formal language is essential to prevent the introduction of meaningless constructs, and dismissed natural\u2026\u2026\u2026 language programming as \"foolish\".[10]Alan Perlis was similarly dismissive of the idea.[11]\n\nAll programming languages have some primitive building blocks for the description of data and the processes or transformations applied to them (like the addition of two numbers or the selection of an item from a collection). These primitives are defined by syntactic and semantic rules which describe their structure and meaning respectively.\n\nA programming language's surface form is known as its syntax. Most programming languages are purely textual; they use sequences of text including words, numbers, and punctuation, much like written natural languages. On the other hand, there are some programming languages which are more graphical in nature, using visual relationships between symbols to specify a program.\n\nThe syntax of a language describes the possible combinations of symbols that form a syntactically correct program. The meaning given to a combination of symbols is handled by semantics (either formal or hard-coded in a reference implementation). Since most languages are textual, this article discusses textual syntax.\n\nProgramming language syntax is usually defined using a combination of regular expressions (for lexical structure) and Backus-Naur Form (for grammatical structure). Below is a simple grammar, based on Lisp:\n\na number is an unbroken sequence of one or more decimal digits, optionally preceded by a plus or minus sign;\n\na symbol is a letter followed by zero or more of any characters (excluding whitespace); and\n\na list is a matched pair of parentheses, with zero or more expressions inside it.\n\nThe following are examples of well-formed token sequences in this grammar: '12345', '()', '(a b c232 (1))'\n\nNot all syntactically correct programs are semantically correct. Many syntactically correct programs are nonetheless ill-formed, per the language's rules; and may (depending on the language specification and the soundness of the implementation) result in an error on translation or execution. In some cases, such programs may exhibit undefined behavior. Even when a program is well-defined within a language, it may still have a meaning that is not intended by the person who wrote it.\n\nUsing natural language as an example, it may not be possible to assign a meaning to a grammatically correct sentence or the sentence may be false:\n\nThe grammar needed to specify a programming language can be classified by its position in the Chomsky hierarchy. The syntax of most programming languages can be specified using a Type-2 grammar, i.e., they are context-free grammars.[12]\n\nThe static semantics defines restrictions on the structure of valid texts that are hard or impossible to express in standard syntactic formalisms.[13] The most important of these restrictions are covered by type systems.\n\nA type system defines how a programming language classifies values and expressions into types, how it can manipulate those types and how they interact. This generally includes a description of the data structures that can be constructed in the language. The design and study of type systems using formal mathematics is known as type theory.\n\nA language is typed if the specification of every operation defines types of data to which the operation is applicable, with the implication that it is not applicable to other types.[14] For example, \"this text between the quotes\" is a string. In most programming languages, dividing a number by a string has no meaning. Most modern programming languages will therefore reject any program attempting to perform such an operation. In some languages, the meaningless operation will be detected when the program is compiled (\"static\" type checking), and rejected by the compiler, while in others, it will be detected when the program is run (\"dynamic\" type checking), resulting in a runtime exception.\n\nA special case of typed languages are the single-type languages. These are often scripting or markup languages, such as Rexx or SGML, and have only one data type\u2014most commonly character strings which are used for both symbolic and numeric data.\n\nIn contrast, an untyped language, such as most assembly languages, allows any operation to be performed on any data, which are generally considered to be sequences of bits of various lengths.[14] High-level languages which are untyped include BCPL and some varieties of Forth.\n\nIn practice, while few languages are considered typed from the point of view of type theory (verifying or rejecting all operations), most modern languages offer a degree of typing.[14] Many production languages provide means to bypass or subvert the type system.\n\nIn static typing all expressions have their types determined prior to the program being run (typically at compile-time). For example, 1 and (2+2) are integer expressions; they cannot be passed to a function that expects a string, or stored in a variable that is defined to hold dates.[14]\n\nStatically typed languages can be either manifestly typed or type-inferred. In the first case, the programmer must explicitly write types at certain textual positions (for example, at variable declarations). In the second case, the compiler infers the types of expressions and declarations based on context. Most mainstream statically typed languages, such as C++, C# and Java, are manifestly typed. Complete type inference has traditionally been associated with less mainstream languages, such as Haskell and ML. However, many manifestly typed languages support partial type inference; for example, Java and C# both infer types in certain limited cases.[15]\n\nDynamic typing, also called latent typing, determines the type-safety of operations at runtime; in other words, types are associated with runtime values rather than textual expressions.[14] As with type-inferred languages, dynamically typed languages do not require the programmer to write explicit type annotations on expressions. Among other things, this may permit a single variable to refer to values of different types at different points in the program execution. However, type errors cannot be automatically detected until a piece of code is actually executed, making debugging more difficult. Ruby, Lisp, JavaScript, and Python are dynamically typed.\n\nWeak typing allows a value of one type to be treated as another, for example treating a string as a number.[14] This can occasionally be useful, but it can also allow some kinds of program faults to go undetected at compile time and even at run time.\n\nStrong typing prevents the above. An attempt to perform an operation on the wrong type of value raises an error.[14] Strongly typed languages are often termed type-safe or safe.\n\nAn alternative definition for \"weakly typed\" refers to languages, such as Perl and JavaScript, which permit a large number of implicit type conversions. In JavaScript, for example, the expression 2 * x implicitly converts x to a number, and this conversion succeeds even if x is null, undefined, an Array, or a string of letters. Such implicit conversions are often useful, but they can mask programming errors.\n\nStrong and static are now generally considered orthogonal concepts, but usage in the literature differs. Some use the term strongly typed to mean strongly, statically typed, or, even more confusingly, to mean simply statically typed. Thus C has been called both strongly typed and weakly, statically typed.[16][17]\n\nOnce data has been specified, the machine must be instructed to perform operations on the data. The execution semantics of a language defines how and when the various constructs of a language should produce a program behavior.\n\nFor example, the semantics may define the strategy by which expressions are evaluated to values, or the manner in which control structures conditionally execute statements.\n\nMost programming languages have an associated core library (sometimes known as the 'Standard library', especially if it is included as part of the published language standard), which is conventionally made available by all implementations of the language. Core libraries typically include definitions for commonly used algorithms, data structures, and mechanisms for input and output.\n\nA language's core library is often treated as part of the language by its users, although the designers may have treated it as a separate entity. Many language specifications define a core that must be made available in all implementations, and in the case of standardized languages this core library may be required. The line between a language and its core library therefore differs from language to language. Indeed, some languages are designed so that the meanings of certain syntactic constructs cannot even be described without referring to the core library. For example, in Java, a string literal is defined as an instance of the java.lang.String class; similarly, in Smalltalk, an anonymous function expression (a \"block\") constructs an instance of the library's BlockContext class. Conversely, Scheme contains multiple coherent subsets that suffice to construct the rest of the language as library macros, and so the language designers do not even bother to say which portions of the language must be implemented as language constructs, and which must be implemented as parts of a library.\n\nA Jovan language's designers and users must construct a number of artifacts that govern and enable the practice of programming. The most important of these artifacts are the language specification and implementation.\n\nThe specification of a programming language is intended to provide a definition that the language users and the implementors can use to determine whether the behavior of a program is correct, given its source code.\n\nA programming language specification can take several forms, including the following:\n\nA description of the behavior of a translator for the language (e.g., the C++ and Fortran specifications). The syntax and semantics of the language have to be inferred from this description, which may be written in natural or a formal language.\n\nA reference or model implementation, sometimes written in the language being specified (e.g., Prolog or ANSI REXX[20]). The syntax and semantics of the language are explicit in the behavior of the reference implementation.\n\nAn implementation of a programming language provides a way to execute that program on one or more configurations of hardware and software. There are, broadly, two approaches to programming language implementation: compilation and interpretation. It is generally possible to implement a language using either technique.\n\nThe output of a compiler may be executed by hardware or a program called an interpreter. In some implementations that make use of the interpreter approach there is no distinct boundary between compiling and interpreting. For instance, some implementations of the BASIC programming language compile and then execute the source a line at a time.\n\nPrograms that are executed directly on the hardware usually run several orders of magnitude faster than those that are interpreted in software.[citation needed]\n\nOne technique for improving the performance of interpreted programs is just-in-time compilation. Here the virtual machine, just before execution, translates the blocks of bytecode which are going to be used to machine code, for direct execution on the hardware.\n\nThe first programming languages predate the modern computer. The 19th century had \"programmable\" looms and player piano scrolls which implemented what are today recognized as examples of domain-specific programming languages. By the beginning of the twentieth century, punch cards encoded data and directed mechanical processing. In the 1930s and 1940s, the formalisms of Alonzo Church's lambda calculus and Alan Turing's Turing machines provided mathematical abstractions for expressing algorithms; the lambda calculus remains influential in language design.[21]\n\nProgrammers of early 1950s computers, notably UNIVAC I and IBM 701, used machine language programs, that is, the first generation language (1GL). 1GL programming was quickly superseded by similarly machine-specific, but mnemonic, second generation languages (2GL) known as assembly languages or \"assembler\". Later in the 1950s, assembly language programming, which had evolved to include the use of macro instructions, was followed by the development of \"third generation\" programming languages (3GL), such as FORTRAN, LISP, and COBOL. 3GLs are more abstract and are \"portable\", or at least implemented similar on computers that do not support the same native machine code. Updated versions of all of these 3GLs are still in general use, and each has strongly influenced the development of later languages.[22] At the end of the 1950s, the language formalized as Algol 60 was introduced, and most later programming languages are, in many respects, descendants of Algol.[22] The format and use of the early programming languages was heavily influenced by the constraints of the interface.[23]\n\nThe period from the 1960s to the late 1970s brought the development of the major language paradigms now in use, though many aspects were refinements of ideas in the very first Third-generation programming languages:\n\nThe 1960s and 1970s also saw expansion of techniques that reduced the footprint of a program as well as improved productivity of the programmer and user. The card deck for an early 4GL was a lot smaller for the same functionality expressed in a 3GL deck.\n\nThe 1980s were years of relative consolidation. C++ combined object-oriented and systems programming. The United States government standardized Ada, a systems programming language derived from Pascal and intended for use by defense contractors. In Japan and elsewhere, vast sums were spent investigating so-called \"fifth generation\" languages that incorporated logic programming constructs.[28] The functional languages community moved to standardize ML and Lisp. Rather than inventing new paradigms, all of these movements elaborated upon the ideas invented in the previous decade.\n\nOne important trend in language design during the 1980s was an increased focus on programming for large-scale systems through the use of modules, or large-scale organizational units of code. Modula-2, Ada, and ML all developed notable module systems in the 1980s, although other languages, such as PL/I, already had extensive support for modular programming. Module systems were often wedded to generic programming constructs.[29]\n\nThe rapid growth of the Internet in the mid-1990s created opportunities for new languages. Perl, originally a Unix scripting tool first released in 1987, became common in dynamic Web sites. Java came to be used for server-side programming. These developments were not fundamentally novel, rather they were refinements to existing languages and paradigms, and largely based on the C family of programming languages.\n\nProgramming language evolution continues, in both industry and research. Current directions include security and reliability verification, new kinds of modularity (mixins, delegates, aspects), and database integration such as Microsoft's LINQ.\n\nThe 4GLs are examples of languages which are domain-specific, such as SQL, which manipulates and returns sets of data rather than the scalar values which are canonical to most programming languages. Perl, for example, with its 'here document' can hold multiple 4GL programs, as well as multiple JavaScript programs, in part of its own perl code and use variable interpolation in the 'here document' to support multi-language programming.[30] particular kinds of applications. For example, COBOL is still strong in the corporate data center, often on large mainframes; FORTRAN in engineering applications; C in embedded applications and operating systems; and other languages are regularly used to write many different kinds of applications.\n\nVarious methods of measuring language popularity, each subject to a different bias over what is measured, have been proposed:\n\ncounting the number of job advertisements that mention the language[31]\n\nFor more details on this topic, see Categorical list of programming languages.\n\nThere is no overarching classification scheme for programming languages. A given programming language does not usually have a single ancestor language. Languages commonly arise by combining the elements of several predecessor languages with new ideas in circulation at the time. Ideas that originate in one language will diffuse throughout a family of related languages, and then leap suddenly across familial gaps to appear in an entirely different family.\n\nThe task is further complicated by the fact that languages can be classified along multiple axes. For example, Java is both an object-oriented language (because it encourages object-oriented organization) and a concurrent language (because it contains built-in constructs for running multiple threads in parallel). Python is an object-oriented scripting language.\n\nIn broad strokes, programming languages divide into programming paradigms and a classification by intended domain of use. Paradigms include procedural programming, object-oriented programming, functional programming, and logic programming; some languages are hybrids of paradigms or multi-paradigmatic. An assembly language is not so much a paradigm as a direct model of an underlying machine architecture. By purpose, programming languages might be considered general purpose, system programming languages, scripting languages, domain-specific languages, or concurrent/distributed languages (or a combination of these).[35] Some general purpose languages were designed largely with educational goals.[36]\n\nA programming language may also be classified by factors unrelated to programming paradigm. For instance, most programming languages use English language keywords, while a minority do not. Other languages may be classified as being esoteric or not.\n\n^ IBM in first publishing PL/I, for example, rather ambitiously titled its manual The universal programming language PL/I (IBM Library; 1966). The title reflected IBM's goals for unlimited subsetting capability: PL/I is designed in such a way that one can isolate subsets from it satisfying the requirements of particular applications. (\"Encyclopaedia of Mathematics \u00bb P \u00bb PL/I\". SpringerLink.\n . Retrieved on June 29 2006.). Ada and UNCOL had similar early goals silicon"}
{"text": "Overview\n\nMain description\n\nThis excellent primer provides a plethora of C++ programming information for beginning to intermediate users on topics like classes, objects, expressions, arrays, pointers. Plus, it also covers advanced topics like inheritance, namespaces, STL, custom string class, and the Standard C++ Class Library. For users of all levels, this guide teaches with examples of source code and a thorough display of the results.\n\nBack cover copy\n\nYour Fast-Paced Guide to C++ Success!\n\nNo one teaches C++ better than Herb Schildt. That's why his books are the choice of millions worldwide. Now you, too, can quickly master C++ using his proven method. In this fully updated new edition, Herb explains the C++ language, from its fundamentals to its most advanced features. You'll start with an overview of C++ and the general form of a C++ program. You'll then learn essentials such as control statements, operators, variables, classes, and objects. Then it's on to exceptions, templates, namespaces, run-time type ID, and the Standard Template Library (STL). There is even a synopsis of the extended keywords used for .NET programming--all presented in Herb's clear, crisp, uncompromising style."}
{"text": "free computer programming text book project\n\norder of precedence\n\nEvery programming language needs to have some system for determining the order of evaluation of expressions.\n\nx := 5 + 6 * 7; or\nx = 5 + 6 * 7\n\nIs x 47 or 77?\n\n(5 + 6) = 11; followed by 11 * 7 = 77\n\n(6 * 7) = 42; 5 + 42 = 47\n\nThe normal rules of elementary algebra call for multiplication (and division) to have a higher priority than addition (or subtraction), which would make x = 42.\n\nelementary algebra\n\nparenthesis\n\nexponentiation\n\nmultiplication\n\ndivision\n\naddition\n\nsubtraction\n\nA strict left to right evaluation would make the answer x = 77.\n\nA strict right to left evaluation would make the answer x = 42.\n\nThe use of a reverse Polish notation (RPN, such as is used in Forth) avoids the question.\n\nThe two most common approaches used in computer programming languages are either (1) some order of precendence) or (2) directional evaluation (left-to-right or right-to-left).\n\nThe use of parenthesis can be used to change the normal order of evaluation.\n\nParenthesis can also be used to make complicated expressions more clear to a human reader. This makes the program easier to udnerstand and easier to maintain over years or decades of use.\n\nThe order of precedence in the following charts are from highest to lowest (top to bottom). Items on the same level are of equal order of precendence.\n\nC\n\nPrimary-expression operators\n\n15\n\n( ) [ ] . ->\n\nUnary operators\n\n14\n\n* & - ! ~ ++ -- sizeof (type)\n\n13\n\n* / %\n\n12\n\n+ -\n\n11\n\n>> <<\n\n10\n\n< > <= >=\n\n9\n\n== !=\n\n8\n\n&\n\n7\n\n^\n\n6\n\n|\n\n5\n\n&&\n\n4\n\n||\n\n3\n\n?:\n\nAssignment operators\n\n2\n\n= += -= *= /= %=\n>> =< <= &= ^= |=\n\nSequence operator\n\n1\n\n, (comma)\n\nPascal\n\nunary + unary - not\n\n* / divmodand\n\n+ - or\n\n= <> < <= > >= in\n\nPL/I\n\n1\n\nall subexpressions in parenthesis from innermost to outermost\n\n2\n\nall exponentiations from right to left\n\n3\n\nall multiplications and divisions from left to right\n\n4\n\nall additions and subtractions from left to right\n\nALGOL\n\n1\n\nparenthesis\n\n2\n\n\u2191 (exponentiation)\n\n3\n\n\u00d7 / \u00f7 (multiplication and division)\n\n4\n\n+ - (addition and subtraction)\n\n5\n\n< \u2264 = \u2260 \u2265 > (relational operators)\n\n6\n\n\u00ac (not)\n\n7\n\n\u2227 (and)\n\n8\n\n\u2228 (or)\n\n9\n\n\u2283 (implies)\n\n10\n\n\u2261 (is equivalent to)\n\nNote that the actual ALGOL symbol for is not greater than has the less than symbol over the equals symbol rather than \u2264 and the ALGOL symbol for not less than has the greater than symbol over the equals symbol rather than \u2265.\n\nJOVIAL\n\nThe following material is from the unclassified Computer Programming Manual for the JOVIAL (J73) Language, RADC-TR-81-143, Final Technical Report of June 1981.\n\n1.1.3 Calculations\n\nIn the simplest case, calculations is performed by an assignment statement. An example is:\n\nAVERAGE = (X1 + X2)/2;\n\nThe right-hand-side of this assigment is a formula; it forms the sum of X1 and X2 and divides it by 2. The details of the operation depend on how X1 and X2 are declared. If X1 and X2 are declared float, the calculation is very likely to produce the expected result. In contrast, if the X1 and X2 are declared fixed, the scaling must be worked out by the programmer to make sure the calculation will succeed. And if X1 and X2 are declared character-string, the compiler will reject it because JOVIAL does not automatically convert values into the types required by operators.\n\nIn the example just given, the parenthesis show that the addition is performed before the division. When parenthesis are not given, JOVIAL recognizes the usual order of evaluation. Here is an example:\n\nPOLY = BETA*X1**2 - GAMMA*X2 + DELTA;\n\nJOVIAL applies its \"rules of precedence\" to the formula in this assignment and thus interprets it as:\n\nPOLY = (((BETA*(X1**2)) - (GAMMA*X2)) + DELTA);\n\nThe complete precedence rules are given in Chapter 11.\n\nChapter 1 Introduction, page 6"}
{"text": "Chapter Summary\n\nThis chapter introduced the basics of coding classes in Python.\nWe studied the syntax of the class\nstatement, and we saw how to use it to build up a class inheritance\ntree. We also studied how Python automatically fills in the first\nargument in method functions, how attributes are attached to objects\nin a class tree by simple assignment, and how specially named operator\noverloading methods intercept and implement built-in operations for\nour instances (e.g., expressions and printing).\n\nNow that we've learned all about the mechanics of coding classes\nin Python, the next chapter turns to a larger and more realistic\nexample that ties together much of what we've learned about OOP so\nfar. After that, we'll continue our look at class coding, taking a\nsecond pass over the model to fill in some of the details that were\nomitted here to keep things simple. First, though, let's work through\na quiz to review the basics we've covered so far."}
{"text": "Programming language\nlists\nAlphabetical\nCategorical\nChronological\nGenerational\nAThe earliest programming languages predate the invention of the computer, and were used to direct the behavior of machines such as Jacquard looms and player pianos. Thousands of different programming languages have been created, mainly in the computer field, with many more being created every year. Most programming languages describe computation in an imperative style, i.e., as a sequence of commands, although some languages, such as those that support functional programming or logic programming, use alternative forms of description.\nA programming language is usually split into the two components of syntax (form) and semantics (meaning) and many programming languages have some kind of written specification of their syntax and/or semantics. Some languages are defined by a specification document, for example, the C programming language is specified by an ISO Standard, while other languages, such as Perl, have a dominant implementation that is used as a reference.\nContents\n1 Definitions\n2 Elements\n2.1 Syntax\n2.2 Semantics\n2.2.1 Static semantics\n2.2.2 Dynamic semantics\n2.2.3 Type system\n2.2.3.1 Typed versus untyped languages\n2.2.3.2 Static versus dynamic typing\n2.2.3.3 Weak and strong typing\n2.3 Standard library and run-time system\n3 Design and implementation\n3.1 Specification\n3.2 Implementation\n4 Usage\n4.1 Measuring language usage\n5 Taxonomies\n6 History\n6.1 Early developments\n6.2 Refinement\n6.3 Consolidation and growth\n7 See also\n8 References\n9 Further reading\n10 External links\n//\nDefinitions\nA programming language is a notation for writing programs, which are specifications of a computation or algorithm.1 Some, but not all, authors restrict the term \"programming language\" to those languages that can express all possible algorithms.12 Traits often considered important for what constitutes a programming language include:\nFunction and target: A computer programming language is a language3 used to write computer programs, which involve a computer performing some kind of computation4 or algorithm and possibly control external devices such as printers, disk drives, robots,5 and so on. For example PostScript programs are frequently created by another program to control a computer printer or display. More generally, a programming language may describe computation on some, possibly abstract, machine. It is generally accepted that a complete specification for a programming language includes a description, possibly idealized, of a machine or processor for that language.6 In most practical contexts, a programming language involves a computer; consequently programming languages are usually defined and studied this way.7 Programming languages differ from natural languages in that natural languages are only used for interaction between people, while programming languages also allow humans to communicate instructions to machines.\nAbstractions: Programming languages usually contain abstractions for defining and manipulating data structures or controlling the flow of execution. The practical necessity that a programming language support adequate abstractions is expressed by the abstraction principle;8 this principle is sometimes formulated as recommendation to the programmer to make proper use of such abstractions.9\nExpressive power: The theory of computation classifies languages by the computations they are capable of expressing. All Turing complete languages can implement the same set of algorithms. ANSI/ISO SQL and Charity are examples of languages that are not Turing complete, yet often called programming languages.1011\nMarkup languages like XML, HTML or troff, which define structured data, are not generally considered programming languages.121314 Programming languages may, however, share the syntax with markup languages if a computational semantics is defined. XSLT, for example, is a Turing complete XML dialect.151617 Moreover, LaTeX, which is mostly used for structuring documents, also contains a Turing complete subset.1819\nThe term computer language is sometimes used interchangeably with programming language.20 However, the usage of both terms varies among authors, including the exact scope of each. One usage describes programming languages as a subset of computer languages.21 In this vein, languages used in computing that have a different goal than expressing computer programs are generically designated computer languages. For instance, markup languages are sometimes referred to as computer languages to emphasize that they are not meant to be used for programming.22 Another usage regards programming languages as theoretical constructs for programming abstract machines, and computer languages as the subset thereof that runs on physical computers, which have finite hardware resources.23 John C. Reynolds emphasizes that formal specification languages are just as much programming languages as are the languages intended for execution. He also argues that textual and even graphical input formats that affect the behavior of a computer are programming languages, despite the fact they are commonly not Turing-complete, and remarks that ignorance of programming language concepts is the reason for many flaws in input formats.24\nElements\nAll programming languages have some primitive building blocks for the description of data and the processes or transformations applied to them (like the addition of two numbers or the selection of an item from a collection). These primitives are defined by syntactic and semantic rules which describe their structure and meaning respectively.\nSyntax\nParse tree of Python code with inset tokenization\nSyntax highlighting is often used to aid programmers in recognizing elements of source code. The language above is Python.\nMain article: Syntax (programming languages) visual relationships between symbols to specify a program.\nThe syntax of a language describes the possible combinations of symbols that form a syntactically correct program. The meaning given to a combination of symbols is handled by semantics (either formal or hard-coded in a reference implementation). Since most languages are textual, this article discusses textual syntax.\nProgramming language syntax is usually defined using a combination of regular expressions (for lexical structure) and Backus\u2013Naur Form (for grammatical structure). Below is a simple grammar, based on Lisp:\nexpression ::= atom | list\natom ::= number | symbol\nnumber ::= [+-]?['0'-'9']+\nsymbol ::= ['A'-'Z''a'-'z'].*\nlist ::= '(' expression* ')'\nThis grammar specifies the following:\nan expression is either an atom or a list;\nan atom is either a number or a symbol;\na number is an unbroken sequence of one or more decimal digits, optionally preceded by a plus or minus sign;\na symbol is a letter followed by zero or more of any characters (excluding whitespace); and\na list is a matched pair of parentheses, with zero or more expressions inside it.\nThe following are examples of well-formed token sequences in this grammar: '12345', '()', '(a b c232 (1))'Using natural language as an example, it may not be possible to assign a meaning to a grammatically correct sentence or the sentence may be false:\n\"Colorless green ideas sleep furiously.\" is grammatically well-formed but has no generally accepted meaning.\n\"John is a married bachelor.\" is grammatically well-formed but expresses a meaning that cannot be true.\nThe following C language fragment is syntactically correct, but performs an operation that is not semantically defined (because p is a null pointer, the operations p->real and p->im have no meaning):\ncomplex *p = NULL;\ncomplex abs_p = sqrt (p->real * p->real + p->im * p->im);\nIf the type declaration on the first line were omitted, the program would trigger an error on compilation, as the variable \"p\" would not be defined. But the program would still be syntactically correct, since type declarations provide only semantic information.\nThe grammar needed to specify a programming language can be classified by its position in the Chomsky hierarchy. The syntax of most programming languages can be specified using a Type-2 grammar, i.e., they are context-free grammars.25 Some languages, including Perl and Lisp, contain constructs that allow execution during the parsing phase. Languages that have constructs that allow the programmer to alter the behavior of the parser make syntax analysis an undecidable problem, and generally blur the distinction between parsing and execution.26 In contrast to Lisp's macro system and Perl's BEGIN blocks, which may contain general computations, C macros are merely string replacements, and do not require code execution.27\nSemantics\nStatic semantics\nThe static semantics defines restrictions on the structure of valid texts that are hard or impossible to express in standard syntactic formalisms.1 For compiled languages, static semantics essentially include those semantic rules that can be checked at compile time. Examples include checking that every identifier is declared before it is used (in languages that require such declarations) or that the labels on the arms of a case statement are distinct.28 Many important restrictions of this type, like checking that identifiers are used in the appropriate context (e.g. not adding a integer to a function name), or that subroutine calls have the appropriate number and type of arguments can be enforced by defining them as rules in a logic called a type system. Other forms of static analyses like data flow analysis may also be part of static semantics. Newer programming languages like Java and C# have definite assignment analysis, a form of data flow analysis, as part of their static semantics.\nDynamic semantics\nFurther information: Formal semantics of programming languages\nOnce data has been specified, the machine must be instructed to perform operations on the data. For example, the semantics may define the strategy by which expressions are evaluated to values, or the manner in which control structures conditionally execute statements. The dynamic semantics (also known as execution semantics) of a language defines how and when the various constructs of a language should produce a program behavior. There are many ways of defining execution semantics. Natural language is often used to specify the execution semantics of languages commonly used in practice. A significant amount of academic research went into formal semantics of programming languages, which allow execution semantics to be specified in a formal manner. Results from this field of research have seen limited application to programming language design and implementation outside academia.\nType system\nMain articles: Type system and Type safety\nA type system defines how a programming language classifies values and expressions into types, how it can manipulate those types and how they interact. The goal of a type system is to verify and usually enforce a certain level of correctness in programs written in that language by detecting certain incorrect operations. Any decidable type system involves a trade-off: while it rejects many incorrect programs, it can also prohibit some correct, albeit unusual programs. In order to bypass this downside, a number of languages have type loopholes, usually unchecked casts that may be used by the programmer to explicitly allow a normally disallowed operation between different types. In most typed languages, the type system is used only to type check programs, but a number of languages, usually functional ones, infer types, relieving the programmer from the need to write type annotations. The formal design and study of type systems is known as type theory.\nTyped versus untyped languages\nA language is typed if the specification of every operation defines types of data to which the operation is applicable, with the implication that it is not applicable to other types.29 For example, the data represented by \"this text between the quotesA special case of typed languages are the single-type languages. These are often scripting or markup languages, such as REXX or SGML, and have only one data type\u2014most commonly character strings which are used for both symbolic and numeric data.\nIn contrast, an untyped language, such as most assembly languages, allows any operation to be performed on any data, which are generally considered to be sequences of bits of various lengths.29 High-level languages which are untyped include BCPL and some varieties of Forth.\nIn practice, while few languages are considered typed from the point of view of type theory (verifying or rejecting all operations), most modern languages offer a degree of typing.29 Many production languages provide means to bypass or subvert the type system.\nStatic versus dynamic typing.29\nStatically typed languages can be either typed languages, such as C++, C# and Java, are manifestly typed. Complete type inference has traditionally been associated with less mainstream languages, such as Haskell and ML. However, many manifestly typed languages support partial type inference; for example, Java and C# both infer types in certain limited cases.30\nDynamic typing, also called latent typing, determines the type-safety of operations at runtime; in other words, types are associated with runtime values rather than textual expressions.29 potentially making debugging more difficult. Ruby, Lisp, JavaScript, and Python are dynamically typed.\nWeak and strong typing\nWeak typing allows a value of one type to be treated as another, for example treating a string as a number.29 This can occasionally be useful, but it can also allow some kinds of program faults to go undetected at compile time and even at runtime.\nStrong typing prevents the above. An attempt to perform an operation on the wrong type of value raises an error.29 Strongly typed languages are often termed type-safe or safe.\nAn alternative definition for \"weakly typed\" refers to languages, such as Perl and JavaScript, which permit a large number of implicit type conversions. In JavaScript, for example, the expression 2 * x implicitly converts x to a number, and this conversion succeeds even if x is null, undefined, an Array, or a string of letters. Such implicit conversions are often useful, but they can mask programming errors.\nStrong and static are now.3132\nStandard library and run-time system\nMain article: Standard library\nMost programming languages have an associated core library (sometimes known as the 'standard library', especially if it is included as part of the published language standard), which is conventionally made available by all implementations of the language. Core libraries typically include definitions for commonly used algorithms, data structures, and mechanisms for input and output.\nA language's core library is often treated as part of the language by its users, although the designers may have treated it as a separate entity. Many language specifications define a core that must be made available in all implementations, and in the case of standardized languages this core library may be required. The line between a language and its core library therefore differs from language to language. Indeed, some languages are designed so that the meanings of certain syntactic constructs cannot even be described without referring to the core library. For example, in Java, a string literal is defined as an instance of the java.lang.String class; similarly, in Smalltalk, an anonymous function expression (a \"block\") constructs an instance of the a library.\nDesign and implementation\nProgramming languages share properties with natural languages related to their purpose as vehicles for communication, having a syntactic form separate from its semantics, and showing language families of related languages branching one from another.3 But as artificial constructs, they also differ in fundamental ways from languages that have evolved through usage. A significant difference is that a programming language can be fully described and studied in its entirety, since it has a precise and finite definition.33 By contrast, natural languages have changing meanings given by their users in different communities. While constructed languages are also artificial languages designed from the ground up with a specific purpose, they lack the precise and complete semantic definition that a programming language has.\nMany languages have been designed from scratch, altered to meet new needs, combined with other languages, and eventually fallen into disuse. Although there have been attempts to design one \"universal\" programming language that serves all purposes, all of them have failed to be generally accepted as filling this role.34 The need for diverse programming languages arises from the diversity of contexts in which languages are used:\nPrograms range from tiny scripts written by individual hobbyists to huge systems written by hundreds of programmers.\nProgrammers range in expertise from novices who need simplicity above all else, to experts who may be comfortable with considerable complexity.\nPrograms must balance speed, size, and simplicity on systems ranging from microcontrollers to supercomputers.\nPrograms may be written once and not change for generations, or they may undergo continual modification.\nFinally, programmers may simply differ in their tastes: they may be accustomed to discussing problems and expressing them in a particular language. remote from simple translation into underlying hardware instructions. Because programmers are less tied to the complexity of the computer, their programs can do more computing with less effort from the programmer. This lets them write more functionality per time unit.35\nNatural language processors have been proposed as a way to eliminate the need for a specialized language for programming. However, this goal remains distant and its benefits are open to debate. Edsger W. Dijkstra took the position that the use of a formal language is essential to prevent the introduction of meaningless constructs, and dismissed natural language programming as \"foolish\".36 Alan Perlis was similarly dismissive of the idea.37 Hybrid approaches have been taken in Structured English and SQL.\nA language's designers and users must construct a number of artifacts that govern and enable the practice of programming. The most important of these artifacts are the language specification and implementation.\nSpecification\nMain article: Programming language specification\nThe specification of a programming language is intended to provide a definition that the language users and the implementors can use to determine whether the behavior of a program is correct, given its source code.\nA programming language specification can take several forms, including the following:\nAn explicit definition of the syntax, static semantics, and execution semantics of the language. While syntax is commonly specified using a formal grammar, semantic definitions may be written in natural language (e.g., as in the C language), or a formal semantics (e.g., as in Standard ML38 and Scheme39 specifications).\nA description of the behavior of a translator for the language (e.g., the C++ and Fortran specifications). The syntax and semantics of the language have to be inferred from this description, which may be written in natural or a formal language.\nA reference or model implementation, sometimes written in the language being specified (e.g., Prolog or ANSI REXX40). The syntax and semantics of the language are explicit in the behavior of the reference implementation.\nImplementation\nMain article: Programming language implementation\nAn implementation of a programming language provides a way to execute that program on one or more configurations of hardware and software. There are, broadly, two approaches to programming language implementation: compilation and interpretation. It is generally possible to implement a language using either technique.\nThe output of a compiler may be executed by hardware or a program called an interpreter. In some implementations that make use of the interpreter approach there is no distinct boundary between compiling and interpreting. For instance, some implementations of BASIC compile and then execute the source a line at a time.\nPrograms that are executed directly on the hardware usually run several orders of magnitude faster than those that are interpreted in software.citation needed\nOne technique for improving the performance of interpreted programs is just-in-time compilation. Here the virtual machine, just before execution, translates the blocks of bytecode which are going to be used to machine code, for direct execution on the hardware.\nUsage\nThousands of different programming languages have been created, mainly in the computing field.41 Programming languages differ from most other forms of human expression in that they require a greater degree of precision and completeness. When using a natural language to communicate with other people, human authors and speakers can be ambiguous and make small errors, and still expect their intent to be understood. However, figuratively speaking, computers \"do exactly what they are told to do\", and cannot \"understand\" what code the programmer intended to write. The combination of the language definition, a program, and the program's inputs must fully specify the external behavior that occurs when the program is executed, within the domain of control of that program.\nA programming language provides a structured mechanism for defining pieces of data, and the operations or transformations that may be carried out automatically on that data. A programmer uses the abstractions present in the language to represent the concepts involved in a computation. These concepts are represented as a collection of the simplest elements available (called primitives).42 Programming is the process by which programmers combine these primitives to compose new programs, or adapt existing ones to new uses or a changing environment.\nPrograms for a computer might be executed in a batch process without human interaction, or a user might type commands in an interactive session of an interpreter. In this case the \"commands\" are simply programs, whose execution is chained together. When a language is used to give commands to a software application (such as a shell) it is called a scripting language.citation needed\nMeasuring language usage\nMain article: Measuring programming language popularity\nIt is difficult to determine which programming languages are most widely used, and what usage means varies by context. One language may occupy the greater number of programmer hours, a different one have more lines of code, and a third utilize the most CPU time. Some languages are very popular for particular kinds of applications. For example, COBOL is still strong in the corporate data center, often on large mainframes; FORTRAN in scientific and engineering applications; C in embedded applications and operating systems; and other languages are regularly used to write many different kinds of applications.\nVarious methods of measuring language popularity, each subject to a different bias over what is measured, have been proposed:\ncounting the number of job advertisements that mention the language43\nthe number of books sold that teach or describe the language44\nestimates of the number of existing lines of code written in the language\u2014which may underestimate languages not often found in public searches45\ncounts of language references (i.e., to the name of the language) found using a web search engine.\nCombining and averaging information from various internet sites, langpop.com claims that 46 in 2008 the 10 most cited programming languages are (in alphabetical order): C, C++, C#, Java, JavaScript, Perl, PHP, Python, Ruby, and SQL.\nTaxonomies\nFor more details on this topic, see Categorical list of programming languages.\nThere is no overarching classification scheme for programming languages. AIn broad strokes, programming languages divide into programming paradigms and a classification by intended domain of use. Traditionally, programming languages have been regarded as describing computation in terms of imperative sentences, i.e. issuing commands. These are generally called imperative programming languages. A great deal of research in programming languages has been aimed at blurring the distinction between a program as a set of instructions and a program as an assertion about the desired answer, which is the main feature of declarative programming.47 More refined parad48 Some general purpose languages were designed largely with educational goals.49\nA programming language may also be classified by factors unrelated to programming paradigm. For instance, most programming languages use English language keywords, while a minority do not. Other languages may be classified as being esoteric or not.\nHistory\nA selection of textbooks that teach programming, in languages both popular and obscure. These are only a few of the thousands of programming languages and dialects that have been designed in history.\nMain articles: History of programming languages and Programming language generations\nEarly developments\nThe first programming languages predate the modern computer. The 19th century had \"programmable\" looms and player piano scrolls which implemented what are today recognized as examples of domain-specific languages. By the beginning of the twentieth century, punch cards encoded data and directed mechanical processing. In the 1930s and 1940s, the formalisms of Alonzo Church's lambda calculus and Alan Turing's Turing machines provided mathematical abstractions for expressing algorithms; the lambda calculus remains influential in language design.50\nIn the 1940s, the first electrically powered digital computers were created. The first high-level programming language to be designed for a computer was Plankalk\u00fcl, developed for the German Z3 by Konrad Zuse between 1943 and 1945. However, it was not implemented until 1998 and 2000.51\nProgrammers of early 1950s computers, notably UNIVAC I and IBM 701, used machine language programs, that is, the first generation language (1GL). 1GL programming was quickly superseded by similarly machine-specific, but mnemonic, second generation languages (2GL) known as assembly languages or \"assembler\". Later in the 1950s, assembly language programming, which had evolved to include the use of macro instructions, was followed by the development of \"third generation\" programming languages (3GL), such as FORTRAN, LISP, and COBOL.52 3GLs are more abstract and are \"portable\", or at least implemented similarly on computers that do not support the same native machine code. Updated versions of all of these 3GLs are still in general use, and each has strongly influenced the development of later languages.53 At the end of the 1950s, the language formalized as ALGOL 60 was introduced, and most later programming languages are, in many respects, descendants of Algol.53 The format and use of the early programming languages was heavily influenced by the constraints of the interface.54\nRefinement\nThe period from the 1960s to the late 1970s brought the development of the major language paradigms now in use, though many aspects were refinements of ideas in the very first Third-generation programming languages:\nAPL introduced array programming and influenced functional programming.55\nPL/I (NPL) was designed in the early 1960s to incorporate the best ideas from FORTRAN and COBOL.\nIn the 1960s, Simula was the first language designed to support object-oriented programming; in the mid-1970s, Smalltalk followed with the first \"purely\" object-oriented language.\nC was developed between 1969 and 1973 as a system programming language, and remains popular.56\nProlog, designed in 1972, was the first logic programming language.\nIn 1978, ML built a polymorphic type system on top of Lisp, pioneering statically typed functional programming languages.\nEach of these languages spawned an entire family of descendants, and most modern languages count at least one of them in their ancestry.\nThe 1960s and 1970s also saw considerable debate over the merits of structured programming, and whether programming languages should be designed to support it.57 Edsger Dijkstra, in a famous 1968 letter published in the Communications of the ACM, argued that GOTO statements should be eliminated from all \"higher level\" programming languages.58\nThe 1960s and 1970s also saw expansion of techniques that reduced the footprint of a program as well as improved productivity of the programmer and user. The card deck for an early 4GL was a lot smaller for the same functionality expressed in a 3GL deck.\nConsolidation and growth\nThe 1980s were years of relative consolidation. C++ combined object-oriented and systems programming. The United States government standardized Ada, a systems programming language derived from Pascal and intended for use by defense contractors. In Japan and elsewhere, vast sums were spent investigating so-called \"fifth generation\" languages that incorporated logic programming constructs.59 The functional languages community moved to standardize ML and Lisp. Rather than inventing new paradigms, all of these movements elaborated upon the ideas invented in the previous decade.\nOne important trend in language design for programming large-scale systems during the 1980s was an increased focus on the use of modules, or large-scale organizational units of code. Modula-2, Ada, and ML all developed notable module systems in the 1980s, although other languages, such as PL/I, already had extensive support for modular programming. Module systems were often wedded to generic programming constructs.60\nThe rapid growth of the Internet in the mid-1990s created opportunities for new languages. Perl, originally a Unix scripting tool first released in 1987, became common in dynamic websites. Java came to be used for server-side programming, and bytecode virtual machines became popular again in commercial settings with their promise of \"Write once, run anywhere\" (UCSD Pascal had been popular for a time in the early 1980s). These developments were not fundamentally novel, rather they were refinements to existing languages and paradigms, and largely based on the C family of programming languages.\nProgramming language evolution continues, in both industry and research. Current directions include security and reliability verification, new kinds of modularity (mixins, delegates, aspects), and database integration such as Microsoft's LINQ.\nThe 4GLs are examples of languages which are domain-specific, such as SQL, which manipulates and returns sets of data rather than the scalar values which are canonical to most programming languages. Perl, for example, with its 'here document' can hold multiple 4GL programs, as well as multiple JavaScript programs, in part of its own perl code and use variable interpolation in the 'here document' to support multi-language programming.61\nSee also\nComputer science portal\nWikiquote has a collection of quotations related to: Programming languages\nComparison of programming languages (basic instructions)\nComparison of programming languages\nComputer programming\nComputer science and Outline of computer science\nEducational programming language\nInvariant based programming\nLists of programming languages\nList of programming language researchers\nLiterate programming\nDialect (computing)\nProgramming language theory\nPseudocode\nScientific language\nSoftware engineering and List of software engineering topics\nReferences\n^ a b c Aaby, Anthony (2004). Introduction to Programming Languages. \n^ In mathematical terms, this means the programming language is Turing-complete MacLennan, Bruce J. (1987). Principles of Programming Languages. Oxford University Press. p. 1. ISBN 0-19-511306-3.\n^ a b Steven R. Fischer, A history of language, Reaktion Books, 2003, ISBN 186189080X, p. 205\n^ ACM SIGPLAN (2003). \"Bylaws of the Special Interest Group on Programming Languages of the Association for Computing Machinery\".  Retrieved 2006-06-19. , The scope of SIGPLAN is the theory, design, implementation, description, and application of computer programming languages - languages that permit the specification of a variety of different computations, thereby providing the user with significant control (immediate or delayed) over the computer's operation.\n^ Dean, Tom (2002). \"Programming Robots\". Building Intelligent Robots. Brown University Department of Computer Science.  Retrieved 2006-09-23.193 : \"a complete specification of a programming language must, by definition, include a specification of a processor--idealized, if you will--for that language.\" [the source cites many references to support this statement]\n^ Ben Ari, Mordechai (1996). Understanding Programming Languages. John Wiley and Sons. \"Programs and languages can be defined as purely formal mathematical objects. However, more people are interested in programs than in other mathematical objects such as groups, precisely because it is possible to use the program\u2014the sequence of symbols\u2014to control the execution of a computer. While we highly recommend the study of the theory of programming, this text will generally limit itself to the study of programs as they are executed on a computer.\"\n^ David A. Schmidt, The structure of typed programming languages, MIT Press, 1994, ISBN 0262193493, p. 32\n^ Pierce, Benjamin (2002). Types and Programming Languages. MIT Press. p. 339. ISBN 0-262-16209-1.\n^ Digital Equipment Corporation. \"Information Technology - Database Language SQL (Proposed revised text of DIS 9075)\". ISO/IEC 9075:1992, Database Language SQL.  Retrieved June 29, 2006.\n^ The Charity Development Group (December 1996). \"The CHARITY Home Page\".  Retrieved 2006-06-29. , Charity is a categorical programming language..., All Charity computations terminate.\n^ XML in 10 points W3C, 1999, XML is not a programming language.\n^ Powell, Thomas (2003). HTML & XHTML: the complete reference. McGraw-Hill. p. 25. ISBN 0-07-222-942-X. \"HTML is not a programming language.\"\n^ Dykes, Lucinda; Tittel, Ed (2005). XML For Dummies, 4th Edition. Wiley. p. 20. ISBN 0-7645-8845-1. \"...it's a markup language, not a programming language.\"\n^ \"What kind of language is XSLT?\". Ibm.com.  Retrieved 2010-12-03.\n^ \"XSLT is a Programming Language\". Msdn.microsoft.com.  Retrieved 2010-12-03.\n^ Scott, Michael (2006). Programming Language Pragmatics. Morgan Kaufmann. p. 802. ISBN 0-12-633951-1. \"XSLT, though highly specialized to the transformation of XML, is a Turing-complete programming language.\"\n^ \n^ Syropoulos, Apostolos; Antonis Tsolomitis, Nick Sofroniou (2003). Digital typography using LaTeX. Springer-Verlag. p. 213. ISBN 0-387-95217-9. \"TeX is not only an excellent typesetting engine but also a real programming language.\"\n^ Robert A. Edmunds, The Prentice-Hall standard glossary of computer terminology, Prentice-Hall, 1985, p. 91\n^ Pascal Lando, Anne Lapujade, Gilles Kassel, and Fr\u00e9d\u00e9ric F\u00fcrst, Towards a General Ontology of Computer Programs, ICSOFT 2007, pp. 163-170\n^ S.K. Bajpai, Introduction To Computers And C Programming, New Age International, 2007, ISBN 812241379X, p. 346215: \"[...] the model [...] for computer languages differs from that [...] for programming languages in only two respects. In a computer language, there are only finitely many names--or registers--which can assume only finitely many values--or states--and these states are not further distinguished in terms of any other attributes. [author's footnote:] This may sound like a truism but its implications are far reaching. For example, it would imply that any model for programming languages, by fixing certain of its parameters or features, should be reducible in a natural way to a model for computer languages.\"\n^ John C. Reynolds, Some thoughts on teaching programming and programming languages, SIGPLAN Notices, Volume 43, Issue 11, November 2008, p.109\n^ Michael Sipser (1997). Introduction to the Theory of Computation. PWS Publishing. ISBN 0-534-94728-X. Section 2.2: Pushdown Automata, pp.101\u2013114.\n^ Jeffrey Kegler, \"Perl and Undecidability\", The Perl Review. Papers 2 and 3 prove, using respectively Rice's theorem and direct reduction to the halting problem, that the parsing of Perl programs is in general undecidable.\n^ Marty Hall, 1995, Lecture Notes: Macros, PostScript version\n^ Michael Lee Scott, Programming language pragmatics, Edition 2, Morgan Kaufmann, 2006, ISBN 0126339511, p. 18-19\n^ a b c d e f g Andrew Cooke. \"An Introduction to Programming Languages\".  Retrieved June 30, 2006. dead link\n^ Specifically, instantiations of generic types are inferred for certain expression forms. Type inference in Generic Java\u2014the research language that provided the basis for Java 1.5's bounded parametric polymorphism extensions\u2014is discussed in two informal manuscripts from the Types mailing list: Generic Java type inference is unsound (Alan Jeffrey, 17 December 2001) and Sound Generic Java type inference (Martin Odersky, 15 January 2002). C#'s type system is similar to Java's, and uses a similar partial type inference scheme.\n^ \"Revised Report on the Algorithmic Language Scheme (February 20, 1998)\".  Retrieved June 9, 2006.\n^ Luca Cardelli and Peter Wegner. \"On Understanding Types, Data Abstraction, and Polymorphism\". Manuscript (1985).  Retrieved June 9, 2006.\n^ Jing Huang. \"Artificial Language vs. Natural Language\".  (\"Encyclopaedia of Mathematics \u00bb P \u00bb PL/I\". SpringerLink.  Retrieved June 29, 2006. ). Ada and UNCOL had similar early goals.\n^ Frederick P. Brooks, Jr.: The Mythical Man-Month, Addison-Wesley, 1982, pp. 93-94\n^ Dijkstra, Edsger W. On the foolishness of \"natural language programming.\" EWD667.\n^ Perlis, Alan, Epigrams on Programming. SIGPLAN Notices Vol. 17, No. 9, September 1982, pp. 7-13\n^ Milner, R.; M. Tofte, R. Harper and D. MacQueen. (1997). The Definition of Standard ML (Revised). MIT Press. ISBN 0-262-63181-4.\n^ Kelsey, Richard; William Clinger and Jonathan Rees (February 1998). \"Section 7.2 Formal semantics\". Revised5 Report on the Algorithmic Language Scheme.  Retrieved 2006-06-09.\n^ ANSI \u2014 Programming Language Rexx, X3-274.1996\n^ \"HOPL: an interactive Roster of Programming Languages\". Australia: Murdoch University.  Retrieved 2009-06-01. \"This site lists 8512 languages.\"\n^ Abelson, Sussman, and Sussman. \"Structure and Interpretation of Computer Programs\".  Retrieved 2009-03-03.\n^ \n^ \"Counting programming languages by book sales\". Radar.oreilly.com. 2006-08-02.  Retrieved 2010-12-03.\n^ Bieman, J.M.; Murdock, V., Finding code on the World Wide Web: a preliminary investigation, Proceedings First IEEE International Workshop on Source Code Analysis and Manipulation, 2001\n^ \"Programming Language Popularity\". Langpop.com.  Retrieved 2010-12-03.\n^ Carl A. Gunter, Semantics of Programming Languages: Structures and Techniques, MIT Press, 1992, ISBN 0262570955, p. 1\n^ \"TUNES: Programming Languages\". \n^ Wirth, Niklaus (1993). \"Recollections about the development of Pascal\". Proc. 2nd ACM SIGPLAN conference on history of programming languages: 333\u2013342. doi:10.1145/154766.155378.  Retrieved 2006-06-30.\n^ Benjamin C. Pierce writes:\n\"... the lambda calculus has seen widespread use in the specification of programming language features, in language design and implementation, and in the study of type systems.\"\nPierce, Benjamin C. (2002). Types and Programming Languages. MIT Press. p. 52. ISBN 0-262-16209-1.\n^ Rojas, Ra\u00fal, et al. (2000). \"Plankalk\u00fcl: The First High-Level Programming Language and its Implementation\". Institut f\u00fcr Informatik, Freie Universit\u00e4t Berlin, Technical Report B-3/2000. (full text)\n^ Linda Null, Julia Lobur, The essentials of computer organization and architecture, Edition 2, Jones & Bartlett Publishers, 2006, ISBN 0763737690, p. 435\n^ a b O'Reilly Media. \"History of programming languages\" (PDF).  Retrieved October 5, 2006.\n^ Frank da Cruz. IBM Punch Cards Columbia University Computing History.\n^ Richard L. Wexelblat: History of Programming Languages, Academic Press, 1981, chapter XIV.\n^ Fran\u00e7ois Labelle. \"Programming Language Usage Graph\". SourceForge.  Retrieved June 21, 2006. .\n^ Hayes, Brian (2006). \"The Semicolon Wars\". American Scientist 94 (4): 299\u2013303.\n^ Dijkstra, Edsger W. (March 1968). \"Go To Statement Considered Harmful\". Communications of the ACM 11 (3): 147\u2013148. doi:10.1145/362929.362947.  Retrieved 2006-06-29.\n^ Tetsuro Fujise, Takashi Chikayama Kazuaki Rokusawa, Akihiko Nakase (December 1994). \"KLIC: A Portable Implementation of KL1\" Proc. of FGCS '94, ICOT Tokyo, December 1994. KLIC is a portable implementation of a concurrent logic programming language [[KL1.]\n^ Jim Bender (March 15, 2004). \"Mini-Bibliography on Modules for Functional Programming Languages\". ReadScheme.org.  Retrieved 2006-09-27.\n^ Wall, Programming Perl ISBN 0-596-00027-8 p.66\nFurther reading\nDaniel P. Friedman, Mitchell Wand, Christopher Thomas Haynes: Essentials of Programming Languages, The MIT Press 2001.\nDavid Gelernter, Suresh Jagannathan: Programming Linguistics, The MIT Press 1990.\nShriram Krishnamurthi: Programming Languages: Application and Interpretation, online publication.\nBruce J. MacLennan: Principles of Programming Languages: Design, Evaluation, and Implementation, Oxford University Press 1999.\nJohn C. Mitchell: Concepts in Programming Languages, Cambridge University Press 2002.\nBenjamin C. Pierce: Types and Programming Languages, The MIT Press 2002.\nRavi Sethi: Programming Languages: Concepts and Constructs, 2nd ed., Addison-Wesley 1996.\nMichael L. Scott: Programming Language Pragmatics, Morgan Kaufmann Publishers 2005.\nRichard L. Wexelblat (ed.): History of Programming Languages, Academic Press 1981.\nExternal links\nWikibooks has a book on the topic of\nComputer programming\nLook up programming language in Wiktionary, the free dictionary.\n99 Bottles of Beer A collection of implementations in many languages.\nComputer Programming Languages at the Open Directory Project\nSyntax Patterns for Various Languages\nv \u00b7 d \u00b7 eTypes of programming languages\nArray \u00b7 Aspect-oriented \u00b7 Assembly \u00b7 Class-based \u00b7 Compiled \u00b7 Concatenative \u00b7 Concurrent \u00b7 Data-structured \u00b7 Dataflow \u00b7 Declarative \u00b7 Domain-specific \u00b7 Dynamic \u00b7 Esoteric \u00b7 Event-driven \u00b7 Extensible \u00b7 Functional \u00b7 High-level \u00b7 Imperative \u00b7 Interpreted \u00b7 Logic \u00b7 Low-level \u00b7 Machine \u00b7 Macro \u00b7 Metaprogramming \u00b7 Multi-paradigm \u00b7 Non-English-based \u00b7 Object-based \u00b7 Object-oriented \u00b7 Off-side rule \u00b7 Pipeline \u00b7 Procedural \u00b7 Prototype-based \u00b7 Reflective \u00b7 Rule-based \u00b7 Scripting \u00b7 Synchronous \u00b7 Very high-level \u00b7 Visual\nv \u00b7 d \u00b7 eTypes of computer languages\nArchitecture description \u00b7 Hardware description \u00b7 Markup \u00b7 Modeling \u00b7 Programming \u00b7 Query \u00b7 Specification \u00b7 Stylesheet \u00b7 Template processing \u00b7 Transformation\n\nLearn Ruby with these 10 books and other resources Finding the best resources when learning any programming language is not always easy. Chad Perrin makes this process easier for experienced and novice programmers interested in learning Ruby. He recommends 10 great Ruby books as well as other resources.\n\nlarger image Here you can download your free copy of the \n\nAn Introduction to Assembly Language Programming Most programmers shy away from Assembler (or assembly language). People tend to consider it as a very difficult language to understand and use. Moreover, anyone who knows how to use it is tended to be regarded with some reverence by other programmers in his community.\n\n2010 State of the Computer Book Market, Post 2 - The Categories In this second installment (the first post can be found here), we look at computer book sales in specific technology categories. Remember that we've organized the data into six \"Category Families\"\u2014Systems and Programming, Web Design and Development, Business Applications, Digital Media Applications, Consumer Operating Systems and Devices, and Computer Topics. Within each of these Families ...\n\nControl System Will Allow Spacecraft To Think For Themselves The world's first control system that will allow engineers to program autonomous satellites and spacecraft to think for themselves has been developed by scientists from the University of Southampton. Professor Sandor Veres and his team of engineers have developed a cognitive software agent control system called 'sysbrain'. Using natural language programming (NLP), the software agents can read ...\n\nThe editor used to write Coach Basic programs has built in syntax checking tools that prompt beginning students for the correct answer to questions and help save time in the classroom \n\nMaking the transition from C to C++ Although it has taken almost a decade, the transition from C to C++ is now gaining momentum in many complex software projects, in parallel programming for multicore apps and in hardware generation environments. Here's a three step strategy for making the transition and migrating code from C to C++.\n\nLakers sign 20-year TV deal with Time Warner Cable Time Warner Cable and the Los Angeles Lakers today entered into a 20-year, wide-ranging agreement for rights to distribute all locally available pre-season, regular season, and post-season Lakers games, beginning with the 2012-2013 season. To showcase the games, Time Warner Cable will launch two regional sports networks in HD, including the nation's first Spanish-language regional sports [...]"}
{"text": "Piscataway PrealgebraC++ is also a terrific language to help students learn to program with object oriented programming techniques. Within these topics I can help them learn object-oriented programming concepts including objects, classes, encapsulation, polymorphism and inheritance. Using C++ as their object-orient..."}
{"text": "Chapter 1. Understanding Flash3D\n\nFlash programmers have always enjoyed a freedom of expression unparalleled by other programming platforms. And with the release of CS4, Adobe has propelled that freedom of expression into the 3rd dimension.\n\nBut 3D didn't start with AS3. Flash developers were experimenting with 3D long before. And applications like Papervision3D formalized these endeavors into a robust object-oriented class structure. The acceptance and popularity of Papervision3D has become a driver of change in the Flash developer community. But underneath the 300 classes that make up Papervision3D still beats the original algorithms used by the early developers of Flash 3D."}
{"text": "Exploring the V8 JS engine (Part 1 of 2)\n\nThis is the first part of a 2 part series giving a simple technical overview of the V8 Javascript engine.\n\nFirst of all some basic facts:\n\nDeveloped and maintained by Google\n\nJavascript engine behind Google Chrome\n\nAlso powers Node.js?\n\nReally Fast!\n\nV8 is written in C++ so you should have basic understanding of OOP and some C/C++ knowledge wouldn't do bad too.\n\nThe engine (V8) executes Javascript in so called contexts, these are sandboxed and you can create multiple contexts in one V8 virtual machine (engine).\n\nThis has the advantage that if you run 2 (or more) Javascript programs you don't have to worry about namespacing. The creation of these contexts is not as memory hungry as you may think, so don't worry about that.\n\nOne of the great features of V8 is sharing C++ functions, objects and variables with Javascript, which we will cover in the second part of this series. To use V8 you write a C++ program that uses the V8 libs (to set up the contexts, scopes, templates) and then executes a string which is your Javascript program. You will understand how this works later in this post.\n\nI'll take you through setting up the V8 lib and a simple Hello World! program.\n\nSimple isn't it? Now once the build has finished you should be able to see the libv8.a file. This file is important for compiling the C++ program that uses the V8 library.\n\nYour first V8 program\n\nNow that you have all the parts needed for compiling a C++ program that uses the V8 classes, let's get to the interesting part.\n\nHere is a simple C++ program that runs the Javascript: \"Hello World!\". Obviously, this is not a very spectacular Javascript program, but it should do to our needs. The comments explain what a each part does:"}
{"text": "Navigation\n\nsyntax\n\nThe syntax specification shown here is a less complete and less formal version of that which is in the Eiffel ISO/ECMA standard document. The format is BNF-E. The Language Specification section of the standard document includes an overview of BNF-E.\n\nThere are a few parts of the syntax that are either non-production or non-representable in BNF-E. Some of these have been omitted from the following specification. These omitted parts of the syntax definition add to the precision of the specification, but knowledge of them is not always vital for developers.\n\nThe Quick Reference to the Eiffel programming language provides an informal guide to the syntax and reserved words of the language. The Eiffel programming language is described in detail in the ISO/ECMA standard document, available online.\n\nSometimes there are differences between the language as defined by the standard and that which is implemented by Eiffel Software."}
{"text": "Computer Science: An Overview uses broad coverage and clear exposition to present a complete picture of the dynamic computer science field. Accessible to students from all backgrounds, Glenn Brookshear uses a language-independent context to encourage the development of a practical, realistic unders...\n\nFor introductory courses in Engineering and Computer Science. Teach your students to program and design user interfaces using Excel 2007. Introduction to VBA for Excel, 2e is an introductory text that is designed to instruct engineering and science students on how to develop progra..."}
{"text": "What is Java Programming Language?\n\nAnswer\n\nThe Java programming language was invented by Sun Microsystems. It allows programmers to develop software that runs independently from the host operating system. That means a java program will run on a Mac or a PC."}
{"text": "Learning C Programming For Beginners\n\nThe C programming language has exploded in popularity in the last few years. It seems to be the \"fad\" language of the day. But unlike other fads that have emerged, blossomed, and the withered, C seems destined to be in flower for a long time. It has a number of advantages. A major one is the ability to use it to write programs that execute quite efficiently. Many system programs are written in C, as are many programs that depend on screen graphics such as computer-aided design. Execution speed is extremely critical in these areas. Learn Programming Language\n\nAnother advantage is its portability, in large part the result of C programmers themselves enforcing and demanding consistency in various implementations of the language. Yet another advantage is that C continues to grow with the advent of new techniques and greater demands on languages. A recent trend toward object-oriented programming, for example, has led to an extension of C called C++\n\nHow did C get it's name? Was ther a B? An A?\n\nThere was no A. The seed language was the Basic Combined Programming Language in 1972. In 1983, a group got together to set some official standards for C. They formed the X3J11 committee under the American National Standards institute (ANSI), and by 1988 they had completed the standards for the C language. Before this standard, the defacto standards were contained in Appendix A of a book by Brian Kernighan and Dennis Ritche called The C Programming Language. Their version is often referred to as K&R C.\n\nAnsi C is based on K&R C, and so most current compilers will accommodate both versions. It is important to learn the ANSI version, however, because most C implementations (and virtually all new ones) adhere to the standads, and, at some point, the few things that K&R did differently will disappear from the language.\n\nIt would be impossible for the ANSI standards to cover everything; there is too much that is nonstandard about the various hardware and system software-configurations in existence. ANSI providers standard methods of displaying characters on the screen, for instance, but graphicscreen controls differ so widely on the screen, for instance, but graphic covered by the standard. The standard does, however, provide the solid core. Each compiler will add extensions to it to take advantage of the special capabilities of the hardware and system software for which it is destined.\n\nProgramming languages do evolve because there's a continuous search for efficient transformation of human language into machine code. Languages produced usually start with ideas, which conceal hardware and employ representations that are more convenient to human programmers. Another crucial facet of language design is dealing with the program's complexity. As programs become bigger and more refined, developers have come to realize that there are language types that are easier to support in huge systems. Because of this, event-driven and object-oriented languages became widely used."}
{"text": "Object Oriented C (ooc) kit is for those who want to program in an object orieneted manner, but sticks on the good old ... handling. Ideal for students getting to know OO programming. It can be mainly useful for education ... By the help of ooc you can write object oriented code in C with little efforts, though ...\n\nPPL is a FREE, fast and easy-to-learn programming language that is fully object-oriented. PPL runs on all Windows Mobile devices using ... would cost you hundreds of dollars with other programming languages. - Finally be recognised as a master programmer x64 is an Open Source project managed by Rexx Language Association (RexxLA) providing a free implementation of Object Rexx. Open Object Rexx x64 includes features typical of an object-oriented language, such as subclassing, polymorphism, and data encapsulation. It is an extension of the classic Rexx language, which has been expanded to include classes (a Logtalk is a mature open source object-oriented logic programming language that can use most PrologRuby is a dynamic, reflective, general purpose object-oriented programming language that combines syntax inspired by Perl with Smalltalk-like features. Ruby supports multiple programming paradigms, including functional, object oriented, imperative and reflective. It also has a dynamic ... CLU. Ruby is seen as a flexible language, since it allows its users to freely alter ... be used for teaching the very fundamentals of programming as well as advanced object-oriented programming in C# ...\n\nPhrogram is plain language, easy to do, real computer programming, especially designed for beginning and intermediate programmers \u2013 ... and family! Much more than a simple beginner programming language, yet much easier to use than far more complex programming tools intended for professional developers, Phrogram gets you ... of example programs and is customizable into different language versions. Phrogram users form a worldwide of amateur ...\n\n... environment that offers you powerful assistance with your object-oriented programming. This software is distributed as FREEWARE. Its revolutionary ... it competitive against the big names of RAD programming. It features: - a complete object-oriented programming language, with inheritance and polymorphism two modes of operation: an assisted programming mode for novices; and for experts, a multi-tab basic features of a general-purpose (Turing complete) programming language with an emphasis placed on OOP simplicity. ...\n\nScriptol is a modern and easy to learn programming language. The minimal Scriptol program is just one line: ... PHP error checking at compile time. Scriptol is object oriented and XML oriented. It is the first programming language to integrate Xml as a data structure. Compatible ..."}
{"text": "Course Information\n\nAbstract\n\nThis course provides a practical introduction to the implementation of compilers. The course is carried out as one programming project divided into four milestones. Each milestone will consist of one component of the compiler that will be built during the course. At the end of the course, the implemented compiler will be capable of generating executable code for the JVM or other possible machine architectures.\n\nOutline\n\nThe lab problems include the following:\n\nLexical Analyzers:\n\nImplementing a lexical analyzer manually from scratch.\n\nImplementing a lexical analyzer using JLex.\n\nSyntactic Analyzer:\n\nImplementing a parser manually from scratch.\n\nImplementing a parser using CUP.\n\nSemantic Analyzer\n\nGenerate a syntax tree manually from scratch.\n\nGenerate a syntax tree using CUP.\n\nCode Generator:\n\nGeneration of machine code (JVM or MIPS).\n\nGoals\n\nObjectives\n\nBy the end of his course, students will know how to implement lexical, syntactic and semantic analyzers, manually and using automation tools such as JLex and CUP. They will also have learnt or to implement a full compiler for the Decaf programming language."}
{"text": "William Cook is an Associate Professor in the Department of Computer Sciences at The University of Texas at Austin. His research focuses on object-oriented programming, programming language design, and the interaction between programming languages and databases. William was the Chief\u2026\n\nDavid Ungar is a visionary computer scientist and engineer currently working at IBM Research. He is the co-creator of the object-oriented Self programming language, which is a language influenced by SmallTalk and one that has influenced many other languages, not the least of which isThe Grace Programming Language project is a research effort that aims to make learning how to program easier by baking \"educational abstractions\" into the language itself - it's an object oriented programming language designed for teaching undergraduate students. This means the language is\u2026\n\nIt's been a while since we've been lucky enough to catch up with Dave Thomas. Dave is well known for his work in object oriented programming language design, dynamic language development (SmallTalk), and virtual machines. Dave did the initial development of the Eclipse IDE and is currently the CEO\u2026\n\nIt's always a pleasure to get the chance to chat with Gilad Bracha. So, whenever we can, we do. We've had Gilad on C9 quite a few times over the years and the conversations are always enlightening and educational. Recently, Gilad joined Google and is now working on the Dart\u2026\n\nRecently, Channel 9 was invited to attend the great SPLASH conference. What is SPLASH? Systems, Programming, Languages and Applications: Software for Humanity. SPLASH is an annual conference that embraces all aspects of software construction and delivery, and that joins\u2026\n\nPython Tools for Visual Studio 1.1 is now available in Alpha! PTVS turns VS into an IDE for Python. PTVS a free, open source plug-in for Visual Studio 2010 from Microsoft's Developer Division. PTVS enables developers to use all the major productivity features of Visual Studio to build Python code"}
{"text": "Who should attend: Programmers with previous experience either in a structured programming language, like C, C++, Pascal, Python, or Java, or else in a scripting language like the Bourne shell, Javascript, or Tcl. While some previous exposure to Perl is beneficial, it's not essential.\n\nThis is the first of two classes - \"Learning Perl\" (S4) and \"Learning More Perl\" (M4) - that were designed to be taken one after the other, although this is not a requirement.\n\nDesigned to be programmer-friendly and platform-neutral, Perl is a high-level, general-purpose programming language that makes easy things easy and hard things possible. Now moving into its second decade, Perl has become the language of choice across all platforms for programmers engaged in rapid prototyping, system utilities, software tools, system management tasks, database access, graphical and web programming. Perl programming is an essential skill for any system administrator or web programmer, and an important one for nearly everyone else.\n\nBecause Perl incorporates aspects of more than a dozen well-known UNIX tools, experienced UNIX programmers and administrators can come up to speed on Perl very rapidly. However, because Perl is portable to all major platforms, programmers and administrators everywhere will benefit from this high-powered tool.\n\nBring your own laptop:This course uses a new strategy: practical lab work is added to the traditional lecture format to reinforce the lectures. Students should bring their own laptop on which they can work through instructor-assisted lab exercises. Laptops should have Perl already installed on them, but no specific operating system is required. Detailed directions can be found on the web at: \n\nTom Christiansen (S4, M4, T4) has over fifteen years experience in programming, administering, and teaching about UNIX and Internet systems. He has been involved with Perl since day zero of its initial public release in 1987. Lead author on Perl Cookbook, co-author of the 2nd editions of Programming Perl, Learning Perl, and Learning Perl on Win32 Systems, Tom is also the developer of  major caretaker of Perl's online documentation, co-author of the Perl FAQ list, and president of The Perl Journal. Tom served two terms on the USENIX Association Board of Directors."}
{"text": "I am a newbie to game programming. I have 3D animation knowledge (3D Max), but where could I start?\n\nI found that there is a site called 'Quake 3'. Is it one of the game programming languages?\n\nWhich one is the most common, e.g. C++ or Active X?\n\nWhich programming languages and 3D software that Playstation, XBox and Nintendo used to create the game?\n\nThanks for help.\n\ngogo\n\nDerek Stone\n\n05-24-2001, 01:21 PM\n\nI hate to say it but you are very much confused.\nQuake III is a game. Programmed in C++ if you wish to know.\nActiveX is not a programming language. It is a feature of COM.\nYou mention C++ when this is a Visual Basic forum.\nGame consoles have their own proprietary languages, most of which are similar to C++.\n\nNow for an answer.\nUse VB (Visual Basic) as a starting point because it's one of the easiest programming languages to learn.\nThen start learning about DirectX, a game programming architecture, which is programming language independent (meaning that most languages can use it).\n\nGood Luck\n-cl\n\n\n\ngogo\n\n05-24-2001, 08:20 PM\n\nThank you very much for your kind advice. I knew that I am newbie and always make mistake in posting questions to the wrong forum.\n\nSo, in general, C++, VB and Direct X are the languages for game.\n\nDo you know that mirabilis ICQ used which language to create? Is it C/C++ too?"}
{"text": "About Programming Languages and Introduction C Programming Language\n\nProgramming Languages are artificial languages made to convey computations carried out by machines like computers. These languages are used to make programs that manage the behavioural patterns of machines, i.e. to articulate algorithms with precision and even as a method of human communication.\n\nOut of the many programming languages available C programming Language is a multipurpose general computer programming language which was formed at the Bell Telephone Laboratories by Dennis Ritchie in 1972. The primary purpose it was meant to serve was to be used as system software in Unix operating systems. However it is now used more widely to create portable application software. As one of the most well accepted programming languages in the history of computers there are very few computer designs which are not compatible with C programming Language. Other prevalent versions of programming languages like say C++ have been incredibly influenced by C and began merely as an addition to C.\n\nDesigned to be assembled using a simple compiler and to offer low-level entry to memory, C Programming Language provides machine instruction mapping language constructs which require negligible support during run-time. This makes C useful in various other applications which have been traditionally designed using assembly language.\n\nC Programming Language HistoryFirst phase\n\nC programming language was developed at AT&T Bell Laboratories between the years 1969 and 1973 though Ritchie claims that the most active phase was in 1972. Here are some of the interesting historical details about this programming language:\n\nThe name 'C' was adopted because it was a modified version of a language known as 'B'. Ken Thompson suggests that B was a rudimentary version of BCPL.\n\nIt was when b was found lacking in functionality (byte addressability) that C was developed.\n\nDevelopment of C is closely connected with the development of Unix operating system.\n\nAn assembly language was first used to develop Unix. It was in 1973 when struct types were added that C was rendered powerful enough to write Unix kernel in.\n\nUnix was a pioneer of sorts as one of the first OS to be implemented in C, a language type other than assembly. Others include Multics system written in PL/I and Master Control Program for Burroughs B5000 written in ALGOL (1961).\n\nBrian Kernighan and Dennis Ritchie\n\nBrian Kernighan and Dennis Ritchie in 1978, brought out the first edition of a book called The C Programming Language. Affectionately known as the K&R in inner circles, this book was the unofficial specification of the language for years. The language described in the book is known as K&R C. Further editions cover the more recently developed ANSI C.\n\n(American National Standards Institute ) ANSI C\n\nVarious editions of C gained popularity among minicomputers, mainframe computers and microcomputers (like IBM PC) in the late1970s and early 1980s. Specifically, in 1983, the American National Standards Institute (ANSI) formulated a committee called X3J11 in order to provide a standard specification for C. The year 1989 saw ratification of the standard as ANSI X3.159-1989 'Programming Language C'. It is this version that is informally known as ANSI C, C89 or Standard C.\n\nC1X - Revised Version of Standard C\n\n2007 saw the beginning of work towards another revised version of standard C, unofficially titled 'C1X'. The standards committee for C has drawn out guidelines to limit inclusion of features which have not been analysed by existent applications.\n\nC Programming Language Basics\n\nThe standard structure of a C program includes the following components:\n\nPreprocessor Commands\n\nType definitions\n\nFunction prototypes\n\nVariables\n\nFunctions\n\nLike any language C too has to follow basic grammar or syntax inherent in this language. Here is a sneak peek at the basics of C language\n\nC Programming Language Characters\n\nCharacters used in C Language belong to four classes.\n\nDigits\n\nLetters\n\nSpecial Characters\n\nWhite Space\n\nPre-defined C Programming Language Keywords\n\nCertain words have been given fixed functions in this programme and are called keywords.\n\nExamples include\n\nasm\n\nauto\n\nbreak\n\ncase\n\nchar\n\nconst\n\ncontinue\n\ndefault\n\ndo\n\ndouble\n\nelse\n\nenum\n\nextern\n\nfloat\n\nfor\n\ngoto\n\nhuge\n\nif\n\nint\n\ninterrupt\n\nlong\n\nnear\n\nregister\n\nreturn\n\nshort\n\nsigned\n\nsizeof\n\nstatic\n\nstruct\n\nswitch\n\ntypedef\n\ntypeof\n\nunion\n\nunsigned\n\nvoid\n\nvolatile\n\nwhile\n\nC Programming Language Identifiers\n\nNames of arrays, functions and variables are known as identifiers. These are defined by the user and can either be lower case or upper case though the former is preferred.\n\nC Programming Language Constants\n\nA Constant value is the one which never change during the course of the program execution. C Programming Language supports various types of constants.\n\nInteger Constants\n\nReal Constants\n\nSingle Character Constants\n\nString Constants\n\nC Programming Language Variables\n\nData name used to store data value is known as a \"Variable\" and this may change during the program execution. A variable name should be carefully chosen by the programmer so that its use is reflected in a useful way in the entire program. Variable names are case sensitive."}
{"text": "Python Tutorials\n\nOther Resources and Links - Python\n\nAnd now for something completely different... Python has a very extensive, well documented and portable module library that provides a large variety of useful functions. The Internet-related collection is particularly impressive, with modules to deal with everything from parsing and retrieving URL's to retrieving mail from POP servers and everything in between.\n\nInternet Programming with Python (Watters, van Rossum, Ahlstrom; MIS Press): this one I personally own. Though it is slightly outdated, covering Python 1.4, most of the information is still relevant and useful. Provides a good tutorial on Python and lots of sample code for Internet applications. One of the co-authors is Guido van Rossum, the inventor of Python. Recommended, but due for a new edition.\n\nProgramming Python (Lutz; Oreilly & Associates): also slightly outdated, but highly recommended by people who have it. More of a reference than a tutorial.\n\nThe Python FAQ: many questions and answers about specific features and problems. Come here when you can't find your question answered in any other documentation.\n\nLanguage Comparisons: also known as Python vs. Perl vs. Tcl vs. Java vs. the world. Most articles here are reasonably objective and balanced comparisons. Always pick the right tool for the job. Often, Python is the right tool.\n\nDownloading Python for your platform. Both source code and binaries for a wide variety of platforms can be found there. However, if you are running a Linux distribution such as Debian or Red Hat it will be easier for you to obtain the appropriate package for your system from your distributor."}
{"text": "In C, all code is written in functions and in\nthis module we write the simplest possible C function\nto display the words \"Hello World\" on your screen. We\nalso have a first look at the compilers and linkers\n(also known as loaders) needed with C to convert your\ncode from English-like text into a runnable program.\n\nBODMAS - the order a computer evaluates arithmetic expressions What order does a computer program use to evaluate expressions? If I write\n2 + 3 * 4 + 5\ndoes it start off, left to right ...\n2 + 3 is 5\n5 * 4 is 20\n20 + 5 is 25\nNo! it does not, even though the newcomer might think that was the most natural way for ...\n\nInteger types, and integer overflows, in C C offers you the ability to define a whole variety of integer types:\nshort int my_number;\nint my_number;\nlong int my_number;\ntypically occupying 16, 32 and 64 bits of memory (but that is NOT a standard, and you may find different on some systems). And the amount of ...\n\nDo I need to initialise variables - programming in C, C++, Perl, PHP, Python, Ruby or Java. Starting with a clean slate. Are variables initisialised, and if so, how? Even with this fundamental question, languages vary considerably.\nC and C++\nFrom my (e)mailbag ...\n\"\"\"In a piece of code we've written we declare an array, but we do not fill the elements with values, we assume (dangerous ...\n\nYour program - you just provide the filling in the sandwich You may think (and say) that you're writing a program ... but you never write a complete program these days. What you do is to provide the filling to the sandwich - the bit that changes from one application / requirement to the next, and you then make use of standard surrounding material - the bread.\nOn ...\n\nLearning to write good programs in C and C++ - separating out repeated code From our \"learning to program in C and C++ day\" yesterday - that's how we started our working year in the training business in 2011. \"Learning to\" courses, where we take people through the basic coding principles and concepts and in the language they'll actually be using are both the hardest work to ...\n\nStaring a C course with Hello World - why? Every programming course starts with a \"Hello World\" program - that's a program which does no more than print out the words \"Hello World\" when you run it - truely minimalist. It's not just convention that courses start that way - it's also very sensible as it allows he tutor to teach the delagates ...\n\nWhat does const mean? C and C++ If ...\n\nVariables and pointers and references - C and C++ If I have a variable called \"weight\" that contains a float, I can use and set its value by using that name.\nPointers\nIf - in C or in C++ - I declare a variable to be a pointer then that variable may contain a memory address ... I use a * in my type declaration, and then I use & in my assignment:\nfloat ...\n\nCompiling C programs with gcc - an overview Gcc - the \"Gnu Compiler Collection\" - is used to compile AND to link C language programs in an open source environment. A single command - gcc runs a series of phases that take you from source code through to an executable program file, with the actual steps taken works out based on:\n\u2022 the extensions ...\n\nTurning C from source to a running program With scripting languages (or near-scripting languages) such as shell, Tcl, Perl, Python and PHP, the developer just edits a file of program code, and tests it - the tools that he uses roll the translation of his source into something that can be run without him having to make further inputs. C is somewhat ...\n\nWe have a technical library of over 700 books on the subjects on which we teach.\nThese books are available for reference at our training centre. Also\navailable is the Opentalk\nForum for discussion of technical questions."}
{"text": "the rudiments of Perl programming. It provides the general reader with an interest in language with the most usable and relevant aspects of Perl for writing programs that deal with language.\n\n- Exposes the general reader with an interest in language to the most usable and relevant aspects of Perl for writing programs that deal with language.\n- Contains simple examples and exercises that gradually introduce the reader to the essentials of good programming.\n- Assumes no prior programming experience.\n- Accompanied by exercises at the end of each chapter and offers all the code on the companion website:"}
{"text": "Already know Python but want to learn more? A lot more? Dive into a variety of topics used in practice for real-world applications. Covers regular expressions, Internet/network programming, GUIs, SQL/databases/ORMs, threading, and Web development. Learn about contemporary development trends such as Google+, Twitter, MongoDB, OAuth, Python 3 migration, and Java/Jython. Presents brand new material on Django, Google App Engine, CSV/JSON/XML, and Microsoft Office. Includes Python 2 and 3 code samples to get you started right away! Provides code snippets, interactive examples, and practical exercises to help build your Python skills. Python is an agile, robust, and expressive programming language that continues to build momentum. It combines the power of compiled languages with the simplicity and rapid development of scripting languages. In Core Python Applications Programming, Third Edition, leading Python developer and corporate trainer Wesley Chun helps you take your Python knowledge to the next level. Learn professional Python style, best practices, and good programming habits Build clients and servers using TCP, UDP, XML-RPC, and be exposed to higher-level libraries like SocketServer and Twisted Develop GUI applications using Tkinter and other available toolkits Improve application performance by writing extensions in C/C++, or enhance I/O-bound code with multithreading Discover SQL and relational databases, ORMs, and even non-relational (NonSQL) databases like MongoDB Learn the basics of Web programming, including Web clients and servers, plus CGI and WSGI Expose yourself to regular expressions and powerful text processing tools for creating and parsing CSV, JSON, and XML data Interface with popular Microsoft Office applications such as Excel, PowerPoint, and Outlook using COM client programming Dive deeper into Web development with the Django framework and cloud computing with Google App Engine Explore Java programming with Jython, the way to run Python code on the JVM Connect to Web services Yahoo! Finance to get stock quotes, or Yahoo! Mail, Gmail, and others to download or send e-mail Jump into the social media craze by learning how to connect to the Twitter and Google+ networks Core Python Applications Programming, Third Edition, delivers Broad coverage of a variety of areas of development used in real-world applications today Powerful insights into current and best practices for the intermediate Python programmer Dozens of code examples, from quick snippets to full-fledged applications A variety of exercises at the end of every chapter to help hammer the concepts home\n\nCore Python Applications Programming (3rd Edition"}
{"text": "2 In procedural programming the main emphasis is on procedure\nin object oriented the data is an important part.\n\n3 PO Language is fully concentrates on\nProcedures/functions/methods.\nOO concepts says it think about data and bind that data and\nmethods those are manipulating that data into one entity\nknown as object and then utilize that object into system.\n\n4 It follows top-down approach.\nIt follows bottom-up approach.\n5 C employs top down approach which is an procedure oriented Language.\nC++ employs bottom down approach which is an object oriented language.\n6 COBOL, PASCAL, C, FORTRAN\nare example of the procedure oriented language. C++, Java, C#, VB.Net are example of the object oriented language.\n\n1.Where are the sessions storing ?\n2.What are the contents of a session file ?\n3.If the server is loaded with too many session files there\nis a possibility of server crash. How can we solve this\nissue?\n4. How does php server identify that the particular session\nbelongs to particular user ? For ex: If two users A and B\nlogged from different machine, separate session files (say\n1 and 2) will be created in the server. But how the php\nknows that 1 belongs to A and 2 belongs to B ?"}
{"text": "This best-selling, authoritative reference manual provides a complete description of the C language, the run-time libraries, and a style of C programming that empha_sizes correctness, portability, and maintainability. Describing the C language more clearly and in more detail than any other book, authors Samuel P. Harbison and Guy L. Steele Jr. provide in a single manual: * Standard C"}
{"text": "Mastering PhpMyAdmin PhpMyAdmin is a well known and popular open-source tool written in PHP intended to handle the administration of MySQL over the Internet. Currently it can create and drop databases, create/drop/alter tables, delete/edit/add fields, execute any SQL statement, and manage keys on fields. While most MySQL developers use routine features of phpMyAdmin every day, [...]\n\nJava remains a scalable, object oriented, general purpose programming language, but it has moved beyond its days of simplicity. It now includes advanced features designed to speed and simplify software development. This course describes 184 running programs showing how the new features work. VTC author Arthur Griffith builds on your current Java knowledge by detailing [...]"}
{"text": "C++ Courses:\n\nIntroduction to Programming With C++\n-\n5days This course takes a hands-on, applied approach to the first programming language course for students studying computer science. The course begins with procedural programming in C, and then gradually introduces object-oriented programming features and the C++ language syntax that enables first-time programmers to use them.\n\nOther\nMO\nC++ Development\nTraining\n\nWe can provide C++ training in other\nMO\ncities than just\nKansas City, Missouri. We provide the same training options\nabove in these\nMO\ncities:"}
{"text": "Introduction to the PERL Programming Language\nEric Brill\nINTRODUCTION\nPERL is a very nice programming language for language processing.\nOnce you learn a small bag of tricks, you should be able to develop\nprograms very rapidly. Below is a simple PERL program:\n=======================================================\n#!/usr/local/bin/perl\n# this is a comment\nprint ``hello, world\\n'';\n=======================================================\nThe first line specifies where to find perl. If your system has perl\nelsewhere, you will have to modify this line. Comments begin with the\nsymbol #. The third line prints ``hello, world''. The last\ncharacter, \\n, returns a new line. To run this program, you would\nwrite this to some file, say foo.prl. Then you would make foo.prl\nexecutable by executing:\nchmod +x foo.prl\nTo run the program, you would just type: foo.prl\nSCALAR VARIABLES\nHere is a program that adds two numbers together and prints them.\n=======================================================\n#!/usr/local/bin/perl\n$first_num = 10;\n$sec_num = 5;\n$third_num = $first_num + $sec_num;\nprint ``The sum of '', $first_num, `` and ``, $sec_num, `` is ``,\n$third_num,''\\n'';\n=======================================================\nIn this program $first_num, $sec_num and $third_num are variables.\nYou do not have to declare variables in perl. Also, perl variables\nare weakly typed. The first character of a variable indicates its\ntype. $ means that the variable is a scalar. A scalar variable can\nbe a string, an integer or a real number. You do not have to specify\nwhich of these it is. Perl figures it out based on context. Before a\nscalar is declared, its value is 0 if in a number context or the null\nstring if in a string context. Here is another version of the ``hello\nworld'' program. (We will drop the #!/usr/local/bin/perl line from\nnow on. You still need to include it with your program).\n=======================================================\n$the_string = ``hello world'';\nprint $the_string,''\\n'';\n=======================================================\nA period is used for string concatenation. So yet another version:\n=======================================================\n$hello = ``hello'';\n$world = ``world'';\n$hello_world = $hello . `` `` . $world . ``\\n'';\nprint $hello_world;\n=======================================================\nARRAYS\nAnother variable type is the array. Arrays do not have to be\npredeclared, nor does their size have to be specified. Arrays hold\nscalar values. A variable beginning with the character @ is an array.\nNow things get a bit confusing. @x is the array x. $x is the scalar\nvariable x. These two variables are not in any way related. To\nreference the first item of the array @x, we use $x[0]. This is\nbecause the element in x[0] will be a scalar, and so the first\ncharacter indicates that this is a scalar value. For an array @x, the\nspecial variable $#x indicates the highest index used in the array.\nSo, $x[$#x] will be the last element in array @x. Here are two\nversions of a program for assigning values to an array.\n====================================================\n$x[0] = ``dog'';\n$x[1] = 34;\n===================================================\n===================================================\n# $#x is initially -1, as @x does not exist.\n$x[++$#x] = ``dog'';\n$x[++$#x] = 34;\n===================================================\nIn perl, strings and arrays are closely related. In fact, there are\ntwo functions for converting from one to the other.\nsplit takes a string and splits it into an array. split takes\ntwo arguments. The first argument is a regular expression specifying\nwhat to split on, the second argument is the string to split.\nThe code:\n=======================================================\n$avar = ``abcAAdefAAg'';\n@x = split(/AA/,$avar);\n=======================================================\nwill result in $x[0] holding ``abc'', $x[1] holding ``def'', and\n$x[2] holding ``g''. split does not alter the contents of $avar.\njoin takes two arguments. The first is the character sequence that\nwill be placed between elements of the array, and the second specifies\nthe array to be joined. The reverse operation of the split above is:\n=======================================================\n$x[0] = ``abc'';\n$x[1] = ``def'';\n$x[2] = ``g'';\n$avar = join(``AA'',@x);\n=======================================================\nCONTROL STRUCTURES\nPerl's control structures are similar to those in C, except that\nall blocks must be bracketed.\n==========================================\n$x = 0;\nwhile($x < 5) {\nprint $x,''\\n'';\n++$x;\n}\n==========================================\nfor ($count=0;$count<5;++$count) {\nprint $x,''\\n'';\n}\n==========================================\nif ($x == 2) {\nprint ``yes\\n'';\n}\nelse {\nprint ``no\\n'';\n}\n==========================================\nif ($x == 1) {\nprint ``ONE\\n'';\n}\nelsif ($x == 2){\nprint ``TWO\\n'';\n}\nelse {\nprint ``OTHER\\n'';\n}\n==========================================\nFor comparing numbers, perl uses the same symbols as C.\nFor comparing strings, eq is true if two strings are equivalent,\nand ne returns true if two strings are not equivalent.\nSo,\n=======================================================\n$x = ``yes'';\n$y = ``no'';\nif ($x eq $y) {\nprint ``1\\n'';\n}\nelse {\nprint ``2\\n'';\n}\n=======================================================\nwill print 2. And\n=======================================================\n$x = ``yes'';\n$y = ``no'';\nif ($x ne $y) {\nprint ``1\\n'';\n}\nelse {\nprint ``2\\n'';\n}\n=======================================================\nwill print 1.\nThe following program loads an array with some integers and then prints\nout the contents of the array:\n=================================================================\n$x[0] = 10;\n$x[1] = 15;\n$x[2] = 5;\nfor ($c=0;$c<=$#x;++$c) {\nprint ``$x[$c]\\n'';\n}\n=================================================================\nASSOCIATIVE ARRAYS (HASH TABLES)\nThe final variable type is the associative array. An associative\narray is a structure of key, value pairs. A variable beginning with\nthe character %x is an associative array. Here are some examples:\n$x{```dog''} returns the value (a scalar) associated with the key ``dog''.\n$x{``dog''} = ``cat''; sets the value associated with ``dog'' to be\n``cat''.\nNote that associative arrays use curly brackets ($x{2}), while arrays\nuse square brackets ($x[2]). In other words, $x{2} returns the value\nassociated with the key 2 in the associative array %x, whereas $x[2]\nreturns the third element (because index starts at 0) of the array @x.\nBefore a key is inserted into an associative array, the value\nassociated with that key is 0 or the empty string. Here's a program\nto count the number of even numbers in [0..10]:\n=======================================================\nfor ($count=0;$count<=10;++$count) {\nif ($count % 2 == 0) # if count mod 2 is 0, then even\n{\n$thearray{``EVEN''}++;\n# this is shorthand for\n# $thearray{``EVEN''} = $thearray{``EVEN''} +1;\n}\n}\nprint ``There were ``,$thearray{``EVEN''}, `` even numbers\\n'';\n=======================================================\nIf we want to print out all of the keys and values in an associative\narray, we do the following:\n=======================================================\nwhile (($key,$val) = each %thearray) {\nprint $key,'' ``,$val,''\\n'';\n}\n=======================================================\nNote that we use % in front of thearray here because we are talking\nabout the entire associative array, while we use $ for\n$thearray{``EVEN''} because we are talking about a specific value\nin the associative array.\nIf your program takes arguments, you can refer to those arguments much\nas you do in C. $ARGV[0] refers to the first argument, not the name\nof the program as in C. $ARGV[1] refers to the second argument, and\nso on. Here's a simple program that takes two files as arguments and\ntells which file contains more lines.\n=======================================================\nopen(FILE1,$ARGV[0]);\nopen(FILE2,$ARGV[1]);\nwhile() {\n$num_lines_1++;\n}\nclose(FILE1);\nwhile() {\n$num_lines_2++;\n}\nclose(FILE2);\nif ($num_lines_1 > $num_lines_2) {\nprint ``The first file contained more lines\\n'';\n}\nelse {\nprint ``The second file contained more lines\\n'';\n}\n=======================================================\nThe line while() reads lines from FILE1 until it reaches the\nend of file. When a line is read, it is stored in the special\nvariable $_. This is a program to print all lines from a file.\n=======================================================\nopen(FILE1,$ARGV[0]);\nwhile(){\nprint $_;\n}\nclose(FILE1);\n=======================================================\nTo read from stdin, we do not need to call open:\n=======================================================\nwhile() {\nprint $_;\n}\n=======================================================\nREGULAR EXPRESSIONS\n\\s matches a space or tab\n^ matches the start of a string\n$ matches the end of a string\na matches the letter a\na+ matches 1 or more a's\na* matches 0 or more a's\n(ab)+ matches 1 or more ab's\n[^abc] matches a character that is not a or b or c\n[a-z] matches any lower case letter\n. matches any character\nTo test whether a string in $x contains the string ``abc'', we can\nuse:\nif ($x =~ /abc/) { . . . }\nTo test whether a string begins with ``abc'',\nif ($x =~ /^abc/) { . . . }\nTo test whether a string begins with a capital letter:\nif ($x =~ /^[A-Z]/) { . . . }\nTo test whether a string does not begin with a lower case letter:\nif ($x =~ /^[^a-z]/) { . . . }\nIn the above example, the first ^ matches the beginning of the string,\nwhile the ^ within the square brackets means ``not''.\nIn addition to using regular expressions for testing strings, we can\nalso use them to change strings. To do this, we use a command of the\nform:\ns/FROM/TO/options\nwhere FROM is the matching regular expression and TO is what to change\nthis to. options can either be blank, meaning to only do this to the\nfirst match of FROM in the string, or it can be g, meaning do it\nglobally.\nTo change all a's to b's in the string in variable $x:\n$x =~ s/a/b/g;\nTo change the first a to b:\n$x =~ s/a/b/;\nTo change all strings of consecutive a's into one a:\n$x =~ s/a*/a/g;\nTo remove all strings of consecutive a's:\n$x =~ s/a*//g;\nTo remove blanks from the start of a string:\n$x =~ s/\\s+//g;\nSAMPLE PROGRAMS\nAn infinite loop to take a line of input with two numbers separated by\na space and return their sum:\n======================================================\nwhile() {\n$_ =~ s/^\\s+//; # removes spaces at start of line,\n# since we will split on space\n@nums = split(/\\s+/,$_); # we can now easily access the two\n# numbers\n$answer = $nums[0] + $nums[1];\nprint ``THE ANSWER IS: ``,$answer,''\\n'';\n}\n======================================================\nA messier way to do this:\n=====================================================\nwhile() {\n$_ =~ s/^\\s+//; # removes spaces at start of line,\n# since we will split on space\n$num1 = $_;\n$num2 = $_; # makes fresh copies of the input line\n$num1 =~ s/\\s+[0-9]$//;\n$num2 =~ s/^[0-9]+\\s+//;\n$answer = $num1 + $num2;\nprint ``THE ANSWER IS: ``,$answer,''\\n'';\n}\n=====================================================\nGiven a text, return a list of words and word;++$count) {\n$word_count{$words_in_line[$count]}++;\n}\n}\nwhile(($key,$val) = each %word_count) {\nprint ``$key $val\\n'';\n}\n=====================================================\nGiven a text, return a list of word pairs and their-1;++$count) {\n$word_count{$words_in_line[$count] . `` ``\n. $words_in_line[$count+1]}++;\n}\n}\nwhile(($key,$val) = each %word_count) {\nprint ``$key $val\\n'';\n}\n=====================================================\nA program to calculate the frequency of three-letter endings for\nwords in a text:\n====================================================# we split on nothing, which gives\n# an array of characters.\nif ($#chars > 1) {\n# make sure there are at least three chars\n$ending{$chars[$#chars-2] . `` `` .\n$chars[$#chars-1] . `` `` .\n$chars[$#chars]}++;\n}\n}\n}\nwhile (($key,$val) = each %ending) {\nprint ``$key $val\\n'';\n}\n====================================================\nA program that takes two files and outputs all lines in\nthe first file where the same line occurs in the same position\nin the second program:\n=====================================================\nopen(FILE1,$ARGV[0]);\nopen(FILE2,$ARGV[1]);\nwhile() {\n$line_from_2 = ;\nif ($_ eq $line_from_2) {\nprint $_;\n}\n}\nclose(FILE1);\nclose(FILE2);\n======================================================\nGiven text labelled with parts of speech, such as\nThe/det boy/noun ate/verb . . .\nstrip off\\/.*$//;\n# this says given a string that starts with\n# a slash and then contains any character sequence\n# until the end of the string, convert it\n# to the null string. Note that we have to\n# backslash the / character in the regular expression.\nprint $word,'' ``;\n}\nprint ``\\n'';\n}\n======================================================\nGiven the same input, this program strips off the words and\nreturns^.*\\///;\nprint $word,'' ``;\n}\nprint ``\\n'';\n}\n======================================================\nReturn the length of the longest string in a text:\n=====================================================if ($#chars > $maxlength) {\n$maxlength = $#chars;\n}\n}\n}\n$maxlength++;\n# must add one, since the array index starts with 0\nprint $maxlength,''\\n'';\n===================================================\nPrint out a random number from 1 to 10:\n===================================================\nsrand; # sets the random number generator seed\n$num = rand(10);\n$num = int($num);\nprint ``$num\\n'';\n===================================================\nCommon Mistakes: The following two mistakes probably account for about\nhalf the debugging time of students in the class. Looking out for\nthese errors could save you a great deal of time.\n(1) Make sure every variable starts with the appropriate type symbol.\nFor instance, check that you haven't typed something like:\nmyvar = 5; (instead of $myvar = 5)\n(2) Make sure you have spelled all variables correctly.\n$myvar = 5;\n$myvaar++; # spelling error\nIn general, try to write a number of small programs instead of one\nmonolithic program to get the job done. And pass the results using\nUnix pipes. This will facilitate debugging and code reusability.\n===================================================\nIf in doubt, look at the manual pages for perl. In addition to\nhard-copy books, there are a number of on-line perl manuals.\nEverything discussed so far works for both perl4 and perl5. Perl5 has\nsome additional very nice features, including pointers and hash tables\nof hash tables. You may want to explore these features. However,\nthey can easily be mimicked in perl4. If you want to hash based on a\nkey of two words, in perl5 you can say:\n$hashtable{$word1}{$word2} = $value;\nIn perl4, you can still do this by:\n$hashtable{$word1 . `` `` . $word2} = $value;\nHowever, finding all word pairs in the hash table that have ``the'' as\nthe first word would be much easier in perl5:\nwhile(($key,$val) = each %{$hashtable{``the''}}) {\nprint ``the'' . `` `` . $key . ``\\n''; }\nIn perl4, you could do:\nwhile (($key,$val) = each %hashtable) {\n@temp = split(/\\s+/,$key);\nif ($temp[0] eq ``the'') {\nprint ``$key\\n'';\n}\n}\n============================================================================"}
{"text": "C is ubiquitous and can work on any platform\n\u2022 C is portable and compiles with minimum changes\n\u2022 C is simple, versatile and fast to work with.\n\u2022 All main operating systems like Windows, UNIX and Linux are written in C. So if you need to create your own OS you should have knowledge of C.\n\u2022 C is at the base of all popular programming languages. So if you want to learn any programming language you need to have knowledge about C.\n\nProgramming in C is the primary coding language for any software development, asp, jsp and any Java based application development. It includes lots of basic features which can be helpful for any programming language.\n\nIf anybody is thinking of becoming a programmer, the first requirement is to get basic knowledge about C programming. That's why it's so popular."}
{"text": "Programming in Python 3: A Complete Introduction to the Python Language\n\nAuthor: Mark Summerfield\n\nISBN: 978-0137129294\n\nWell written, concise, complete.\n\nReview\n\nThe change from Python 2.x to 3.x is a very\nimportant one but this change on itself would\nwarrent quite a bit less than this tomes\nhefty 525 pages.This book, however, aims to\nbe \"a complete introduction to the Python language\"\nand the author has done an excellent job: He introduces\nPython in a clear and concise style, covering\nall essentials like datatypes and control\nstructures and moves on to guide the reader\ninto the wild and wonderful of Python, a world\ncolored by classes, list comprehensions and\ngenerators.\nPython comes \"batteries included\" and although\nthis book is not a reference guide to all\navailable Python modules, major focus areas from\nfile handling through threading and networking\nto regular expressions and user interfaces are\ncovered very well."}
{"text": "Advanced programming courses focus on assembler language and object-oriented programming in C++, as well as the application of programming concepts at the systems level; advanced database courses deal with database concepts and design."}
{"text": "Chapter 9: Memory Management\n\nChapter 9\n\nMemory Management\n\nnext on our plate is memory management using Objective-C and Cocoa (yum!). Memory management is a part of a more general problem in programming called resource management. Every computer system has finite resources for your program to use. These include memory, open files, network connections, and so on. If you use a resource, such as by opening a file, you need to clean up after yourself (in this case, by closing the file). If you keep on opening files but never close them, you'll eventually run out of file capacity. Think about your public library. If everyone borrowed books but never returned them, eventually the library would close because it would have no more books, and everybody would be sad. Nobody wants that."}
{"text": "Balanced Introduction to Computer Science Reed is an Associate Professor and Chair of the Department of Computer Science at Creighton University in Omaha, Nebraska. For Introduction to Computing and the Web courses in departments of Math and Computer Science.This thoughtfully written text uses the Internet as a central theme, studying its history, technology, and current use. Experimental problems use Web-based tools, enabling students to learn programming fundamentals by developing their own interactive Web pages with HTML and JavaScript. Integratin... MOREg breadth-based and depth-based chapters, Reed covers a broad range of topics balanced with programming depth in a hands-on, tutorial style.Supplements Include: Power Point Lecture Slides Figures Labs SolutionsBridge Page:  Website:  This thoughtfully written volume uses the Internet as a central theme, studying its history, technology, and current use. Experimental problems use Web-based tools, enabling readers to learn programming fundamentals by developing their own interactive Web pages with HTML and JavaScript. Covers a broad range of topics balanced with programming depth in a hands-on, tutorial style. Uses revised HTML and JavaScript code throughout (updated to match current XHTML 1.0 and ECMA-262 standards, respectively). Introduces event-driven pages earlier. Updates statistics on the Internet/Web and computer specifications. Provides new material throughout on recent developments and new technologies. Appendices provide a useful reference for programmers."}
{"text": "Learning Python on the Mac: Modules\n\nOrganize code into reusable entities\n\nby Edward Marczak\n\nIntroduction\n\nPython has an incredible amount to offer, and its concept of modules is near the top of the list of power. Modules bring a lot of functionality to the language, and offer the author the ability to reuse code in as many different applications as they wish. Since the start of our journey down the path of Python, we've covered basic data types, flow control and functions. Modules will be one of the last very high-level concepts we cover for a bit, but it's an important one. Like most Mac in the Shell columns, this one, too, is best read with a Terminal.app window open and your favorite text editor up and running. So, clear your brain, and let's dive in.\n\nWhat is a Module?\n\nModules, really, are just files. Like many things in Python, some very powerful features come with little fanfare, and they 'just work.' By placing functions, variables and code into a standalone file, you create an organized, self-contained, reusable package known as a namespace. In the past two months, you've seen the import keyword, and just had to trust me that it did something useful.\n\nIn actuality, import reaches out into the file system, locates, reads and runs an external module. The imported file becomes an object in the importing script, and all definitions in the file become attributes of that object. For illustrative purposes, let's imagine this: top-level (\"main\") file a.py imports b.py. b.py also imports c.py and also imports some modules from the standard Python library of modules. This is shown in Figure 1.\n\nFigure 1 - Python high-level program architecture.\n\nIn essence, the introductory Mac in the Shell articles introducing Python were incredibly simplified; it's rare that a Python program won't have the need to import a module. While we'll be concentrating on importing modules written in Python, do note that Python can actually import a variety of different module types.\n\nHow does python know where to find modules? The python interpreter walks a pre-defined set of locations to know where to look. After looking in the same directory as the importing program, an environment variable named PYTHONPATH is consulted. PYTHONPATH is a simple list of directories in which to search for modules. It is constructed just like the PYTHONDOCS variable, covered in the second article introducing Python (December 2008, issue 24.12). After searching PYTHONPATH, python will search among the standard library (location defined at compile time). Finally, python includes any paths listed in .pth files (a slightly advanced topic that we won't be covering this month).\n\nMost people don't ever have to create a PYTHONPATH variable, as the default locations serve most needs. However, if you're sharing development among a few people and need to have a common location for specific modules, you'll need to point PYTHONPATH to your custom location. Like the PATH variable, PYTHONPATH is simply a colon-separated list of paths, searched in order (from left to right). For example, in the bash shell:\n\nexport PYTHONPATH=\"/usr/share/python/\"\n\nWith this path set, python will additionally search for modules in the /usr/share/python directory.\n\nAll of this comes together for the python interpreter as sys.path. From a running program, or, via the interactive interpreter, import the built-in sys module and print sys.path. Here's an abridged listing:\n\nNote that the path starts with an empty entry, which is how the program's directory is searched.\n\nLet's start with a simple example to demonstrate modules.\n\nUsing Modules\n\nSticking with the a.py, b.py and c.py concept, let's define them for real. Follow along with these short listings.\n\nListing 1 - a.py\n\n#!/usr/bin/env python\nimport b\nif b.IsInAdmin('root'):\nprint \"root is in the admin group\"\nelse:\nprint \"root is not in the admin group\"\n\nAs stated earlier, the import statement reads a module file and executes it. So, the line import b reads the file b.py and executes it like any other Python program. The if statement tests the return value from an object imported from b. We can also say that the object is in b's namespace. Listing 2 reveals what b.py is doing.\n\nc.py imports plistlib-something you don't have to define, as it's part of the standard modules shipped with OS X. plistlib allows the author an easy manner of reading and writing OS X's plist files (ASCII only, currently). Here, we'll directly grab the admin.plist file and return the contents from the users key.\n\nSave all three of these files in the same directory, mark a.py executable (chmod 770 a.py), and run it via sudo (it needs root privileges as the admin.plist file is protected). The output looks simply like this:\n\n$ sudo ./a.py\nroot is in the admin group\n\nOverall, that was fairly little work. Of course, in a real-world scenario, you wouldn't need to break it down as far as we did here. However, GetAdminGroup() might make a really nice addition to a larger OS X-specific library.\n\nImports and Namespaces\n\nWe've spoken a little about the concept of namespaces without formally defining it. A namespace is a mapping from names to objects. The important thing to realize is that there is no relation between names in different namespaces. Two modules can define x, and there will be no conflict. Internally to python, namespaces are implemented as dictionaries (remember those? Covered briefly in our introduction - November 2008, issue 24.11). To see this in action, run the interactive python shell (by typing python at the shell prompt) in the same directory as the modules we've been working on. A module's dictionary is hidden away in the __dict__ attribute. It responds to all standard dictionary messages. For example, to list the contents of the object, import our c.py module:\n\nThis is the same list that you get already with the dir() function, covered in earlier columns. However, it does lead to some fairly (advanced) trickery and techniques.\n\nThe point of this is that an import statement will import objects into their own namespace. This name of a given namespace is derived from the filename. This means that module filenames must conform to good variable names. You can certainly create a module named while.py, but since \"while\" is also a built-in keyword, you won't be able to import it. Our c.py module has been imported into a namespace of 'c'.\n\nThis also means that you should be careful to name your module something useful, as you'll be referring to it in code... or will you? Well, that depends. It depends somewhat on how you import a module, and somewhat on style. I'll say it now: my personal preference is that you always import as we've been showing-by using the import keyword-and referencing the namespace in code. Some people consider this bulky, though. Look at our plistlib usage:\n\nplistlib.readPlist()\n\nInstead of simply calling readPlist, we have to qualify it. This prevents it from conflicting with any other function (object, really) of that name. Importing plistlib created a namespace for that module. However, there is a way to import into the current namespace, and that relies on the from keyword variant.\n\nTo import an entire module, or just a select part of it into the current namespace, you tell python, \"from [module] import [what]\". The \"what\" can reference a specific object in the module, or use a wildcard. To import all of c.py directly into the current namespace, b.py can issue:\n\nfrom c.py import *\n\nb.py could then make the following change:\n\nadmins = GetAdminGroup();\n\nSee? No need to qualify the function call. Also, be aware that a subset of a module can be imported by specifying it explicitly:\n\nfrom plistlib import readPlist\n\nWhile all of this may seem to lessen the burden on the python interpreter, it doesn't in reality. The problem with this is much more from a maintenance-for-the-author perspective. This is especially true when multiple people are working on a project, each by contributing a module. As you may guess, conflicting object names simply get crushed, and the last name defined 'wins.' You, the author, lose, of course. Additionally, since python reads the entire module file in any case, or, has a pre-compiled byte-code version, there are no real performance/time savings by importing a single object. You may change a module that is imported in this manner and pollute the namespace of the importing application without realizing it. Using a standard import, there will never be conflicting objects.\n\nTo Be Executed\n\nI mentioned above that when a module is imported, it is run like any other Python application. This is true; it's how objects get created, just like in the top-level file. We can prove this, too. Consider the following code:\n\nNot surprising if you've been following along! The same goes for any assignment statements in a module. Of course, functions are read and turned into an object, but the contents of which are not executed until explicitly called. Sometimes, however, a file has value as both a top-level file and as something to be imported. As a top-level file, we want it to execute, but as an imported file, we just want it imported, ready at our beck and call. There's a Python-ism that addresses this. A built-in variable, __name__, is assigned in each module at runtime. When the top-level application is run, __name__ is \"__main__\". Instead of just defining statements at the top indent-level, every statement in the top-level file is put into a function (or class) definition. The only top level statement tests __name__, and call your main function as appropriate. For example, our a.py program would be altered like this:\n\n#!/usr/bin/env python\nimport b\ndef main():\nif b.IsInAdmin('root'):\nprint \"root is in the admin group\"\nelse:\nprint \"root is not in the admin group\"\nif __name__ == '__main__':\nmain()\n\nThis way, if we had other useful functions in a.py, it could be run directly, or imported as a module.\n\nI will be using this idiom going forward.\n\nFin\n\nFor this month, that's enough. Modules are such a core concept in Python, it's worth it to make sure it's understood before moving on. Next month, we'll talk a little more about style, and then cover classes.\n\nAs an aside, I met many people at Macworld who were really exited by this column turning its attention to Python. I'd love to hear ideas from all readers, so, letters@mactech.com and emarczak@mactech.com are ready and waiting for mail.\n\nMedia of the month: \"Synthetic Worlds: The Business and Culture of Online Games,\" by Edward Castronova. Interesting work that covers, mainly, the economy of virtual worlds (ok, MMOs). The book is a touch dated at this point, but overall, it should make the reader think about how much more our technology is touching and influencing our 'non-technological' world.\n\nSee you next month!\n\nEd Marczak is the Executive Editor of MacTech Magazine. He lives in New York with his wife, two daughters and various pets. He has been involved with technology since Atari sucked him in, and has followed Apple since the Apple I days. He spends his days on the Mac team at Google, and free time with his family and/or playing music. Ed is the author of the Apple Training Series book, \"Advanced System Administration v10.5,\" and has written for MacTech since 2004 Th"}
{"text": "Chapter 2. The Grammar of JavaScript\n\nLearning a programming language is a lot like learning any new language: There are words\nto learn, punctuation to understand, and a new set of rules to master. And just as you need\nto learn the grammar of French to speak French, you must become familiar with the grammar of\nJavaScript to program JavaScript. This chapter covers the concepts that all JavaScript\nprograms rely on.\n\nIf you've had any experience with JavaScript programming, many of these concepts may be\nold hat, so you might just skim this chapter. But if you're new to JavaScript, or you're\nstill not sure about the fundamentals, this chapter introduces you to basic (but crucial)\ntopics."}
{"text": "Chapter 6. Creating Graphical User Interfaces\n\nAlthough AppKit contains a lot of classes, for a variety of purposes, a significant proportion of the framework is responsible for creating graphical user interfaces. This chapter will explore the concepts behind Cocoa GUIs and some of the classes used to create them."}
{"text": "Chapter 6. Creating Graphical User Interfaces\n\nAlthough AppKit contains a lot of classes, for a variety of purposes, a significant proportion of the framework is responsible for creating graphical user interfaces. This chapter will explore the concepts behind Cocoa GUIs and some of the classes used to create them."}
{"text": "i have programmed/scripted in basic, assembly, pascal, visual basic, html/css/javascript, sql & vba in the past but not at any particular advanced level) but looking for any recommendations on the best book & freely available compiler/ide to learn c++ (not visual c++)?\n\nta\n\nic1male\n\nJan 31 2012, 00:08\n\nI've dabbled Visual C# and Objective C but not C++ so I'm afraid I can't offer any help. Why do you want to do C++ then?\n\nvaroistus\n\nJan 31 2012, 23:17\n\nThere's the GNU C++ compiler which I haven't really used - but it's free. I don't think it has an editor though. And Microsoft has the free Visual C++ 2010 Express, which is an IDE and compiler in one.\n\nC++ is a proper programming language, not like that fancy-pants C# which does all the work for you.\n\n#include <iostream>\n\nusing namespace std;\n\nint main() { cout << \"Hello world\" << endl; }\n\n...now I'm just showing off...\n\nNiallAti\n\nFeb 1 2012, 04:40Corius\n\nFeb 1 2012, 15:36\n\nVaroistus... You have just bought back memories of c+ + in a level computing... I'm scratching my head to remember what program we used though.\n\nNever misplace a semicolon... That was something learned early...\n\nI don't miss working with c+ + tbh.\n\nvaroistus\n\nFeb 1 2012, 23:17\n\nQUOTE(NiallAti @ Feb 1 2012, 04:40)You can do it with the .h form, but I think it's 'more c++'-ish like that. There's probably a technical reason for it but I don't know what it is. And you need the .h form for most of the standard library header files - only a few can go without the extension.\n\n(And I've just realised I missed 'return 0;' from my hello world program, before anyone pulls me up on it.)"}
{"text": "Think PythonThink Python is an introduction to Python programming for students with no programming experience. It starts with the most basic concepts of programming, and is carefully designed to define all terms when they are first used and to develop each new concept in a logical progression. Larger pieces, like recursion and object-oriented programming are divided into a sequence of smaller steps and introduced over the course of several chapters.\n\nAuthor Biography"}
{"text": "Introduces the concepts behind Core Data, the object persistence framework used to manipulate and store data in iOS and OS X applications.\n\nSimon Allardice\n\n4h 29"}
{"text": "Lesson goal: Using programming as a calculator\n\nProgramming languages all have full-blown calculator capabilities built in. The languages understand all of the basic operations of math, including\nmultiplication, division, addition and subtraction. They also understand grouping, exponents, and the order of operations.\n\nYou can have the computer display the results of a calculation by simply putting some expression to calculate inside of a print statement. As an example, you could\ntype print(2+2), and the computer will display a 4. In the case of order of operations, what is the answer to 2+4*3? Is it 14 or 18? Type print(2+4*3) into\nthe code box to use the computer to figure it out. Here are the basic operations the computer knows about:\n\n*/+-^().%\n\nMove the mouse over a dotted box for more information.\n\nNow you try. Use the print statement and have the computer do some calculations."}
{"text": "Programmer's Guide to NCurses\n\nBuy PDF\n\nOur price:\n\n$35.99\n\nnCurses is a programming library with an API that allows programmers to write text user interfaces in a terminal-independent manner; it's currently the most popular way to program a console in the Unix environment\n\nThe book serves as a tutorial that walks C language programmers from the very basics of ncurses to the more advanced functions, such as manipulating windows, reading the keyboard, color text, using the mouse, and other more advanced possibilities\n\nThe book is also a reference that contains more than 180 standard ncurses library functions and constants and explains how each of these options is optimally used\n\nVarious notes describe the function behavior, while sample code and programs round out the reference"}
{"text": "Need help with Information Systems assignment?\n\nGet customized homework help now!\n\nScript Languages\n\nProgramming is usually referred to heavy-duty coding (i.e. fulltime programmer) in a particular system language like C/C++. Scripting code is referred as stitching or interpreter language. It can \"glue\" all codes between various environments, tools and languages. This view is no longer true in today programming environment. Scripting can be a full-blown programming code. One can say that the difference between scripting code and \"source code\" is that source code needs to be compiled into executable code before execution while scripting code can be called and executed directly. Scripting languages are more productive while conventional languages arc faster. In general, scripting languages are not designed to create applications from scratch.\n\nDuring the internet explosion in 1990-1995, there were a slew of newly-introduced and competing scripting languages (Linux, Python, PHP, Java, Python, Ruby, etc..) during this time. Above graph is a rough introduction time frame of various scripting languages and the major version releases. Unix and Awk development happened the earliest in 1970's. The first release of Tel and Tk started in 1988 ad 1990, respectively; and the major release of Tel/Tk version 8.1 was in 1999. The first release of Perl code started in 1987 and the next major release of Perl Version 5.0 in 1995. Ruby started in Japan in 1993 and the major version release in the US was in 2001. Python starts in 1991 in Europe and the major version release was in 1995.\n\nScripting languages have become incredibly popular. Everyone has his/her own favorite scripting language. A single scripting language to make everyone happy is out of the question. There are constant \"language wars\" of words between the competing languages. To be the king of the scripting language, a scripting language is not only to be technically \"superior\" but it must survive the hype, gain the momentum from the programmer community mass, and most of all satisfy the economics of a programming language. In practice, few of us have freedom to choose which languages to work on because most of us are subjected to our own group working environment.\n\nTo be sufficient in programming in the EDA chip design environment requires the knowledge of several scripting languages like Unix, Tel, Perl, Python, Ruby and etc."}
{"text": "Summary:Tested software using ad-hoc and automating testing methods. Summary:Created Chess Game, along with other applications. Responsibilities:\u2022 Created a multi-threaded chess game with AI using C#, ASP.NET, and Win Forms. Program viewable at  Created a paint program using the C++, WIN32 API and GDI.\u2022 Created a demo graphics program using C++, OpenGL and the GLUT toolkit.\u2022 Created a picture organizer using Java, J2SE and Swing.\u2022 Created macro in VBScript to print books in Microsoft Word.\u2022 Created a program in Visual Basic to help people learn to sing. Skills Used:\u2022 C#, ASP.NET, C++, Win Forms, WIN32 API, GDI, OpenGL, Java, Swing, VBScript Environment:\u2022 Windows ME/ XP, Microsoft Word, Visual Studios"}
{"text": "Category list\n\nTerminology, Special Characters, and Formatting\n\nChapter 5. Programming Structures\n\nStatements, Expressions, and Operators\n\nSimple Objects in Statements\n\nConditional and Loop Statements\n\nApplied Expression Writing\n\nSummary\n\nI suspect that the overview of programming from the previous chapter has made you\neager\nto start scripting. (I hope so anyway.) The last chapter\nbriefly\ntouched on practically every concept from ActionScript. In this chapter, we'll start by exploring the structural elements necessary to write any script. Just as a house is built from the ground up by first laying down the foundation and then the framework, Flash scripts require a design and a framework. We're about to explore the structural elements of ActionScript that hold your scripts together.\n\nThis chapter covers:\n\nHow to write expressions and statements.\n\nHow to use operators in expressions.\n\nHow to use conditions (such as\nif\n) and loop structures.\n\nHow to practice using this knowledge.\n\nStatements, Expressions, and Operators\n\nTo quickly review, statements are complete \"sentences of code\" that usually do something. Expressions are more like \"phrases\" because they don't\ndo\nanything by\nthemselves\n, but rather are used within statements. Expressions also result in a value when they're evaluated. For example, if you were to evaluate the expression \"slow as molasses,\" it would have an actual value (perhaps 1 inch per\nhour\n).\n\nIt works the same in Flash\u2014the expression\nprice/2\nresults in a value. Finally, operators, as part of an expression, perform an operation (often math) on one or more operands. For example, the \"plus\" operator (\n+\n)\nperforms\nthe addition operation on two\nnumbers\n(operands). The expression\n2+2\nresults in a value (\n4\n). Finally, the statement\nquad=2+2\nactually\ndoes\nsomething (namely, assigning the value of\n4\nto the variable\nquad\n). Now that we know the terms, we can explore each concept in detail.\n\nWriting Expressions\n\nThe key to writing expressions is to always remember that you're only writing part of a larger statement. By themselves, expressions don't\ndo\nanything; rather, expressions result in a value because they are evaluated. That is, expressions are evaluated and become their result. An expression from real life might be, \"The shirt's price minus the discount.\" If you said, \"My credit card's balance is now increased by the cost of the shirt (minus its discount rate),\" it becomes a statement that does something. After you can write expressions (segments), you'll have no trouble writing statements.\n\nLet's use the discounted shirt price for practice. Imagine that you previously assigned the variable\nprice\nto the cost of the shirt. It doesn't matter what the\nprice\nwas\u2014but let's just say $25 (that is,\nprice=25\n). Also, consider that the discount rate is 10 percent. Interestingly, I'll bet everyone who's ever gone shopping already\nknows\nthe shirt will cost $22.50, which just goes to show that you can write expressions! You just have to take one step at a time. Say the variable containing the discount rate is called \"discount\" (or\ndiscount=0.1\n). The final expression looks like this:\n\nprice-(price*discount)\n\nYou can think of this as a mathematical formula. No matter what the values of\nprice\nand\ndiscount\nare, the formula works. It always results in the discounted price.\n\nPrecedence\n\nWe'll get to statements later in this chapter (in the section, \"Types of Statements\"). For now, however, there's more to learn about expressions. Notice in the earlier expression about price, I placed parentheses around\nprice*discount\n. In the version with no parentheses\u2014\nprice-price*discount\n\u2014 you might think that Flash will execute the first two elements (\nprice-price\n) first\u2014the result of that portion would be zero. Then zero multiplied by\ndiscount\nwould always equal zero. (What a sale\u2026 \"All Shirts $0.\") So,\nputting\nparentheses around the expression\nprice*discount\ntells\nFlash to execute this expression first. It turns out this wasn't necessary. The expression\nprice-price*discount\nresults in the same value as\nprice-(price*discount)\n. That's because the precedence for multiplication is greater than for subtraction; multiplication is executed first, and then subtraction.\n\nOf course, if you want to force Flash to execute the subtraction operation first, you could rewrite the expression as\n(price-price)*discount\n.\nPersonally\n, instead of\nmemorizing\nthe precedence for each operator (also called\norder of operation\n), any time there's a question as to how Flash will interpret my expression, I simply place parentheses to make the expression not only clear when reading, but crystal clear to Flash despite the fact the extra parentheses are unnecessary. Flash always executes the expressions in the most-nested parentheses first. Look up \"Operator Precedence and Associativity\" in Flash's ActionScript Reference (from the Help menu).\n\nInterestingly, operators each have an associativity of either \"\nright-to-left\n\" or \"left-to-right,\" which determines the order of execution when two of the same operators appear and therefore have the same precedence. For example, because addition has\nleft-to-right\nassociativity,\n2+3+4\nis the same as\n(2+3)+4\n. Although this example doesn't\ndemonstrate\na different result, remember that parentheses can override associativity (as in\n2+(3+4)\n). Associativity is not usually a critical issue, but it's covered in Flash's ActionScript Reference along with all the operators and their precedence.\n\nBalancing Parentheses\n\nParentheses in an expression must balance. That is, for every\nopen\nparenthesis, you must have a closing parenthesis. This holds true for the entire statement\u2014but that doesn't mean you can't create errors within an expression. While you are in Expert Mode, you need to ensure that the parentheses balance. One way you can do that is to read your scripts (from left to right) and count up for every opening parenthesis and count down for every closing parenthesis. After reading the entire statement, your count should be at zero, proving everything\nbalances\n. While you are in Normal Mode, any errors in balance will be highlighted in red, and Flash will provide limited information about the error in the parameters area (see Figure 5.1).\n\nFigure 5.1. The Actions panel will draw your attention to missing parentheses while you are in Normal Mode.\n\nIt is important to understand that just because you balance your parentheses, there's no guarantee that your code will work as expected. For example, the expression\n(price-price)*discount\nbalances just as well as\nprice-(price*discount)\n, but with entirely different results. So, balancing parentheses is just a technical requirement (like spell-checking a document)\u2014making your code logical or work for your purpose is still necessary. Here's a great tip that I personally guarantee will help you: Any time you type an opening parenthesis, immediately type a closing parenthesis and then\nbackspace\nto complete the parenthetical portion of the expression. This way you're sure to balance all parentheses. Finally, everything just discussed about parentheses also applies to quotation marks (\n\"\nor\n'\n), brackets (\n[\nand\n]\n), and curly braces (\n{\nand\n}\n\u2014also called\ncurly brackets\n).\n\nUsing Operators in Expressions\n\nInstead of listing every operator here, we'll first look at how operators work, and then explore the ones that\noperate\nwithin expressions (operators categorized as\narithmetic\n,\ncomparison\n, and\nlogical\n). Finally, after the upcoming section on statements, we can look at operators that perform assignments.\n\nI've said several times that operators operate on one or more operands. To be technical, when an operator operates on a single operand, it is called\nunary\n(like \"uni-cycle\"). When operating on two operands, it's called a\nbinary\noperator. Finally, one operator (\n?:\n) is\nconsidered\nternary\nbecause it operates on three operands. (Because there's just one such operator, \"ternary\" may only come up on a quiz show for\ngeeks\n.) What makes this important is that\nsome\noperators can act as either a unary operator or a binary operator. One example is\n-\n, which is both a \"unary minus\" and a \"subtract\" operator. When used on a single operand (as with\n-direction\nor within a statement such as\noppositeDirection = -direction\n), it simply results in an inverse (or minus version) of its operand. But as a binary operator (as in\nprice-couponValue\n), the entire expression is converted into the result of subtracting the second operand from the first.\n\nThe fact is that operators operate differently depending on the context. Even though it's pretty easy to see and understand how operators act differently based on the number of operands because you can quickly see how many operands are present, some operators also perform differently based on the data type of their operands. That is, the same operator can perform a different operation on different data types. Recall from Chapter 4, \"Basic Programming in Flash,\" that the value of a variable can be one of several data types. Let's just consider the Number and String data types (probably the most common and familiar data types). The\n+\noperator is either an addition operator or a concatenate (meaning to connect) operator, depending on its operands. If one or both operands are strings,\n+\nis a concatenate operator, as in:\n\nfirst=\"Phillip\";\nlast=\"Kerman\";\nwholeName=first+last;\n\nThe expression\nfirst+last\nresults in\n\"PhillipKerman\"\n.\n\nIf both the operands are numbers, the\n+\noperator performs the addition operation, as in:\n\nThis issue can become quite frustrating if you think a variable (say\npreviousScore\n) contains a number, but it actually contains the string (\"say\n10\n\"). The expression\npreviousScore+2\nwill result in the\nstring\n\"102\" because\n+\nacts as the concatenate operator when one or more of the operands are strings. This is likely to happen in Flash when you use a Dynamic (or Input) Text field to display the value of a variable. Even though the field might read\n10\n,it's actually the string\n\"10\"\nbecause the data type of fields is string. By the way, in Chapter 8, \"Functions,\" you'll learn how to treat a string like a number by using the\nNumber()\nfunction. Also, later in this chapter, you'll see how certain operators will actually change the data type of their operands in the section, \"Using Assignment Operators to Create Statements.\"\n\nThere's no need to get freaked out about operators. Just remember that operators often behave differently depending on their position in an expression and on their operands' data types. In practice, you'll usually select the correct operator without fail. Just learn to recognize the symptoms of such problems. For example, if the numbers you were expecting to grow end up getting longer (such as\n10\nturning into\n101\n) or if your strings are appearing as\nNaN\n(meaning \"not a number\"), you're likely mixing data types or using the operators incorrectly.\n\nFinally, even though an operator operates only on one or two operands, the operand could actually be an expression (really, the result of an expression). This might have been particularly obvious when we discussed parentheses earlier. The example\nprice-(price*discount)\nhas the minus operator operating on the result of an expression (the multiplication part in the parentheses). Figure 5.2 shows how an operand can actually be the result of an expression.\n\nFigure 5.2. An operand can be the result of an expression.\n\nArithmetic Operators\n\nLet's look at the operators used to perform simple arithmetic. These won't change their operands and (when used on number operands) will have expected results.\n\nAdd numbers (\n+\n) results in the sum of two number operands.\n\nMultiply numbers (\n*\n) results in the product of two number operands.\n\nSubtract numbers (\n-\n). As a binary operator (that is, with two operands), it results in the difference by subtracting the second number from the first. It can also be used as a unary operator (on one operand) by placing it before the operand (as in\n-myNum\n), in which case it will result in the inverse of the operand. If it's positive, the result is negative; if it's negative, the result is positive.\n\nDivide numbers (\n/\n) results in the\nquotient\nof two numbers. That is, it divides the first number by the second.\n\nModulo (\n%\n) results in the remainder when you divide the first number by the second. For example, 20%7 results in 6 because after you divide 7 into 20 (two times), you're left with a remainder of 6.\n\nIn addition to these, there are two operators (\n++\nand\n--\n) that also perform simple arithmetic. Because they both\nchange\ntheir operands, I've decided to discuss these in the \"Assignment Operators\" section later in this chapter.\n\nFlash enables you to perform many additional math operations through the Math object (discussed later this chapter), but don't discount how such simple operators can be used in expressions. When you look at the following examples, keep two things in mind: All the\nvariables\n' values are assumed to have been previously set to numbers and these are just expressions\u2014so, by themselves, they don't do anything.\n\nAverage (mean):\n\nsum/total\n\nHalf:\n\nfull/2\n\nAverage (median\u2014that is, the\nmidpoint\n):\n\nlowest+((highest-\nlowest\n)/2)\n\nPrice when discounted:\n\nprice-(price*discount)\n\nCompounded interest:\n\nprincipal+(principal*interestRate)\n\nSeconds (with\nmilliseconds\nknown):\n\nmilliseconds/1000\n\nThese examples all use simple arithmetic operators on homemade variables. You can\ncertainly\ncombine built-in properties in expressions (for example, use\n_currentFrame+1\nto express the frame number of the\nnext\nframe). You'll see more of this in Chapter 7, \"The Movie Clip Object.\"\n\nFinally, I didn't provide any examples of the modulo (\n%\n) operator\u2014but it is one of the most powerful operators available. It seems so\ninnocuous\n, the remainder. But consider how you determine whether a number is even\u2014it has to be evenly divisible by two. Or, when divided by two, the remainder is zero. Similarly, to determine whether something is evenly divisible by five, there just has to be no remainder when dividing by five. This is where the modulo operator can help. If you just use\nanyNumber%2\nand find the expression results in\n, you know the number is even. Later in this chapter (in the \"Applied Expression Writing\" section), you'll see an example that uses the modulo operator to make a loop execute every\nother\ntime (that is, when\nloopCounter%2\nequals 0).\n\nComparison Operators\n\nComparison operators are used to write expressions that evaluate to either true or false. That's it. You might understand the need for such expressions if you remember that they'll usually reside within a larger statement. For example, by itself the word \"true\" doesn't mean anything. However, an entire statement that makes sense might be \"If your age is greater than 21, you can purchase alcohol.\" The expression \"is greater than 21\" always\nevaluates\nas either true or false. To make the statement even more explicit, you could say \"If the expression 'your age is greater than 21' is true, you can purchase alcohol.\" This example is a conditional statement. Such statements are covered in detail later this chapter in the section \"Conditional and Loop Statements.\"\n\nThe comparison operators by themselves are pretty easy to understand. All these operators require two operands in the form\nfirst operand, operator, second operand\n(such as\n12>4\n, where 12 is\nfirst operand\n, > is the\noperator\n, and 4 is\nsecond operand\n). Let's look at them all.\n\nGreater than (\n>\n) results in true when the first number is greater than the second.\n\nLess than (\n<\n) results in true when the first number is less than the second.\n\nGreater than or equal to (\n>=\n) results in true when the first number is greater than or equal to the second.\n\nLess than or equal to (\n<=\n) results in true when the first number is less than or equal to the second.\n\nNot equal to (\n!=\n) results in true when the first number is not the same value as the second.\n\nEquality(\n==\n) results in true when the value of the first and second numbers are equal.\n\nStrict equality (\n===\n) results in true when both the value and data type of the first and second numbers are equal. (See Flash MX's Reference entry for a full description of how the different data types vary.)\n\nYou'll see the most practical examples of the comparison operators later in this chapter, but there are several interesting points to make now. Remember that the result of any expression you write with these operators is always either true or false. That is, they can result in nothing except true or false, and false is a\nperfectly\nfine possibility. An expression such as\n12<25\nis perfectly\nlegitimate\n\u2014it just happens to evaluate to\nfalse\n.\n\nIt's interesting that true and false are the two variations of the Boolean data type. However, you can use them within expressions as though they were numbers. True is 1 and false is 0. For example, the expression\nscore*(timesCheated<1)\nwill automatically reduce the value of\nscore\n(no matter what it is) to 0 if the\ntimesCheated\nvariable is greater than 0. That is, the portion\ntimesCheated<1\nevaluates to either true or false (1 or 0). If\ntimesCheated\nis 0, that portion is true and\nscore\nis multiplied by 1\u2014and thus is unaffected. If\ntimesCheated\nis not less than 1, that portion is false and multiplies\nscore\nby 0 (bringing it down to 0). This is a form of a conditional statement\u2014but much simpler.\n\nThe regular equality operator is\nformed\nby two equals signs (\n==\n)\u2014and the strict equality operator with three equals signs (\n===\n). A single character (\n=\n) is a different operator entirely. The single equals sign performs an\nassignment\n(as you'll see later in this chapter). That is, the variable to the left of\n=\nis assigned the value of the expression on the right. It actually creates a complete statement (because it\ndoes\nsomething), rather than an expression as the\n==\nor\n===\noperators do. Not only does this mean that the variable on the left side changes, but if you intended to create an expression that resulted in true or false, you'd find it always results in true. That is,\nage=21\nassigns\n21\nas the value of\nage,\nand this statement will be evaluated as true. On the other hand,\nage==21\nwill be either true or false (depending on what the\nage\nvariable's value happens to be). In addition,\nage\nwill not change value when you use\n==\n. The first case said, \"\nage\nnow equals 21;\" the second said, \"Does\nage\nhappen to equal 21?\" You'll see more about assignments, but just don't forget this operator is a \"double equal.\"\n\nFinally, string manipulation is covered in much more detail in Chapter 9, \"Manipulating Strings,\" but it's worth mentioning that the comparison operators work perfectly well on strings. To work intuitively, both operands must be strings. But the expression\n\"a\"<\"b\"\nevaluates as true because\n\"a\"\nis earlier in the alphabet. (Uppercase\nletters\nare considered less than lowercase, which might be counterintuitive.) The truth is, you'll see such amazing ways to manipulate strings in Chapter 11, \"Arrays,\" that it's not worth discussing much here. Just don't expect all the comparison operators to act differently depending on the data type of their operands (the way that many of the arithmetic operators do).\n\nLogical Operators\n\nLogical operators are used to compare one or two Boolean values\u2014expressions that result in either true or false. (Operators \"and,\" and \"or,\" use two operands, whereas \"not\" uses one.) Commonly you will extend the comparison operators with logical operators to make compound expressions such as \"age is greater than 12\nand\nage is less than 20\" (\"and\" being the logical operator in this case). You're actually comparing two expressions (not two single values), but the result of the entire expression must be either true or false. If you use these logical operators on non-Boolean values (such as numbers), any number except 0 will be considered true. If you use them on strings, each string will be true as well.\n\nThe \"and\" operator (\n&&\n) results in true if both operands are true.\n\nThe \"or\" operator (\n) results in true if either (or both) operands are true.\n\nTrue if either\nage\nis greater than 15 or\n\"accompaniedByAdult\"\nis true:\n\n(age>15) (accompaniedByAdult==true)\n\nTrue if\nage\nis anything except 21:\n\n!(age==21)\n\nTrue if\nage\nis not a \"teen\":\n\n!((age>12) && (age<20))\n\nTrue if\nage\nis not equal to 21:\n\nage != 21\n\n{% if main.adsdop %}{% include 'adsenceinline.tpl' %}{% endif %}\n\nEven though these expressions should be easy to figure out, there are some interesting elements to note. I included additional parentheses to make these expressions clear. But because the logical operators have very low precedence, the expressions on each side will be evaluated first. That is,\nage>12&&age<20\nworks just as well as\n(age>12) && (age<20),\nalthough it might not be as easy to read. Also notice that both operands of the \"and\" and \"or\" operators must be a complete expression. For example,\nage>12 && <20\nwon't work. It sounds okay in speech (as in \"age is greater than 12 and less than 20,\"), but in ActionScript, you want to say \"age is greater than 12 and age is less than 20.\"\n\nFinally, there's one trick that is commonly used to abbreviate scripts\u2014but it might not be intuitive to you. The expression\naccompaniedByAdult==true\nis the same as\naccompaniedByAdult\n(by itself). So, in this example, I could have said\nage>15accompaniedByAdult\n. If you don't say \"==true,\" it's\nimplied\n. Of course, you can still get messed up (in either case) if the value of\naccompaniedByAdult\nis a number or string\u2014but that's another issue (discussed earlier).\n\nYou'll get plenty of practice writing expressions. Remember that they'll always be contained within bigger statements. These concepts should begin to make more sense as you write statements. The best way to learn to write statements and expressions is to first write your objectives and then start to program in pseudo-code (as discussed in Chapter 3, \"The Programmer's Approach\"). You might notice that in many of my examples, I actually include the pseudo-code version as well.\n\nTypes of Statements\n\nAs I've mentioned countless times, statements\ndo\nthings. Often statements do one of two things: either assign values or compare values. A statement could assign a value to the variable\nscore\n. Another statement might compare the user's score to a set of values to determine a grade. Realize that when comparing values, the end result of a statement could be that no action is taken. For example, a statement could compare the\nuser\n's score to a minimum and then, if the score is not high enough, do\nnothing\n. Only when the score is high enough would this comparison (or \"conditional\") statement\ndo\nsomething\u2014perhaps display a message. We'll look at such conditional statements (that is, the kind that compare values) in the \"Conditional and Loop Statements\" section later in this chapter. There's a lot of material to discuss\nrelated\nto assigning values.\n\nUsing Assignment Operators to Create Statements\n\nThe granddaddy of the assignment operators is the equals sign (\n=\n). When this operator appears in a statement, you can read\n=\nas \"\u2026is assigned the value of\u2026.\" That is,\nusername=\"Phillip\"\ncan be translated and read\naloud\nas \"username\nis assigned the value of\n'Phillip.'\"The truth is that you don't need any assignment operator other than\n=\n. The others just make certain\ntasks\neasier. For example, the increment assignment operator (\n++\n) can be used to increment its operand, as in\nage++\n. That's the same as saying\nage=age+1\n. So, if you just understand how the plain old\n=\nassignment operator works, the others are variations on the same theme.\n\nHere are the basic assignment operators:\n\nAssignment (\n=\n) places the value of the expression on the right into the variable on the left.\n\nIncrement (\n++\n)\nincrements\nthe variable on the left by 1 (that is, it's increased by 1).\n\nDecrement (\n--\n) decrements the variable on the left by 1 (that is, it's reduced by 1).\n\nAddition and assignment (\n+=\n)\nincreases\nthe variable on the left by an amount equal to the expression on the right. (\ncounter+=10\nwill increase\ncounter\nby\n10\n.)\n\nSubtraction and assignment (\n-=\n) decreases the variable on the left by an amount equal to the expression on the right.\n\nMultiplication and assignment (\n*=\n) multiplies the variable on the left by an amount equal to the expression on the right.\n\nDivide and assignment (\n/=\n) divides the variable on the left by an amount equal to the expression on the right.\n\nModulo and assignment (\n%=\n) assigns the variable on the left a value equal to the remainder of dividing the value of the expression on the right into the value of the variable on the left. It sounds\nworse\nthan it is; it just\ntries\ndividing the second number into the first and assigns the variable on the left what's leftover. For example, if your variable\ncounter\nhappens to equal 10,\ncounter%=3\nwill assign\ncounter\nthe value\n1\nbecause 3 goes into 10 three times (3*3=9) with 1 leftover.\n\nIf these are starting to seem a bit complicated, remember that you only\nneed\n=\n. All the other operations can be achieved with\n=\n. For example,\ncounter+=10\nwill increase\ncounter\nby\n10\n\u2014but so will\ncounter=counter+10\n. It's not important that you memorize these now. Ultimately, the only thing that matters is getting your movie to do what you want. After you\nsort\nthat out, you can reach for whichever operators you want.\n\nPossibly the best thing about the all the assignment operators (except\n+=\n) is that they actually change the operand being assigned (usually on the left side) to a Number data type. Realize that these operators don't serve double duty (that is, they perform only mathematical assignments and don't work with strings). As such, they try to convert their operand into a number. For example, if you had a variable\ncount\nthat contained a string\n\"12\"\nand you wrote the script\ncount++\n, the value of\ncount\nwould become\n13\n(the number, not the string). So, unlike some operators that operate differently based on the data type of the operands, these attempt to convert operands to numbers.\n\nThe two assignment operators\n=\nand\n+=\ncan work with strings as well. For example, if\nname\n=\"phillip\"\nand then you executed\nname+=\"kerman\"\n, the current value for\nname\nwould be\n\"phillipkerman\"\n. So, here, the\n+=\noperator performs like the concatenate version of\n+\n. (That is, when either operand is a string,\n+\nis \"concatenate,\" not \"add.\"). Obviously, the simple statement\nname=\"phillip\"\nassigns the\nname\nvariable the value of a string; therefore,\n=\nis not just for numbers.\n\nAlthough the data type of operands won't make some of the assignment operators perform different operations, the operator's placement (before or after) the operand can make a difference. You can actually place the\n++\nor\n--\nin front of or behind the operand, as in\n++counter\nor\ncounter++\n. The difference is subtle but important. Placing the operator after the operand (\ncounter++\n, called\npost-increment\n) increments\ncounter\n\"returns\" the value of the operand\nbefore\nthe increment\nhappened\n. When your entire statement is only\ncounter++\n, this issue doesn't matter. However, when you say\notherVariable=counter++\n,\notherVariable\nwill\nturn\ninto the value of\ncounter\nbefore\nit gets incremented. On the other hand, if you say\notherVariable=++counter\n,\notherVariable\nturns into the incremented (higher) value of\ncounter\n. In either case, the variable\ncounter\nincrements (sooner or later). It's not that one variation is better than the other; it just depends on your intent.\n\nAlthough the difference between pre- and post-decrement and increment might seem very subtle, there's actually a particular situation in which you might have to use the pre-decrement or pre-increment option. Specifically, when the operand is a value that you're not allowed to change, only pre-decrement or\npre-increment\nmakes sense. For example, the\n_totalFrames\nproperty of a Movie Clip cannot be changed with ActionScript. (You can \"get\" it, just not \"set\" it.) If you want to use a value that's one less than\n_totalFrames\n, you must use\n--_totalFrames\n. Although Flash \"wants\" to decrement\n_totalFrames\n, it can't, but at least the expression results in a number that's one less than\n_totalFrames\n. Realize that both pre and post options do two things: change the value of the operand and return the value (either before or after the change). Even if the operand is an unchangeable value (such as\n_totalFrames\n), the pre-increment or pre-decrement options will still return the value as if it could change. Consider these two statements:\n\noneMore=_totalFrames++;\noneMore=++_totalFrames;\n\nIn either case,\n_totalFrames\ncan't change. But only the second statement will assign the\noneMore\nvariable a value that's one greater than\n_totalFrames\n.\n\nHere are a few examples of typical statements that assign values. (Notice that I've thrown in plenty of expressions within the statements.)\n\nReduce price to half:\nprice=price/2;\n(You could also use\nprice/=2;\n)\n\nCalculate a percent correct based on a number of questions:\npercentCorrect=(numberCorrect/totalQuestions)*100;\n\nApply a discount to price if age is greater than 64:\nprice=price(discount*(age>64));\n\nNotice that I ended each statement with a semicolon. Flash understands the end of your statement is reached when the semicolon is used. You can't just type a return at the end of the line because both blank spaces and returns are ignored when Flash reads your script. You could actually run all your code along one long (difficult-to-read) line if you separated distinct statements with semicolons.\n\nThe Thought Process\n\nWriting statements takes the same skill as writing expressions. Similarly, the skill will come with practice. Most people write any such code in segments. That is, it's difficult to write a statement in the same way that you might compose a sentence in speech (in which you almost talk without thinking\u2014let alone thinking about the composition of your\nsentence\n). Rather, to write a script statement, first think of your general objective, write it out in pseudo-code, and then break down your pseudo-code into discrete elements that can be\nexpressed\nin script. For example, it's\nunrealistic\nto simply think \"double score when they get the bonus question\" and then immediately type\nscore*=(1+(bonusQuestion==true))\n. Even though this example is intentionally complex, you're\nunlikely\nto create such a statement without breaking down the task into smaller\nparts\n. Your thought process might follow this order:\n\n\"Okay, I want to double their score if they got the bonus question right. Well, what if they got it wrong? In that case, just leave\nscore\nalone. What can I do to\nscore\nthat will leave it untouched? Either add 0 or multiply by 1. Since doubling involves multiplying by 2, I've got an idea: I'll either multiply by 2 or multiply by 1 (depending on the outcome of the bonus question). So far, I have the statement\nscore*=\nin mind. That is,\nscore\nis assigned the value of\nscore\nmultiplied by blank. I want \"blank\" to be either 1 or 2. That is, either\n1+0\nor\n1+1\n. For the second number (\n+0\nor\n+1\n), I can simply write an expression that evaluates as either false or true. The expression\nbonusQuestion==true\nwill always evaluate as 0 (when\nbonusQuestion\nis\nnot\ntrue) or 1 (when\nbonusQuestion\nis\ntrue). The part on the right (\n(1+0)\nor\n(1+1)\n) can be\nreplaced\nwith\n(1+(bonusQuestion==true))\n. So, the entire statement\nscore*=(1+(bonusQuestion==true))\nmakes complete sense now.\"\n\nPerhaps your brain works differently than mine, but this was just a sample of my thought process. By the way, the same exact task could be expressed with countless variations of statements\u2014this is just one solution. Generally, when you're starting out, your expressions will tend to be wordy\u2014that's fine. You'll get more practice writing expressions and statements at the end of this chapter.\n\nBuilt-In Statements\n\nAlthough I've probably said that \"statements\ndo\nthings\" enough times so that you'll never forget, what I failed to mention is that there are built-in statements that also do things. Consider that ActionScript and JavaScript are practically identical, but there are a few Flash-centric actions that only ActionScript contains, such as\ngotoAndPlay()\n. The ambiguous\nterm\nactions\nis left over from older versions of Flash. Realize that everything listed in the Actions section of the toolbox list (some of which are shown in Figure 5.3) is either a Flash-centric feature (a command or method) or a true built-in statement. Think of them all as statements if you want. (By the way, another way in which ActionScript and JavaScript vary is in the events to which they respond\u2014Flash has\non(release)\n, and JavaScript has\nonClick\n, for instance.)\n\nFigure 5.3. Flash actions are either Flash-specific features or built-in statements.\n\nWe don't need to step through each statement now. You'll pick them up as you write blocks of code. For example, you'll see both\nreturn\nand\nbreak\nin the upcoming section about conditional and loop statements. The point is that all built-in statements are listed under Actions\u2014and that some of them are unique to Flash.\n\nSimple Objects in Statements\n\nIt's only fair to introduce you to objects now. Even though there are seven other chapters dedicated to the finer points of objects (Chapter 7, \"The Movie Clip Object;\" Chapter 9, \"Manipulating Strings;\" Chapter 10, \"Keyboard Access and Modifying Onscreen Text;\" Chapter 11, \"Arrays;\" Chapter 12, \"Objects;\" Chapter 13, \"Homemade Objects;\" and Chapter 14, \"Extending ActionScript\"), there are a couple of simple objects that will help you immensely as you write statements\u2014namely, the Math object and the Number object. Instead of providing detailed information about objects here, I'll simply show you how to use the Math and Number objects. They're so easy that you really can use them without fully understanding objects. When you get to the workshop chapters, you'll find the Math Object useful in almost every exercise. You'll use it in Workshop Chapter 3, \"Creating a Horizontal Slider,\" (to help determine the percentages) and in Workshop Chapter 11, \"Using Math to Create a Circular Slider,\" (to help determine the angles). In fact, you'll find the Math Object invaluable if you ever want to go beyond simple addition, subtraction, multiplication, and division.\n\nUsing the Math Object\n\nThe Math object will give you access to both common mathematical functions as well as a few constants (such as pi). The functions in the Math object (called\nmethods\n) are almost like the\nbuttons\non a scientific calculator; actually, they're practically identical. For example, my calculator has a square root button (that looks like this:\n). If I first type a 9 and then press the square root button, my calculator \"returns\" (into the display field) the square root of 9\u2014that is, 3. Within an expression in Flash, you can also type a 9 (or a variable whose value happens to equal 9) and use the Math object's square root method to return the square root into the expression where you used it. The expression looks like this:\nMath.sqrt(9)\n. (Remember that as an expression, this evaluates to 3, but it doesn't do anything unless you use it in a statement, such as\nanswer=Math.sqrt(9);\n.)\n\nThe form for all the Math object methods is\nMath.methodName()\nwhere\nmethodName\nis the function that you want to use. The parentheses are required for all methods because they often accept parameters. For example, you can't just say\nMath.sqrt()\n. Flash needs to know, \"Square root of what?\" You put the number (or expression that evaluates out as a number) into the parentheses\u2014 for example,\nMath.sqrt(9); Math.sqrt(6+3);\nMath.sqrt(oneVar+((someExpression*2) +whatever))\n. Flash will take the result of the expression in the parentheses, calculate the square root, and finally put the answer in place of the entire expression. (Remember that it's an expression.)\n\nIn addition to methods that perform mathematical operations, the Math object has constants. You can tell them apart from the methods because they're listed in all uppercase letters, such as\nE\n(Euler's constant\u2014for use in natural logarithms) and\nPI\n(the ratio of a circle's circumference to its diameter\u2014used in trigonometry and geometry). They're used like methods except that because they don't accept parameters, the parentheses aren't used. That is,\nMath.PI\n(not\nMath.PI()\n) turns into 3.14159\u2026 and\nMath.E\ninto 2.718\u2026. You could probably live your entire life without ever really\nneeding\nconstants. For example, you could just hard-wire 3.14159 every time you needed to use pi in a formula (for example, if you wanted to calculate the circumference of a circle,\nPI\ntimes radius). It's just that the constants are built into ActionScript and they're very accurate\u2014so you might as well use them when you need them. Just remember the constants are all uppercase and don't need or accept parameters; therefore, they don't use parentheses.\n\nInstead of going through all the Math object features (see Figure 5.4)\u2014 effectively providing a recap of the last trigonometry course you took (and possibly awakening the long repressed anxieties associated)\u2014we'll just start using them in statements.\n\nFigure 5.4. You'll find all the\ncomponents\nof the Math object under Objects>\nCore\nin the Actions panel's toolbox.\n\nHere are a few fun examples of the Math object:\n\nMath.abs(number)\nAbsolute value. Returns a non-negative version of\nnumber\n. For example,\nMath.abs(startPoint-endPoint)\nreturns the distance between\nstartPoint\nand\nendPoint\n, and it will always be a positive number even if the\nendPoint\nis a greater number (which would\notherwise\ncause\nstartPoint-endPoint\nto be a negative number).\n\nMath.max(x,y)\nreturns the value of either\nx\nor\ny\n(whichever is greater). For example, the statement\nbestScore=Math.max(writtenScrore,\nverbalScore);\nwill assign the value of\nbestScore\nto equal the value of either\nwrittenScore\nor\nverbalScore\n(whichever is greater).\n\nMath.floor(number)\nreturns the integer portion of a number. (That is, it rounds it down.) For example, given the number of minutes I've worked on this chapter, I can calculate how many full hours that is by using\nhours=Math.floor(minutesWorked/60);\n. I can combine this with the modulo operator (\n%\n) we\nlooked\nat earlier to express a string that shows the total time in hours and minutes (instead of just minutes):\nMath.floor(minutesWorked/60) + \" hour(s) and \" +\n(minutesWorked%60) + \" minute(s)\"\n.\n\nMath.round(number)\nrounds off\nnumber\nto the\nclosest\ninteger. For example,\nMath.round(1.9)\nreturns\n2\n;\nMath.round(1.1)\nreturns\n1\n; and\nMath.round(1.5)\nreturns\n2\n. Note that computers have an inherent \"rounding error\" that crops up with many floating-point numbers (that is, decimal numbers). Consider the fact that 1/3 + 1/3 + 1/3 equals 1. When a computer tries to represent 1/3 in a decimal form, however, it can't just use 0.3333 (with threes repeating forever). Instead, it rounds off\u2014and eventually this type of thing will cause errors. Don't lose any sleep over it, but do be sure to check out Workshop Chapter 8, \"Creating a Currency-Exchange Calculator,\" for an application of the issue.\n\nMath.random()\nreturns a random decimal number between 0 and 1 (but not including 0 or 1\u2014that is, literally\nbetween\n0 and 1, not inclusive). For example, if you want to return a number between\n1\nand\n100\n(inclusive), first set\nmin=1\nand\nmax=100\nand then use this expression:\nMath.floor(Math.random()*((max-min)+1))+min\n. This might not be easy to read, but the idea is that you multiply the random decimal number by\n100\n(that is, the difference between the\nmax\nand\nmin\nplus\n1\n\u2014 that's the part that reads\nMath.random()*((max-min)+1)\n). Assume that\nMath.random()\nreturns\n0.56899\n. It will turn into\n56.899\nwhen multiplied by\n100\n. You take that whole expression and strip off the excess decimals (using the\nfloor\nmethod), resulting in\n56\n. Finally, you add the\nmin\n(at the end of the expression) because it's quite possible that the random number could be\n0.00000000001\n, which turns into\neven after you multiply by\n100\nand use the\nFloor\nmethod (and that's lower than our\nmin\n). Also consider that if you multiply the random decimal by\n100\n(the\nmax\n) you'll never quite get to\n100\nbecause the random number is always\nlower\nthan\n1\n. That last\n+min\neliminates the possibility of going lower than the\nmin\n(\n1\n) and makes sure that it's possible to reach the\nmax\n(\n100\n).\n\nTo return a random integer between\nmin\nand\nmax\n, use\n\nMath.floor(Math.random()*((max-min)+1))+min\n\nJust to make things fun, the Math object's trigonometry functions (\nMath.sin (angle)\n,\nMath.cos(angle)\n, and\nMath.tan(angle)\n) expect the angle provided to be expressed in radians (not in degrees with which you might be more familiar). Radians and degrees are simply different measurement units\u2014 like miles and kilometers. A half-circle has 180 degrees but only pi radians, whereas a whole circle is 360 degrees, or 2 pi (see Figure 5.5.) Therefore, any time you need to convert degrees to radians, you must\nmultiply\nby\nMath.PI/180\n. That is, 90 degrees is\n(Math.PI/180)*90\nradians (or 1.57\u2026.) (Just multiply your degrees by\nMath.PI/180\nto get radians.)\n\nFigure 5.5. A full circle contains 360 degrees or 2 pi radians\u2014two units of measure that can lead to confusion.\n\nWhereas the trig functions accept angles (in radians, not degrees), the inverse functions (\nMath.asin()\n,\nMath.acos()\n, and\nMath.atan()\n) return angles (naturally, in radians as well). If you want to convert a value represented in radians to degrees, just\ndivide\nby\nMath.PI/180\n. That is,\n1.57\nradians is\n1.57/(Math.PI/180)\ndegrees (or\n90\n). Even though all this might seem like a sick joke from a sadistic\nmathematician\n, the truth is that you can usually do all your calculations in radians; you might never need to convert between radians to degrees. An exception would be if you want to display\u2014for the user\u2014a found angle in degrees, or you want to set the\n_rotation\nproperty of a clip to an angle you calculated. Generally, do all the calculations in radians and then (if you need to) convert the values to degrees at the last minute. If nothing else, just be aware of the difference.\n\nTo calculate radians from a given value in degrees, use\n\nradians=degrees*(Math.PI/180)\n\nTo calculate degrees from a given value in radians, use\n\ndegrees=radians/(Math.PI/180)\n\nFlash provides one trig function that you might never have seen in math class:\nMath.atan2()\n. As you might know, the plain\nMath.atan()\nfunction (or \"arc tangent\") will help you determine the angle of a corner in a right triangle. Just provide the length of the triangle's\nopposite\nside divided by the length of the adjacent side, and\nMath.atan()\nwill then return the angle. For example, if one side is\n70\npixels and the other side is\n200\npixels, the angle is\n30\ndegrees (well,\n.528\nradians, because\nMath.atan(70/120)\nreturns\n.528\n). Figure 5.6 has a couple of examples.\n\nFigure 5.6. The regular arc-tangent function (\nMath.atan()\n) enables you to calculate angles given two sides of a right triangle.\n\nThe plain\nMath.atan()\nfunction is fine and dandy when you're in the real world (where moving up increases values). But consider the coordinate system in Flash. The y values decrease when you go up! Consider the second example in Figure 5.6; both the x and y values are really negative numbers. In addition, you have to remember in that case to subtract the value you find from 180. It becomes even more of a hassle when you move into the other quadrants (from 180 degrees to 270 degrees and from 270 degrees to 360 degrees). Luckily,\nMath.atan2()\nresolves the entire mess! You just provide\nMath.atan2()\nwith two parameters: one for the y value and one for the x value. That's it. You'll notice in Figure 5.7 that all the issues with positive and negative values are handled automatically by\nMath.atan2()\n. In Workshop Chapter 11, you'll learn how\nMath.atan2()\ncan make calculating angles a snap.\n\nFigure 5.7. When you consider Flash's coordinate system,\nMath.atan2()\nis a life-saver because it handles all issues with positive and negative numbers.\n\nBy now you see how the Math object's methods can be used within expressions. Basically, you're given a suite of mathematical functions through this object. It's pretty easy to use the Math object, but that doesn't mean all your expressions will be easy to write. It also doesn't mean all the other objects are as easy either. For now, just realize that the Math object provides you with many useful functions.\n\nUsing the Number Object\n\nThe Number object and Math object are similar in that you can use both of them in expressions without having an intimate understanding of objects. You simply say\nNumber.methodName()\nor\nNumber.CONSTANT_NAME\n. As you can see in Figure 5.8, the Number object consists\nmainly\nof constants (uppercase items). I suspect that you'll most often use the Number object for its constants only, so at this point we'll focus on them. (When we discuss objects in Chapter 11, the Number object's methods\u2014\ntoString()\nand\nvalueOf()\n\u2014will be covered.)\n\nFigure 5.8. The Number object is primarily used for the constants (all listed in uppercase).\n\nI've included this brief discussion now, however, because\u2014in addition to being a simple object\u2014there's another part of ActionScript with the\nsame\nname. In addition to the Number object, there's a function called\nNumber()\nthat we touched on earlier this chapter. Even though we won't discuss functions fully until Chapter 8, using the\nNumber()\nfunction is easy:\nNumber(expressionOrVariable)\nattempts to convert the value of\nexpressionOrVariable\ninto a number and return the result. So,\nmyNum=Number(\"100\")+1;\nwill convert the string\n\"100\"\nto a number, add\n1\nto it, and place\n101\ninto\nmyNum\n. Remember that the addition operator will act differently if one operand is a string (and in our case, turn\nmyNum\ninto\n\"1001\"\n). Because the word\nNumber\nis used in both the case of a Number object and the Number function, it can be confusing. The weird part is that if you use the\nnew\nconstructor in front of\nNumber()\n,you'll be creating a new instance of the Number object\u2014a different thing entirely, and something that you probably don't want to do. (At least wait until you learn all about objects in upcoming chapters.)\n\nThe Number object's constants are easy to use, albeit not particularly exciting. Here they are:\n\nNumber.MAX_VALUE\nis the \"largest representable number,\" meaning a very high number, but one from which you can subtract. For example, you might initialize a variable to equal\nMAX_VALUE\n(as in\nbigNumber=\nNumber.MAX_VALUE\n). Then you could subtract from your variable (for a very long time\u2014but not forever).\n\nNumber.MIN_VALUE\nis the smallest number (actually, a negative number).\n\nNumber.NEGATIVE_INFINITY\nis so far into the negative that you can't even add numbers to ever get out. You can use this constant in comparison expressions, but you can't perform operations on \"infinity\" the way you can with\nNumber.MAX_VALUE\nand\nNumber.MIN_VALUE\n.\n\nNumber.POSITIVE_INFINITY\nis like\nNumber.NEGATIVE_INFINITY\nbut positive. Because you can't perform calculations on variables that contain\nNumber.POSITIVE_INFINITY\n, the most likely usage would be in a comparison expression (such as an\nif\nstatement\u2014discussed later this chapter). For example, you could check whether a variable or expression is equal to\nNumber.POSITIVE_INFINITY\n. For example, 1/0 is\nNumber.POSITIVE_INFINITY\n.\n\nNumber.NaN\nmeans \"Not a Number.\" You'll probably see \"NaN\" by\naccident\nmore often then you'll need to select it by choice. When you try performing a math operation on a string, you'll get \"NaN\" for an answer\u2014meaning the operation failed.\nNumber.NaN\ncan be used in comparison expressions such as\n(aVariable==Number.NaN)\n. Often, however, there are alternatives that might work better (for example,\nundefined\n, which all variables have for a value before you ever use them). Probably a better way to determine whether you've got NaN is to use the function\nisNaN(expression)\n, which return false if\nexpression\nis a number (or true if it's not a number). Because variables all equal\nundefined\nbefore they are assigned, you can use a conditional (for example, an\nif\nstatement) to check whether a variable is\nundefined\n\u2014in which case you could take corrective action, such as assigning it a legitimate value.\n\nWe've looked at a lot so far in this chapter: expressions, statements, and the operators that hold them together. Also, the Math object was included because it gives you a different set of operators. There's more. Despite the fact that we've seen some perfectly complete statements, we haven't looked at conditional statements (that execute only when certain conditions exist) or loop structures (that repeatedly execute scripts).\nLoops\nand conditionals will round out your knowledge, and then you can start practicing everything at the end of the chapter.\n\nConditional and Loop Statements\n\nFlash executes every line of script that it encounters. If a script is never encountered, it's never executed. And, if a script is\nencountered\nrepeatedly, it is executed over and over. Using conditional statements, you can control what part of your script is executed or\nskipped\n. Obviously, if you place a script on a button and the user never clicks the button, the script won't execute. However, after a button is clicked, a conditional statement can control what portion of the contained script executes. This way, you can write scripts that behave differently depending on outside conditions.\n\nLooping\nis a way to make a particular script execute repeatedly\u2014either a certain number of times or until a condition is met. This is helpful when you have a lot of code to process, but also when you're not sure how many times the code needs to execute. In the upcoming section on loops, you'll find that loops can save you a lot of typing. Compare the following two pseudo-code descriptions in which a loop would help:\n\nAlthough this might not explain the ActionScript syntax (it's just pseudo-code after all), the second choice (the loop) is obviously easier to use.\n\nConditional Statements:\nif\n,\nif else\n,\nif else if\n,\nswitch\n\nThese four structural conditional statements are really variations on the same concept: If a condition is true, Flash should execute a block of code. At the core of all four variations is a kind of \"if\"\u2014and it's the\neasiest\n. Consider my wife instructing me, \"If they have jellybeans, get me some.\" The condition is that \"they have jellybeans,\" and the result\u2014if they do\u2014is that I'm supposed to \"get some\" for her. More technically,\nif\nthe condition \"they have jellybeans\" is true, I execute the second part of my wife's instructions.\n\nA plain\nif\nstatement will execute the consequences only when the statement is encountered and the condition is true\u2014nothing more. Realize that unless my wife specifies what to do in the event that they're out of jellybeans, I don't need to do anything (of course, I know better). Had she said, \"If they have jellybeans, get some; otherwise, get some chocolate,\" it's clear that I'll be purchasing one item or the other. If the condition is false (that is, if they don't have jellybeans), I am to automatically follow the second part (the \"otherwise\" or the\nelse\nstatement, if you will). In reality, I can't get chocolate unless they have some, but that's not at issue. In this case, when the initial condition is false, the second part (the\nelse\n) is executed every time.\n\nYou can make the\nelse\nstatement conditional, too. That is, \"If they have jellybeans, get some; otherwise, if chocolate is on sale, get some of that.\" Realize that there's a distinct possibility that I will come home empty-handed. A plain\nif\nstatement can skip part of the code; an\nif else\nstatement will do one or the other instructions; and an\nif else if\nstatement could easily skip all the code. Let me show the three real-life statements in actual ActionScript\u2014using a few homemade variables (that are assumed to have previous values).\n\nEven though you\ncan\nwrite an\nif\nstatement with the Actions panel in Normal Mode, I'd recommend (even if just temporarily) going into Expert Mode to do so. I always start by typing the structure of the\nif\nstatement\u2014no conditions, no results\u2026 just a skeleton\u2014as\nfollows\n:\n\nif (condition){\n}\n\nThis way I won't forget to\nsatisfy\nany parentheses or curly braces I start. Then I go back through and replace\ncondition\nwith an expression that results in true or false (1 or 0). Then, finally, after the opening curly\nbrace\n, I make a new line and type the script I want to be executed (when the condition is true).\n\nIf I decide I need to add an\nelse\ncatch-all statement when the condition is not true, I'll add\nelse {}\nat the end. That is, the code\n\nif (jellybeans>0){\n//buy some\n}\n\ncan have an\nelse\nprovision added, like this:\n\nif (jellybeans>0){\n//buy some\n} else {\n}\n\nThen I'll go back through and make a new line after the opening curly brace that follows the\nelse\nstatement. Adding an\nelse if\nstatement is not much different. Simply add\nelse if (condition){}\ninstead of\nelse {}\n.\n\nFinally,\nelse if\nstatements can be nested. That is, when one condition is not met (because it's false), another condition is not met, and you can keep adding\nelse if\nad infinitum\n. As such, nested\nelse if\nstatements can become unwieldy. Although it's not as eloquent (or efficient for the computer), I recommend avoiding deeply nested\nelse if\nstatements and instead using a series of independent\nif\nstatements. For example, you could use all three\nif\nstatement in sequence, as follows:\n\nThere's a logical problem with this code as\neach\nif\nstatement is encountered (and\npotentially\nentered), meaning that it's possible that I come home with both jellybeans and chocolate. (Not\nnecessarily\na problem, but remember that this is supposed to serve as an alternative to a nested\nif else if\nstatement.) If the various conditions were exclusive\u2014that is, when one is true, the others are necessarily false\u2014then there's no problem with this method. Notice that's the situation with the first two conditions. That is, there's no possible way that\n(jellybeans>0)\nand\n!(jellybeans>0)\ncould both be true\u2014they're\nmutually\nexclusive. However, the first and third conditions could both be true, and thus both conditional scripts would be executed. In the case of nested\nif\nstatements, if one condition is met, the others aren't even considered\u2014they're simply skipped.\n\nEven if multiple\nif\nstatements aren't all exclusive (which is the problem here), you can still use this more readable format with a little extra work. The\nreturn\nstatement will cause Flash to bypass the rest of the script in a block of code. Realize that the code could be\nenclosed\nwithin a larger block of code\u2014perhaps within an\non (press){ }\nmouse event of a button. As soon as Flash encounters\nreturn\n, it will skip the rest of the code. So, if you type\nreturn\nright before the closing curly brace in each\nif\nstatement, you can be assured that once an\nif\nstatement's condition is met, the rest will be ignored.\n\nMy suggestion for a series of\nif\nstatements is beginning to look like a real pain, considering that even\nafter\none condition is met, you want the rest of the\nif\nstatements to be skipped but you might have more code (at the end) that you want to execute; therefore, you can't simply use\nreturn\nwithin each\nif\nstatement. Just to carry this through, one solution would be to set a \"flag\" variable. That is, above all the\nif\nstatements, you can type\nnotDone=1;\n. Then each condition can be expanded from\nif(mainCondition){}\nto read\nif((mainCondition)&&notDone)){}\n. This script says that if\nboth\nthe original condition (such as\njellybeans>0\n)\nand\nthe condition\nnotDone==1,\nthen execute the code. Finally, instead of using\nreturn\nwithin (but at the end of each)\nif\nstatement, use\nnotDone=0;\n, which will effectively cause Flash to skip the rest of the conditions. The result would look like this:\n\n(Recall that the expression including\nnotDone\non lines 6 and 10 is the same as\nnotDone==true\n.) I'll be the first to admit that this solution is not eloquent, nor is it particularly efficient for the computer. I would argue, however, that compared to a deeply nested\nif else if\nstatement, it's probably easier to read. The sacrifice of making slightly less\nconcise\ncode is worth it if it means the code is more readable. Feel free to use\nelse if\nwhen you're able to keep track of everything. Keep in mind that this discussion hasn't been\nwasted\nbecause we got to talk about the\nreturn\nstatement as well as a little bit about solving a problem.\n\nThere's another statement (called switch) that can be used like the variations of the if statement. The\nswitch\nstatement enables you to avoid deeply nested\nif\nelse if\nstatements\u2014but only when you're trying to match one of many specific results of a single expression. Consider that my wife gave me these instructions: \"If jellybeans cost $1 per\npound\n, get 2\npounds\nplus a chocolate bar; if jellybeans cost $2 per pound, just get one pound of jellybeans; finally, if jellybeans cost $3 per pound, only get one-half pound.\" Although you could express this by using a nested\nif else if\nstatement, notice that all the conditions are based on the same expression: \"The cost of one pound of jellybeans.\"\n\nWhere\nexpression\nis a single expression that could have a variety of different values. For each possible value you expect, replace\nvalue1\nor\nvalue2\n. The great thing about\nswitch\nis that you can account for as many different unique values as you want. Consider the following finished version from my practical example of jellybeans:\n\nNotice that cases 1, 2, and 3 don't\nindicate\na sequence but rather specific values for the\npricePerPound\nvariable. Also,\nbreak\nin the last case is unnecessary. (You'll learn more about\nbreak\nlater this chapter.) Finally, this analogy might not be the most appropriate for the\nswitch\nstatement because it's possible the cost is $2.95 per pound (although I suppose you could include\nMath.round()\nin one of the cases). Consider the following example for something a little more useful:\n\nIgnore, for the time being, the fact that the value for\nusername\ncould be\n\"ADMIN\"\n(all uppercase) and this example would fail to recognize that value. (In Chapter 10, you'll see how to control strings to handle that kind of thing.) However, do notice that if\nusername\nis not one of the three explicit cases shown, nothing happens. That could be what you want, but there's a feature of\nswitch\nthat enables you to include a \"catch-all\" at the end. It looks just like any case, but it reads\ncase\ndefault:\n(no quotes around\ndefault\n). Here's a modified version of the\npreceding\nexample:\n\nYou'll get more practice at the end of the chapter in the \"Applied Expression Writing\" section. For now, however, I recommend that you study the skeleton form of each version of the\nif\nstatement as well as of the\nswitch\nstatement.\n\nLoop Statements:\nfor\n,\nfor in\n\nAny loop will execute the same script as many times as you specify, or until a condition you specify is met. Often you don't know exactly how many times you need the code to execute, but you can still refer to the number of loops by reference, such as, \"Keep rinsing the spinach until there's no more dirt in the water\" and, \"For every envelope in that stack,\nplease\naddress, seal, and stamp each one.\" If there are 100 envelopes, you'll repeat the process 100 times\u2014but you don't have to explicitly specify 100 iterations. You'll see how to specify the number of iterations this way. In addition, realize that you won't always execute the same exact code repeatedly. For example, when you address, seal, and stamp several envelopes, you're following the same instructions (the same \"script,\" if you will), but with\nslight\nvariations. You don't put the same address on each envelope, but you do put\nsome\naddress on each envelope. When structuring the loop you're writing, consider two issues: How many times should the script execute and how do I write the script (that executes) so that it behaves differently for each iteration?\n\nIf you only learn one loop statement, it should be the\nfor\nloop. Here's the skeleton:\n\nfor (init; condition; next) {\n//do statement(s) here\n}\n\nLet's use the following example for our discussion:\n\nfor (n=1; n<11; n++) {\ntrace(\"Current iteration is \"+n);\n}\n\nYou can read the skeleton form of this\nfor\nloop as: Starting with\ninit\n, repeat the following while\ncondition\nis true, and on each iteration, do\nnext\n. Therefore, the example says, \"Starting with\nn=1\n, keep doing the\ntrace\naction while\nn<11\n\u2026, each time incrementing\nn\n.\" The\ntrace\naction is executed 10 consecutive times, but the string that is formed looks slightly different on each loop. In the Output window, you'll see \"Current Iteration is 1,\" and then \"Current iteration is 2,\" and so on. Imagine walking through this loop\u2014the\ninit\nsays \"\nn\nstarts at 1,\" so the first time the\ntrace\naction is encountered,\nn\nis 1. Look at the\nnext\nexpression to see what will happen the next time through, and you'll see\nn++\n(meaning that\nn\nis incremented by 1) and\nn\nbecomes\n2\n. The\ntrace\naction is executed again. It keeps doing this while the condition\u2014\nn<11\n\u2014is true. When\nn\nreaches\n10, the condition is still true. The next time through,\nn\nis 11, so the condition is false and Flash\njumps\npast the closing curly brace to continue any scripts that follow. (Go ahead and type this\nfor\nloop in the first keyframe of a new Movie Clip instance, and then select Control, Test Movie.)\n\nOne tip (just like writing\nif\nstatements) is that you should start by typing the skeleton and then replace\ninit; condition; next\n. Another tip is to remember that the\ncondition\nis the condition that keeps them\nin\nthe loop\u2014not the condition to get out of the loop. That is, repeat\nwhile\nthe condition is true, not repeat\nuntil\nthe condition is true. In the earlier example, we wanted to repeat until\nn\nreached 11, but the following (updated) script has a problem:\n\nfor (n=1; n==11; n++) {\ntrace(\"Current iteration is \"+n);\n}\n\nThe problem is that\nn\nstarts at\n1\n, but the condition is looking for\n11\n, so it doesn't have a chance to ever get to\n11\n\u2014and the entire loop is skipped.\n\nProbably the biggest warning I can give you is to make sure that your loops eventually finish. It's easy to\naccidentally\nproduce a script that, in theory, loops forever. While testing a movie, if the Flash Player ever remains stuck in a loop for more than 15 seconds, it displays a warning to the user (see Figure 5.9).\n\nFigure 5.9. This dialog box appears when the Flash Player remains stuck in a script for more than 15 seconds.\n\nBecause each iteration of a script takes a tiny fraction of a second, 15 seconds is a very long time! Generally, being stuck in a script is likely a symptom of an infinite loop (also called an\nindefinite loop\n). Here's a perfect example of just such a loop:\n\nfor (n=1; n>0; n++) {\n//anything because this is an infinite loop!\n}\n\nThe condition (\nn>0\n) is true from the beginning and remains so forever! If the \"next\" expression\ndecremented\nn\ninstead of\nincrementing\nit, this would not be a problem.\n\nAnother way to inadvertently create an infinite loop is to forget how\n=\ndiffers\nfrom\n==\n. Only\ninit\nand\nnext\nare assignments (and, therefore, they're statements), but \"condition\" is just an expression. Therefore, the following example probably doesn't do what the programmer intended (unless she was trying to make an infinite loop):\n\nfor (n=1; n=11; n++) {\n//Help, I'm stuck in an infinite loop\n}\n\nThe problem is that \"condition\" is\nn=11\n(an assignment). The entire\nn=11\nstatement, if evaluated, is\n1\n(or true). This code loops forever because the condition (\nn=11\n) is true and remains so forever. (This mistake messes me up all the time!)\n\nAs I mentioned, learning the plain\nfor\nloop is all you really\nneed\n. However, the variation\nfor in\nis also useful. Unlike the\nif\n,\nif else\n, and\nif else\nif statements, the\nfor in\nloop is not an extension of the plain\nfor\nloop. The two are entirely different statements. To fully utilize\nfor in\nloop, it's best to understand arrays and objects\u2014two subjects covered in later chapters. The idea is that the loop will continue to loop \"for all the items in the object.\" Here's an example: \"For all the envelopes in that box, do whatever.\" I'll just show you the skeleton form and one example without fully explaining arrays or objects.\n\nThe skeleton form has two elements for you to replace:\niterant\nand\nobject\n. Give iterant any name you want and it becomes a variable that automatically increments from the highest down to the lowest. If there are eight things in your object (as in my example), it starts at 7, returns the value of the 7th item in the array (in my example: Blitzen), and then decreases in every loop until it reaches 0. (Because arrays start counting from 0, the range is 7 down to 0 rather than 8 to 1, as you might expect.)\nobject\nis the name of your object or array (in this case, the variable\nallNames\n, which happens to contain an array of eight items). You don't have to understand arrays fully to imagine how this example works. For now, notice that one way to populate a variable with an array is shown in the first line of the example (use brackets and separate individual values with commas). If you ever need to grab individual elements from an array, you can use the form:\narrayName[index],\nwhere\nindex\nevaluates as 0 through the total number of items in the array (minus 1, because arrays count 0,1,2,3, and so on).\n\nUnlike the plain\nfor\nloop, the\nfor in\nloop doesn't require that you specify what is supposed to happen on every loop (that is, the \"next\"). That's because the variable name you use for the iterant automatically goes through all the items in the object (starting at the highest and incrementing down). The two advantages of the\nfor in\nloop are that you don't have to define the \"next\" and you don't have to specify a condition to control the number of times the loop repeats. Here's an example of using a plain\nfor\nloop to achieve nearly the same result as the\nfor in\nexample I showed. Notice that it's not quite as clean, but it works basically the same way.\n\n(By the way, instead of hard-wiring\n8\nin the condition, I could have used\nallNames.length\n, which returns the length of the array\u2014but that's something you'll learn in Chapter 11.) Notice that this example is equivalent to, but not the same as, the\nfor in\nloop. The\nfor in\nversion effectively goes in reverse order (starting with \"Blitzen\" rather than \"Dasher,\" as is the case here).\n\nLet's look at the statements that execute every time the loop repeats. You can put any statement (or statements) within the loop. You don't have to use the iterant at all. If you want the statement that executes to vary every time the loop repeats, however, the trick is to\nuse\nthe iterant within the statement. All my examples use a plain\ntrace\ncommand. However, the string that appears is different in each iteration because the iterant variable is used\u2014either explicitly, as in\ntrace (\"Current iteration is \"+n);\nor within an expression, as in\ntrace(\"On \"+allNames[n]);.\n(This won't reveal the value of\nn\n; rather, it uses\nn\nto extract an element in the\nallNames\nvariable.)\n\nAlso realize that you can include as many statements as you want within a loop. You could even make your own iterant or counter that you maintain. You can nest other statements, such as\nif\nstatements. See whether you can figure out the result of the following nested statement:\n\nThe variable\nn\nstarts at\n1\nand iterates through\n10\n. If the expression\nn%2\nhappens to equal\n(that is, zero is the remainder when dividing\nn\nby\n2\n), the\ntrace\ncommand displays \"n is even\" (but\nn\nis replaced by the value of\nn\n). Otherwise, the\ntrace\ncommand \"n is odd\" appears. By the way, I wrote out this example by first typing the skeleton of the\nfor\nloop, and then inserting a skeleton of the\nif else\nstatement. Finally, I came back through and filled in the data. (And naturally, I had to test it a few times to weed out the\nbugs\n; one of the semicolons in the\nfor\nstatement was a comma, and my\nif\ncondition was\nmistyped\nas an assignment:\nn%2=0\n.)\n\nwhile\n\nIf nothing else,\nwhile\nloops are the easiest to accidentally turn into infinite loops. Basically, you say, \"Repeat while this condition is true.\" If the condition never becomes false, you'll repeat forever. You have to make sure that the condition eventually turns out to be false. The\nwhile\nloop is\nnot\nsuitable for repeating statements while you wait for the user to do something (or to stop doing something). For example, \"While the user has the mouse pressed\" is a perfectly legitimate concept, but you have to use a different solution for that objective\u2014\nwhile\nloops are just not made for that. A\nwhile\nloop gives you a way to write a script that will repeatedly execute a statement, but because you might not know exactly how many times it is supposed to execute, you can use a\nwhile\nloop\nwhile\na condition is true. Remember, both\nfor\nand\nfor in\nstatements require that you specify the number of loops\u2014even if that specification is in reference to a variable, length of an array, or number of items in an object. If, for example, the task is that you keep looping while a variable called\nfound\nis 0 (or\nwhile(found==0)\n), the\nwhile\nloop is perfect. (Just make sure that\nfound\nwill eventually become something other than 0, or you'll be stuck in the loop forever.)\n\nHere's the form:\n\nwhile (condition) {\n//do this statement\n}\n\nThe following example shows that you must take\nprecautions\nto ensure that the condition eventually becomes false (so that you can get out of the loop):\n\nThe form is simple: Statements will repeatedly execute while the condition is true. The preceding example is a bit complex, but instead of contriving an unrealistically simple example, it accurately shows the types of provisions necessary when you use the\nwhile\nloop.\n\nBasically, I want the loop to repeat until I find the string \"Rudolf\"\u2014so the initial condition is\nwhile found==0\n(or false). Before the loop, both\nfound\nand\nn\nare\ninitialized\n. Because my basic condition is\nfound==0\n, I want to make sure that it's\nfrom the start. The variable\nn\nserves as an iterant. (You'll almost always need your own iterant in\nwhile\nloops.) This iterant must be initialized before the loop, so that I can increment\nn\nat the end of each statement in the loop. The\nif\nstatement just checks to see whether the\nn\nth index of\nallNames\ncontains the string \"Rudolf.\" If so,\nfound\nis set to\n1\n\u2014and that gets us out of the loop. Notice that even if\nfound\nwere set to\n1\n, the last statement in the loop (\nn++\n) would still execute once before getting kicked out of the loop on the next iteration. So, if\nn\nwere 4, when Rudolf was found,\nn\nwould be 5 by the time the loop was exited. I'm taking advantage of the fact that\nn\nis always greater than the index where Rudolf was found. My\ntrace\ncommand doesn't refer to the array index where Rudolf was found but rather to the made-up term \"spot,\" which is more intuitive than array's indexes (that count 0,1,2\u2026). Finally, it's quite possible that \"Rudolf\" is never found! To ensure that the loop would exit after each index was checked, I added\n&& n<allNames.length\nto the condition (\nfound==0\n). Translated, the entire condition reads: \"While both\nfound\nis zero and\nn\nis less than the total number of items in\nallNames\n.\" (Notice that I didn't have to say\nn<=allNames.length\nbecause the length is\n8\nand I only needed to check through the last item\u2014at index\n7\n.)\n\nThe previous example shows how\nwhile\nloops require extra maintenance in the form of your own iterating variable that you first initialize and then increment. This is almost always necessary, although occasionally you don't need to do it. For example, if you're trying to create two random numbers, the following statement should work fine:\n\nThere's a theoretical possibility that on every iteration, both\noneNum\nand\notherNum\nwill be assigned the same random number. The two variables contain the same value at the start (\n) and will then repeat while they\nremain\nthe same. Likely, this loop will execute only once, but even if the two random numbers came out the same, it would take only a fraction of a second to loop 1,000 more times. On my old 450MHz Pentium III, for example, a loop like this will iterate more than 10,000 times per second! The point is that there's a high\nlikelihood\nthat two different random numbers will be found before Flash reaches its 15-second timeout. Unless you include a \"way out\" in the condition, however, a\nwhile\nloop could try looping forever. (This just means that Flash will reach the timeout dialog box\u2014refer to Figure 5.9\u2014but that is a bad thing because the user sees the dialog.)\n\nLet's review a few final points about loops. The user won't see any visual change on the Stage\nduring\nthe loop. For example, consider the following statement:\n\nfor (n=1; n<6; n++){\nsomeClip._x= n*5;\n}\n\nYou might expect to see\nsomeClip\n's\nx\nposition appear at 5, 10, 15, 20, and then 25. It actually does move to those five locations, but you won't see it move. When the loop is finished, you'll see it in the final resting position of 25\u2014but the Stage does not refresh after each loop. (By the way, you can certainly animate a clip by using scripts, as we'll do in the Workshop Chapter 14, \"Offline Production,\" and Workshop Chapter 15, \"Creating a Dynamic Slide Presentation\"\u2014you just can't do it by using loops.)\n\nFinally, there are two interesting statements that change the flow of a loop. Similar to the way\nreturn\nwill skip out of any function or enclosed event (such as\non(press)\n), both\nbreak\nand\ncontinue\ncan make a loop change course. Specifically, the\nbreak\nstatement will jump out of any loop (actually, it jumps to the end of the loop), and the\ncontinue\nstatement will immediately jump to the top of the loop (that is, iterate) by skipping any further statements within the loop.\n\nHere's an example that shows how the\ncontinue\nstatement jumps to the top of a loop:\n\nfor (n=1; n<6; n++){\nif (n==3){\ncontinue;\n}\ntrace (\"A number that's not three is \" + n);\n}\n\nIf the condition (\nn==3\n) is true, the\ncontinue\nstatement jumps to the top of the loop (to continue) while bypassing the\ntrace\nstatement below. The\ncontinue\nstatement effectively says, \"Skip the rest of the statements, but continue looping.\"\n\nThe following example shows how the\nbreak\nstatement will jump out of a loop:\n\nWithout the\nbreak\nstatement, this loop would repeat forever. When\nbreak\nis executed, Flash jumps to the end of the loop where it is currently enclosed (that is, to where the\ntrace\nstatement appears in this example). This is just a quick way to get out of a loop. Notice, too, that\nbreak\nwill jump past the\nn++\nstatement (that is, right outside the enclosing curly brace). You also use\nbreak\nin the\nswitch\nstatement. There, it will cause only the remaining cases to be skipped\u2014but any code following the closing brace of the\nswitch\nstatement itself will be encountered. Compared to\nreturn\n, the\nbreak\nstatement only jumps past the end of an enclosed loop, whereas\nreturn\njumps out of the function or the event that started it all (as with\non (press)\n)\u2014most likely skipping a lot more code than a\nbreak\nstatement would. For example, if\nreturn\nwere used in this example instead of\nbreak\n, the\ntrace\nstatement would be skipped as well.\n\nApplied Expression Writing\n\nThis chapter is packed with concepts that relate to composing scripts. You've seen a couple of previews of concepts that will come up later (such as arrays and functions), but for the most part, everything in this chapter has to do with writing expressions and statements. The remaining pages provide a chance to practice writing more complex expressions. I'll provide the objective and you should at least try to write the pseudo-code and then (if you can) the actual script. I'll provide my solution with a translation. You should remember two things while you work through these challenges. First, my solution is just one of countless possible solutions. You might very well find a better way to solve the problem. Second, I include many made-up variables. In a real project, these variables would necessarily have their values set earlier or within a different part of the movie. For example, I might use the expression\nscore>=80\n. The idea is that the variable\nscore\nis one that I've been tracking. Perhaps, attached to the button for each correct answer, I used the script:\nscore=score+10;\n. I'm just\nassuming\nthat such variables have had their values set properly already. You can make up variables to use in expressions\u2014just realize that you'll have to take care of them by changing their values, as necessary.\n\nObjective:\n\nGiven a minimum (x location, for example) and a maximum x, write an expression that uses a given percent to return an integer midpoint based on percent. That is, if the west coast is at 100 miles longitude and the east\ncoast\nis at 3100 miles longitude, a location 50 percent across the country would be at longitude position 1600 miles. Even though most people can figure that out in their head, it's more difficult to write the expression (using variables named\nhigh\n,\nlow\n, and\npercent\n).\n\nSolution:\n\nlow+ Math.floor((high-low)*(percent/100));\n\nTranslation:\n\nCalculating 50 percent of 3000 is easy. Just use\n3000*(50/100)\n. To determine the width of the United States, for example, you can subtract the longitude of the east coast (\nhigh\n) from the west coast (\nlow\n). Our formula so far:\n(high-low)*(percent/100)\n. That will usually result in a decimal answer, and using\nMath.floor()\nreturns the integer portion. Finally, the entire expression is added to\nlow\n(or the west coast) because you'll want to start counting from there. For example, if the longitude of west coast is 5000 and the east coast is 8000, 50 percent of the difference is still 1500. If you want to end up in the middle of the country, however, you need to add 1500 to 5000\u2014that is, 6500 (by counting from the west coast). Figure 5.10 should help you visualize this problem.\n\nFigure 5.10. A visual representation of the problem might help you solve the expression for percent.\n\nSolution:\n\nTranslation:\n\nAfter populating the array, our\nfor\nloop initializes\nn\nto\n(because, remember, the first item in an array is in index 0). Then, while\nn\nis less than\n7\n(the last item in the array is at index\n6\n), our\ntrace\nstatement displays the\nn\nth item in the array. Notice that the following also works, but displays the days in reverse order:\n\nfor (n in daysOfWeek){\ntrace(daysOfWeek[n]);\n}\n\nObjective:\n\nWrite a statement (using\nif\n,\nif else\n, or\nif else if\n) that sets a variable called\ngrade\nto A, B, C, D, or F, based on a variable called\nscore,\nusing a scale in which 90-100 is an A, 80-89 is a B, 70-79 is a C, 60-69 is a D, and 0-59 is an F.\n\nSolution:\n\nTranslation:\n\nGranted, this isn't the eloquent solution; there are many other possibilities. The way I\nsolved\nit was to first award an F (sort of discouraging, I suppose), and then if\nscore\nwas high enough (\nscore>=60\n) I give a D, and so on. Even though this isn't a super-efficient solution\u2014after all, if a score were 95, the grade would be assigned F, D, C, B, and then finally A\u2014I used it because it's easy to read, not because it shows off every component of ActionScript.\n\nSummary\n\nWhat a chapter! Believe it or not, there's more. However, the topics covered in this chapter cover almost all the typical programming tasks that you'll be doing day in and day out. Although many upcoming chapters have interesting and\nvaluable\ninformation, this chapter summarizes the core skills."}
{"text": "The definitions of OOP are vague. The majority of people claim OOP should include both use of objects and some support of reusability including abstraction, inheritance, thus, some languages, known as object-based languages are generally distinguished from OOP languages.\n\nObject-oriented programming expresses a computer program as a set of these objects, which encapsulate data with function and provide regulated communicate between each other to perform tasks. This differs from traditional procedural languages in which data and procedures are separate. The objective of Object-oriented programming is componentise software in-order to make programs easier to write, maintain, reuse and prove correct.\n\nAnother way this is often expressed is that object-oriented programming encourages the programmer to think of programs primarily in terms of the data types, and secondarily on the operations (\"methods\") specific to those data types. Procedural languages encourage the programmer to think primarily in terms of procedures, and secondarily the data that those procedures operate on.\nProcedural programmers write functions, then pass data to them. Object-oriented programmers define objects with data and methods, then send messages to the objects telling them to perform those methods on themselves.\n\nThere is some disagreement about exactly which features of a programming method or language qualify as \"object-oriented\", but there is a general consensus that the following features are most important (each of which is explained in more detail on its own linked page):\n\nAbstraction: Each object in the system serves as a model of an abstract \"actor\" that can perform work, report on and change its state, and \"communicate\" with other objects in the system, without revealing how these features are implemented. Processes, functions or methods may also be so abstracted, and when they are, a variety of techniques are required to extend an abstraction.\n\nEncapsulation: Also called \"information hiding\", this ensures that objects cannot change the internal state of other objects in unexpected ways; only the object's own internal methods are allowed to access its state. Each type of object exposes an interface to other objects that specifies how other objects may interact with it. Some languages relax this, allowing some direct access to object internals in a controlled way, and limiting the degree of abstraction.\n\nPolymorphism: References to and collections of objects may contain objects of different types, and invoking a behavior on a reference will produce the correct behavior for the actual type of the referent. When it occurs at \"run time\", this latter feature is called late binding or dynamic binding. Some laguages provide more static (\"compile time\") means of polymorphism such as C++ templates and operator overloading.\n\nInheritance: Organizes and facilitates polymorphism and encapsulation by permitting objects to be defined and created that are specialized types of already-existing objects - these can share (and extend) their behavior without having to reimplement that behavior. This is typically done by grouping objects into classes, and classes into trees or lattices reflecting common behavior.\n\nObject-based programming techniques include the concept of an object (encapsulation, and abstraction) but do not include the object-oriented concepts of inheritance and polymorphism.\n\nThe concepts of object-oriented programming first took root in Simula 67, a language designed for making simulations, created by Ole-Johan Dahl and Kristen Nygaard of the Norwegian Computing Centre in Oslo. (Reportedly, the story is that they were working on ship simulations, and were confounded by the combinatorial explosion of how the different attributes from different ships could affect one another. The idea occurred to group the different types of ships into different classes of objects, each class of objects being responsible for defining its own data and behavior.) They were later refined in Smalltalk, which was developed in Simula at Xerox PARC, but was designed to be a fully dynamic system in which objects could be created and modified \"on the fly\" rather than having a system based on static programs.\n\nObject-oriented programming \"took off\" as the dominant programming methodology during the mid-1980s, largely due to the influence of C++, an extension of the C programming language. Its dominance was further cemented by the rising popularity of Graphical user interfaces, for which object-oriented progamming is particularly well-suited.\n\nObject-oriented features were added to many existing languages during that time, including Ada, BASIC, Lisp, Pascal, and others. Adding these features to languages that were not initially designed for them often led to problems with compatibility and maintainability of code. \"Pure\" object-oriented languages, on the other hand, lacked features that many programmers had come to depend upon. To bridge this gap, many attempts have been made to create new languages based on object-oriented methods but allowing some procedural features in \"safe\" ways.\nBertrand Meyer's Eiffel was an early and moderately successful language with those goals, but it has now been essentially supplanted by Java, largely due to the emergence of the Internet, for which Java has special features."}
{"text": "It is a well-known fact that the C language is closely related to many programming languages. This article discusses the Application Programming Interfaces (APIs) between Python and C. The Python/C APIs are widely\u2026\n\nAs a rapid application development language, Python is highly preferred for being easy to use, feature-rich and robust. With multi-core processors now becoming more ubiquitous, one would expect Python programs to exploit redundant\n\nGo is a new systems programming language launched by Google, and has received wide attention in the programming community. This article gives you an overview of this language, with some specific examples to\u2026\n\nPython is one of the most popular programming languages ever \u2014 its great productivity, flexibility and general-purpose nature efficiently address areas ranging from Internet applications to system uses. Much of Python's power comes\u2026"}
{"text": "Top Source Codes\n\nA search function to achieve the three c-language source code, namely, sequential search, binarysearch and binarysearch tree to find. VC can be compiled to run directly on the search algorithm has done a very good presentation.... Data structsVisual C++\n\nachieve the plan's search algorithm, including depth-first search, breadth- first search algorithm Dijstra, A* algorithm is more typical search algorithm, and can map the input and editing operation, only for reference.... AI-NN-PRVisual C++"}
{"text": "Open Source Development\n\nOpen Source Development is the development of applications using open source, Open source is growing because users do not want to pay expensive application in proprietary software. Growing open source technology and demonstrate its strength as an environment that is not inferior to the licensed technology. Linovtech excel in training java-based open source development and PHP.in other ways many beginners who want to start learning simple IT through a website using open source content management system like Joomla and Drupal because it does not need to master a programming language first.\n\nCourse\n\nDuration\n\nPHP Basic\n\nAble to build a simple web-based PHP application using MySQL as database. Emphasis is given over to introducing the basics of PHP and MySQL... Read more...\n\nLinux is, in simplest terms, an operating system. It is the software on a computer that enables applications and the computer operator to access the devices on the computer to perform desired functions.. Read more...\n\n24 Hours\n\nJoomla\n\nThis three-day instructor-led course provides students with the knowledge and skills to use Joomla!.Joomla! is a popular, easy-to-use, open-source CMS... Read more...\n\n20 Hours\n\nMagento\n\nMagento Administrators are responsible for managing the entire system including users, orders, customers. Read more...\n\n16 Hours\n\nDrupal\n\nThis four-day instructor-led course provides students with the knowledge and skills to use Drupal. Drupal 7 Essential Training shows... Read more..."}
{"text": "Description\nGet Started Fast with Objective-C 2.0 Programming for OS X, iPhone, iPod touch, and iPad If you want to learn Objective-C 2.0 to write programs for Mac OS X, iPhone, iPad, or iPod touch, you've come to the right place! Concise, readable, and friendly, Learning Objective-C 2.0 is the perfect beginner's guide to the latest version of Objective-C.\nLongtime Mac OS X and iPhone developer Robert Clair covers everything from the absolute basics to Objective-C 2.0's newest innovations. Clair begins with a practical refresher on C and object-oriented programming and walks you through creating your first Objective-C program with Xcode. Next, you'll master each core language feature, from objects and classes to messaging, frameworks, and protocols. Every concept is illustrated with simple examples, and many chapters contain hands-on practice exercises.\nThroughout, Learning Objective-C 2.0 focuses on the features, concepts, and techniques that matter most day to day. The result is an outstanding first book for everyone who wants to begin programming for iPhone, iPod touch, iPad, or Mac OS X.\nCOVERAGE INCLUDES\n\nUnderstanding methods, messages, and the Objective-C messaging system\nDefining classes, creating object instances, and using class objects\nUsing categories to extend classes without subclassing"}
{"text": "Introduction to Functional Algorithmic and Programming (supervising, lecture and tutorial)\n\nAdvanced Testing Techniques (supervising)\n\nMoreover, I have given a class in Galatasaray University, Istanbul, Turkey on some advanced topics in runtime verification (April 2012).\n\nAdditionally, I have been invited as a lecturer at Pontificia Universidad Javeriana, Bogota, Colombia in July 2012. In the context of a curriculum on Advanced Topics on Software Engineering, I have taught two topics there:"}
{"text": "32 Copies):90.95\n\nFREE\n\nAbout the Book\n\nDesigned for an introductory software engineering course or as a reference for programmers, this up to date text uses both theory and applications to design reliable, error-free software. Starting with an introduction to the various types of software, the book moves through life-cycle models, software specifications, testing techniques, computer-aided software engineering and writing effective source code. A chapter on applications covers software development techniques used in various applications including VisualBasic, Oracle, SQLServer, and CrystalReports. A CD-ROM with source code and third-party software engineering applications accompanies the book."}
{"text": "ObjectOrientedDesign\n\nObjectOrientedDesign is program design that makes effective use of ObjectOrientedProgramming techniques to give a good balance between factors such as code reuse, modularity, et cetera.\n\nIf this whole object thing doesn't ring a bell, you might want to read out introduction into AnObject and what it's good for.\n\nTo view an excruciatingly-long introduction to object oriented programming, read  - The author requires 2000 words to communicate something that would be much more understandable in 200. All the concepts are there, but you have to read for half an hour to learn things you could grasp in five minutes if the author or his editors had exercised any sort of discipline.\n\nObjectOrientedDesign often makes for a program whose code is much easier to edit, and in the case of libraries and API's, much easier to learn. It can appeal to the programmer's common sense, and can make programming easier.\n\nOn the down side, ObjectOriented programs run slower than their procedural counterparts, because more code is being executed, period. But this is not always noticeable, and ObjectOriented programs written in, for instance, ObjC have the advantage of being able to contain procedural code as well.\n\nOverall, the advantages of ObjectOrientedDesign and ObjectOrientedProgramming far outweigh the disadvantages, except in rare circumstances where speed is of the essence. Such cases can often be fixed by wrapping very fast procedural, or even assembler, code within an OO shell, optimizing the code that needs to be fast without losing the benefits of ObjectOrientedDesign in the program as a whole.\n\nObjectDecomposition is the mechanism for solving problems in an object-oriented fashion. ObjectDecomposition breaks a problem into its components (or objects) and their relationships instead of breaking a problem into its data and the operations (structural decomposition).\n\nI don't like this section:\n\nOn the down side, ObjectOriented programs run slower than their procedural counterparts...\n\nThis is true if your code is very procedural by nature. However, if the problem you are solving is something very adapted to OO (sending lots of messages everywhere), to the point that you can leverage the existing message-passing system, then using an OO language can make your application faster and less buggy, since the language's implementation of OO concepts is almost certainly faster and less buggy than the ad-hoc version you'd be forced to grow if you used a procedural language.\n\nHowever, I'm not sure how to distill these thoughts into something that fits in the above text. Suggestions?"}
{"text": "A brief introduction to Python\n\nThe Python programming language was created by Guido van Rossum in the early 1990's. It is a high-level scripting language that benefits from a simple and human readable syntax, a comprehensive core library, and the ability to be extended using native code. Python is a multi-paradigm language, supporting object-oriented and functional programming styles, among others, giving you the freedom to approach a problem in a variety of ways.\n\nPython on Symbian (also known as \"PySymbian\" or \"PySymbian\") is Nokia's port of the Python language for the Symbian platform, and is the subject of this book. Python on Symbian was first released by Nokia at the end of 2004, and was contributed to the Symbian Foundation in early 2010. In the following chapters, we describe the latest version of Python on Symbian, v2.0.\n\nWhy should I use Python on Symbian?\n\nThe main reason to use Python on Symbian is that it is easy to learn, and you can do a lot with very little code. Most people can read Python code with only a few hours of study, and can start developing mobile applications not long afterwards!\n\nApplications created in Python are indistinguishable from native C++ applications and, for most purposes offer much the same performance. Most of the important functionality that is available to native applications (for example, access to the camera, device position, sensors etc) is exposed to Python applications through simple APIs.\n\nIf you are a developer proficient in another programming language (such as Symbian C++, Java ME or others) you can also benefit by using Python for rapid application development. So little code is needed when compared to other languages, that fully functional applications can be prototyped, demonstrated and tested very quickly!\n\nGetting started\n\nPython applications (\"scripts\") are simply text files containing code written in the Python programming language and named with the file extension \".py\". The scripts can be written using any text editor and can be run either from within the Python Interactive Shell application on a device or device emulator, or as standalone applications that can be installed onto a Symbian device.\n\nThis section explains how to download and install Python onto your Symbian device or emulator.\n\nDownloading the installation files\n\nThe Python on Symbian installation files can be downloaded from the Maemo Garage. The installation package contains Python reference documentation, the Application packager for making your scripts into stand-alone applications and the SIS files to be installed to a device.\n\nPython_2.0.0_SDK_3rdEdFP2.zip: a patch for the SDK to support Python development/\n\nDevelopers using Linux/Mac need to download the following:\n\nPythonForS60_2.0.0.tar.gz: An all-in-one archive includes all the contents provided by the Windows installer except the GUI for the packaging tool.\n\nSetting up your computer\n\nRun the following setup file to install on windows, or unzip the archive to install on Mac/Linux:\n\n(Windows): PythonForS60_2.0.0_Setup.exe\n\n(Mac/Linux): PythonForS60_2.0.0.tar.gz\n\nOn Windows, the tools and documentation are accessible from an option on the Start menu (Start | Programs | PythonForS60 2.0.0). Mac and Linux users will need to execute files directly (that is, you need to run the Application Packager by executing ensymble_gui.py).\n\nWhile it is possible to use simple editors like Windows Notepad to write Python scripts, we recommend using a more powerful and flexible text editor to take advantage of built-in Python syntax highlighting and code folding. A couple of good editors are Notepad++ and Textpad.\n\nNote: While you can write code in the classic Python IDLE IDE ( it is not possible to run code that depends on PySymbian-specific libraries in this or any other Python IDE. Python scripts for Symbian must be run inside the Symbian platform emulator or on the target device.\n\nInstalling Python onto your Symbian device\n\nThe easiest way to test your Python application is simply to run it on a Symbian device. PySymbian v2.0.0 is compatible with any Symbian device (including Nokia S60 5th Edition phones and the earlier S60 3rd Edition devices). But, if you don't have a compatible phone, don't worry, the next section explains how you can run your scripts on the Windows-hosted Symbian emulator.\n\nThe SIS files you need are available in the \\PythonForS60\\PySymbianDependencies\\ directory of your Python installation. Windows users can open the directory from the start menu.\n\n(PythonScriptShell_2.0.0_3_0.sis should be used for earlier S60 3rd Edition devices).\n\nPC Suite software is currently available for Windows operating system only. However, Linux users can install the above sis files by copying them to the SD card and launching them by the File Manager application of the phone.\n\nTo verify the installation, you should be able to launch the code using the Python icon, usually found in Installations folder.\n\nNote: If you wish to use Python on a non-Nokia Symbian device, you need to obtain manufacturer signed SIS file of the Python runtime. This could be available at the respective manufacturer developer websites.\n\nInstalling Python on your Symbian Emulator (Windows only)\n\nIf you don't have a Symbian device, you can still test your PySymbian scripts by running them within the Symbian platform emulator on Windows.\n\nNote that you'll first need to unzip the SDK to a temporary directory, and then run setup.exe. The installation will warn that you need to install Perl, but this is only necessary for C++ development, so you may ignore the warning. The patch will then need to be unzipped over the SDK so that it writes into the SDK's \\epoc32\\ directory. Accept all prompts to replace files during unzipping to allow this to happen.\n\nOn first use, the Symbian SDK may prompt you to register it, which is a straightforward process, although you will need to sign up with Nokia Developer at  if you haven't already done so.\n\nYou can launch the emulator by clicking on epoc.exe which is stored at <SDK installation directory>/epoc32/release/winscw/udeb/epoc.exe. Navigate to the Python icon in the Installations folder in the same way as you would on a device and click on the Python icon to launch the Python Interactive Script shell.\n\nIf Python shows an error message stating that the Python Runtime or PIPS Library are not installed, you will need to download and install the Open C/C++ Plugin for your SDK, which is available from Nokia Developer.\n\nTesting sample scripts\n\nPython's Interactive Script Shell makes it very easy to test your scripts during development. The shell is simply an application that allows you to type in and run arbitrary Python commands, or to load and run whole script files.\n\nLet's create a simple Python application. Write the following line in your text editor:\n\nprint\"Hello Python on Symbian\"\n\nSave the file as firstscript.py. Note that the extension of the file is .py and not .txt.\n\nThat's it, you're a programmer!\n\nTesting on a Symbian device\n\nTo test the script on the phone, we first need to transfer the script using the Nokia PC Suite (Linux users can transfer the script by copying it to the SD card). Connect to the phone and copy the script to either C:\\Data\\Python or E:\\Data\\Python.\n\nFile Manager on Nokia PC Suite\n\nOnce the file has been successfully transferred to the Python folder, it is ready to be tested. You can start the Python shell on your device by clicking on the Python icon in the Installations folder. Select Options | Run Script, and you'll see your script listed among other pre-installed scripts. Choose your script from the list by pressing OK. Your script should now start up and you should see the text \"Hello Python on Symbian\".\n\nFigure: Testing scripts on a Symbian device\n\nHurray! You have just successfully deployed and tested your first Python script on the phone. You can also run and test the other pre-installed scripts like ball.py and snake.py, which demonstrate the power of Python on Symbian. Have fun!\n\nTesting on Symbian Emulator\n\nTesting scripts on the emulator is quicker than testing scripts on the device. The advantage of testing on the emulator is that you can make quick fixes to the script and test them instantly. However, it is strongly recommended to thoroughly test scripts for usability on the target devices before releasing them as 'finished'. This is because the script may behave differently on the hardware in some rare cases.\n\nTo test firstscript.py we need to place it in <SDK installation directory>\\epoc32\\winscw\\c\\data\\python. Launch the Symbian emulator, navigate to the Python icon in the Installation folder and launch the script shell. You can test the script by selecting Options | Run Script and choosing firstscript.py from the list.\n\nFigure: Testing scripts on Symbian Emulator\n\nSummary\n\nThis chapter provides a brief overview of Python on Symbian and explains the main reasons why you should consider using it instead of Qt, Symbian C++ or Java ME. In addition, the chapter explains how to set up your Python development environment on the PC, Mac or Linux, and explains how to get scripts running on a Symbian device and on the Windows emulator. You also get to write and test your first small program!\n\nWhile you're unlikely to have run into any problems following the instructions in this chapter, there are lots of excellent resources you use if you get stuck. The Nokia Developer Python wiki category has answers to lots of common questions, and the Python discussion boards are a good place to ask new questions (we and many other fellow Python developers are happy to you).\n\nThis is just a taster of how simple things can be when developing with Python on Symbian. IF you have any cool ideas, note them down, because you should be ready to implement them as you proceed through this book.\n\nIn the next chapter we start to understand the basics elements of the Python language."}
{"text": "PERL Introduction\n\nAdvertisements\n\nPerl is a general-purpose programming language originally developed for text manipulation and now used for a wide range of tasks including system administration, web development, network programming, GUI development, and more.\n\nWhat You Should Already Know\n\nIf you have basic knowledge of C or UNIX Shell then PERL is very easy to learn. If this is your first language to learn then you may take one to two week to be fluent in PERL\n\nWhat is PERL?\n\nPerl is a stable, cross platform programming language.\n\nPerl stands for Practical Extraction and Report Language.\n\nIt is used for mission critical projects in the public and private sectors.\n\nIs Perl Compiled or Interpreted\n\nGood question. The sort answer is interpreted, which means that your code can be run as is, without a compilation stage that creates a nonportable executebale program.\n\nTradional compilers convert programs into machine language. When you run a Perl program, it's first compiled into a bytecode, which is then converted ( as the program runs) into machine instructions. So it is not quite the same as shells, or Tcl, which are \"strictly\" interpreted without an intermediate representation. Nor it is like most versions of C or C++, which are compiled directly into a machine dependent format. It is somewhere in between, along with Python and awk and Emacs .elc files."}
{"text": "step-by-step guide to understanding object-oriented programming with Objective-C\n\nAs the primary programming language for iPhone, iPad, and Mac OS X applications, Objective-C is a reflective, object-oriented language that all programmers must know before creating apps. Assuming no prior programming language experience, this fun-and-friendly book provides you with a solid understanding of Objective-C. Addressing the latest version of Xcode, debugging, code completion, and more, veteran author Neal Goldstein helps you gain a solid foundation of this complex topic, and filters out any unnecessary intricate technical jargon.\n\nAssumes no prior knowledge of programming and keeps the tone clear and entertaining\n\nExplains complicated topics regarding Objective-C with clarity and in a straightforward-but-fun style that has defined the For Dummies brand for 20 years\n\nFeatures all material completely compliant with the latest standards for Objective-C and Apple programming\n\nObjective-C Programming For Dummies is the ideal beginner book if your objective is to venture into iPhone, iPad, and Mac OS X development for the first time!"}
{"text": "How to start learning Python language\n\nPython is a dynamic object-oriented programming language which can be learned in a few days time. It offers strong support for integration with other languages and tools and comes with extensive standard libraries. The Python compiler and libraries are installed by default in most Linux distributions. So an aspiring Python programmer need not install anything on his machine but just need to have a desire and motivation to learn Python.\n\nPython being a free language, has given rise to numerous online resources in the form of tutorials and books which hand hold a beginner in learning this powerful language. Some of the resources I have encountered on the net are listed below:\n\nWeb programming in Python \u2013 This page contain a collection of diverse links to resources which get you up and running in programming for the web using Python.\n\nLearning to Program \u2013 An introduction to programming for those who have never programmed before, by Alan Gauld. It introduces several programming languages but has a strong emphasis on Python.\n\nA Byte of Python \u2013 This is a book by Swaroop C.H. It serves as a tutorial or guide to the Python language for a beginner audience. If all you know about computers is how to save text files, then this is the book for you.\n\nOne Day of IDLE Toying A very gentle introduction to the IDLE development environment that comes with Python. This tutorial by Danny Yoo has been translated into nine different languages.\n\nInstant Hacking \u2013 A minimal crash course by Magnus Lie Hetland that's an excellent starting point. This is a short introduction to the art of programming, with examples written in the programming language Python."}
{"text": "The money generated from the website will help us improve the website.\nUse our shopping\ncenter to make your online purchases from today.\n\nProgramming Languages\n\nA programming language is a stylized communication technique intended to\nbe\nused for controlling the behavior of a machine (often a computer).\nLike human languages programming languages have syntactic and semantic\nrules used to define meaning.\n\nThousands of different programming languages have been created and\nnew ones are created every year. (see list of programming languages).\nFew languages ever become sufficiently popular that they are used by\nmore than a few people, but professional programmers are likely to use\ndozens of different languages during their career.\n\nDefinitions of programming language\n\nThere is no universally agreed definition for the term programming\nlanguage. The following is a list of some of the methods that have been\nused to categorize a language as being a programming language.\n\nWhat it is used for. For instance, a programming language is a\nlanguage used to write programs.\n\nThose involved in the interaction. For instance, a programming\nlanguage differs from natural languages in that natural languages\nare used for interaction between people, while programming languages\nare used for communication from people to machines (this rules out\nlanguages used for computer to computer interaction).\n\nThe constructs it contains. For instance, a programming language\ncontains constructs for defining and manipulating data structures,\nand for controlling the flow of execution.\n\nIts expressive power. The theory of computation provides a\nclassification of languages based on the range of computations\nexpressible by them, with the most expressive language being one\nthat is Turing complete (the language needs to contain at least a\nlooping construct and a method of storing values, ie, variables).\nAny program that can be written in a language that is Turing\ncomplete can also be written in another language that is Turing\ncomplete. Some examples of languages that are not Turing complete\nare pure HTML (the use of embedded PHP or Javascript makes it Turing\ncomplete) and SQL (SQL vendors invariably add language extensions\nthat create a Turing complete language, e.g., PL/SQL).\n\nFeatures of a Programming Language\n\nEach programming language can be thought of as a set of formal\nspecifications concerning syntax, vocabulary, and meaning.\n\nThese specifications usually include:\n\nType system\n\nData structures\n\nInstruction and control flow\n\nDesign philosophy\n\nCompilation and interpretation\n\nThose languages that are widely used \u2013 or have been used for a\nconsiderable period of time \u2013 have standardization bodies that meet\nregularly to create and publish formal definitions of the language and\ndiscuss the extension of existing definitions.\n\nHistory of programming languages\n\nThe development of programming languages follows closely the\ndevelopment of the physical and electronic processes used in today's\ncomputers.\n\nProgramming languages have been under development for years and will\nremain so for many years to come. They got their start with a list of\nsteps to wire a computer to perform a task. These steps eventually found\ntheir way into software and began to acquire newer and better features.\nThe first major languages were characterized by the simple fact that\nthey were intended for one purpose and one purpose only, while the\nlanguages of today are differentiated by the way they are programmed in,\nas they can be used for almost any purpose. And perhaps the languages of\ntomorrow will be more natural with the invention of quantum and\nbiological computers.\n\nCharles Babbage is often credited with designing the first\ncomputer-like machines, which had several programs written for them (in\nthe equivalent of assembly language) by Ada Lovelace.\n\nIn the 1940s the first recognizably modern, electrically powered\ncomputers were created. Some military calculation needs were a driving\nforce in early computer development, such as encryption, decryption,\ntrajectory calculation and massive number crunching needed in the\ndevelopment of atomic bombs. At that time, computers were extremely\nlarge, slow and expensive: advances in electronic technology in the\npost-war years led to the construction of more practical electronic\ncomputers. At that time only Konrad Zuse imagined the use of a\nprogramming language (developed eventually as Plankalk\u00fcl) like those of\ntoday for solving problems.\n\nSubsequent breakthroughs in electronic technology (transistors,\nintegrated circuits, and chips) drove the development of increasingly\nreliable and more usable computers. The first widely used high-level\nprogramming language was FORTRAN, developed during 1954\u201357 by an IBM\nteam led by John W. Backus. It is still widely used for numerical work,\nwith the latest international standard released in 2004. A Computer\nLanguages History graphic shows a timeline from FORTRAN in 1954.\n\nShortly after, Lisp was introduced. Lisp was based on lambda\ncalculus, and is far more regular in its syntax than most non-Lisp\nderived languages.\n\nDennis Ritchie developed the C programming language, initially for\nDEC PDP-11 in 1970.\n\nDuring the 1970s, Xerox PARC developed Smalltalk, an object oriented\nlanguage.\n\nBased on the development of Smalltalk and other object oriented\nlanguages, Bjarne Stroustrup developed a programming language based on\nthe syntax of C, called C++ in 1985.\n\nSun Microsystems released Java in 1995 which became very popular as\nan introductory programming language taught in universities. Microsoft\npresented the C# programming language in 2001 which is very similar to\nC++ and Java. There are many, many other languages\n\nObject-oriented programming language\n\nAn object-oriented programming language (also called an OO language)\nis one that allows or encourages, to some degree, object-oriented\nprogramming methods.\n\nSimula (1967) is generally accepted as the first language to have the\nprimary features of an object-oriented language. It was created for\nmaking simulation programs, in which what came to be called objects were\nthe most important information representation. Smalltalk (1972 to 1980)\nis arguably the canonical example, and the one with which much of the\ntheory of object-oriented programming was developed.\n\nOO languages can be grouped into several broad classes, determined by\nthe extent to which they support all features and functionality of\nobject-orientation and objects: classes, methods, polymorphism,\ninheritance, and reusability.\n\nLanguages called \"pure\" OO languages, because everything\nin them is treated consistently as an object, from primitives such\nas characters and punctuation, all the way up to whole classes,\nprototypes, blocks, modules, etc. They were designed specifically to\nfacilitate, even enforce, OO methods. Examples: Smalltalk, Eiffel,\nRuby.\n\nLanguages designed mainly for OO programming, but with some\nprocedural elements. Examples: Java, Python.\n\nLanguages that are historically procedural languages, but have\nbeen extended with some OO features. Examples: C++, Fortran 2003,\nPerl.\n\nLanguages with most of the features of objects (classes, methods,\ninheritance, reusability), but in a distinctly original, even\nelegant, form. Examples: Oberon, and successor Oberon-2.\n\nLanguages with abstract data type support, but not all features of\nobject-orientation, sometimes called object-based languages.\nExamples: Modula-2 (with excellent encapsulation and information\nhiding), Pliant.\n\nInheritance and polymorphism are usually used to reduce code bloat.\nAbstraction and encapsulation are used to increase code clarity, quite\nindependent of the other two traits. [Source: Compiled from Wikipedia]\n\nLinks to Programming Languages\n\nEssentials of Programming Languages: The goal of this book is to give students a deep, hands-on understanding of the essential concepts of programming languages, using Scheme as an executable\nmetalanguage. Because Scheme is a wide-spectrum language, it enables us to write both at the very high level needed to produce a concise, comprehensible interpreter and at the much lower level needed to understand how that interpreter might be coded in assembly language, or transformed into a compiler.\n\nVisual Language Research Bibliography:\nThis page is a structured bibliography of papers pertaining to visual language (VL)\nresearch. It also contains a brief list of links to other, related resources\nabout visual language research.\n\nDictionary of Programming Languages:\nWelcome to the Dictionary of Programming Languages, a compendium of computer\ncoding methods assembled to provide information and aid your appreciation for\ncomputer science history. The dictionary currently has over 120 entries.\n\nTHE Language List:\nThe largest and most comprehensive list on the net by the CUI group at\nUniversity of Geneva and Bill Kinnersley, with good search capability, and\nlinks to FTP sites for compilers and tools. Some of the links on the list may be\noutdated.\n\nThe Random Programming Languages List:\nHave you ever programmed something just for fun? Written a program just for the\nchallenge of writing it? Have you ever wondered whether there are languages that\nare more fun than C? Have you ever wondered what life would be like without our\nnifty tools? If so, this is the page for you. It might be the page for you even\nif you didn't answer yes, but it is definitely the page for you if you did.\n\nProgramming Languages: Every\nserious student of computing should be familiar with a range of different\nlanguages (for example, I used a mixture of C, C++, Delphi, JavaScript, Perl and\nTcl/Tk to create this CD). This collection includes compilers and other\nresources for a wide variety of programming languages, including conventional\nprocedural languages, object-oriented languages, functional languages, logic\nprogramming languages, scripting languages, and some just plain weird languages.\nYou can choose which are which!\n\nReview of Programming Languages:\nWhen Tunes is ready, this page will be made a query-driven database (with\nstandard query forms) where languages/implementations couples will be classified\nupon the characteristics below. Meanwhile, please forgive the bad quality of\nthis page, and think about enhancing it by your contributions."}
{"text": "Find and share cheat sheets and programming resources\n\nThe history of programming languages, poster\n\nMore info\n\nFor 50 years, computer programmers have been writing code. New technologies continue to emerge, develop, and mature at a rapid pace. Now there are more than 2,500 documented programming languages! O'Reilly has produced a poster called History of Programming Languages (PDF: 701K), which plots over 50 programming languages on a multi-layered, color-coded timeline."}
{"text": "Less a tutorial than a problem-solver, this practical guide shows you how to solve many of the real-world problems that C++ developers encounter, including how to parse a date and time string and how..."}
{"text": "ID: 423 | Video: High | Audio: High | Animation: None\n\nLearn about basics of computer programming using the Python programming language.\n\nComputer programming skills are now becoming part of basic education as these skills are increasingly of vital importance for future job and career prospects. This free online course introduces you to the core components of programming using the Python programming language which is one of the most popular programming languages worldwide. The course shows you how to use the free open-source PyScripter IDE for Python to write basic programs using concepts such as functions, variables, If Else statements, For loops, While loops, iterative and recursive programs and algorithms such as the Insertion Sort algorithm. This course will be of great interest to all learners who would like to gain a thorough knowledge and understanding of the basic components of computer programming using the Python language \u2013 and might be a gentle introduction to programming for those who think they might have a longer term interest in the subject area.\n\nLearning Outcomes:\n- How to use the PyScripter IDE for the Python programming language;\n- How to create a function;\n- How to implement an If Else statement;\n- How to use variables in For loops and While loops;\n- Iterative and recursive programs;\n- Algorithms such as the Insertion Sort algorithm;\n\nPritpal Singh - India\n\nPritpal Singh - India\n\n2013-04-14 19:04:19\n\nThis video was amazing. I could understand easily\n\nPritpal Singh - India\n\n2013-04-14 16:04:21\n\nYou explained very nicely\n\nNancy Allison - United States of America\n\n2013-03-27 21:03:09\n\nIn the final eval (of expression_string), I don't understand why the interpreter recognized a and b as strings instead of discrete characters. They are inside \"\" -- is it because they aren't individually set apart with quotes?\n\nIn other words, I expected eval(expression_string) to produce \"a+ '+b' tiger'\""}
{"text": "Articles\n\nDo you need to know object-oriented programming to create mobile apps? Matt Weisfeld answers that question by examining three questions of his own: What mobile devices are the most prominent in the marketplace today, what programming languages are used to program these devices, and why has object-oriented programming become so important?Jesse Smith concludes his series by showing how to use the Android emulator and developer tools to effectively test and produce more robust applications that will get your apps better ratings on the Android market."}
{"text": "Pseudo- uses the structural conventions of a programming language, but is intended for human reading rather than machine reading. Pseudocode typically omits details that are not essential for human understanding of the algorithm, such as variable declarations, system-specific code and some subroutines. The programming language is augmented with natural language description details, where convenient, or with compact mathematical notation. The purpose of using pseudocode is that it is easier for people to understand than conventional programming language code, and that it is an efficient and environment-independent description of the key principles of an algorithm. It is commonly used in textbooks and scientific publications that are documenting various algorithms, and also in planning of computer program development, for sketching out the structure of the program before the actual coding takes place.\n\nNo standard for pseudocode syntax exists, as a program in pseudocode is not an executable program. Pseudocode resembles, but should not be confused with skeleton programs, including dummy code, which can be compiled without errors. Flowcharts and Unified Modeling Language (UML) charts can be thought of as a graphical alternative to pseudocode, but are more spacious on paper.\n\nApplication\n\nTextbooks and scientific publications related to computer science and numerical computation often use pseudocode in description of algorithms, so that all programmers can understand them, even if they do not all know the same programming languages. In textbooks, there is usually an accompanying introduction explaining the particular conventions in use. The level of detail of the pseudo-code may in some cases approach that of formalized general-purpose languages.\n\nA programmer who needs to implement a specific algorithm, especially an unfamiliar one, will often start with a pseudocode description, and then \"translate\" that description into the target programming language and modify it to interact correctly with the rest of the program. Programmers may also start a project by sketching out the code in pseudocode on paper before writing it in its actual language, as a top-down structuring approach, with a stepwise refinement.\n\nSyntax\n\nAs the name suggests, pseudocode generally does not actually obey the syntax rules of any particular language; there is no systematic standard form, although any particular writer will generally borrow style and syntax; for example, control structures from some conventional programming language. Popular syntax sources include Pascal, BASIC, C, C++, Java, Lisp, and ALGOL. Variable declarations are typically omitted. Function calls and blocks of code, such as code contained within a loop, are often replaced by a one-line natural language sentence.\n\nDepending on the writer, pseudocode may therefore vary widely in style, from a near-exact imitation of a real programming language at one extreme, to a description approaching formatted prose at the other.\n\nprogram fizzbuzz\ndo i =1to100\nset print_number to true\nif i is divisible by 3\nprint \"Fizz\"\nset print_number to false\nif i is divisible by 5\nprint \"Buzz\"\nset print_number to false\nif print_number, print i\nprint a newline\nenddo\n\nvoidfunction fizzbuzz\nfor(i =1; i<=100; i++){\nset print_number to true;if i is divisible by 3\nprint \"Fizz\";\nset print_number to false;if i is divisible by 5\nprint \"Buzz\";\nset print_number to false;if print_number, print i;\nprint a newline;}\n\nSee also category: Articles with example pseudocode\n\nMathematical style pseudocode\n\nIn numerical computation, pseudocode often consists of mathematical notation, typically from set and matrix theory, mixed with the control structures of a conventional programming language, and perhaps also natural language descriptions. This is a compact and often informal notation that can be understood by a wide range of mathematically trained people, and is frequently used as a way to describe mathematical algorithms. For example, the sum operator (capital-sigma notation) or the product operator (capital-pi notation) may represent a for loop and perhaps a selection structure in one expression:\n\nMachine compilation of pseudo-code style languages\n\nNatural language grammar in programming languages\n\nVarious attempts to bring elements of natural language grammar into computer programming have produced programming languages such as HyperTalk, Lingo, AppleScript, SQL, Inform and to some extent Python. In these languages, parentheses and other special characters are replaced by prepositions, resulting in quite talkative code. These languages are typically dynamically typed, meaning that variable declarations and other boilerplate code can be omitted. Such languages may make it easier for a person without knowledge about the language to understand the code and perhaps also to learn the language. However, the similarity to natural language is usually more cosmetic than genuine. The syntax rules may be just as strict and formal as in conventional programming, and do not necessarily make development of the programs easier.\n\nMathematical programming languages\n\nAn alternative to using mathematical pseudocode (involving set theory notation or matrix operations) for documentation of algorithms is to use a formal mathematical programming language that is a mix of non-ASCII mathematical notation and program control structures. Then the code can be parsed and interpreted by a machine.\n\nAlternative forms of pseudocode\n\nSince the usual aim of pseudocode is to present a simple form of some algorithm, using a language syntax closer to the problem domain would make the expression of ideas in the pseudocode simpler to convey in those domainsudo-"}
{"text": "Programs are often organized in a modular fashion. Lower-level operations are grouped together, and called by higher-level functions, which may in turn be used as basic operations by still further upper levels.\n\nPatrick, this is a really great tiuortal for all who wants to start with Python!Will you make more tuts on this? I saw some tuts on Python in Internet but I can't remember where that was So I'm on a halfway I need more specific tools but I'm lazy (and don't want to spend a lot of time to search all novice lessons for climbing on Python). It would be nice if you'll show people how to easily use API docs, some easy lessons on simple maths, loops and functions, the common syntax and etc. I think that it will be interesting even for those people who see OOPL their first time because if they seats on BlenderCookie then they possibly will be interested about all things linked with Blender\n\nFor example, the lowest level might define a very low-level set of functions for accessing a hash table. The next level might use hash tables to store the headers of a mail message, mapping a header name like ``Date`` to a value such as ``Tue, 13 May 1997 20:00:54 -0400``. A yet higher level may operate on message objects, without knowing or caring that message headers are stored in a hash table, and so forth.\n\nOften, the lowest levels do very simple things; they implement a data structure such as a binary tree or hash table, or they perform some simple computation, such as converting a date string to a number. The higher levels then contain logic connecting these primitive operations. Using the approach, the primitives can be seen as basic building blocks which are then glued together to produce the complete product.\n\nWhy is this design approach relevant to Python? Because Python is well suited to functioning as such a glue language. A common approach is to write a Python module that implements the lower level operations; for the sake of speed, the implementation might be in C, Java, or even Fortran. Once the primitives are available to Python programs, the logic underlying higher level operations is written in the form of Python code. The high-level logic is then more understandable, and easier to modify.\n\nJohn Ousterhout wrote a paper that explains this idea at greater length, entitled \"Scripting: Higher Level Programming for the 21st Century\". I recommend that you read this paper; see the references for the URL. Ousterhout is the inventor of the Tcl language, and therefore argues that Tcl should be used for this purpose; he only briefly refers to other languages such as Python, Perl, and Lisp/Scheme, but in reality, Ousterhout's argument applies to scripting languages in general, since you could equally write extensions for any of the languages mentioned above."}
{"text": "Paper consists of Section A & Section B. Section A consist of Aptitude. It is very very easy. You can do the aptitude in 10 minutes. The total time is one hour. There is -ve marking.In Section B there are 3 parts. Part 1 is C,part 2 is C++,Part 3 is general. You should give much much preference to C++. C++ is very very important. C language questions are very easy. You give much time for solving C++ programs. In the interview also they are asking C++ only. You should be thourough in C++ in friend function, Inheretence,constroctors.In Section B each part consits of 10 questions. There are 30 aptitude questions. ALL THE BEST. Aptitude -------1)A sequence is given. You should find out error & write correct answer. 1 2 5 10 13 26 29 48. Error is 48,there you should write 58. 2)2,3 6,7 14,15 29,46. Error is 46. In every pair you add 1 to get second number. Ans:29+1=30 3)A fish problem is given.Ans:72 4)John's age like that there is one age problem. Ans:16 5)A girl is 13'th highest,13th lowest. How many member.Ans:25 6)Cookies problem. Ans:23. 7)Rearrange MERGANY Ans:GERMANY (country) 8)Rearrange BBIRAT Ans:RABBIT C LANGUAGE ---------1)#define min((a),(b)) ((a)<(b))?(a):(b) main() { int i=0,a[20],*ptr; ptr=a; while(min(ptr++,&a[9])<&a[8]) i=i+1; printf(\"i=%d\\n\",i);} Ans:5. 2)main() {char a[10]={1,2,3,4,5,6};int x; for(x=0;x<4;x++){ b[x]=x+'a';} printf(\"%s\",b);} Ans:abcd56 3)Linked Lists are preffered than arrays to get advantage while a)Insertion b)Deletion c)Accessing Element d)None 4)question on Stack 5)3 programs on recursion 6)~(~0<<8)? Ans:Last 8 digits are 1's rest are 0's. 7)int a,b=3,c=2; a=b++*c;c=++b*a;Some thing like this. print a,b,c? Ans:6,4,24 C++ ---1)Virtual Functions in C++(Refer to 13'th chapter first two examples of LAFORE Book) 2)Which of the following is not true regarding FRIEND function Ans:If y is friend of x and z is friend of y then z can access\nprivate of x. 3)Given some program on \"&\" operator overloading. 4)class X{ public:X(){ cout<<\"This is Base\";} }; class Y:public X { public:Y(){cout<<\"This is Derived\";}}; what is printed when an object of Y is created? 5)One question on reference variable in C++.Ans:&a. GENERAL SECTION --------------1) Number of nodes in Binary tree with height 3:Ans:7 (Refer to Formula 2^^n-1) 2)TCP/IP is used in? Ans:LAN/WAN 3)Host IP Address is? Ans:32 bits OR 4 bytes."}
{"text": "It is a general notion that people try to classify programming languages as either \"compiled\" language or \"interpreted\" language. Even experienced programmers tend to get confused here! But the fact is, programming languages are neither \"compiled\" nor \"interpreted\" types. They can be both at the same time. Compiling or interpreting -both are 2 different ways of implementing the same program written using a programming language. A program written in C language can either be compiled or can be interpreted. Same is the case with Java or any other programming languages. The only requirement is, we need a C or Java\u2026\n\nThis article teaches you how to add 32K external crystal source to AVR micro controller (Atmega8 ) with circuit diagram & C program. Introduction Timing-is one of the basic function, performed by the micro controllers. Every microcontroller has at least one timer/counter module in its architecture. However if the counter is clocked internally a few issues may arise in some cases. Sometimes the clock frequency may not stable, or sometimes the clock frequency may be too high than necessary. Sometimes external clock is required to have the required quality. To solve these problems, some AVR micro controllers comes up with\u2026\n\nThere is no one in this world who is born as a programmer To write efficient programs using any languages you have to learn it by doing! You have to write as many different programs using as many different algorithms. You have to break codes, make errors, debug errors and sometimes you have to approach the same problem using 2 or 3 different logics. To learn \"C language\" efficiently, you must write a lot of different C programs using the concepts of C language. To do this you need a good compiler for C language setup on your computer. Turbo\u2026\n\nThere are many compilers available for C language for different platforms, of which Turbo C is the one used commonly for Windows operating systems. You may all know that Turbo C/C++ is a 16 bit compiler which was originally developed for Windows versions up to XP. Nowadays most people uses latest versions of Windows like Vista and Windows 7. The primary reason behind this shift in usage of operating systems is \"stability\"! Windows XP is an unstable operating system where as Windows 7 is much better and can be considered as a stable operating system (when used for personal computing\u2026\n\nOur world relies upon Communication. In today's world, we can make almost anything communicate with everything! How about communication between a PC and a microcontroller (PIC)? Now, before making a PC and a PIC talk, if you are not sure about USART module and LCD, here are some good articles about them to just refresh: 1. PIC USART module \u2013 CT 2. A note on character LCD displays \u2013 CT In layman terms, a USART module in a PIC is like our voice box. Without the USART module, the controller will be in a mute state.What actually we are gonna\u2026\n\nIntroduction Every digital device that is driven by a CPU core processes some sort of digital information. Not all of them are digital data. In fact, major portion of them are some kind of instruction to the CPU. As we all know, they are patterns of zeros and ones. In groups, those zeros and ones are called as nibbles (a group of 4), bytes (A group of 8), half word (group of 16) and word (group of 32). Every microcontroller comes with an inbuilt memory. They store instruction and data. When their CPU runs, they fetch the code from\u2026\n\nThis article shows how to interface a DC motor to an 8051 microcontroller. Interfacing DC motor to 8051 forms an essential part in designing embedded robotic projects. A well designed 8051-DC motor system has essentially two parts. Firstly an 8051 with the required software to control the motor and secondly a suitable driver circuit. Most of the DC motors have power requirements well out of the reach of a microcontroller and more over the voltage spikes produced while reversing the direction of rotation could easily damage the microcontroller. So it is not wise to connect a DC motor directly to the\u2026\n\nWe are into third chapter of C programming in which we will discuss operators, operands, expressions and escape sequences. I assume that you have already gone through Chapter 1 \u2013 Data Types in C and Chapter 2 \u2013 Variables and Keywords in C. Operator \u2013 An operator is usually a symbolic representation of a particular operation. Ex:- + means addition * means multiplication etc. Operand \u2013 An operand is usually the data upon which the operator performs an action. Ex:- c=a+b; Here c, a, b are operands; where as + and = are 2 different operators.Operands can be constants or\u2026\n\nIn this chapter, I would like to explain variables and keywords in C language. I hope you have already gone through Chapter 1 \u2013 Data Types and Constants in C. Image Courtesy Variables A variable can be defined in many ways. At the basic level, a variable can be defined as a memory location declared to store any kind of data (which may change many times during program execution). It can also be defined as any quantity/entity which may vary during program execution. To identify a variable (the declared memory location), it can be assigned a name \u2013 known as\u2026\n\nA Note about 7 segment LED display. This article is about how to interface a seven segment LED display to an 8051 microcontroller. 7 segment LED display is very popular and it can display digits from 0 to 9 and quite a few characters like A, b, C, ., H, E, e, F, n, o,t,u,y, etc. Knowledge about how to interface a seven segment display to a micro controller is very essential in designing embedded systems. A seven segment display consists of seven LEDs arranged in the form of a squarish '8\u2032 slightly inclined to the right and a single\u2026"}
{"text": "Chapter 7: Writing a User Interface\n\nC H A P T E R 7\n\nWriting a User Interface\n\nMost of the people who want to develop software get into it to write programs that have rich user interfaces of some sort. That rich user interface might be through a set of windows, such as programs like Word or many games use, or through a web browser. However, a substantial community of developers largely develops programs that have no user interface. They write programs such as device drivers (the software that lets something like a mouse work with a computer), services (programs that provide information to other programs outside of the user interface), and database engines (which usually manage data in such a way that many programs can access that data). So there's plenty of work to do outside of user interfaces. Still, though, the vi...."}
{"text": "We all know we need to program for the Web, but we hear all kinds of stories about how hard Web languages are. This article compares two of the most popular options.\n\nThe Web beckons. The green-screen has been more than adequate for years, even decades, but the pressure for something more modern keeps building. If you don't figure out how to expose your business logic via some sort of browser-based user interface, the Windows crowd is going to demand a GUI solution. That means the business logic starts migrating away from RPG. Not long after that, the database itself follows, and it's goodbye IBM i. So you need a Web solution and you need it now, but how do you get there? Today I'll compare the fundamental characteristics of the two most popular options for the IBM i community.\n\nThis Article Is About 3GLs\n\nI bet you thought this would be about EGL, didn't you? Well, surprise! Even though I find EGL to be by far the easiest language in which to develop Web applications, for the purposes of this article I'm going to stay away from 4GL solutions. Most tools today, whether it's a commercial solution like BCD or an IBM tool like EGL, build on some underlying language. Even ILE-only tools like IceBreak build on top of RPG.\n\nI believe you should understand the underlying infrastructure for anything in your enterprise, so today we're going to assume you're going to roll your own solution from a 3GL. According to TIOBE, of the languages used for the Web, the two most popular are Java and PHP, and both are available on the IBM i. So let's start with Java. While this article is about Web programming, for the purposes of comparison I'm going to present snippets of code that compare the fundamental aspects of the languages.\n\nLet's Start With Java\n\nIn Figure 1, you'll see some very barebones code that exemplifies the basics of object-oriented programming (OOP) in Java. In Java, you are supposed to model your code by modeling real concepts. In this case, I want to create an object that can calculate its own area. It's not Web-oriented to any degree or even business-oriented; it's just a simple example. But it illustrates some very pertinent concepts. First and foremost is the idea of a class. A class is an OOP concept that acts as a container for program logic. You segregate related code into a class and then use that class along with other classes to build your business logic. The nifty part about OOP is that you can reuse that code by extending the class. Extending a class (or \"subclassing\") means that I create a new class that inherits the behavior of the parent class. In this case, I have an abstract class called Shape whose primary attribute is that it has a size that can be set. The Shape class exposes a method called \"setSize,\" which lets the programmer set the size. Shape also defines an abstract method named getArea. An abstract method is one that must be implemented by the children. An abstract class is one that is never instantiated directly; only its concrete children can be created. Typically, an abstract class defines the general characteristics common among several related children. In this case, all the shapes have a size, so we implement the size logic in the abstract parent class. The Square class is the concrete descendant of Shape. The minimum a concrete subclass has to do is to provide concrete implementations of the abstract methods. In this case, the getArea method implements this simple formula: area equals size squared. The top part of the figure shows an actual implementation of the code: it creates an object of type Square, sets the size to 2, and then prints the area.\n\nYou'll note that certain keywords are available to facilitate this development. Keywords like public, abstract, class, and extends have all been around in Java since its inception in the early 1990s. These keywords provide the fundamental underpinnings to all of the OOP capabilities of the language. The terms are similar to those in C++, but there are significant differences. For example, C++ uses the term \"virtual\" rather than abstract. Where Java defines the visibility (public or private) of each variable or method, C++ classes have defined sections in which all of the variables share the same visibility. The differences are primarily syntactic, but it's clear that Java was written specifically to support OOP, whereas C++ was more of a way to add classes to the already existing C language.\n\nAnd Now for Something Completely Different\u2014PHP!\n\nFigure 2: This is the same code as Figure 1, implemented in PHP.\n\nActually, the title of this section is a little tongue-in-cheek. If you look at the two code snippets side by side, you might be hard-pressed to immediately identify which is Java and which is PHP. Not only is the terminology the same, in many cases the syntax is similar or even the same. For example, defining the class Square as a subclass of the abstract class Shape uses exactly the same syntax: class Square extends Shape. When the new object model was added in PHP 5, it seems that they definitely took into consideration the popularity of Java.\n\nYou will notice a couple of syntactical differences. Java uses a dot (period) to denote a member variable or method (square.setSize) while PHP uses the \"arrow\" syntax ($square->setSize). The dot is already used in PHP to denote concatenation, so when OOP was added, they needed a different syntax. Another difference is that all variables start with a dollar sign ($). It's obvious what a variable is in PHP! Also, what Java calls a \"method\" PHP calls a \"function.\" But these are primarily syntactical differences. Two other related differences are more subtle but more profound. First, nowhere in the PHP example do you see a definition of the variable $size. This is absolutely anathema to Java, which, like RPG, requires every variable to have a specific compile-time definition. This is called \"static\" typing, and Java is a statically typed language. PHP is not. PHP is a dynamically typed language, and this manifests both in that you don't need to specify variables at compile time and also that you don't need to specify types either on parameters to or return values from a function.\n\nA Final Thought on Dynamic Typing\n\nSome people prefer the more relaxed nature of dynamic typing, and some even argue that it makes programming more productive. I understand that, especially in a proof-of-concept or sandbox mode, it is easier to not have to define variables. But I disagree with the productivity claim, and I have a very simple example that will illustrate my reasoning. Let's make the equivalent single-line change to both the Java and the PHP code:\n\nJava: square.setSize(\"hello\");\n\nPHP: $square->setSize(\"hello\");\n\nWhat happens? Well, because of the type mismatch, in Java this code does not compile. That's crucial. You can't even run this code. In PHP, however, you can run the code; type mismatches may cause a run-time error, but you can still run the code. Actually, in this case, you won't even get a run-time error; you'll get a value of zero, because PHP tries to convert the word \"hello\" to an integer and then silently fails. It's universally accepted that run-time errors require much more time to repair than compile-time errors: the more your compiler catches, the less you have to debug.\n\nSo back to the premise of the article. How hard is Web programming? Is one language harder to learn than the other? I don't believe that. Since the syntax of the two languages is nearly identical, any claim that PHP is easier to learn than Java seems to be a little bit hard to justify. So the next difference would be how easy the language is to use, and that pretty much boils down to the dynamic vs. static typing. I suppose that can be at least partly a personal preference. In the end, it really comes down to the old adage of \"pay me now or pay me later.\" You may be able to bang out code a little quicker when you don't have to worry about variable types, but it might bite you in the end when a subtle error that would have been caught by static typing makes it into the run-time.\n\nThanks, I appreciate the comment. You can probably tell that I\\'m not a big fan of dynamically typed languages. I program a lot of JavaScript, so it\\'s not that I\\'m a stranger to the concept; it\\'s just that dynamic typing moves errors from compile time to run time, and we all agree that it\\'s more expensive to fix errors at runtime. There\\'s a thread on midrange.com right now about how awful the LDA is, because it\\'s a band-aid solution that may introduce errors down the line, and one of the primary arguments is that it\\'s soft coded - another word for dynamically typed. And yet, PHP is better than Java because you can bang out code a little quicker? It sounds like the LDA writ large: a BIG band-aid that save you time now but will cost you a lot more in the long run."}
{"text": "Compiler Design Notes Ebook\n\nCompiler Design Notes Ebook according to CSVTU syllabus.\n\n1 What is compiler? Ans:- A compiler is a program that translates human readable source code into computer executable machine code. To do this successfully the human readable code must comply with the syntax rules of whichever programming language it is written in. The compiler is only a program and cannot fix your programs for you. If you make a mistake, you have to correct the syntax or it won't compile"}
{"text": "Visual Languages\n\nIn visual programming languages, the objects to be dealt with\nusually do not have an inherent visual representation.\nThey include traditional data types such as arrays, stacks, queues,\nand application-oriented data types such as forms, documents, databases, etc.\nTo achieve a user-friendly man-machine interface, we would\nlike to present these objects visually.\nFor the same reason, the languages themselves also should be presented visually.\nIn other words, both programming constructs and rules to combine these programming\nconstructs should be visually presented.\nApplication domains of visual programming languages include\ncomputer graphics, user interface design, database interface, form management, and computer aided design."}
{"text": "Sams Teach Yourself Unix in 10 Minutes is a tutorial-based book, organized into a series of easy-to-follow, 10-minute lessons. Users will learn how to: - Navigate through the File System - Work with ...\n\nDon't let a lack of free time keep you from learning HTML to build better websites! Sams Teach Yourself HTML in 10 Minutes, Fourth Edition is a compact, task-oriented tutorial that will show you how ..."}
{"text": "This course will provide a gentle introduction to programming using Python\u2122 for highly motivated students with little or no prior experience in programming computers. The course will focus on planning and organizing programs, as well as the grammar of the Python programming language. Lectures will be interactive featuring in-class exercises with lots of support from the course staff. This course is offered during the Independent Activities Period (IAP), which is a special 4-week term at MIT that runs from the first week of January until the end of the month"}
{"text": "Magic With Macrosoft\n\nIn this Webcast, the presenter explains how to use Macrosoft, a programming language which could achieve machine language speed. The presenter will also explain the listener how to get start writing own programs."}
{"text": "expresiones_para_la_clase\n\nCourse: SPAN 102, Winter 2011 School: Ole Miss Rating:\n\nWord Count: 389\n\nDocument Preview\n\npara Expresiones la clase\nExpressions for the class\nLearn the following commands, so that you can react to them when they are used by your instructor:\nComments and questions from the students\nCmo se dice en espaol?\nCmo se escribe?\nQu quiere decir?\nNo entiendo. / No comprendo.\nNo s (la respuesta).\nMs despacio, por favor.\n(Muchas) gracias.\nDe nada./ Con mucho gusto.\nRepita la pregunta\n\nCOMP 2710 SoftwareConstructionUse Case AnalysisDr. Xiao QinAuburn Universityhttp:/ 20111-1Motivations Why use cases? Offer a disciplined way to develop asystem and deal with its complexity. They are\n\nLecture: System Sequence DiagramClass diagrams represent static relationships. Why?What about modeling dynamic behavior?Interaction diagrams model how groups of objectcollaborate to perform some behaviorTypically captures the behavior of a single use\n\nIntroduction Introduction make is a UNIX utility for building projects that are comprised of make multiple source files make takes care of dependencies, and will rebuild the project if one make or more file is modified a file, usually named makefile, con\n\nMakefiles are easy.Approach 1: In fact, to build a simple program that doesn't depend on any libraries, youdon't even need a makefile. make(1) is smart enough to figure it all out itself. Forinstance, if you have a file \"xzq0001_hw1.cpp\" (Note: xzq0001"}
{"text": "C Programming Language Founder Dies\n\nDennis Ritchie, the godfather of the C programming language and the Unix operating system has died after a long illness last weekend at the age of 70.\n\nHe inspired millions of programmers and developers to learn the powerful programming language to construct both systems and applications level programs with a simplicity of expression never before seen in computing. He was responsible for creating millions of careers using his C language to develop programs such as device drivers, networking protocols such as TCP/IP, and complex scientific modelling programs used in research around the world.\n\nJust about everything on the web uses C and UNIX. The browsers are written in C. The UNIX kernel, the OS that the Internet runs on is written in C. Linux, Apache, MySQL, PHP and Web servers are written in C. If they're not, they're written in Java or C++, which are C derivatives, or Python or Ruby, which are implemented in C.\n\nWindows was once written in C and UNIX is under the hood of both Mac OS X, Apple's desktop operating system, and iOS, which runs the iPhone and the iPad. \"Jobs was the king of the visible, and Ritchie is the king of what is largely invisible,\" says Martin Rinard, professor of electrical engineering and computer science at MIT and a member of the Computer Science and Artificial Intelligence Laboratory.\n\nRitchie, also known as \"dmr\", is best know for creating the C programming language as well as being instrumental in the development of UNIX along with Ken Thompson. Ritchie worked most of his career at Bell Labs, which at the time of his joining in 1967, was one of the largest phone providers in the U.S. and had one of the most well-known research labs in operation.\n\nWorking alongside Thompson (who had written B) at Bell in the late sixties, the two men set out to develop a more efficient operating system for the up-and-coming minicomputer, resulting in the release of Unix (running on a DEC PDP-7) in 1971. ( DEC was the name for the Digital Equipment Corporation ).\n\nUnix was cheap and compatible with just about any machine. The Unix core kernel OS was written in machine (or assembly) language. This allowed the OS to run very efficiently.\n\nIn 1973, Ritchie and Thompson had rewritten Unix in C, developing its syntax, functionality, and beyond to give the language the ability to program an operating system. The kernel was published in the same year.\n\nToday, C remains the second most popular programming language in the world (or at least the language in which the second most lines of code have been written), and ushered in C++ and Java; while the pair's work on Unix led to, among other things, Linus Torvalds' Linux. The work has without a doubt made Ritchie one of the most important, if not under-recognized, engineers of the modern era.\n\nDennis Ritchie's work with UNIX, led to him becoming a joint recipient of the Turing Award with Ken Thompson in 1983, as well as a recipient of the National Medal of Technology in 1998 from then-president Bill Clinton."}
{"text": "Codewalks\n\nHand in your homeworks by 5:00pm on Mondays. Codewalkers\nwill be announced by 5:30pm on Mondays. If you don't get an\nemail by that time, you aren't it. You have 24 hours to\nput together your code walk, but you must not modify your\ncode (ie, what you hand in is what you present).\n\nFor a code walk, please proceed as follows:\n\nGive a concise overview of the project's purpose and your\nsolution.\n\nExplain the overall organization of your program. At a minimum, this\nrequires two parts:\n\na UML class diagram (plus explanations) of the major players, their\ncomponents, and their inter-connections;\n\nan informal diagram that explains the major interactions during a\nprogram execution.\n\nIn addition, you may have to explain other aspects of the design.\n\nPresent the classes and methods in a top-down fashion (even though you\nprobably designed bottom up). Refine as requested. Be prepared to defend\nyour code organization, why it matches or doesn't match your design.\n\nIn general, be prepared to figure out in real time how changes to your\ninformation/data specification are translated into changes in your program\norganization."}
{"text": "Many programmers would love to use Perl for projects that involve heavy lifting, but miss the many traditional algorithms that textbooks teach for other languages. Computer scientists have identified many techniques that a wide range of programs need, such as:\n\nFuzzy pattern matching for text (identify misspellings!)\n\nFinding correlations in data\n\nGame-playing algorithms\n\nPredicting phenomena such as Web traffic\n\nPolynomial and spline fitting\n\nUsing algorithms explained in this book, you too can carry out traditional programming tasks in a high-powered, efficient, easy-to-maintain manner with Perl.\n\nThis book assumes a basic understanding of Perl syntax and functions, but not necessarily any background in computer science. The authors explain in a readable fashion the reasons for using various classic programming techniques, the kind of applications that use them, and -- most important -- how to code these algorithms in Perl.\n\nIf you are an amateur programmer, this book will fill you in on the essential algorithms you need to solve problems like an expert. If you have already learned algorithms in other languages, you will be surprised at how much different (and often easier) it is to implement them in Perl. And yes, the book even has the obligatory fractal display program.\n\nThere have been dozens of books on programming algorithms, some of them excellent, but never before has there been one that uses Perl.\n\nThe authors include the editor of The Perl Journal and master librarian of CPAN; all are contributors to CPAN and have archived much of the code in this book there.\n\n\"This book was so exciting I lost sleep reading it.\" Tom Christiansen"}
{"text": "9780764570681\n\nAuthor\n\nDan Gookin\n\nAuthor First Name\n\nDan\n\nAuthor Last Name\n\nGookin\n\nDate of Publication\n\n2004\n\nEdition\n\n2nd\n\nFormat\n\nPaperback\n\nNumber of Pages\n\n408\n\nPublisher\n\nJohn Wiley & Sons\n\nSeries\n\nProgramming\n\nTitle\n\nC For Dummies\n\nNot quite what you were looking for?\nQuickly find other suitable products by removing those features above which are not essential and clicking Find. Find\n\nC For Dummies\u00ae 2nd Edition\n\nThe C programming language and its direct descendants are widespread and among the most popular programming languages used in the world today. The popularity of C continues because C programs are fast, concise, and run on many different systems. Most programmers know C, often the first language of choice for many types of projects. C For Dummies, 2nd Edition targets beginning C programmers. Many readers will be those who have tried to learn C with other books and have failed. In addition, readers who bought Volume One of C For Dummies but not Volume Two will be likely buyers of this book.\n\nProven track record. C For Dummies, 2nd Edition combines Dan Gookin's popular C For Dummies Volume One and C For Dummies Volume Two. Together these two books have netted over 194,000 units in sales. Entertaining presentation. Gets readers up and running with the C language in an informative and entertaining way. Complete coverage of C. Provides coverage of keywords, program flow, conditional statements, constants and variables, numeric values, arrays, strings, functions, pointers, structures, debugging, prototyping, and much more. ANSI standard. The book is updated to apply to the ANSI standard. Numerous examples. Includes over 100 sample programs with code that readers can readily adapt for their own projects. Dedicated Web site. The author is providing a dedicated web site, as he has done with C For Dummies Volumes One and Two. On the site, he will provide a link to a freeware C compiler, called Dev C."}
{"text": "Python programming by example.\n\nWith Real Python and Real Python for the Web you will learn Python programming through hands-on, interesting examples that are useful and fun!\n\nWith each course you get:\n\nOver 200 entertaining and informative pages, including plenty of exercises with provided solutions.\n\nAccess to samples files, webpages, and videos that will give you real hands-on practice manipulating files, interacting with the web, developing web applications creating your own GUI applications, and much more.\n\nAccess to the member forum, where you can ask questions and get any extra help you need while working through the course.\n\nEach course includes the book in PDF, MOBI, and ePub formats as well as sample scripts and answers to all exercise and homework problems.\n\nReal Python\n\nReal Python for the Web\n\nThe first half of Real Python is a quick but thorough overview of all the Python basics, so you don't even need any prior experience with programming. The second half is focused on solving interesting real-world problems, including the following topics:\n\nBy the way, this is the ONLY course out there to cover both Python 2.7 and the new Python 3.3!\n\nReal Python for the Web teaches you how to build web sites and applications quickly and efficiently using Python. You will learn everything from the basic fundamentals of web development to advanced web frameworks like Flask, web2py, and, coming soon, Django.\n\nThis course is perfect for those who have finished learning basic Python through our first course and are ready to move on to web development.\n\nPart 1: Learn Python web development from the ground up, covering database programming, web services, REST, web scraping and crawling, CGI Programming, and much more. You will create a dynamic database-driven blog.\n\nPart 2: Learn the basics of modern web development through the Flask framework. You will develop a much larger application, a task manager.\n\nPart 3: Learn advanced web development fundamentals through the web2py framework. You will develop several small projects, including a blog and a sentiment analysis app, and a larger, full-featured task manager application.\n\nFrom Zero to Hero!\n\nIf you are completely new to Python, you should consider both courses; this will give you all the resources you need to go from complete beginner to web development guru!"}
{"text": "COMP\n412 Assembler and Compiler Design\n\nphone:(212) 311 54 34 room: D 142\n\nLanguages evolved from regular expression processing scripting tools for\neditors provide a powerful tool for programming for the world\n\nThe implementation of a compilers has enabled the production increasingly\nlarge computer systems. Compilers and assemblers play a crucial role and at\nthe same time are good examples of large and complex programs that have at\nleast in part a sound mathematical basis for the way they work. This course\nstudies the different ways in which compilers and assemblers can be\nconstructed and the different language models that are used.\nPrerequisite: COMP\n312.\n\nThere is no obligation for students to do any of projects. If you\ncan collect enough marks from the final and the midterm to get a C\ngrade, you can pass the course."}
{"text": "What's Coming Up\n\nObjective-C is a superset of C. Objective-C begins with C, and then adds a couple of small but significant additions to the language. If you've ever looked at C++ or Java, you may be surprised at how small Objective-C really is. We'll cover Objective-C's additions to C in detail in this book's chapters:\n\nChapter 2, \"Extensions to C,\" focuses on the basic features that Objective-C introduces.\n\nIn Chapter 3, \"An Introduction to Object-Oriented Programming,\" we kick off the learning by showing you the basics of object-oriented programming.\n\nChapter 4, \"Inheritance,\" describes how to create classes that gain the features of their parent classes.\n\nChapter 5, \"Composition,\" discusses techniques for combining objects so they can work together."}
{"text": "Basic Java Language Elements BasicJavaLanguageElements\n&nbsp... in the program.\nJava\nComments\nTo comprehend any programming language... you will be introduced to the concept of Arrays in Java\nProgramming languagebasic basic thank you sir for your nice reply .\n......sir my next que, if java program is modified,if the program is compiled & executed without saving it again,its previous execution takes place,why\n\nBASIC Java - Java Tutorials BasicJava Syntax\nThis tutorial guide you about the basic syntax of the java programming\nlanguage. For writing any program, you need to keep in mind the syntax of that\nprogramming language.\nGiven below the points for syntax\n\nBasic Filter Basic Filter\nBasic Filter\nBasic filter is used to implement some properties like filter element\naccording to their index in set, elements which are in the progressphp Basic Syntax or less similar to any other popular language like: C,\nASP, Java etc...\nphp Basic Syntax\nIn the given tutorial we will study how to write the basic syntax of php:\n<?php\n?&gtascii to thai language conversion - Java Beginners asScript Basic Tutorial JavaScript Basic Tutorial\nJavaScript is an object-oriented scripting language, it is dynamic, weakly\ntyped, prototype-based language. It was developed... and at last JavaScript.\nSince Netscape supports Java, that's why the name coinedread xml elements read xml elements i want read xml data using sax parser in java. but is there any classes or methods to read xml elements\n\nread xml elements read xml elements i want read xml data using sax parser in java. but is there any classes or methods to read xml elements JJava Object Java Object\nObject is the basic entity of object oriented\nprogramming language. Object... properties of the class or its group. Java object\nis an instance of the class. It takes\n\ntop 20 basic programm of java top 20 basic programm of java what is the top 20 rule to learn the basic of java.\nLearn Java through the following links:"}
{"text": "Attend the Java Introduction lecture if you're just\nstarting with this language, and Java In The Real World for\na broader view and bigger development lessons for your new\nprojects.\n\nREXX Programming Potpourri covers a number of REXX\nprogramming tricks, and Using REXX And C Together, Parts 1\nand 2 passes along example after example of the C-to-REXX\nprogramming interface in OS/2 Warp.\n\nTwo XML lectures will bring you up to speed on new\ntechnology for your web pages. Technology Overview: Why XML\nIs Important and An Introduction To XML Basics show you\neverything needed to write web pages in this new language of\nthe Internet.\n\nWarpicity: An Overview And Update is a new idea for\nsoftware development. The Developer's Assistant, the actual\nproposal, the Methodology, and the Project are all\neye-openers for any programmer.\n\nAnd if you want to get started in Workplace Shell\nprogramming, have a seat in the audience for How To Write A\nWorkplace Shell Class. The Shell is object oriented; you'll\nlearn how to subclass existing desktop objects and some\ndevelopment and debugging techniques.\n\nYou'll learn plenty about programming when you attend Warp\nExpo West!\n\nWarp Expo West will be held on September 18 near\nDisneyland in sunny Southern California. All the info is at"}
{"text": "Comparing C-Based Object Systems\n\nGary Odom\n\nPreface\n\nThis rather dry martini of an article presents a comparison of C-based object systems. To provide a basis for that comparison, the articles begin with a perspective about why OOP is important, what the important issues are with object orientation, and a brief mention of other object systems from which designers of C-based object systems have drawn their inspiration.\n\nSoftware with Class?\n\nProgramming practices have evolved with one primary motivation: improve the ability to maintain and reuse software. Object-oriented programming came about in an attempt to make code more modular and easier to reuse. The ideas behind object orientation are simple. To make code more modular, combine data structures and functions together: create software modules that are inherently self-contained. In other words, prefabricate software so that code functionality comes in one piece. Each module becomes a class.\n\nTo improve the ability to reuse software, allow classes to inherit from one another. This way, a new class can get all the functionality it needs from other classes, with the exception of the behavior that makes the new class unique. So, the two big concepts behind object orientation are 1) modular software components (by combining data structure and behavior), and 2) inheritance. While modularity, achieved through the use of classes, simplifies code maintenance, inheritance provides the sizzle of easy reuse by letting a programmer incrementally modify and expand class behavior.\n\nThe continuing challenge of software development is managing complexity. Object-oriented programming, with its inherent high degree of modularity, helps. But class libraries by no means ensure that software complexity is well managed. Quite the contrary, there is a disturbing trend in object-oriented software construction towards class libraries with hundreds of classes, but without the integration between them to simplify usage or maximize productivity. It may well turn out that the OOP development tools that stand the test of time are not those that try to offer everything through diversity, but those that integrate well the basics that most applications need. But class library architecture is the subject another article. This one is about object systems.\n\nObject Systems\n\nObject orientation is implemented by an object system. Most often, an object system is built into a new language, or becomes an extension to an existing procedural programming language. Object-oriented language extensions often require a new compiler, though C-based object systems are usually implemented using a preprocessor to a C compiler. The disadvantage to using a preprocessor is that source-level debugging is no longer possible.\n\nThe success of any programming language is the ability to give a programmer range and flexibility in implementing software designs in the most straight-forward manner. C usurped FORTRAN and Pascal in popularity largely because C allows an programmer greater range (with such features as permitting a variable number of function arguments, and built-in bit twiddling), and flexibility in expression.\n\nThere has been heightened interest in recent years with visual programming environments. Just as creative people have historically chosen between literary or graphic artistic expression, perhaps we are beginning an age where software developers will have a similar choice in their medium. While this article is focused on written OOP languages, the same evaluation criteria may be applied to visual OOP tools.\n\nInheritance\n\nBecause inheritance is one of the key concepts behind object orientation, one way to judge the quality of an object system is how flexibly inheritance can be specified. Multiple inheritance is the ability of a class to inherit from multiple classes. With multiple inheritance, a new set of methods (behavioral functions) can easily be added to an existing class. So, for example, you could attach a debugging class to another class without introducing new sequential links in the inheritance chain; the debugging class could verify the validity of data in objects of the target class. Most often, multiple inheritance is used to create a subclass that combines a class with primary functionality with another class that adds some ancillary characteristics. For example, a text graphic class (cTextGraphic) would inherit from a text class (cText) for text processing, plus inherit from a graphic class (cGraphic) to allow a user to treat the text as a graphic object (as in an object-oriented drawing program). Because it is so convenient, most current object systems support multiple inheritance.\n\nAn advanced object system allows inheritance and methods to be defined dynamically, while a program runs. This is called dynamic definition.\n\nClass-Object Schizophrenia\n\nThe theory of object orientation makes a clear distinction between classes and objects. Classes are object factories, templates that exist only in source code. A class specifies object data structure, while a class itself has no data. A class just has methods, so that objects can take function calls. Objects alone exist as dynamic entities in memory as a program runs. An object can't have methods separate from the class it inherits from, and a class can't have its own data.\n\nThis fundamental distinction between classes and objects can be blurred to considerable benefit. Smalltalk and Objective-C allow classes to have their own methods (class methods), apart from the methods an object that inherits from the class has.\n\nIn an advanced object system using flexible class-object construction, classes may have their own data structure (class variables) and their own methods (class methods), and objects may have their own methods (object methods), separate from the class methods they inherit. These capabilities provide flexibility in software design and implementation, as well as giving conceptual consistency to working with objects. While theory may put a wall between classes and objects, eliminating class-object distinctions gives a developer great practical flexibility in meeting design requirements.\n\nThere is another aspect of object orientation that defines the quality of an object system: dispatch control.\n\nDispatch Control\n\nObject orientation introduces a rather strange concept: calling a function without knowing exactly what function is going to be called. This happens because different classes can use the same function name. For example, to draw an object, you might write draw(self), where self is the object to be drawn. A dispatch mechanism is used to find the right method to call based upon the class inheritance of the self object. The technical term for this function-calling shell game is polymorphism (Greek (to me) for \"multiple shapes\"). Polymorphism is great because it lets code become very general: you can draw all objects on a page by calling draw(self) in a loop, where the loop assigns self from a page object array.\n\nPolymorphism necessitates finding the right class method to dispatch to at run time (dynamic binding), rather than binding a function call at compile time (static binding) (what linkers do for a living). Dynamic binding has two drawbacks. First, a dispatch error can occur at run-time if a method wasn't defined for the function call made. Second, it takes time to find the proper method to dispatch to based upon class inheritance. Method dispatch is the overhead imposed by object orientation. These drawbacks are the price paid for quicker development time, smaller code size, flexibility in using prefabricated software, and easier maintenance. Hybrid languages, such as C++, let a programmer go back to procedural programming for time-critical code, whereas this is not an option with a pure object-oriented language such as Smalltalk.\n\nJust as flexibility in specifying inheritance is important, so is flexibility in dispatch. Features of dispatch flexibility are being able to call multiple methods by a single function call (multiple dispatch), controlling which methods are called and in what order (dispatch control), being able to dispatch to a specific method, and dispatching based upon multiple arguments (called multi-methods).\n\nThe essence of high-quality dispatch in an object system is being able to call multiple methods in a single function call (multiple dispatch), and being able to control method call order (dispatch control). Imagine a resource-based picture class (cPicture), which inherits from a resource class (cResource). To draw a cPicture object (draw(picture)), you want to first make sure the picture resource is in memory. The cResource is used as a before-method, to check and load the resource if it has been purged. The cPicture draw method, which draws the picture, is an after-method.\n\nAn advanced object system allows dispatch control using before- and after-methods. A truly flexible object system lets dispatch control be altered dynamically, while a program runs, as part of dynamic definition.\n\nAnother aspect of dispatch control is being able to dispatch to a specific class method, rather than accepting the default dispatch. For example, you may want to draw just the handles on a graphic object by calling dispatch_to(cGraphic, draw, self), rather than calling draw(self), which draws an object and its handles. Almost all object systems offer this capability.\n\nMulti-methods, which is being able to dispatch to a method based upon multiple arguments, is the object-oriented equivalent of a function being able to take variable arguments.\n\nObject Links\n\nOne of the problems with procedural programming is that it takes effort to build self-contained, reusable software modules. But is it easy to link data structures through functions.\n\nIn a role reversal to procedural programming, the modular, decentralized nature of object orientation presents an interesting design decision: how best to link and integrate related objects (and classes). A significant challenge with object-oriented programming is designing and implementing the links between objects of different classes. While object links are the basis for object-oriented databases (OODB), they are also a necessary ingredient of any object-oriented application. Because object links are a structural element of any object-oriented application, a good object system should offer built-in support for object links.\n\nObject System Survey\n\nSmalltalk\n\nDating back to 1967, Simula was the first object-oriented language. But, because of its looming influence, Smalltalk is the grandmother of object-oriented programming languages. Smalltalk was designed as part of an object-oriented environment, with hundreds of classes, where everything is object-oriented. There is no class-object distinction with Smalltalk. Using the Smalltalk environment is a \"deep immersion\" experience in a land of objects, which is why it has been such an inspiration.\n\nSmalltalk has a surprising limitation: it does not support multiple inheritance. Because even the simplest message uses dynamic binding (even the + in C = A + B), Smalltalk is slow.\n\nThe phraseology of \"sending messages to objects\" is a holdover from Smalltalk, where the syntax is object-verb (such as 'thisOval draw' to draw thisOval), rather than the more typical function-calling paradigm of verb-object (such as draw(thisOval)). As with most languages, the verb-object function call model is used in this article.\n\nCLOS\n\nThe Common Lisp Object System, known as CLOS, is the ANSI-standard language extension to Lisp that adds object orientation. CLOS is noteworthy because, in a sea of tug-boat object systems, CLOS is a luxury liner. CLOS supports multiple inheritance, dispatch control, multi-methods, flexible class-object construction, dynamic binding and dynamic definition. To simplify the application programming interface (API), CLOS consistently uses generic functions. Generic functions are polymorphic functions, such as draw and act. The object orientation that CLOS allows is tremendously flexible and expressive, but because Lisp has a limited domain, namely AI and list/language processing, CLOS, like Lisp, will never become a mainstream language.\n\nC Object Systems\n\nBecause of its simplicity, flexibility, efficiency and range, C has become the industry choice for systems and application software development. It is natural to extend C into the object-oriented realm. A few interesting attempts have been made.\n\nObjective-C\n\nAn early attempt to make C object oriented was Objective-C. Objective-C adds Smalltalk-like object orientation using a strict superset of C. Objective-C adds a class definition mechanism, an object data type, and a message expression type. In Objective-C, each class is defined by two files: an interface file, and an implementation file. The interface file specifies the class programming interface: class and superclass names, along with instance variable (object) declarations and method declarations. The implementation file has class method code.\n\nIncluded in the NeXT operating system environment is a set of classes written in Objective-C for application development. Because these classes are native to the platform, NeXT application development is relatively easy, especially compared to the complex nightmare of the Macintosh Toolbox. Though there is little marketing of the product, Objective-C is available on the Macintosh as an MPW C preprocessor.\n\nCommercially, Objective-C was ahead of its time. Its corporate sponsor, Stepstone Corporation, was near financial death before being resuscitated by adoption for the NeXT line of workstations.\n\nC++\n\nC++ is a another language extension to C. Only part of the C++ extensions have to do with object orientation. Operator overloading, for example, adds flexibility to C, but has nothing to do with object orientation per se.\n\nThe object-oriented part of C++ implements a limited version of object orientation. Multiple inheritance is supported, as are class variables, class methods, multi-methods and optional dynamic binding, but C++ lacks dispatch control or dynamic definition. C++ classes have automatic initialization and deallocation methods.\n\nC++ class constructs provide three levels of enforced information hiding. Access to data or methods can be private, protected or public. Restrictions can be overridden (by friend classes). The information-hiding features require new language syntax that complicates what was (in C) a lean language definition. Further, this feature sits in odd contrast to C's celebrated openness with typecasting, data manipulation and the free use of function pointers.\n\nMacApp, now written in C++ after previous incarnations in Object Pascal, currently provides the only commercial set of C++ classes for Macintosh application development. MacApp has become a sitting duck for its successor, Bedrock. Bedrock's design is based upon the THINK Class Library (TCL), but with many more classes. Bedrock development is taking the kitchen sink approach of providing over a hundred classes, but, at the time of writing, it lacks a streamlined architecture or a high degree of integration between classes. Bedrock is still under development, so it is premature to assess its adequacy.\n\nOOPC\n\nOOPC (pronounced \"oop-see\") is an acronym for \"Object Oriented Programming in C\". OOPC has an unusual implementation, in that it is not an extension to the C language, but rather a set of functions that turns C into an object-oriented language. Object-oriented programs written in OOPC look like standard C code, because they are just that. This consistency with C simplifies learning and using OOPC.\n\nThe look and feel of OOPC, while simple, is deceiving. OOPC has all the features of CLOS: multiple inheritance, dispatch control, flexible class-object construction, and dynamic definition. Multi-methods can be simulated. Plus, OOPC comes with built-in support for object links and object-oriented database (OODB) development.\n\nLike C++, OOPC provides automatic initialization and deallocation methods. OOPC also implements a form of garbage collection to prevent an object from being released while it is still linked to any other object. Unlike Objective-C or C++, OOPC does not enforce data hiding or restrict method access.\n\nOOPC always uses dynamic binding, but this overhead can be mitigated by creating a dispatch table, which essentially results in the same efficiency as static binding while still allowing dispatch control options.\n\nTo simplify the programming interface, the OOPC consistently uses verb functions. OOPC verb functions are the same as CLOS generic functions: verbs used as polymorphic functions.\n\nAlthough it has existed for years, OOPC has only recently been released to the public as a commercial product. The OOPC object system is only part of the product currently sold for Macintosh application development. OOPC includes a set of code libraries for rapid application development. Some low-level function libraries exist for efficiency and interface to the native operating system. OOPC also comes with a set of classes that provide automatic document management, an application user interface, object-oriented database construction, a graphics package, and rule-based artificial intelligence. The consistent use of verb functions, streamlined class architecture and integration between classes simplify learning and using the OOPC class library, thus making OOPC suitable for novice and professional programmer alike love"}
{"text": "Introduction\n\nIntroduction\n\nVisual Basic 2010 is Microsoft's latest incarnation of the enormously popular Visual Basic language, and it's fundamentally different from the versions that came before it. Visual Basic is more powerful and more capable than ever before, and its features and functionality are on par with \"higher-level\" languages such as C++. One consequence of this newfound power is added complexity. Gone are the days when you could sit down with Visual Basic and the online Help and teach yourself what you needed to know to create a functional program."}
{"text": "Teaching Object-Oriented Concepts Through GUI Programming\n\nIt is difficult to teach Object-Oriented Programming (OOP) from a language perspective, even to experienced programmers. Complex syntaxes obscure concepts and make it difficult for learners to get a real \"Feel\" for OO architecture. This is a classic example of \"Not seeing the forest for the trees.\" OOP is best taught within a context of an application or software framework. Graphical User Interface (GUI) programming provides a particularly effective vehicle for this purpose because it is relevant to virtually all applications and provides immediate feedback on the correctness of OO structures through tangible, visual results. They have built a GUI Programming course that focuses on the OO aspects of building user and Application Programmer Interfaces (APIs)."}
{"text": "Books\n\nO'Reilly using Python as the implementation language.\n\nWritten by Wes McKinney, the main author of the pandas library, this hands-on book is packed with practical cases studies. It's ideal for analysts new to Python and for Python programmers new to scientific computing.\n\nUse the IPython interactive shell as your primary development environment environmentWant to create devices that interact with the physical world? This cookbook is perfect for anyone who wants to experiment with the popular Arduino microcontroller and programming environment. You'll find more than 200 tips and techniques for building a variety of objects and prototypes such as toys, detectors, robots, and interactive clothing that can sense and respond to touch, sound, position, heat, and light.\n\nYou don't need to have mastered Arduino or programming to get started. Updated for the Arduino 1.0 release, the recipes in this second edition include practical examples and guidance to help you begin, expand, and enhance your projects right away\u2014whether you're an artist, designer, hobbyist, student, or engineer.\n\nGet up to speed on the Arduino board and essential software concepts quickly\n\nLearn basic techniques for reading digital and analog signals\n\nUse Arduino with a variety of popular input devices and sensors\n\nDrive visual displays, generate sound, and control several types of motors\n\nInteract with devices that use remote controls, including TVs and appliancesUnderstand the organizational shifts necessary to integrate Lean UX"}
{"text": "Perl's popularity as a CGI scripting language is growing by leaps\nand bounds. However, there are few books available today that\ncover this subject in depth including a broad range of concepts. We wanted our book to help people learn to\nuse Perl and convince them that it is the best choice for their Web-based applications. The goal of this book\nis not to teach the Perl language--although certain tricks and features may be learned--but to show how\nPerl can accomplish the tasks needed for many of today's online applications. In short, we wanted to\nprovide a resource that not only teaches new uses of Perl but challenges the reader with exercises that use\nthe concepts. Standard Perl documentation is also provided. The book covers a wide range of concepts, and\nusing these, you should be able to write almost any Perl/CGI application with the techniques provided.\n\nThis book is different from others about Perl and CGI. It takes a cumulative approach and introduces\napplications that use concepts learned in previous chapters. Each chapter will cover at least one specific\nWeb-based application and explain the code line by line (or block by block) so you not only learn what the\nscripts are doing but how they are doing it. And in order to help induce self-learning and application building,\neach application is working but incomplete. We provide skeleton applications that can stand on their own,\nbut we leave out certain features that can be added (and we suggest adding them in the exercises) using the\ninformation in that chapter and in previous chapters. Our goal is not to give you \"cut and paste\" software but\nrather to show you how to write the software yourself.\n\nChapter Summaries\n\nChapter 1, Perl, CGI, and this Book. This chapter explains what Perl and CGI are. It also supplies more\ndetail about this book and shows how to use the CPAN module.\n\nChapter 2, What You Should Know. We don't expect the reader to know everything, but we do expect at least\na base level of knowledge. This chapter outlines what you should already know and explains a few things\nthat you may not already know but should to get the most out of this book, such as tainting, security\nconcerns, and troubleshooting.\n\nChapter 3, Using Your Environment. Many times in CGI applications you need information from the client,\nsuch as IP address or browser information. This chapter covers how to access the Web server environment\nvariables and what they mean.\n\nChapter 4, Introduction to Web Forms. There are few online applications where there is not some sort of\nWeb form used to allow an end user to submit information. Chapter 4 explains the HTML elements of\ncreating a Web form, as well as how to obtain the user input.\n\nChapter 5, Working with Cookies. Using cookies to store data on a Web client can be very useful to record\nthe preferences of and remember things about users. You will learn how to set, get, and use cookies in this\nchapter.\n\nChapter 6, Access Counters. Many people want to count how many people come to their Web site. The\nexamples in this chapter show you how to do this.\n\nChapter 7, Web-Based File Uploading. Here you will learn how to safely allow end users to upload files to a\nserver from their local hard drives.\n\nChapter 8, Tracking Clicks. It can sometimes be useful to know what links on a Web site are being followed\nand from where. The examples in this chapter show how to track these clicks.\n\nChapter 9, Using mod_perl. The popular mod_perl Apache module can be extremely useful when it is\nappropriate for an application. You will see how to configure mod_perl, as well as how to use and write\nmod_perl Perl modules.\n\nChapter 10, Web-Based E-mail. The examples in this chapter demonstrate how to connect to a POP3\nserver to view e-mail, view attachments, and send e-mail via the Web.\n\nChapter 11, Introduction to DBI and Databases on the Web. Chapters 1-10 presented basic uses for\ndatabase connectivity in previous examples. This chapter examines the Perl DBI in more depth.\n\nChapter 12, Tied Variables. The magic of tying data structures to variables and how to do this when the data\nstructure is a database is explained in this chapter.\n\nChapter 13, Embedding Perl in HTML with Mason. This popular tool is examined and explained. This\nchapter shows you how to embed Perl within HTML and use the HTML::Mason module to speed up\ndevelopment and maintenance time.\n\nChapter 14, Document Management via the Web. By now you will have learned how to upload files to a\nserver. This chapter shows you how to manage your files remotely via the Web.\n\nChapter 15, Dynamically Manipulating Images. Creating charts, graphs, thumbnails, and galleries, and\nchanging images on the fly are all concepts that can be useful in CGI applications. This chapter shows you\nhow to add these techniques to your software.\n\nChapter 16, RSS and XML. XML is another tool that is gaining in use and popularity. This chapter shows you\nhow to use both XML and a derivative of it, RSS and RDF, to share information and use in applications.\n\nAppendix A, Server Codes. Learn what the codes returned by a Web server mean.\n\nAppendix B, Environment Variables. This is a list of the most common Web server environment variables.\n\nAppendix C, POSIX::strftime() Formats. This book uses the POSIX module a few times to format date\nstrings. This list shows the formats that the module uses and what the formats do.\n\nAppendix D, General Public License. If you didn't read the copy that came with Perl, you can do so here.\n\nAppendix E, Artistic License. Another license under which Perl is distributed.\n\nAppendix F, Perl Documentation. A list of the documentation that comes with Perl. This list is useful for\ninteractive learning along with this book.\n\nAppendix G, ASCII Codes. A list of ASCII, hex, and decimal codes.\n\nAppendix H, Special HTML Characters. A list of special characters, such as \u00a3, \u00ae, and \u00c6. Although these\naren't specific to Perl, you will probably need some of them sooner or later when generating HTML with\nPerl.\n\nOther Resources\n\nOne of the best resources for Perl is the Perl documentation and the documentation included in various Perl\nmodules. Chapter 1 covers how to read this documentation with the perldoc command. The Perl homepage at\n is extremely useful with articles, tips, documentation, other resource links, and what's\nnew in the world of Perl. The Perl Mongers homepage at  supplies good information on\nthe world of Perl and Perl advocacy. The use Perl Web site at  is a community page where\nPerl information is shared and discussed. The Perl Documentation Web site at  is a\nvery useful site containing the latest Perl documentation. Finally, the Perl Monks at\n is another community where people can ask questions, answer questions, chat,\nand share knowledge.\n\nUsenet has Perl newsgroups that are also useful: comp.lang.perl.announce has Perl announcements;\ncomp.lang.perl.misc is a high traffic list for asking Perl-related questions; and comp.lang.perl.modules\nannounces and discusses Perl modules. A non-Perl-specific news group that deals with CGI is\ncomp.infosystems. Here you can discuss all topics CGI."}
{"text": "Sams Teach Yourself Database Programming with Visual Basic 6 in 21 Days is a tutorial that allows you to learn about working with databases in a set amount of time. The book presents you with a step-by-step approach to learning what can be a critical topic for developing applications. Each week will focus on a different aspect of database programming...Visual Basic is the most popular programming language in existence. At the present time, it is estimated that there are over three million programmers using Visual Basic. It is also the most popular introductory programming language at most colleges and universities. This is going to become even more widespread with Visual Basic .NET. From the... more...\n\nVisual Basic .NET Kick Start is a rapid-progression tutorial that presents Visual Basic .NET to working programmers already familiar with another programming language or tool. This book speeds through basic concepts and focuses on practical examples showing the advantages of Visual Basic .NET in ASP programming, application design and creation,... more...\n\nVisual Basic.NET Database Programming walks the readers step-by-step through the topics they need to know to use databases effectively. This book teaches with real-world scenarios how to load, display, manipulate, modify and save data in databases. It shows the reader how to build multi-tier applications that implement enterprise-wide business... more...\n\nVisual Basic .NET has changed dramatically from its predecessor, and this book shows developers how to build traditional console applications, ASP.NET applications, XML Web Services, and more The top-notch author team shares their years of experience in VB programming and helps readers take their skills to new heights Addresses issues such as security,... more...\n\nVisual Basic 2005 Programmer's Reference Visual Basic 2005 adds new features to Visual Basic (VB) that make it a more powerful programming language than ever before. This combined tutorial and reference describes VB 2005 from scratch, while also offering in-depth content for more advanced developers. Whether you're looking to learn the latest features... more...\n\nDesign Patterns are a type of pattern used in the initial design phase of an object-oriented development project Documents 46 Visual Basic .NET design patterns, including 20 that have never before been published Features case studies that demonstrate how to use design patterns effectively in the real world-and even explains where not to use design"}
{"text": "Tuesday, 19 February 2013\n\nWednesday, 30 January 2013\n\nAndroid has basically four components which it uses to manage all the applications.\nThese are as follows:-\n\nActivity\n\nContent Provider\n\nBroadcast Reciever\n\nService\n\nHere is just the overview of the components of Android.These components of android will be discussed in later posts.\n\n1.Activity:- Activity is an visible component of android which is used to display the user interface to the user just like a frame in awt or swing.Interface is made using Xtensible Markup Language(XML).To use this, Activity class is provided by the android.Activity is full java based class.\n\n2. Content Provider:- This component provides the facility to share database between different applications.\n\ne.g. As the contact detail is saved in contact application but we can use that information in other applications like Phone Dialer, Messaging, call, etc.\n\nThis facility is provided by Content Provider.\n\n3. Broadcast Reciever:- This android component provides the facility to communicate between two or more applications. It is used by the application to broadcast its change of state to other applications.\n\ne.g. Whenever we are listening music and a call is received at the same time, then in this situation music player is paused automatically and when the call is ended, Music player is resumed automatically.\n\nThis is done with the help of Broadcast Reciever.\n\n4. Service:- Services are used to provide the facility for starting long running tasks which perform some operation in background and doesn't require much user interaction.\n\ne.g. Downloading a file from network, playing some music in background,etc.\n\nThese tasks never interrupt in other applications.\n\nThese four components are the basic components which will discussed briefly in later posts with examples.\n\nPHP is a language that has been growned so fastly. It was originally conceived as a set or collection of macros to provide help to the coders to maintain their personal home pages, and its name given from this purpose i.e. Personal(P) Home(H) Page(P). Since then, The capabilities of PHP have been extended, taking it beyond a set of utilities to a full-featured programming language, capable of managing huge database-driven online environments or say complete WEBSITE can be managed using PHP. As PHP's capabilities have grown, so its popularity is also increased. PHP was running on around 1 million hosts in Nov. 1999. And in Feb. 2000, that figure had already risen to 1.4 million hosts. According to E-Soft, PHP is the only module which is most popular on Apache, beating even ModPerl. Now, PHP is officially known as PHP - \"HyperText Preprocessor\". It is an server-side scripting language basically written in an HTML context or HTML tag. Unlike an ordinary HTML page, a PHP script is not sent directly to a client by the server. Instead, it is parsed by the PHP binary or module or PHP interpreter. HTML elements in the script are left alone, but PHP code is interpreted and executed. PHP code in a script can be used to query databases, create images, read and write files, talk to remote servers. The possibilities in PHP are endless. PHP is one of the easiest Web Development Language in which a complete full functioning website can be Developed in a day or two days. As it provides the simplest Keywords to manage database, to get User Input or to respond user back.\n\nNow-a-days this is most required language in the web development market."}
{"text": "OSdata.com\n\nHello World\n\nsummary\n\nThe educational goal of this subchapter is to give the student a general idea of what a simple computer program looks like in their chosen language. The professor may present only the example from the programming language being taught or may show many examples to give a feel for some of the similarities and differences between common programming languages.\n\nThe classic example for any programming language is \"Hello World\" (a simple program that writes the text \"Hello World\"). These examples show how to write this simple program in different programming languages.\n\nfree computer programming text book project\n\nHello World\n\nThe cliche first program is Hello World \u2014 a simple program that types the message \"Hello World\". Even experienced programmers will often write a simple Hello World program when learning a new programming language or switching to a new development environment.\n\nKernighan and Ritchie popularized the Hello World! program in their book C Programming Language.\n\nEvery programming language has its own peculair rules for the form of a program. The Hello World program is a fine illustration of the basic rules of a programming language.\n\nAll of the code below produces the same basic results: printing or typing the phrase \"Hello World\". You may want to take a brief look at how different languages can have very different methods for achieving the same results.\n\nAda\n\nAda was first released in 1983 (ADA 83), with major releases in 1995 (ADA 95) and 2005 (ADA 2005). Ada was created by the U.S. Department of Defense (DoD), originally intended for embedded systems and later intended for all military computing purposes.\n\nAda is named for Augusta Ada King, the Countess of Lovelace, the first computer programmer in modern times.\n\nALGOL\n\nBEGIN OUTSTRING(2, \"Hello World\"); END.\n\nALGOL (ALGOrithmic Language) was first formalized in 1958 (ALGOL 58), with major releases in 1960 (ALGOL 60) and 1968 (ALGOL 68). ALGOL was originally intended for scientific computations.\n\nALGOL is considered to be the first second generation computer language.\n\nALGOL was a highly influential programming language. Most modern programming languages are descendants of ALGOL.\n\nCOBOL (COmmon Business Oriented Language) was created in 1959 by the Short Range Committee of the U.S. Department of Defense (DoD). Official ANSI standards included COBOL-68 (1968), COBOL-74 (1974), COBOL-85 (1985), and COBOL-2002 (2002). COBOL 97 (1997) introduced an object oriented version of COBOL.\n\nPostScript\n\nPostScript was created in 1984 by John Warnock and Chuck Geschke at Adobe.\n\nProlog\n\n?- write('Hello World'), nl.\n\nProlog (PROgramming LOGic) was created in 1972 by Alan Colmerauer with Philippe Roussel.\n\nPython\n\nFor Python 2.6 and earlier:\n\nprint: \"Hello World\"\n\nFor Python 3.0 and later:\n\nprint(\"Hello World\")\n\nPython (named for Monty Python Flying Circus) was created in 1991 by Guido van Rossum.\n\nRuby\n\n\"Hello World\\n\".display\n\nRuby was created in 1995 by Yukihiro Matsumoto.\n\nShell Script (BASH)\n\necho Hello World\n\nSmallTalk\n\n'Hello World' out.\n\nSmallTalk was created in 1969 at Xerox PARC by a team led by Alan Kay, Adele Goldberg, Ted Kaehler, and Scott Wallace.\n\nSNOBOL\n\nOUTPUT = \"Hello World\" END\n\nSNOBOL (StroNg Oriented symBOli Language) was created in 1962.\n\nSQL\n\nSELECT \"Hello World\"\n\nSQL (Standard Query Language) was designed by Donald D. Chamberlin and Raymond F. Boyce of IBM in 1974.\n\nother\n\n\"26. There will always be things we wish to say in our programs that in all known languages can only be said poorly.\" \u2014Alan Perlis, Epigrams on Programming, ACM's SIGPLAN Notices Volume 17, No. 9, September 1982, pages 7-13"}
{"text": "The Dummies Way\n1. Explanations in plain English\n2. Get in, get out information\n3. Icons and other navigational aids\n4. Tear-out cheat sheet\n5. Top ten lists\n6. A dash of humor and fun\nDiscover how to:\n1. Understand the entire program development cycle\n2. Link code to create executable programs\n3. Debug and deploy your programs\n4. Use floats, integer variables, and if statements\n5. Write functions and use loops"}
{"text": "This text is concerned with the specification, design, and implementation of real-time systems, emphasizing software. It takes a balanced approach between theory and practice. Major topics covered are software architectures, informal and formal specification methods, deterministic scheduling, execution time prediction, computer clocks and time services, real-time programming languages, and operating systems. An appendix contains a comprehensive project on air traffic control for additional practical experience."}
{"text": "CS1315 Oxford Summer 2012\n\nPlease note that everyone gets one unexcused absence. All students are expected to attend every class. After the first unexcused absence, each unexcused absence is a 5% cost (part of participation 10%)\n\nThere will be quizzes. These will be taken out of class, and due two days after being handed out, at 11 pm BST.\n\nGrading\n\nUnless told otherwise, everyone should turn in their own homework, without collaboration with others.\n\nQuizzes: 20%\n\nParticipation: 10%\n\nSubject to change\n\nNote: We're only going to use PowerPoint occasionally in this class. We're referencing them below as pointers to topics \u2013 when we're going to cover what. You might also use them for studying.\n\nSUGGESTION: Read over the chapter before coming to class. Okay, skim it before class, then come to class, then re-skim it after. You'll have a better idea of what's coming up in lecture, and you'll more easily identify what you don't understand.\n\nWeek 5: July 23-26\n\nMon: Read Chapter 14. \"Can't we do this any faster?\": How a computer works (machine language, and interpretation vs. compilation) and why Photoshop is always faster than Python. Speed.ppt\n\nTues: Simple algorithmic complexity (Big-Oh), the notion that some algorithms are faster/better than others (linear vs. binary search), algorithms that can't be written (Halting Problem), and algorithms that take too long to finish in one's lifetime (Traveling Salesman)."}
{"text": "DeepCExtract...\n[Mehr] compilers.\nFor example,\nthe operating systems UNIX and OS/2 are written in C and when speaking about\ncompilers its easy to list out the compilers that are not written in C! Although it was\noriginally designed as systems programming language, it is used in wide range of\napplications.\nIt is used in the embedded devices with just 64-KB of memory and is also\nused in super computers and parallel computers that run at un-imaginable speeds.\nC and\nits successor C++ cover most of the programming areas and are predominant languages\nin the world of programming.\n\nTo put in the words of the creator of C++ Bjarne Stroustrup[Stroustrup\n1986],\n\"C is clearly not the cleanest language ever designed nor the easiest to use, so\nwhy do many people use it?\nIt is flexible [to ap\n[Weniger]"}
{"text": "free computer programming text book project\n\nkinds of programming\n\nSystem programming deals with the use of a computer system. This includes such things as the operating system, device drivers for input and output devices, and systems utilities.\n\nApplication programming deals with the programs directly used by most people.\n\nApplication programming is generally divided further into scientific and business programming.\n\nScientific programming is work in the scientific, engineering, and mathematical fields. Often the programmers are the researchers who use the programs.\n\nBusiness programming is work in the data processing field, including large scale business systems, web-based businesses, and office applications. It is exceedingly rare for these kinds of programs to be created by the person who uses them.\n\nAnother large category of programming is programming for personal or home use. This includes games. Historically, many advances in computer science occurred in the development of computer and video games.\n\nEmbedded systems are programs that are built into specific hardware, such as the computer systems in an automobile or microwave oven. These programs combine features of operating systems and application program into a single monolithic system.\n\nScripting is a simplified version of programming originally intended for use primarily by non-programmers. In practice, most non-programmers have trouble with scripting languages. Some professional programmers have built very useful, sometimes intricate systems using scripting languages, especially those contained in office software (such as word processors or spreadsheets"}
{"text": "1 Encapsulation\n\nTopic: \"Encapsulation is the division of a program into distinct components which have limited interaction.\"\n\nDiscussion Notes\n\nRevised 9/4/2010\n\nEvery book on OOP mentions (and tries to explain) the three magic words 'encapsulation', 'polymorphism', and 'inheritance'.\n\nThe definition on p. 5 is the clearest I have seen yet:\n\nEncapsulation is the division of a program into distinct components which have limited interaction.\n\nSubstitute 'system' for 'program' and we have a more general definition.\n\nCan we think of examples of encapsulation not involving software?\n\nInformation hiding is intimately related to encapsulation, but slightly different. What is it?\n\n\"Information hiding enforces encapsulation.\" (p. 6)\n\nI.e., information hiding is the encapsulation police.\n\nJust as we could have a rule for drivers that you must stop for a red light (corresponding to encapsulation), we could take two attitudes towards how to make this work. We could just rely on everyone's good will and trust them to stop at red lights. Or we could hire a police force and have them catch people who drive through red lights.\n\nOr you could have a rule that only designated people are to go into the room that says \"authorized personnel only.\" And you could either trust people to obey the rule, or you lock the room and hire guards to protect it.\n\nLikewise in software encapsulation. We can write encapsulated programs using Python classes. And as long as we honor the intended encapsulation, everything is fine. But Python does not enforce encapsulation (much). Any programmer is free to reach into the inner workings of a class.\n\nJava on the other hand does provide encapsulation police, with two officers named private and protected. They stand at the doors of a class's internals and keep busybodies out.\n\nSo it is interesting that the designers of Python and Java had very different attitudes towards programmers. The Python view is that we can trust programmers to observe the conventions of encapsulation. The Java view is that we can't trust programmers.\n\nWhich do you believe? Or when do you believe one, and when the other?\n\n1.1 Software Development\n\nGood programs are:\n\ncorrect\n\nefficient\n\nclear, maintainable\n\ngeneral purpose\n\nrapidly developed\n\nComments:\n\nAny disputing of these claims?\n\nAre all good programs correct? Completely correct?\n\nHow much general-purpose should a program be?\n\nDoes the program itself need to be general purpose, or built from general purpose components?\n\nAnd is this to reduce the cost of development?\n\nRapid development also is to reduce cost.\n\nRapid development could also mean if we need the program now, can we have it now please?\n\nWe study algorithms, which are not programs. Algorithms are the meanings of programs. Programs express algorithms in a particular programming language.\n\nEncapsulation = \"division of a program into distinct components which have limited interaction\"\n\nWe frequently here that OOP = encapsulation + polymorphism + inheritance (see. p. 5), but does this really capture the essence of OOP?\n\nWe can (almost) always have a program that works, at least to some small extent.\n\nAlternative of monolithic development\n\nA program that won't compile (so it won't run) is useless!\n\nExample\n\nDevelop incrementally in the classroom: a Java class representing a bank savings account. The account should have an account number and a balance. Define a constructor. Define an accessor but not a mutator for account number (which should be immutable). Define an accessor and mutator for balance\u2014or should we do better and define withdraw and deposit methods? Incrementally define a main method for testing."}
{"text": "Fortran 95/2003 For Scientists And Engineers - 3rd edition\n\nSummary: Chapman's Fortran for Scientists and Engineers is intended for both first year engineering students and practicing engineers. This text is the most current alternative for Fortran. It simultaneously teaches the Fortran 95/2003 programming language, structured programming techniques, and good programming practice. Among its strengths are its concise, clear explanations of Fortran syntax and programming procedures, the inclusion of a wealth of examples and exercises to he...show morelp students grasp difficult concepts, and its explanations about how to understand code written for older versions of Fortran. ...show less\n\nPAPERBACK Fair 0073191574"}
{"text": "Art\u00edculos\n\nObject-Oriented Application Frameworks\nObject-oriented (OO) application frameworks are a promising technology for reifying proven software designs and implementations in order to reduce the cost and improve the quality of software.\n\nI want my AOP!, Part 1\nThe new aspect-oriented programming (AOP) methodology facilitates modularization of crosscutting concerns. Using AOP, you can create implementations that are easier to design, understand, and maintain.\n\nIntroduction to Aspect-Oriented Programming\nAspect-Oriented Programming (AOP) complements OO programming by allowing the developer to dynamically modify the static OO model to create a system that can grow to meet new requirements. Just as objects in the real world can change their states during their lifecycles, an application can adopt new characteristics as it develops\n\nOOP Is Much Better in Theory Than in Practice\nThink object-orient programming (OOP) is the only way to go? You poor, misguided soul. Richard Mansfield contends that OOP is just the latest in a history of ideas that sound good in theory but are clumsy in practice.\n\nGrid Computing in Wikipedia\nGrid computing uses the resources of many separate computers connected by a network (usually the internet) to solve large-scale computation problems.\n\nElements of Service-Oriented Analysis and DesignLanguage Workbenches: The Killer-App for Domain Specific Languages?\nMost new ideas in software developments are really new variations on old ideas. This article describes one of these, the growing idea of a class of tools that I call Language Workbenches - examples of which include Intentional Software, JetBrains's Meta Programming System, and Microsoft's Software Factories. These tools take an old style of development - which I call language oriented programming and use IDE tooling in a bid to make language oriented programming a viable approach. (DSL) (COde Generation)\n\nLisp Language\nOriginally, the term Lisp referred to the ProgrammingLanguage which was the brainchild of JohnMcCarthy. The invention of Lisp dates back to 1958.\n\nCode Generation - Templating vs CodeDOM and automatic refactoring\nWe are currently using two code-generation techniques. For the data access and business logic layers, we have a code generator written in Prolog. For the layers on top of that one (i.e, a WS layer or a UI layer) we started using CodeDom and then we switched to an ASP.NET-like template-based code generator engine. (Aguiar)\n\nBCPL\nBCPL (Basic Combined Programming Language) is a computer programming language that was designed by Martin Richards of the University of Cambridge in 1966; it was originally intended for use in writing compilers for other languages. Although not widely used now, it was very influential, because Dennis Ritchie would later develop the widely-used C programming language from BCPL.\n\nApplying Code Generation Approach in Fabrique\nThis paper discusses ideas on applying the code generation approach to help the developer to focus on high-level models rather than on routine implementation tasks. This approach is exemplified by persistence level generation performed by JetBrains Fabrique. An overall overview of Fabrique is also presented here.\n\nEvolutionary Database Design\nOver the last few years we've developed a number of techniques that allow a database design to evolve as an application develops. This is a very important capability for agile methodologies. The techniques rely on applying continuous integration and automated refactoring to database development, together with a close collaboration between DBAs and application developers. The techniques work in both pre-production and released systems.\n\nCombined Programming Language\nThe Combined Programming Language (CPL) was a computer programming language developed jointly between the Mathematical Laboratory at the University of Cambridge and the University of London Computer Unit during the 1960s.\n\nWorking with DocBook\nThis paper, intended as a follow-up to my earlier paper entitled \"X-Power\", describes the setup I'm currently using to write papers in DocBook, including some of the pain and heartache I've wrestled with getting this far.\n\nExtreme Programming is a discipline of software development based on values of simplicity, communication, feedback, and courage. It works by bringing the whole team together in the presence of simple practices, with enough feedback to enable the team to see where they are and to tune the practices to their unique situation.\nRon Jeffries (2001)"}
{"text": "10157Prerequisites\n\n1. Knowledge of mathmatics at the Algebra II level and experience in problem solving. A student in either AP Computer Science course should be comfortable with functions and the concepts found in the uses of functional notation, such as f(x) = x + 2 and f(x) = g(h(x)). 2. Some previous programming experience is also important and necessary for students to have before attempting this Computer Science AP A course. This course is equivalent to a first year university or college level course and the content is covered quickly. An introductory course in C++, Pascal, Visual Basic, Java or similar course would be sufficient. HTML is not considered a programming language and would not give the students enough of a background to be successful. 3. A basic understanding of networks. 4. Knowledge of the responsible use of computer systems, including system reliability, privacy, legal issues, intellectual property, and social and ethical ramifications of computer use. 5. Programming I and Programming II are prerequisites for this course.\n\nMaterials to be ordered via the DLD\n\nDescription\n\nAP Computer Science A emphasizes object-oriented programming methodology with a concentration on problem solving and algorithm development. AP Computer Science A and B is the equivalent of a first-semester college-level course in computer science. The student will also be introduced to the study of data structures, design, and abstraction. By the end of the course, the student will be able to design and implement computer-based solutions to problems in a variety of application areas, to use and implement well-known algorithms and data structures, and to code fluently in an object-oriented paradigm using the programming language Java."}
{"text": "A superb book that's theory oriented. It's probably suited for programmers who are a little more experienced, but I'm a beginner, and this book served me quite well. It's probably one of the best books in its class. Best of all, it's free!\n\nFigured this deserves to be mentioned: \nProbably the most active programming Q&A site on the internet as I post this. Questions at any level about any programming language, library, algorithm, standard, etc. are welcome.\n\nDoes anybody have a good resource for learning the about what the preprocessor directives in C++ do? I mean as a novice they tell you to use iostream, iomanip, math.h, etc, but never tell you how to fully utilize them.\n\nThe program deals with the game connect 4( The game consists of a grid : 3 rows x 3 columns (or 9 cells) :\nTo identify each cell, we index them : Cell 1 is at the bottom-left\nwhile cell 9 is at the top-right of the grid. Use only arrays of one\ndimension.\nThere are two players (indexed by 1 and 2) who take turn to\ndrop one token (identified by the user index) in either column 1,\n2 or 3, with the objective to align 3 of his/her tokens in a row,\nin a column or in a diagonal. Both players are humans and the program will request the players to input the column where they wish to drop the token.\n\nImplement your program with one input to get the column index where the player will drop the token. Your program must check that the selected column is not full; as long as the player keeps selecting a column that is full, the program must ask the same player for another input. After getting a valid column index, have your program update the state of the grid, display its content and determine if the game is over or not. If the game is not over, then it is the turn of the other player. And so on.\nHere are (some of ) the tasks your flowchart needs to implement (you may add others) :\na) how does the program determine that the game is over (either all the 9 cells are filled and\nthere is no winner or one of the player aligns 3 tokens in a row, a column or a diagonal) ?\nb) The players take turn to drop their tokens. How does your program determine who is the\nnext player to play and how does it identify the tokens (from player 1 or from player 2) in the grid ?\nc) If a column is full (ie. 3 tokens are already in the that column), no player can drop another\ntoken in that column. How does your program identify the column(s) where the next player can still\ndrop his/her token ?"}
{"text": "Part 2: Jess: A rule-based programming environment\n\nPart 2: Jess: A rule-based programming environment\n\nIf you're going to develop rule-based systems, first you'll need to pick a rule engine. For the rest of this book, you'll be working with the Jess rule engine that you first met in chapter 1. In chapter 3, you'll learn about Jess's origins, how to get a copy, and how to write the Jess version of the famous \"Hello, World\" program. In the next few chapters, you'll learn a lot about writing programs in Jess's rule language. Chapter 4 is a general introduction to the Jess language. Chapter 5 teaches you how to work with Java objects from Jess programs. The next two chapters talk about Jess's working memory and how to write rules, respectively. Finally, chapter 8 explains some of the nuts and bolts that make Jess work. All together, part 2 of this book is a comprehensive tutorial on both the Jess language and the Jess rule engine; it will get you ready to start developing rule-based applications in part 3."}
{"text": "C# AIML Chatterbot \u2013 Artificial Intelligence In 500 stumbled across an area of artificial intelligence programming called AIML 'chatterbots'. These programs are interpreters for an XML based AI language called AIML. AIML and the code that processes it are the basis of the first and most famous chatterbot called A.L.I.C.E, where the founders and followers are infamous for promoting and winning the Loebner Prize in Artificial Intelligence. I decided to create a chatterbot in C#"}
{"text": "Chapter 7 - Using Loops and Timers - Part 1\n\n1 of 8\n\nChapter seven of our book, Visual Basic .NET Step by Stepis a short (just 23 pages!) but important chapter because loops and timers are the way you multiply the effect of your program by getting it to do something more than once. The calculator program mentioned in the lesson for Chapter 6 is a great example of a program that doesn't really need looping because it only does something once (that is, it performs one calculation based on key input). But most programs need to \"double back\" and repeat the same code. Or, perhaps execute the code at specific time intervals using the Timer control.\n\nAn example of how important loops are is the experience that people sometimes have of starting a program then discovering that the speed of your computer has suddenly slowed down to a crawl. The chances are good that the program you just started is \"stuck in a loop\" somehow. This chapter shows you how to do it right so that doesn't happen in the code you write."}
{"text": "4.2. Developing Software in C\n\nC is a purely procedural compiled language. All functionality is\nencapsulated into functions, and C programs are structured such that they\nare collections of functions grouped into files (roughly the equivalent of\nPython's modules). Each file may also include some global variables and\nvarious preprocessor directives. In a C source file global variables can\nbe designated as static, which effectively hides them from\nfunctions outside of the current file.\n\nA C source code file is compiled into an object file, which in turn\nis linked with other object files (either part of the immediate program or\nperhaps system library object files) to produce a final executable object.\nI should point out that the terms \"object file,\" \"library object,\" and\n\"executable object\" have nothing to do with object-oriented programming.\nThese are historical terms from the days of mainframes and\nrefrigerator-size minicomputers.\n\nIn the procedural paradigm a program's functions are the primary\nfocus and are distinct from the data they operate on, whereas in\nobject-oriented programming the data and the methods unique to that data\nare encapsulated into an object. Figure 4-1 attempts to\nillustrate this graphically.\n\nFigure 4-1. Procedural versus OO functional organization\n\nUnlike Python programs, C programs are compiled directly into a binary form (machine language) that\nis executed by the CPU. There is no conversion into an intermediate\nbytecode form, and no virtual processor to interpret the bytecode. C is\nthus considered to be \"close to the metal,\" and it is commonly used in\napplications where performance and compactness are primary considerations.\nOperating systems are a primary example. C and its OO cousin C++ are also\ntypical first choices for creating libraries, which\nare collections of functions that can be reused in other programs. In\nfact, C is so close to the underlying hardware that it has sometimes been\njokingly referred to as an assembler with fancy clothing, and most C\ncompilers have an option to output the assembly language that corresponds\nto the original source code.\n\n4.2.1. A Simple C Program\n\nMost tutorials on C start off with the infamous \"hello world\" program\nexample. I would prefer to start with something a bit more substantial,\nbut still (hopefully) comprehensible. My selection for this is a simple\nprogram that generates a plot of a sine wave using nothing more than\nsimple printable characters. If you've ever taken a college-level\nprogramming class, you may well have encountered something very much\nlike this.\n\nEvery standalone C program has a starting point in the form of a\nfunction named main(). Some C programs are not intended to be standalone\nmodules, but rather are libraries (collections) of functions for other modules to use. In those cases,\nthere is no main() function; it is\nprovided by some other part of the application. For a quick peek at a\nsmall C program, consider the following example:\n\nIf you have installed a C compiler (as described at the start of\nthis chapter) or already had one available, you can compile and run this\nprogram. We will assume that it is named sine_print.c. On Linux, one would do the\nfollowing:\n\nFigure 4-2. sine_print output\n\nI chose to start with this example rather than \"hello world\"\nbecause it illustrates several key features of the C language. We'll go\nthrough them quickly here, and then examine them in more detail in later\nsections.\n\nThe first eight lines are a comment block. In C, comment blocks begin with /* and end with */. A comment block may span more than one\nline.\n\nNote:\n\nAlthough you may see the //\ncomment notation in ANSI C programs (I have, many times), it is not\npart of the ANSI C standard. // is\nvalid comment notation for C++ programs, and most modern ANSI C/C++\ncompilers also honor it. However, its use in pure C programs is not\nrecommended.\n\nNext, we have three #include statements. These specify external\nfiles to be included in the program, that is, separate files that will\nbe read in and merged into the existing code before the compiler is\ninvoked. The #include statement is\nnot actually part of the C language itself: it is a preprocessor directive. The preprocessor recognizes a\nnumber of reserved words; in fact, preprocessor directives could be\nconsidered a minimal language in their own right. The preprocessor also\nremoves all comments from the source code before it is passed on to the\ncompiler.\n\nNext comes the declaration of the function main(). In C, a function's return type is declared before the\nfunction name, and if it has no return type specification the int type is used by default. As in Python, the\nuse of arguments is optional, so here we have an empty set of\nparentheses.\n\nC uses curly brackets (the { and } characters) to mark the start and end of\nblocks of code. A block may contain zero or more statements. C is a\nfree-format language, and so long as the syntax is correct and there is\nat least one whitespace character between names (or tokens, as they are called), the compiler\ndoesn't care how much additional whitespace there is. As a result, one\ncan create perfectly valid programs in C that are almost impossible for\na human reader to decipher. There is even an annual contest to write the\nmost obfuscated C program. We will endeavor to avoid writing code like\nthat.\n\nThe sine_print program declares three\nlocal variables, i,\noffset, and sinstr. The variables i and offset are integers, and sinstr is an array of characters (bytes).\nThese variables persist only for as long as\nsine_print persists, and they are actual memory\nlocations, not objects as in Python.\n\nNext up is a call to the standard C library function memset(). This sets all the elements of sinstr to space characters. Notice that it has\nthree parameters. The first is the target memory location, which in this\ncase is sinstr. The second is the\ncharacter value we want to write into memory starting at the location of\nthe first element of the array sinstr, which is an ASCII space character (its\nvalue is 0x20 in hexadecimal notation, or 32 in decimal). Finally, there\nis an integer that specifies how many elements sinstr has (that is, its size\u2014in this case,\n80). Notice that although sinstr is an array, we didn't write it like\none. This is because of the close relationship in C between arrays and\npointers, which we'll get to shortly. For now, you can safely assume\nthat using the name of an array variable without an index is equivalent\nto specifying the memory address of the zeroth element in the array. So,\nin a nutshell, memset() will fill 80\nconsecutive memory locations with the space character starting at the\naddress of the zeroth element of the character array sinstr.\n\nNow notice the assignment statement on the following line. In C, a\nstring is always terminated with a so-called string null. This is really nothing more than\nan 8-bit zero value. As you may recall, Python does not use string\nterminators, because a Python string object \"knows\" how big it is when\nit is instantiated. In C, a string is just another type of array, and\nwithout the terminator it is very possible for code to \"walk off the\nend\" of the string.\n\nNow that the string array has been initialized, the fun can start.\nThe for loop modifies sinstr 20 times and prints each modification\nto stdout. Within the for loop, the first statement computes where\nto place an asterisk using C's sin()\nfunction from the math library and writes this value to the variable\noffset. The index counter i is divided by 10 and used to divide up the\nvalue of pi from the math library. The constant\nvalue 39 in the offset calculation\nstatement determines where the output will start relative to the start\nof the string array.\n\nThe variable offset is used as\nan index into sinstr to change the\nspace character at that location to an asterisk. The entire string in\nsinstr is then printed, including the\nnewly inserted asterisk. After the string has been printed, the asterisk\nin the string array is replaced by a space and the process is repeated\nagain.\n\nFinally, the program returns a value of zero and\nterminates.\n\n4.2.2. Preprocessor Directives\n\nC provides a preprocessor that supports capabilities such as file\ninclusion (#include) and named\nliterals (#define), to name the two\nmost commonly used functions. The #define preprocessor directive is commonly\nreferred to as a macro. The preprocessor also provides a basic\nconditional test and control capability (#if, #elif, #ifdef, #ifndef, #else, and #endif), and the ability to \"undefine\" a macro\ndefinition (#undef). Notice that the preprocessor\ndirectives begin with a pound (hash) symbol. These are not comments, as in\nPython.\n\nIn some C implementations, the preprocessor is a separate program\nthat is invoked as the first step in the compilation sequence, but can\nalso be run by itself if necessary. The preprocessor scans the source\nfile, acting on any directives encountered and stripping out comments.\nWhat comes out the other end will usually look quite different from what\ngoes in (sometimes radically so). The output is in a form that the\ncompiler can deal with directly: pure C language tokens, whitespace\ncharacters, and nothing more.\n\nFor most of what we'll be doing, we won't need the more advanced\ncapabilities of the preprocessor. We just need to be able to include\nfiles in our code, define some constants, and then let the compiler have\nat it.\n\n4.2.2.1. #include\n\nThe #include directive,\nas its name implies, is used to include the contents of one file into\nanother. For example, it is often used to include the contents of a\nheader file, which, as its name implies, is\nincluded at the start of a source file. Header files typically contain\nthings like function definitions for code in other modules or library\nobjects, and macro definitions related to those functions. The\n#include directive could also be\nused to include one source file into another, but this is generally\nfrowned upon. We will look at header files and how they are used when\nwe discuss the structure of a C program.\n\nAn #include statement must\nappear before the contents of the file that it refers to are used, and\nit is common practice (and a Very Good Idea) to place these statements\nat the start of a source file. In the example program we looked at\nearlier (sine_print.c), there are\nthree #include directives at the\ntop of the listing:\n\nThese tell the preprocessor to include the contents of the files\nstdio.h, math.h, and string.h into our program. These are part\nof the standard library for C, and all three of these files contain\n#define statements, function\ndeclarations, and even more #include statements. They contain everything\nnecessary to make use of the standard I/O functions (printf(), memset(), and the value of\npi) and the sin() function from the basic math\nfacilities available in the libraries that come with the C\ncompiler.\n\n4.2.2.2. #define\n\nThe #define macro directive associates a name (a\nstring) with a substitution string. Anywhere in the source code where\nthe macro name occurs, it will be replaced with the substitution\nstring. #define macro names can\nappear anywhere where it would be valid to type in the substitution\nstring. Consider the following example:\n\nAfter the source has been through the preprocessor, it will look\nsomething like this:\n\nif (avar < bvar) {\nreturn 0;\n}\nelse {\nreturn 1;\n}\n\nThe #define macro is commonly\nused to define constants that are used in various places in one or\nmore source modules. This is much preferable to using literal values\nas \"naked numbers\" typed directly into the source. The primary reason\nis that if a program has a constant used in calculations in multiple\nplaces, using one macro in a common included file makes it much easier\nto change and is less error-prone than hunting through the code for\neach occurrence of the literal value and replacing it. Also, unless\nthere is a comment specifically stating that some literal value is a\nspecial constant, it might be difficult to tell the difference between\ntwo constants of the same value that are used for completely different\npurposes. Changing the wrong literal value could lead to highly\nannoying results.\n\n#define is also sometimes\nused to define a complex statement or set of statements, and supports\nthe ability to accept variables. This is really where it gets the\nmacro moniker. Here's a simple example:\n\n#define MAX(a, b) ((a) > (b)?(a) : (b))\n\nThe ternary conditional (?:) is a shorthand\nway of testing the (a) > (b)\nexpression. If it evaluates to true, the value of (a) is returned; otherwise, (b) is the result. This is a somewhat risky\nmacro, however, because if a\nhappened to be of the form ++a\n(which we will discuss shortly) it would get evaluated twice\u2014once in\nthe comparison and once when it is returned as the result\u2014and its\nvalue would be incremented twice. This might not be the desired\nresult.\n\nIf we were to put the two #define statements from this example into\ntheir own file, called updown.h,\nit could then be included in any other C source file that needed those\ndefinitions:\n\nThis version makes it much easier to see what happens if one\nchanges the maximum line length from 80 to, say, 40 characters. The\n#define macros for MAXSTR and MIDPNT are computed from the value defined\nby MAXCHARS, so all one needs to do\nis change MAXCHARS to 40. It should be noted that when the macro\nsubstitutions for MAXSTR and\nMIDPNT occur in the code, it will\nlook like this when the C compiler gets it from the\npreprocessor:\n\nIn addition, there are four modifiers that can be applied to the\nbasic types to specify the amount of storage that should be allocated\nand the expected range. They are short, long, signed, and unsigned.\n\nPutting it all together yields the type definitions shown in Table 4-2.\n\nThere is no string type in C; a string is just an array of type\nchar with the last element containing\na zero as a terminator value. In C, strings are alterable (or mutable,\nto borrow Python's terminology) arrays just like any other array.\n\nOne will often encounter the use of short and long without the int portion of the type name. When specifying\na short or long integer type, the int\nis implied, and although the compiler will (or at least, should) accept\nthe int keyword, it is not necessary.\nAlso, unless specifically stated otherwise, all integer types are\nassumed to be signed.\n\nLastly, we should mention the void keyword. It's not a type in the\nconventional sense, but rather serves as a placeholder that indicates an\nundefined type. It is typically used to indicate that a function returns\nnothing (the default expected return type for a function is int), or as a placeholder for a pointer that\ncan refer to any valid memory location (we'll discuss pointers\nlater).\n\n4.2.4. User-Defined Types\n\nC allows the programmer to define an identifier that represents an\nexisting data type or a construct that incorporates existing data types.\nFor example:\n\ntypedef can also be used to\ncreate new type definitions for things like pointers and\nstructures.\n\n4.2.5. Operators\n\nC provides the usual selection of arithmetic, logical, and\ncomparison operators. It also has some rather unique unary\n(single-operand) operators such as pre- and post-increment, pre- and post-decrement,\nlogical negation, and unary plus and minus (arithmetic negation).\n\nSome operators appear more than once in the following tables to\nreflect their status as members of more than one class of\noperations.\n\n4.2.5.1. Arithmetic operators\n\nThe arithmetic operators (see Table 4-3) in C are much like the arithmetic\noperators in any other language.\n\nTable 4-3. C arithmetic operators\n\nOperator\n\nDescription\n\n+\n\nAddition\n\n\u2212\n\nSubtraction\n\n*\n\nMultiplication\n\n/\n\nDivision\n\n%\n\nModulus\n\nOne does need to be careful, however, when performing operations\non variables of different types. For example, when two integer types\nare used, the smaller type is \"promoted\" to a size equal to that of\nthe larger type. Thus, if a short integer is added to a long, the\nshort is promoted to a long for the operation.\n\n4.2.5.2. Unary operators\n\nC's unary operators (shown in Table 4-4) perform a specific action on one, and\nonly one, variable. They will not work on expressions, but they can\nappear in expressions.\n\nTable 4-4. C unary operators\n\nOperator\n\nDescription\n\n+a\n\nUnary\nplus\n\n-a\n\nUnary minus (arithmetic\nnegation)\n\n++a\n\nPre-increment\n\na++\n\nPost-increment\n\n--a\n\nPre-decrement\n\na--\n\nPost-decrement\n\n!a\n\nLogical negation\n(NOT)\n\n~a\n\nBitwise one's\ncomplement (NOT)\n\n*\n\nPointer dereference\n(see section on pointers)\n\n&\n\nMemory address (see\nsection on pointers)\n\nThese operators might need a few words of explanation. The unary\nplus and minus operators change the sign of a variable. Consider the\nfollowing bit of code:\n\nWhen this code is compiled and executed, the following output is\ngenerated:\n\n5\n-5\n\nThe increment and decrement operators increase or decrease the\nvalue of a variable by 1. When this occurs is determined by the\nlocation of the operators. If the ++ or --\noperator appears before the variable, the increment or decrement\noperation occurs before any subsequent operations using that variable.\nIf the ++ or -- operator appears after the variable name,\nthe increment or decrement occurs after the indicated operation. The\nfollowing code shows how this works:\n\nIn the first case, the value of a is incremented and then assigned to\nb. In the second case, the\nassignment occurs before the increment (the increment is a\npost-increment), so b gets a's original starting value, not the\nincremented value.\n\nThe ! and ~ operators work as one might expect. It is\ncommon to see expressions of the form:\n\na = !(b > c);\n\nwhich means that if b is\ngreater than c, the result will be\nfalse, even though the b > c\npart of the expression is true. It is logically negated. The binary\nnegation (~, one's complement)\noperator inverts the sense of each bit in a variable, so that a\nvariable with a bitwise value of:\n\n00100010\n\nbecomes the complement of the original value:\n\n11011101\n\nWe will discuss the * and\n& operators when we get to\npointers, so we'll put those aside for now.\n\n4.2.5.3. Assignment and augmented assignment operators\n\nThe C language provides a number of useful assignment operators. These are shown in Table 4-5.\n\nTable 4-5. C assignment operators\n\nOperator\n\nDescription\n\n=\n\nBasic\nassignment\n\n+=\n\nAddition\nand assignment\n\n-=\n\nSubtraction\nand assignment\n\n*=\n\nMultiplication\nand assignment\n\n/=\n\nDivision\nand assignment\n\n%=\n\nModulus\nand assignmentThe assignment operator in C works by copying a value into a\nmemory location. If we have two variables and we write:\n\nx = y;\n\nthe value contained in the memory location called y will be copied into the memory location\ncalled x. Note that both x and y\nmust have already been declared before an assignment can take place,\nso that the compiler can allocate memory space for the variable ahead\nof time.\n\nAs in most other modern programming languages, C's augmented assignment operators work by performing the\nindicated operation using the values of the variables on either side\nof the operator and then assigning the result back into the lefthand\nvariable. So, if we have an expression that looks like this:\n\ncnt += 10;\n\nwe can expect that the value cnt will have 10 added to it and the sum\nwill then be assigned back to cnt.\n\n4.2.5.4. Comparison operators\n\nC's comparison and relational operators (shown in Table 4-6) only work on\nnumeric values. They don't work on strings, structures, or arrays,\nalthough it is possible to compare two characters, as in (\"a\" < \"b\"). In this case the result will\nbe true, since the numeric ASCII value of \"a\" is less than the numeric value of\n\"b\". C simply treats them as byte\nvalues.\n\nTable 4-6. C comparison and relational operators\n\nOperator\n\nDescription\n\n<\n\nLess\nthan\n\n<=\n\nLess than or equal\nto\n\n>\n\nGreater\nthan\n\n>=\n\nGreater than or equal\nto\n\n!=\n\nNot equal\nto\n\n==\n\nEqual to\n\nExpressions that use comparison operators always return a\nlogical true or false. In C, false is defined as zero (0), and anything else is considered to be\ntrue (although the value 1 is\ntypically given this honor). The operands may be single variables or\nother expressions, which allows for some rather complex compound\nexpressions.\n\nTable 4-8. Truth table for tval\n\ntval\n\nx\n\n(y <\nz)\n\nF\n\nF\n\nF\n\nT\n\nF\n\nT\n\nF\n\nT\n\nF\n\nF\n\nT\n\nT\n\nIn this case, tval will be\nassigned a true value if and only if x is false and the expression (y < z) evaluates to true.\n\n4.2.5.6. Bitwise operators\n\nThe rich set of bitwise operators found in C is a legacy of\nits long history as a systems-level language, and these operators are\nideally suited to applications that are \"close to the metal.\" Table 4-9 lists C's bitwise operators.\nManipulating the bits in a hardware register is much easier to do in a\nlow- to mid-level language like C than in a high-level language such\nas Python.\n\nTable 4-9. C bitwise operators\n\nOperator\n\nDescription\n\n<<\n\nBitwise left\nshift\n\n>>\n\nBitwise right\nshift\n\n~a\n\nBitwise one's\ncomplement (NOT)\n\n&\n\nBitwise AND\n\n|\n\nBitwise OR\n\n^\n\nBitwise XORC extends the concept of augmented assignment by including\nbitwise operations. The shift-assign operators shift the value of the\nlefthand operand in a bitwise fashion either left or right by the\nnumber of bits specified in the righthand operand, and assign the\nresult to the lefthand operand.\n\nIf we have a variable that contains the value 1 and we shift it left by 2, the result will\nbe the value 4. This is shown\ngraphically in Figure 4-3.\n\nFigure 4-3. Bitwise left shift\n\nIn the first case (on the left), the original value of 1 becomes 4. In the second case, the original value of\n12 becomes 48. A left shift is, in effect,\nmultiplication by powers of 2 wherein the original value is multiplied\nby 2n, where\nn is the number of bit positions shifted.\nConversely, a right shift is equivalent to division. And, yes, one can\ndo some speedy math tricks using shifts, but only if it works out that\na power of 2 is suitable for the operation.\n\nThe AND, OR, and XOR bitwise operators\nmap across bit-to-bit between the operands. The AND and OR operators are used fairly heavily in\nsituations where one must manipulate the individual bits in a hardware\nregister, such as might be found in an interface circuit of some kind.\nThe bitwise AND is often used to\nisolate a particular bit in an integer value, which may have been read\nfrom a hardware register. The following code snippet shows how the\nAND operator can be used (we'll\nassume that the variables have all been properly defined\nelsewhere):\n\nThe first step is to obtain the current contents of a hardware\nregister and write the data into the variable regval. Next, regval is checked to see if any bits are set\n(it will be > 0). If so, then the bit at position\n23 (0x08) is tested by \"masking\" all the\nother bits. With the AND operator,\nif the 23 bit is 1, the result will be\nnonzero (it will be 0x08, actually) and the TRUE portion of the second if statement will be executed. Otherwise,\nthe FALSE portion of the if will be executed. Lastly, the snippet\nclears the 23 bit by applying the one's\ncomplement of 0x08 (which is 0xf7) and writes the value back into the\nhardware register. If the bit at the 23\nposition in regval is already 0, it\nwill remain 0. This could have the effect of resetting a trigger\ncondition or perhaps terminating some action in the external physical\nworld. Figure 4-4 shows how\nthe snippet operates on the bits in regval.\n\nFigure 4-4. Using C's AND operator\n\n4.2.5.7. Operator precedence\n\nTo complete our overview of operators in C, we need to\nconsider the subject of operator precedence. Each operator in C has a\nspecific priority, or precedence, in the order of execution when an\nexpression is evaluated. Consider these two expressions:\n\n2 * 4 + 12\n2 * (4 + 12)\n\nThey may look similar, but they will give very different\nresults. The first expression will yield a value of 20. The second\nwill yield a value of 32. The reason is that the multiplication\noperator has a higher precedence than the addition operator, so unless\nthe compiler is told otherwise\nby mean of parentheses grouping, it will perform the multiplication\nfirst.\n\nAssociativity also affects how an expression will be evaluated.\nIn general terms, associativity defines how evaluation of an\nexpression associates operands with operators, and in which direction,\nfor operators of the same precedence. For example, if we have the\nfollowing:\n\n3 + 5 + 7 \u2212 2 + 6\n\nthe addition and subtraction operators associate left to right.\nThe result is the same as if the expression had been written\nas:\n\n((((3 + 5) + 7) \u2212 2) + 6)\n\nNow consider this expression:\n\n3 + 2 * 6 + 8 / 4\n\nMultiplication and division also associate left to right, but\nthey are of a higher precedence than addition or subtraction, so this\nexpression could be stated as:\n\n((3 + (2 * 6)) + (8 / 4))\n\nIf a different outcome is desired, parentheses can be used to\ngroup the operands accordingly.\n\nIn general, it is a good idea to use parentheses to make the\noriginal intent clear rather than relying on the precedence and\nassociativity rules of a language. The result is more readable and\nless prone to misinterpretation.\n\nTable 4-10 lists the operators\navailable in C in order of precedence, from highest to lowest, along\nwith the associativity of each.\n\nTable 4-10. C operator precedence\n\nOperator\n\nDescription\n\nAssociativity\n\n()\n\n[]\n\n.\n\n->\n\n++ \u2212\u2212\n\nParentheses\n\nBrackets (array subscript)\n\nMember selection\nvia object name\n\nMember selection via\npointer\n\nPostfix\nincrement/decrement\n\nLeft to\nright\n\n++ \u2212\u2212\n\n+ \u2212\n\n! ~\n\n(type)\n\n*\n\n&\n\nsizeof\n\nPrefix\nincrement/decrement\n\nUnary plus/minus\n\nLogical negation/bitwise complement\n\nCast\n(change type)\n\nDereference\n\nAddress\n\nDetermine size in\nbytes\n\nRight to\nleft\n\n* / %\n\nMultiplication/division/modulus\n\nLeft to\nright\n\n+ \u2212\n\nAddition/subtraction\n\nLeft to\nright\n\n<< >>\n\nBitwise shift left,\nbitwise shift right\n\nLeft to\nright\n\n< <=> >=\n\nRelational less\nthan/less than or equal to Relational greater\nthan/greater than or equal to\n\nLeft to\nright\n\n== !=\n\nRelational is equal\nto/is not equal to\n\nLeft to\nright\n\n&\n\nBitwise AND\n\nRight to\nleft\n\n^\n\nBitwise exclusive\nOR (XOR)\n\nRight to\nleft\n\n|\n\nBitwise inclusive\nOR\n\nRight to\nleft\n\n&&\n\nLogical AND\n\nLeft to\nright\n\n||\n\nLogical OR\n\nLeft to\nright\n\n?:\n\nTernary\nconditional\n\nRight to\nleft\n\n=\n\n+= \u2212=\n\n*= /=\n\n%= &=\n\n^= |=\n\n<<= >>=\n\nAssignment\n\nAddition/subtraction assignment\n\nMultiplication/division assignment\n\nModulus/bitwise AND\nassignment\n\nBitwise exclusive/inclusive OR assignment\n\nBitwise\nleft/right shift assignment\n\nRight to\nleft\n\n,\n\nComma (separate\nexpressions)\n\nLeft to\nright\n\n4.2.6. Expressions\n\nAn expression in C makes use of one or more of the available\noperators to define a computational action. This might be as\nstraightforward as a comparison, or as complex as a multivariable\nBoolean equation. When used within control statements (which we will\nexamine shortly), an expression is always enclosed in parentheses.\nExpressions used in an assignment statement may have optional\nparentheses to help establish the desired order of operations to be\nperformed. Parenthesized expressions always return a value as a side\neffect, which may or may not be useful.\n\n4.2.7. Statements\n\nA C program is composed of statements. A statement is\nexecutable code, such as an assignment, a function call, a control\nstatement, or a combination of these. Statements consist of tokens\n(variable and function names), expressions, and possibly other\nstatements. C is a logically rich language and allows for a great deal\nof flexibility in how statements are assembled by the programmer.\n\nAssignment statements copy the value of whatever is on the right\nside of the assignment operator to the token on the left side. The\nlefthand token must be a variable (either a single variable, an element\nin an array, or a member of a structure), whereas the righthand operand\nmay be any valid variable name, a constant, an expression, or a\nstatement that returns a value. One cannot assign a value to a function\nor a constant, but one can assign the return value of a function or the\nvalue of a constant to a variable.\n\nA function call statement transfers program execution to another\nfunction. It might be within the same module as the calling function, or\nit in another module altogether. When the external function finishes and\nreturns, control resumes at the next statement following the call\nstatement. It is common to see a combination of an assignment with a\nfunction call, like this:\n\nret_val = ext_function();\n\nThe control statements of a C program control program execution.\nThere are various types of control statements available to perform\nbranching, implement loops, and directly transfer control to another\npart of the program.\n\nGroups of statements are referred to as statement\nblocks, and are delimited using the curly brace characters\n({}).\n\n4.2.7.1. if-else statement\n\nThe if statement is used to direct control flow,\nor the path of execution, through the code. The test expression will\nbe evaluated as either true (any nonzero value) or false (a zero). The\nbasic form of if statement looks\nlike this:\n\nif (expression) {\nstatement(s)\n}\n\nIf only a single statement is used, the curly braces are\noptional.\n\nIn a simple if statement,\nwhen (expression) is true, the statement or statements\nassociated with the if are\nexecuted. Because C is an unstructured language, one could also write\na simple if like this:\n\nif (expression) statement;\n\nor:\n\nif (expression) {statement; statement;}\n\nWhile there are situations where this might make the intent of\nthe code more readable and concise, it should be used sparingly, if at\nall.\n\nThe else statement allows for\nan alternative to handle the condition where (expression) evaluates to false and some alternative\naction is necessary:\n\nif (expression1) {\nstatements(s)\n}\nelse {\nstatements(s)\n}\n\nIf (expression) is true, the first block of statements is\nexecuted; otherwise, the second block of statements is\nexecuted.\n\nMultiple conditional tests may be grouped into a set of\nalternative actions by using the else\nif statement:\n\nIf (expression1) is true, the statements in block 1 are\nexecuted. If expression1 is not true,\n(expression2) is evaluated, and if it is true the\nstatements in block 2 are executed. The same applies to (expression3). If none of the expressions are true, the\nstatements in block 4 under the final else are executed. Note that the use of the\nlast else is optional.\n\n4.2.7.2. switch statement\n\nThe switch statement is used to select an\nexecution path based on the value of an expression. The value of the\nexpression is compared to a constant and, if it matches, the statement\nor statements associated with that branch are executed:\n\nWhat is happening here is that when a case statement matches the variable c, it not only executes its statement, but\nthen execution \"falls through\" and all subsequent statements are\nexecuted. This may not be what was intended (although there are some\ncases where this behavior might be desirable). In order to prevent\nfall-through, the break statement\ncan be used. Here is the revised version of c_switch.c with break statements:\n\nOne should always use break\nstatements in a switch construct\nunless there is a very good and compelling reason not to do so. The\ndefault statement is also a good\nidea. In some coding style requirements, such as those employed in the\naerospace industry, a default\nstatement is always required, even if it does nothing. One use for a\nswitch construct with a default statement is as an input verifier.\nSuppose a function expects a specific set of input parameter values,\nand anything else is an error that must be trapped and handled. Here's\na simple example code snippet:\n\nThis will set the variable rc\n(i.e., the return code) to whatever the macro OK is defined to be if the input value\n(inval) is between 0 and 3,\ninclusive. If it is anything else, rc is set to BAD_VAL. It is assumed that rc will be checked further down in the code\nto handle the invalid input condition. Although one could have written\nan equivalent bit of code using an if and comparison operators, like so:\n\nif ((inval >= 0) && (inval <= 3)) {\nrc = OK;\nelse\nrc = BAD_VAL;\n\nthe switch method also\nhandles noncontiguous sequences of values quite nicely without\nresorting to long and complex combinations of logical and comparison\noperators.\n\n4.2.7.3. while loop\n\nThe while loop executes a\nstatement or block of statements so long as a test expression\nevaluates to true:\n\nwhile (expression) {\nstatement(s)\n}\n\nBecause the test expression is evaluated before the body of the\nloop, it is possible that it may not execute any of its statements at\nall.\n\n4.2.7.4. do-while loop\n\nThe do-while loop is similar to while, but the loop test expression is not\nevaluated until the end of the loop's statement block:\n\ndo {\nstatement(s)\n} while (expression);\n\nThe statement or statements in the body of a do-while loop will always be executed at\nleast once, whereas in the while\nloop they might not be executed at all if the test expression\nevaluates to false.\n\n4.2.7.5. for loop\n\nThe for loop is typically used as a counting loop,\nalthough it is not restricted to using just numeric types:\n\nThe for statement contains\nthree distinct components, all of which are optional. When the test\nexpression is omitted, the logical value is assumed to always be true.\nThe initialization and iteration expressions are treated as no-ops\nwhen either or both are omitted. The semicolons in the syntax are\nsufficient to indicate the omission of one or more of the\nexpressions.\n\nFor example, a for loop can\nomit the initialization and test expressions:\n\nint i = 0;\nfor (; ; i++) {\nif (i > 9)\nbreak;\n}\n\nTo emulate an unbounded loop, all of the for loop's expressions can be\nomitted:\n\nint i = 0;\nfor (;;) {\nif (++i > 9)\nbreak;\n}\n\n\"Unbounded\" in this case simply means that there is no implicit\nway for the loop to terminate. If the internal test never becomes\ntrue, the loop will execute forever.\n\nC's for loop is very\nflexible, but it is typically found in the role of a counting loop (by\nway of contrast, a for statement in\nPython is designed to iterate through a range of values or data\nobjects). The initialization expression establishes the starting value\nof a loop counter variable, the test expression controls execution of\nthe loop (it will execute so long as the test expression is true), and\nthe iteration expression is invoked each time through the loop\nimmediately after the test expression is evaluated. The following code\nsnippet illustrates this:\n\nint i;\nfor (i = 0; i < 10; i++) {\n/* statements go here */\n};\n\nThe loop starts with the value of the counter variable i set to 0. The statements in the body of the loop\nare then executed and the counter variable is incremented by 1. It is\nthen tested and, if the result is true, the loop repeats.\n\n4.2.7.6. break statement\n\nThe break statement is used to terminate, or break\nout of, a loop (while, do, or for) or a switch construct. When it is encountered, it\nwill cause the surrounding loop to terminate. No further statements in\nthe loop's statement block will be executed. The c_switch.c example shown earlier\ndemonstrated the use of break in\nboth a loop and a switch\ncontext.\n\n4.2.7.7. continue statement\n\nThe continue statement forces execution to\nimmediately branch back to the top of a loop. It is used only with\nwhile, do, and for loops. No statements following the\ncontinue\nstatement are executed.\n\n4.2.7.8. goto statement\n\nThe C language provides a statement that is inherently\ndangerous, potentially evil, and prone to much abuse and misuse. This\nis the goto statement, which, as\nyou might surmise, causes program execution to abruptly jump to a\nlabeled location in the code. As Kernighan and Ritchie put it:\n\"Formally, the goto is never\nnecessary, and in practice it is almost always easy to write code\nwithout it.\" Sage advice. We won't be using goto in any of the C code in this book.\n\n4.2.8. Arrays and Pointers\n\nArrays and pointers are closely related in C; both refer to\ncontiguous areas of memory set aside for data storage. Arrays have an\ninherent structure imposed by the type and the size (number of elements)\nspecified when the array is declared. A pointer also references an area\nof memory that has structure and size, although how this is achieved\ndiffers from an array declaration, as we'll see shortly. Because of this\nclose relationship, it is possible, for example, to refer to the\ncontents of an array using a pointer. Conversely, an array index might\nbe thought of as a pointer into a specific memory space.\n\nIn this section, we'll look at arrays and pointers and see how\nthey are related. We'll also see exactly what pointers are and how they\nare used.\n\n4.2.8.1. Arrays\n\nAn array is an ordered set of data items in\na contiguous region in memory. Arrays are defined with a type when\nthey are declared, and all the data elements in the array must be of\nthat type. As we've already seen, a string in C is an array of\nchar (byte) type data items. One\ncan also have arrays of int,\nfloat, and double values, as well as pointers.\n\nIn C, an array is fixed in size. Its size cannot be changed once\nit is defined (actually, this is not entirely true if one is using\npointers, but we'll get to that in a moment). Each element, or cell,\nin an array occupies the amount of memory required to hold a variable\nof the type of the array.\n\nHere is a contrived example that will print each element in a\nstring array on its own line of output:\n\nNotice that the string in str\nhas a char zero value at the end.\nWithout this, the for loop would\nrun off the end of the array and into some other part of memory. Also\nnotice that if cval contains the\nnull character (\\0), it is not\nprinted.\n\nLastly, there is the array of pointers, which are treated as\nunsigned integer values of a size corresponding to the native address\nsize of the underlying machine (typically 32 bits).\n\nWhen an array is accessed using an index, the actual position in\nthe array's memory space is based on the size of the data type of the\narray, as shown in Figure 4-5.\n\nFigure 4-5. Array indexing\n\nWhen the index of array1 is\nincremented, it advances one byte (char). When the index of array2 is incremented, it advances by two\nbytes. For array3, the index\nadvances by four bytes. Note that in C array indexing is\nzero-based.\n\n4.2.8.2. Pointers\n\nA pointer is a variable that contains a memory\naddress. This address might be that of another variable, or it could\npoint to a contiguous region of memory. It might also be something\nlike the address of a control register in an I/O device of some type.\nPointers are a powerful concept, and they make some classes of\nproblems much more tractable than would otherwise be possible. For\nthis reason, C has sometimes been called \"the language of pointers.\"\nUnderstanding what a pointer is and how to use it effectively is key\nto writing efficient and powerful programs in C. Occasionally one\nhears criticism leveled at C because of pointers, and while it is true\nthat a stray pointer can cause serious problems, it is also true that\nif pointers are used carefully and with some discipline, the result is\nas safe and robust as any code written in a language that lacks the\nconcept of a pointer.\n\nNote:\n\nFor a real-life example of how pointers in C can be used to\nmanage memory for image data processing on a spacecraft, see Chapter 3 of the book\nBeautiful\nData, edited by Jeff Hammerbacher and Toby\nSegaran (O'Reilly).\n\nTo define a pointer, we use the * unary operator:\n\nint *p;\n\nThis statement defines a pointer named p of type int, and it can be used to point to an\ninteger data location. To assign an address to it, we can use the\n& unary operator, like\nso:\n\nint x = 5;\nint y;\nint *p;\np = &x;\n\nThe pointer variable now contains the address of the variable\nx, and we can access the contents\nof x using p:\n\ny = *p;\n\nThis will assign the value of x to the variable y. When the * operator is used in this fashion, it is\ncalled dereferencing, or\nindirection.\n\nPointers can be passed as parameters to functions. This allows a\nC function to manipulate data in some location outside of itself, or\nreturn more than just a single value. Here's a common swap\nfunction:\n\nvoid swap (int *x, int *y)\n{\nint tmp;\ntmp = *y;\n*y = *x;\n*x = tmp;\n}\n\nThe parameters x and y are pointers provided by a calling\nfunction, like so:\n\nint a = 10\nint b = 20;\nswap(&a, &b);\n\nNote that when swap() is\ncalled, the & address operator\nis used to pass the addresses of the two variables a and b.\nWhen swap() returns, a will contain 20 and b\nwill contain 10.\n\nWe stated earlier that arrays and pointers are related, and this\nis a good time to explore that relationship a bit further. In C, the\nfirst element in an array is the base address of the array's memory\nspace. We can assign the base address of an array to a pointer using\nthe & operator, like so:\n\nint anarray[10];\nint *p;\np = &anarray[0];\n\nSince both anarray and\np are defined as int types, these two statements are\nequivalent:\n\nanarray[5];\n*(p+5);\n\nBoth refer to the value stored at index position 5 in the\nanarray memory space. With the\npointer form, the address it contains is incremented by five, not the\nvalue it is pointing to. If we had written *p+5, the array element at anarray[0] would have had 5 added to it\ninstead. One can also assign the base address of an array to a\npointer, like this:\n\np = anarray\n\nThis form implies &anarray[0] and is usually how an array\nbase address is assigned to a pointer. The &anarray[0] form is not necessary;\nunless there is a specific need to reference the address of a\nparticular array element other than the zeroth element, one would just\nuse the array name.\n\nPointers can be used to point to things other than simple\nvariables and arrays. A pointer can refer to a structure (discussed in\nthe next section), or it can point to a function. Pointers in C take a\nlittle getting used to if one has never dealt with them before, but it\nis worth the effort to learn them as they allow for compact and\nefficient expressions that would otherwise be difficult, or even\nimpossible, to achieve.\n\n4.2.9. Structures\n\nA structure in C is a collection of variables of\ndifferent types. A structure has a unique name, and structures may\ninclude substructures.\n\nFigure 4-6. C structure syntax\n\nHere is a definition for a simple structure that contains three\nvariables that hold the result from a single input measurement of some\nsort:\n\nstruct measdata {\nfloat meas_vpp;\nfloat meas_f;\nlong curr_time;\n};\n\nThis, by itself, isn't particularly interesting, but if we had an\narray of these structures we would have a set of measurements:\n\nstruct measdata measurements [100];\n\nNote that the structure definition does not allocate storage\nspace\u2014it is just a definition. In other words, it's a new\nprogrammer-defined type. We can also skip the extra step of declaring a\nvariable of the structure type by appending one or more variable names\nto the structure definition:\n\nBefore moving on, we need to look at pointers to structures and\nhow the contents of a structure are accessed via a pointer. The follow\nexample program shows how one can create an array of pointers to\nstructures, acquire memory for the structure data, and then reference\nthe contents of the structures:\n\nThere are some new things here, so now would be a good time to\nlook at them. First, notice that an array of pointers of type datapoint is created and called dpoint. When a pointer or array of pointers is\ndefined in this fashion, the pointer values are not yet valid\u2014they point to nothing because no\nmemory addresses have been assigned.\n\nIn the main() function, the\nfirst for loop handles the chore of\nassigning a datapoint-sized chunk of\nmemory to each of the elements in the array of pointers by calling the\nstandard library function malloc().\nThe malloc() function requests a\nblock of memory of a specified size (in this case, large enough to hold\nan instance of a datapoint structure)\nfrom the operating system. The first for loop also assigns values to locations in\nthat memory allocation that map to the structure defined in the datapoint type.\n\nSince dpoint is of type\ndatapoint, the memory block provided\nby malloc will be treated just like a\ndatapoint structure. Figure 4-7 shows this\ngraphically.\n\nTo access individual elements in each structure, the so-called\narrow notation is used. This notation is used in C\nto relate pointers to structures with the defined data elements within\nthe structure type.\n\nThe second for loop reads out\nthe data in structures and prints it, while the last for loop works backward through the array of\npointers and frees the memory for each entry.\n\n4.2.10. Functions\n\nIn C, all executable statements are contained within functions\n(preprocessor directives are not executable parts of the compiled code).\nC does not support the use of immediate execution statements such as\nthose found in Python modules. Also, every executable C program must\nhave a function named main(). This is\nthe primary entry point when the program is started. Utility, support,\nand library modules that are intended to be compiled and then \"linked\"\nwith other modules (more on this in a bit) do not have a main() function.\n\nFigure 4-7. Structure mapping to allocated memory\n\n4.2.10.1. Function syntax\n\nThe basic syntax of a C function looks like this:\n\n[type]name (parameters)\n{\nstatements...\n}\n\nThe optional [type] qualifier\nspecifies the return type of the function, and if it is not present\nthe compiler typically assumes that the function will return an\ninteger (some compilers, such as gcc, may\ngenerate a warning message about it). The function name is composed of\nalphanumeric characters; how they are utilized is largely a stylistic\nissue. The function name is followed by zero or more parameters\nenclosed in parentheses. Parameters also have type qualifiers, and may\nbe either values or pointers. On the next line, there is a left curly\nbrace ({), followed by zero or more\nstatements, and then a final closing right curly brace (}).\n\nFunctions cannot normally be nested in standard ANSI C, although\nsome compilers do allow functions to be nested as a nonstandard\nextension (hint: don't do it\u2014you will most likely hate yourself for it\nlater). Each function is treated as a single unique entity with its\nown local scope.\n\n4.2.10.2. Function prototypes\n\nA function prototype defines a function to\nthe C compiler in a format that can be used to resolve forward and\nexternal references. Because C requires that things like variables,\ntypedefs, and functions be defined before they are\nused, it is convenient to place the prototypes for the functions in a\nmodule at the top of the module, or in an external file. This allows\nthe functions in the module itself to appear in any order. The\nalternative is to arrange the functions such that they appear and are\ndefined before they are called. This might be acceptable for a small\nmodule, but it can quickly become a major headache with a large module\ncontaining many functions.\n\nA function prototype is just the function definition statement\nterminated with a semicolon (;). A\nC function prototype defines a reference to an as-yet-undefined\nfunction within the current source file, or an external function\nwithin a separate object module. Prototypes are used to create\nplaceholders in the compiled code that will be filled in later by a\ntool called a linker. For example:\n\nvoid bitstring(char *str, long dval);\n\nThe function prototype specifies the function's return type\n(void in this case), its name, and\nthe number and types of its parameters. The use of parameter names is\noptional, which means we could just as easily have written the\nfollowing and it would work just fine:\n\nvoid bitstring(char *, long);\n\n4.2.11. The Standard Library\n\nAn ANSI-compliant C compiler comes with a number of header\nfiles and library modules that provide support for math operations, string\nprocessing, memory management, and I/O operations, among many others.\nTable 4-11 gives an\nabbreviated listing of what is available. For more information, refer to\nthe documentation supplied with your particular C compiler.\n\nTable 4-11. ANSI C standard library components\n\nFilename\n\nDescription\n\nassert.h\n\nDefines the assert() macro. This is used to assist\nwith testing and detection of errors in a debug version of a\nprogram. If debugging is not active, the assert() macro is\ndisabled.\n\nctype.h\n\nDeclares functions for\ntesting and classifying characters, such as isalpha(), isdigit(), and so on.\n\nerrno.h\n\nCaptures error codes\ngenerated by other functions in the standard\nlibrary.\n\nfloat.h\n\nDefines macro constants\nfor use with floating-point math operations.\n\nlimits.h\n\nDefines macro constants\nthat are implementation-specific values for things such as the\nnumber of bits in a byte and the minimum and maximum values for\ninteger types.\n\nlocale.h\n\nDefines things like local\ncurrency representation and decimal point formatting. Declares\nthe setlocal()\nfunction.\n\nmath.h\n\nDeclares mathematical\nfunctions such as sin(),\nlog(), pow(), and floor(). Macro definitions include\nM_PI, M_TWOPI, M_SQRT2, and M_LOG2E, among others.\n\nsetjmp.h\n\nDeclares the macro\nsetjmp() and the function\nlongjmp(), which are used for\nnonlocal exits.\n\nsignal.h\n\nProvides a means to\ngenerate and handle various system-level signals, such as\nSIGTERM and SIGSEGV.\n\nstdarg.h\n\nDefines the va_start(), va_arg(), and va_end() macros for accessing a\nvariable number of arguments passed to functions.\n\nstddef.h\n\nDefines several useful\ntypes and macros that are used in other standard library\nheaders.\n\nContains declarations for\na variety of utility functions, including atoi(), rand(), malloc(), and abs(). The functions and macros\ndeclared in stdlib.h\nsupport a variety of operations, including conversions, random\nnumbers, memory allocation, process control, environment\nvariables, and sorting.\n\nstring.h\n\nDefines\nstring-manipulation functions such as strcpy(), strcat(), and strcmp(), and memory-manipulation functions such as\nmemcpy() and memset().\n\ntime.h\n\nProvides several\nfunctions useful for reading and converting the current time and\ndate. Some behavior of the functions declared here is defined by\nthe LC_TIME category of the\nlocation setting.\n\nThe most commonly used standard library components are math.h, stdio.h, stdlib.h, and string.h. I would advise you to take a look\nat these components so you can get an idea of what is available.\n\n4.2.12. Building C Programs\n\nA nontrivial C program is usually a collection of files.\nSome of these may contain source code directly related to the program,\nwhile some might be local files containing function prototypes and macro\ndefinitions. Still other files may reside in a common library directory. When the program is compiled it\nis all pulled into the compiler, converted into object files, and then\nlinked into a complete executable program. Figure 4-8 shows the steps involved in compiling\nC source code into an executable program file.\n\nFigure 4-8. C program compilation\n\n4.2.12.1. Header files\n\nIn C, one will typically see two types of file extensions:\n.c and .h. The\n.h extension is used to denote a\nheader file, so called because one typically\nincludes all necessary .h files at the start of a\nmodule, before any of the actual code.\n\nHeader files are included in their entirety via the #include directive. They typically contain\nfunction prototypes, macro definitions, and typedef statements, and a header file\ncan\u2014and often does\u2014include other header files. However, it is\nconsidered both bad form and bad practice to place executable function\ncode in a header file. Since it is rather trivial to build\nexecution-safe linkable object files in C, there really is no reason\nto do this.\n\n4.2.12.2. Object files\n\nThe C compiler does not itself generate executable output. It\ngenerates what are referred to as object files, which is an ancient term from the land of\nmainframes that refers to the notion of a binary object consisting of\nmachine-code instructions. Actually, however, an object file is an\nintermediate product. In order to execute, it still needs some\nadditional code, and this is provided by the linker.\n\nIf an object file references other binary objects outside of\nitself, the compiler inserts a placeholder and creates a list of these\nin the object file. The linker then reads this data in order to\nresolve the external references. Some C compilers (most notably\nMicrosoft C) also automatically incorporate a runtime object to allow\na program to access Windows system functionality.\n\n4.2.12.3. Libraries\n\nLibrary files are collections of binary objects that may be\nincorporated into other programs. Binary library files have specific\nformats, and there really isn't a universal format. Figure 4-9 shows a generic\nexample of the internal format of a library file.\n\nFigure 4-9. Generic library file internal format\n\nThe header identifies the type of library file, which may be\neither static or dynamic. The symbol table contains a list of the\nobject names in the file along with address offset values that point\nto each object. Lastly, there are the binary objects\nthemselves.\n\n4.2.12.4. Linking\n\nThe linker is a standalone utility that links program binary\nobjects to external library modules. It uses the external reference\nplaceholders in the program binary object to determine what is needed\nand where the address reference for the external object should be\ninserted. Figure 4-10 shows how\nthe linking works.\n\nFigure 4-10. Program binary object linkage\n\nThe linker is typically language-independent. So, for example,\none could link a binary object originally created using FORTRAN with\nan object created using C, provided that the compilers for both\nobjects create binary objects that adhere to the same format as that\nexpected by the linker. Figure 4-11 shows a\ngeneric linked executable with one program binary object, two library\nmodules, and a runtime object to interface with the underlying\noperating system. Not every C implementation uses or requires a\nruntime object module, and in some implementations the functionality\nto support things like the printf()\nfunction is included automatically, even if it isn't used in the\nprogram.\n\nFigure 4-11. Linked executable\n\nProgram execution always begins with the main() function, and this is where the\ndefault runtime code will point the CPU when the program is\nloaded.\n\n4.2.12.5. make\n\nLastly, we should mention the make utility. make is\nnot part of the C compiler; it is a separate program, although it\nmight be included with a C compiler distribution.\nmake is a tool for maintaining a set of source\nfiles based on the use of rules and actions. The rules specify actions\nto take if a file is missing or has been modified. When used to help\nmanage large C programs with many source and header files,\nmake will invoke either the compiler or the\nlinker (or both) as necessary, to keep all binary objects, libraries,\nand executable files up-to-date. Almost all versions of\nmake incorporate their own unique \"little\nlanguage\" that allows for macro definitions, name substitutions,\ngeneric and specific rule forms, and the ability to access other\nprograms in the host system. We won't delve into\nmake in this book, but I would encourage you to\nread about make on the Web or in the\ndocumentation supplied with your operating system or C compiler.\n\n4.2.13. C Language Wrap-Up\n\nC is a procedural language originally used for system-level\nprogramming. It has since evolved into a general-purpose language that\noccupies a niche just above assembly language and well below high-level\nlanguages such as Python, Java, or Lisp. Because of C's low-level\nnature, it is well suited to tasks that involve direct interaction with\nsystem hardware and the underlying operating system. These capabilities\nare a double-edged blade, however, and it's easy to write C code that\ncan do very unpleasant things to the host system. Care and discipline\nare required to write solid, safe, and reliable C code."}
{"text": "What is Python Tutor?\n\nThis list is for folks who want to ask questions regarding how to learn\ncomputer programming with the Python language.\n\nPython ( is a programming language which many feel is\na good first language, because it makes it easy to express the fundamental\nconcepts of programming such as data structures and algorithms with a syntax\nwhich many find easy to read and write.\n\nFolks interested in learning about programming with Python are encouraged to\njoin, as are folks interested in helping others learn. While the list is\ncalled tutor, anyone, whether novice or expert, can answer questions.\n\nIf individuals wish to start off-line conversations about a particular\nconcept and become one-on-one tutor/tutee, that's fine. If either party\nwants to summarize what they learned for others to benefit, that's fine too."}
{"text": "Share\n\nX10 (programming language)\n\nThe X10 programming language is organized around four basic principles of asynchrony, locality, atomicity, and order that are developed on a type-safe, class-based, object-oriented foundation. This foundation is robust enough to support fine-grained concurrency, Cilk-style fork-join programming, GPU programming, SPMD computations, phased computations, active messaging, MPI-style communicators, and cluster programming. X10 implementations are available on Power and x86 clusters, on Linux, AIX10 Java Virtual Machine (JVM) enables a set of computer software programs and data structures to use a virtual machine model for the execution of other computer programs and scripts. The model used by a JVM...\n\nJavaScript (sometimes shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but also used in many non-browserHaskell is an advanced purely-functional programming language. An open-source product of more than twenty years of cutting-edge research, it allows rapid development of robust, concise, correct software. With...\n\nThe Objective-C language is a simple computer language designed to enable sophisticated object-oriented programming. Objective-C is defined as a small but powerful set of extensions to the standard ANSI C...\n\nOpenJDK is the free version of the Java development platform. The OpenJDK project consists of a number of components. Principally these are HotSpot (the virtual machine), the Java Class Library and the...\n\nClojure is a dynamic programming language that targets the Java Virtual Machine (and the CLR ). It is designed to be a general-purpose language, combining the approachability and interactive development of a...\n\nFreeBASIC is a completely free, open-source, 32-bit BASIC compiler, with syntax similar to MS-QuickBASIC, that adds new features such as pointers, unsigned data types, inline assembly, object orientation"}
{"text": "What's Inside OPENSTEP... Really?\n\nby Dave Klingler\n\nAn Introduction\n\nThe next several pages will be an attempt to give you a complete overview of OPENSTEP's development system as it might pertain to Rhapsody. Of course, we can't quite cover everything, but hopefully when you're done reading you'll know a little bit about OPENSTEP's basic parts and why developing under OPENSTEP has brought a happy grin to the faces of so many lucky programmers. OPENSTEP isn't perfect, but it's a well-designed springboard for a Macintosh programming renaissance during the next few years.\n\nThe major elements of OPENSTEP are the Foundation Kit, Interface Builder, Display Postscript, and Objective-C. There are some important minor players as well: ProjectBuilder, Header Viewer, Librarian and pswrap. All of these elements are probably unfamiliar to you unless you've used NEXTSTEP or OPENSTEP before, so let's start by taking a quick run through the development process under OPENSTEP to see where the pieces fit. We'll then go back to take a closer look at the major players.\n\nThe Development Process\n\nThe development cycle under OPENSTEP is fast enough that it tends to leave you wondering what you skipped when you're finished. I'll outline my own development cycle here; you'll probably evolve your own techniques once you start programming under OPENSTEP.\n\nI usually begin by designing classes. This process is similar in any modern language; I figure out what data my program will use and derive a rough list of the major classes involved. Optimizing for speed versus efficiency, or server storage versus local storage, maintainability or even communications bandwidth will influence the design of my class system.\n\nOver a period of about my first two years working with Objective-C I noticed that my techniques for designing new objects changed radically and often. I attribute that to the seemingly subtle, but huge differences between designing for Objective-C and for conventional languages like C or Pascal or even quasi-oop languages like C++. I take heavy advantage of dynamic typing and dynamic binding, which are not available in most languages other than Smalltalk. Java is currently mostly statically typed as well, but JDK 1.1 has reflection, a clear sign that the language is evolving in the right direction.\n\nBizarrely enough, I've gotten to the point where I write almost all my overview documentation before I write most of the code. I'll write test code to make sure a concept's going to work if it's something radical, but for the most part the code's completely described before it's written. I'm finished when any competent Objective-C programmer could write my app from my docs.\n\nThe documentation process is made easier by the fact that every Objective-C class is comprised of an interface file and a class implementation file. The interface file is a fancy header file that contains all the class variables that might be needed by a programmer using the class, plus prototypes for class methods and functions. When I'm designing a new class, of necessity I have to decide how that class will interact with the outside world. Whatever's externally available goes in the interface file and, with a comparatively tiny amount of work, an explanation goes with it into the documentation. Now I've got my interface files and all the documentation someone would need to use any of the classes in my new app.\n\nAt this point I'll either hand it off to a group of programmers for them to complete or paste the method and function prototypes from the interface into a new file called the class implementation file and begin filling out the class. This is the file that will actually contain the code for the class, and if you want to sell your classes you can compile this file and sell the result along with the interface file and the documentation. No one gets your source code, but they do get an explanation of all the classes' externally available variables and methods. Their classes can interface with your classes without knowing what's inside them, and that, after all, is what object-oriented programming is all about.\n\nLots of people in the OPENSTEP world sell classes instead of applications. One of the first classes I bought was BenaTong's Serial class, so that I could save some work writing a telecommunications package.\n\nBecause I've got a list of method prototypes to implement, I can just work my way through the file coding each one. When I reach the last one the class will be finished and quite often it \"just works\" with little or no debugging.\n\nAfter designing the classes, it's time to pull out ProjectBuilder. ProjectBuilder manages the process of building a new application, module or palette under OPENSTEP. I tell ProjectBuilder to create a new project, create a few icons for the program and data files and drop them into ProjectBuilder's various boxes, drop in the new classes and double-click the \"nib\" file that ProjectBuilder has created for me. \"Nib\" stands for NeXT InterfaceBuilder, and that file contains the elements of the interface for the program, arguably most of it. Using Interface Builder might be compared to using a graphical version of ResEdit, but InterfaceBuilder does much more.\n\nNext I design the rest of the program. Keep in mind that most of the elements in the average program other than the ones you've just designed (and they're usually very few) are already running in the OPENSTEP OS. This means that you can use \"live\" versions of those objects when you design your program's user interface by just grabbing what you want off a palette. You can also put your new classes into their own palette and use them too.\n\nInterfaceBuilder allows you to design a program and \"run\" it without actually ever compiling it, because the code for any objects you're using other than your own has already been compiled. That code is running or at least available in the operating system as a shared library. When you've finished \"drawing\" your program the way you want it to work, including the classes you can't see but must be integrated anyway, you select \"test interface\" from InterfaceBuilder's menu and InterfaceBuilder runs the program for you without classes that it doesn't have yet. It gives you a big Frankenstein-style switch that you can use to shut the program down if your experiment doesn't like to quit. If you don't like the user interface, you can play with it until it's easy to use or does exactly what you wanted. It's far more powerful than an ordinary interface design program because you effectively have a graphical window into the guts of your app.\n\nTo release my application in other countries I can design nibs in other languages. OPENSTEP has support for English, French, Spanish, Swedish, German and Japanese. Most of the time it's just a matter of changing the words on the menus. There are localization firms that specialize in taking an English nib file and using it to create other language-specific versions of the program. They'll send back the nib and you can drop it into ProjectBuilder. They'll also translate other messages that reside in your code if it's needed. In most cases your app will \"just work\" in any language your customer chooses to use.\n\nWhen I finish with InterfaceBuilder (and I might reverse the process and play with InterfaceBuilder first because it's sometimes more productive) I tell ProjectBuilder to compile the app. I'll select \"debug\" first if the app is large or I'm trying something fancy. If I'm debugging, ProjectBuilder will build the app with all its nibs and then compile the new classes with debugging extensions. It'll then drop me into gdb (a debugger) with the app loaded, where it's up to me to debug. There are various other debugging tools available under OPENSTEP that allow me to examine the app's messaging, memory usage, optimization, etc. Quite often if I'm really bamboozled I'll tell gdb to show me all the messaging taking place between objects. It's something like watching your children begin to talk.\n\nI haven't yet discussed Postscript wraps or the cool process of trying out your Postscript code in Yap.app (there's a server running in the os, so why not?) before it goes into your project. ProjectBuilder knows about wraps and various other resources too, so it's an extremely useful tool for managing the process of creating a large application. Let's take a look at wraps and Display Postscript in general.\n\nDisplay Postscript\n\nDisplay Postscript (DPS) did not exist when NeXT first got together with Adobe to design a common language for writing to the screen and the printer. The general idea was to achieve true WYSIWYG by using the same code to describe both, and so DPS was born. Steve Jobs waxed poetic about XWindows while describing why NeXT had chosen DPS over X11; he called X \"brain damaged\". It is true that like many groundbreaking efforts, X became a little outmoded, and DPS is an elegant system. DPS is, however, imperfect in the context of the new age of multimedia, so we'll probably see many additions to DPS over the next few years.\n\nDepending on your program's performance needs, there are various methods available for adding Display Postscript to your programs. Note that most programs use very little DPS, and unless you're designing a drawing application you probably won't have to learn much. That said, playing with Postscript interactively can be somewhat addictive, like fooling with turtle graphics and Logo if you're old enough to remember. You may choose to spend more time with it than is absolutely necessary, and if you do, the principles are the same.\n\nYou may or may not know that Postscript is a stack-based client-server page description system. Your program is the client, and the server is effectively either the screen or the printer. In theory it would be nice to write code that worked on both screen and printer; in practice you can't rely on all printers being Level II Postscript-compatible, so you may have to rewrite small sections of your display code for safe printing if you want to use Level II features.\n\nThere are three basic methods for using Display Postscript: operator functions, wraps and user paths, in descending order of their execution times. Operator functions are simplest, and you'll use them when you want to make a quick call to the server for a single function. Here's an example of a common combination of commands in Postscript, a \"moveto\" command followed by a \"lineto\" command. They create what is known in Postscript as a \"path, and they're followed by an instruction to \"stroke\" the path, or fill it with ink.\n\n10 10 moveto\n50 50 lineto\nstroke\n\nAs mentioned, one of the really fun parts of OPENSTEP is getting into Yap (Yet Another Postscript processor) and playing with Postscript interactively. Some time ago I ported BattleZone to NEXTSTEP, and I threw the entire opening screen into Yap to test it. I then moved elements of it around until I was happy with the way the screen looked. It was so much fun it almost made up for the rest of the porting process.\n\nYou can include these instructions in your code by using PS operator functions. OPENSTEP has two PS library functions for every PS operator, one for drawing in a default context and one that allows you to specify the context. Here's the equivalent of what's above, using the PS operator functions in psops.h, which draw in a default context:\n\nPSmoveto(10, 10);\nPSlineto(50,50);\nPSstroke;\n\nNow you've seen the original Postscript and the way you can implement it using single operator functions. As you can see, it is easy to convert any Postscript calls into operator function calls and insert them into your program. The problem with doing that is that each one of these calls is a separate message to the server. If you're calling one function occasionally, you're sending one message to the server occasionally, which is as good as you're going to get. For more than one line of Postscript, however, you'd do better to package your Postscript into a \"wrap\".\n\nA wrap packages your calls into a C function library that ProjectBuilder can be told to include at compile time. You'd write a text file with the following in it:\n\nAs you can see, it's easier to work in Postscript and let ProjectBuilder or pswrap do the work for you. It's also not a good idea to look too often at the files that pswrap generates, because you'll begin losing sleep.\n\nThere's a third way to interact with the DPS server, and that's with user paths. A user path is a way of packaging up a bunch of Postscript and translating it beforehand for the server. You can go even further by telling the server to store it in a user dictionary. That way you can make one call to the server, perhaps to supply arguments, and you minimize your program's messaging overhead. The technique is available when you need it, but from experience I can tell you that it's easier to use wraps and then go back and optimize where necessary with user paths. User paths are sometimes not very easy to debug.\n\nFor the most part whenever you use Postscript, you'll be drawing in a \"View\" object, a part of the Application Kit that maintains its own state for Postscript operations. Let's go back for a look at InterfaceBuilder and the Appkit and see why InterfaceBuilder plays such a large part in OPENSTEP programming.\n\nInterface Builder\n\nOn the surface InterfaceBuilder looks essentially just like any interface builder. What it's doing underneath is far more rich and, in the end, far more useful to the programmer. InterfaceBuilder allows you to assemble all of the elements of your program and test them, in some cases without even compiling the program. You do this by grabbing objects off a palette and placing them where you want them. You can use almost any object in the Application Kit, which is an extremely rich source of material, or you can also make up palettes of your own objects and drop them into InterfaceBuilder.\n\nA side benefit of using InterfaceBuilder is that much of your program will automatically conform to the OPENSTEP user interface standards. InterfaceBuilder doesn't limit you to creating applications. You can create modules as well, for use in other apps. After you're done bringing in the various elements of your program, InterfaceBuilder allows you to define the relationships these elements will use to work together. When you're finished, you can test your application without compiling it from within InterfaceBuilder. If a program works in InterfaceBuilder, it usually works after it's been compiled. Sometimes you'll even find yourself writing programs that never even run outside of InterfaceBuilder.\n\nThere are three major parts of InterfaceBuilder other than the area in the middle of the screen where you assemble your apps. The first is the file window (Figure 1), where all the different parts of your app are kept, including the parts that have no visual interface. As you add pieces to your application you'll see icons for each instance appear in the file window. You can also instantiate your own objects as you write code for them and they will appear here.\n\nFigure 1. The File Window contains all the pieces of an application.\n\nThe file window keeps track of sounds, images, and information about the different classes available to you as well. You can use the file window's class browser to browse through the classes for a particular class. The class browser will allow you to parse new classes into InterfaceBuilder for use with the other objects. You can also subclass existing classes in the file window, and InterfaceBuilder will write skeleton code for your new subclass, including any action methods or outlets (pointers to other objects) your subclass might have. You can add these action methods and outlets in the Inspector window. Inspector windows are one of the most important user interface innovations in OPENSTEP, and a number of MacOS and Windows programs have begun using them. Essentially an inspector gathers all the important information about an object in one place. InterfaceBuilder makes fundamental use of inspectors in a most artful manner.\n\nFigure 2. An InterfaceBuilder Attributes inspector window.\n\nFigure 2 shows an InterfaceBuilder Attributes inspector for a fictitious button in a fictitious application. It's what you'd see if you selected the button in the same manner as selecting a line in a drawing program. The Attributes inspector allows you to change the title of the button instance, the icon it displays, the sound it makes, what kind of button it is (momentary push, pushOn/pushOff, etc.), and various other attributes. You can either specify sounds or icons by typing their names into the inspector or you can drop them on to the button and they'll appear here. InterfaceBuilder's Inspector Window carries all the important information about an individual object.\n\nIn addition to attributes you'll see other common elements such as details on the object's connections to other objects (messages it might receive or send, and to or from whom), the object's size in various dimensions, or help attachments to an interface element. In short, the Inspector Window contains detail. Last but not least is the Palette Window. It's the most intuitive window to use, because you simply drag objects from the palette to the application window or panel in which they should reside. You can drag Window and Panel objects, too.\n\nFigure 3. InterfaceBuilder's Pallette window.\n\nWhen you've finished dragging, browsing, parsing, clicking and typing, it's time to finish your application by drawing connections between all the different objects. When you've finished, your objects will be able to send messages to one another, and you can test them by selecting \"Test Interface\" in the menu. When you're all finished, click \"Save\" and InterfaceBuilder will archive the objects for you in a nib file. The nib contains most of the information about a program, and as you can see, anything in the nib is machine non-specific. That's why apps written in OPENSTEP are easily delivered across processor architectures. InterfaceBuilder is very cool.\n\nObjective-C, alias Objective-C++\n\nFear not Objective-C. Yes, it is another programming language. It will, however, give you a competitive advantage in development that you probably don't believe possible right now. It's also easy to learn, and before you mumble to yourself that you've heard that before, let's take a look.\n\nObjective-C was designed by Brad Cox, Smalltalk guru and the author of \"Object-Oriented Programming, An Evolutionary Approach\", a seminal work in OOP circles. He chose to make Objective-C a mix between Smalltalk and C, attempting to keep the best features of both. Objective-C takes dynamic typing and dynamic binding from Smalltalk. Within a class, however, it preserves the conciseness and efficiency of C.\n\nOn the surface, there are basically three differences between Objective-C and C:\n\n1. Objective-C has a type called \"id\" that functions as a pointer to a generic object.\n\n2. id is the default return type, rather than an int.\n\n3. Objective-C has a messaging syntax for calling a method within an object. It uses embedded arguments, and it looks like\n\n[object method]\n\nHere's an example of a message to a hypothetical object called graphObject to plot a point at location (x,y,z) with color graphColor:\n\n[graphObject plotXAt:x andYAt:y andZAt:z\nwithColor:graphColor];\n\nThe syntax may seem strange with the embedded arguments thrown in, but it's not all that confusing. The method could be prototyped as\n\nThe idea is that the format is more conducive to designing readable code. You can give your methods sentence-like names like the one above. I've been able to return to code I haven't seen for over a year and begin where I left off. I have never found another programming language that allows an ease of overall maintainability that compares to that of Objective-C. Syntax, however, may make Objective-C maintainable, but that isn't what makes it powerful. What makes it powerful is its features, and my favorite features of Objective-C are dynamic typing and binding.\n\nThe utility of a generic pointer to an object is that it gives the programmer the ability to point to an object without knowing what it is beforehand. Objective-C has reflection and discovery, so I can point to an unknown object and ask it to describe itself and whether it knows how to do certain things.\n\nBy using id to point to the object rather than statically typing it at runtime as an object of class X (you can do that too), I'm telling my program not to worry about what the object is yet. The object will be bound at runtime, and permiting me to choose what object I want during the program's execution instead of being forced to predict it at the link stage. The object I bind with at runtime could be written years after the calling code, and the calling program wouldn't know the difference.\n\nDynamic binding, dynamic typing and object discovery and reflection allow me to utilize true polymorphism. I might have several different code libraries containing classes that all have the same names but do different things. I might have a method call in a class, for instance, that looks like\n\n[storageObject insertRecord:record];\n\nOne application might call for the storage method to be a hashtable. Another application might be best suited with a stack. The same class could be used for both, without any rewriting, because my stack class and hashtable class understand the same methods. All of this flexibility might be hard to manage, except that Objective-C allows me to declare formal protocols for classes to obey. A class declaration in Objective-C looks like\n\nObject\n\nThe same class declaration with an instruction to the compiler to make sure that the class follows a formal protocol looks like\n\nObject < BlowsUpThings, CannotBeStopped >\n\nProtocols are truly powerful because they allow the programmer to easily take advantage of extreme polymorphism. A class can send the same message to classes of entirely different inheritance subtrees, which leads us to inheritance and scope coherency.\n\nScope coherency is not an issue with Objective-C; it uses a single inheritance model. If it's necessary to inherit methods of a wildly disparate nature that don't fit into a single inheritance model easily (and my experience has been that this case is rare), I can group methods into Categories. Categories aren't only good for that purpose, however; they're an extremely powerful tool with many uses.\n\nUsing a category, I can add methods to a class without having its source code. Effectively, I can extend classes that are already running, and all subclasses of those classes will inherit the abilities you added transparently.\n\nI can also group like methods in a very large class into various categories. That ability nets me incremental compilation, better locality of reference, configurability of classes for special needs, and a way to divide up a large class among multiple developers.\n\nWith OPENSTEP, NeXT brought many of the best features of C++ into Objective-C, renaming the language Objective-C++. The end result is an extremely powerful marriage, sort of like C++ with a clean syntax and much-improved maintainability.\n\nSome members of the Java team originally worked for NeXT, and Java resembles Objective-C far more closely on a structural level than it does C++. If you've looked into Java, and liked it, you'll love Objective-C.\n\nFoundation Kit\n\nDevelopment under NEXTSTEP has always basically been AppKit + Objective-C + DPS, which somehow magically added up to more than the sum of their parts. Over the years, though, there were many NEXTSTEP developers who argued that NEXTSTEP was somehow impure in a few ways. It lacked garbage collection. It had no string objects. It didn't support Unicode. Many of the problems we discussed were along the lines of the perennial \"why should the user throw the disk away to eject it?\" discussion in the Mac world.\n\nWith OPENSTEP, NeXT had a chance to redo some things in a better fashion. Unfortunately, they were still under time pressure, which meant that some of the changes weren't optimal solutions. Still, OPENSTEP makes some good improvements on an already elegant foundation. NEXTSTEP was the first step; OPENSTEP is the next step.\n\nFoundation Kit brings some final polish to the OPENSTEP development environment. It brings some basic utility classes, like NSArray, NSThread, and NSException. It brings reference counting. It brings Unicode strings. It brings... complexity. It brings slowness and bulk. Such is the price of power and maturity.\n\nIf you produce software that must be localized, you'll have plenty of fun with these. There's an encoding for every purpose.\n\nSupport for Unicode is important, but what's arguably an even bigger addition with Foundation Kit is that it brings garbage collection and standardized exception handling.\n\nNeXT's solution to garbage collection is reference counting - possibly not the most elegant solution they could have chosen, but it's robust and it works. Basically the Application object for each application keeps an autorelease pool for storing references to objects. When an object is allocated or copied from another object, it is given a reference count of 1. Every message from another object to retain an object increments the reference count; every message to \"autorelease\" the object decrements it. When the reference count reaches 0, the autorelease pool releases the object.\n\nTo understand a little bit better, imagine that you have an object called spy. The spy object has the ability to concoct fantastic schemes to take over the world.\n\nSo if another object, say, the Control object, messages spy with a message to concoct a new scheme:\n\nThe rule is that if you create an object, you are responsible for releasing it. By sending currentScheme an autorelease message before returning it, spy is declaring that currentScheme does not need to exist beyond the current scope. By the way, the above example also illustrates nesting of messages, which works in a similar way to nesting function calls.\n\nWhat if the spy had already passed the currentScheme object to its trusted partner, dirtyCounterSpy, and then subsequently sent the autorelease message to currentScheme as above? Eventually the other object might message the old currentScheme, which has probably long since been auto-released, and the dirtyCounterSpy object would crash hard, taking Control and spy and all the other objects in the secret espionage program with it.\n\nThe way to solve that would be for dirtyCounterSpy to send the older currentScheme object a retain message. Sending a retain message increments the older currentScheme's reference count in the autorelease pool. That way when the spy object sends an \"autorelease\" message to currentScheme, the reference count drops only to 1 instead of 0. The dirtyCounterSpy object can now keep the currentScheme object even though the object has been released by the spy object, and, in fact, even if the spy object is destroyed the dirtyCounterSpy object can use \"retain\" to keep currentScheme.\n\nI hope this dirty lesson in in the affairs of espionage has briefly illustrated reference counting, and perhaps in other, more exciting ways it's illustrated a little of the power of OPENSTEP. There's quite a bit more to Foundation Kit, mostly in the area of abstraction, that is somewhat beyond the scope of this article. You have what you need, however, to grab a copy of Rhapsody and create that killer app Apple"}
{"text": "Programming: the fun, easy, creative way\n\nSpryte is a free, open source programming environment for creating static, animated, and interactive\ncode-generated artworks. It provides graphic/web designers, and\nany aspiring programmers, with an accessible and visual way to learn programming.\n\nprevious | next\n\nSpryte makes use of the highly intuitive and robust Python programming language, combining it with\nan assistive editor (IDE) for writing code. The user gets to explore computer algorithms as a creative\nmedium, generating visual output, while at the same time learning the\nfundamentals of computer programming.\n\nHaving grasped Spryte, learning other programming languages is relatively easy.\nIn fact, Spryte has been successfully used as precursor to teaching JavaScript, ActionScript, and PHP\nto graphic design students.\nmore about Spryte"}
{"text": "C# tutorial-C# programming ?\n\nWhat is C#?\n\nC# is a successive cross-platform programming language of C and C++.Its\nbasic syntax is very similar to C and C++ programming languages. However, C#\nhas many useful features such as garbage collection, exception handling,\nextensive class library, multiple types of polymorphisms. In addition, C#\nhas powerful development tools, and therefore making C# worth to learn.\n\nOne common C# development tool for Windows is Visual Studio that will be\nused in this tutorial. Therefore, to follow the tutorial, you need to have\nVisual Studio 2008 or newer installed in your machine.\n\nIn this C# programming language tutorial, you will start with the basic\nknowledge required to get up and running with C#. Then you will learn some\nbasic and advanced concepts of C# programming language(along with workable\nexamples and samples projects) including C# variables and data types,\noperators and expressions, conditional statements or decision making, loops\nor repetitions, array, structure, enumeration, exception handling, string\nmanipulation methods, Object-Oriented programming concept, database\nconnectivity and manipulation, GUI programming, and other useful sample\nprogram source code"}
{"text": "C/C++ - Development process C/C++ I need the code for playing the backgammon game using C/C++.Im using turbo C. I`ve already design the board.I badly need the code for playing this game or c++ - Java Beginners c or c++ Write a program for a two user chess game(Users must be on different systems)? please send me this source code to my mail id with step by step explanation\n\nc c++ - Java Beginners cc++ Write a Multi-user chat server and client Hi Friend,\nPlease visit the following link:\n\nHope that it will be helpful for you.\nThanks"}
{"text": "This course is an introduction to developing Java applications for various runtime environments. Author Todd Perkins explains how to configure the development environment, connect a web application to a MySQL database, and build a user interface with the Swing framework.\n\nThe course also covers publishing applets in a web browser, working with XML data, and creating apps for Android devices. Exercise files accompany the course.\n\nTopic includes:\n\nCreating a UI with the Swing framework"}
{"text": "Game Design with ActionScript 3.0: 2nd Edition\n\n(Paperback) by Rex van der Spuy615\n\nDiscount\n\nRs.84 (12% Off)\n\n(Prices are inclusive of all taxes)\n\nProduct added successfully.\n\nClick 'Like' and get an additional Rs 5 discount!\n\nBook Summary of Foundation Game Design with ActionScript 3.0: 2nd ...\n\nAbout the Book: Foundation Game Design with ActionScript 3.0\n\nIn response to the success of the first edition of Foundation Game Design with Flash, Rex van der Spuy has revised and updated all the code to meet current programming best practices, and the focus is now on accurate ActionScript 3.0,\n\nFocused and friendly introduction to designing games with Flash and ActionScript\n\nDetailed case studies of Flash games\n\nEssential techniques for building games, with each chapter gently building on the skills of preceding chapters\n\nModern best practices and new content on ActionScript 3.0\n\nAlso covers asset creation in Photoshop and Illustrator\n\nContents\n\nChapter 01.Programming Foundations: How to Make a Video Game\n\nChapter 02.Making Objects\n\nChapter 03.Programming Objects\n\nChapter 04.Controlling Movie Clip Objects\n\nChapter 05.Decision Making\n\nChapter 06.Controlling a Player Character\n\nChapter 07.Bumping into Things\n\nChapter 08.Object-Oriented Game Design\n\nChapter 09.Platform Game: Physics and Data Management\n\nChapter 10.Advanced Object and Character Control\n\nChapter 11.Using Flash Professional\n\nBooks Similar to : Foundation Game Design with ActionScript 3.0: 2nd"}
{"text": "This authoritative guide teaches you how to create desktop and Internet computer games using the latest Java programming language techniques. With author David Wallace Croft's open-source reusable game library and clear explanations of the code, you'll be able to program and release new games in no time.\n\nAndroid Apps Security provides guiding principles for how to best design and develop Android apps with security in mind. The book explores techniques that developers can use to build additional layers of security into their apps beyond the security controls provided by Android itself.\n\nAndroid Apps with Eclipse provides a detailed overview of Eclipse, including steps and the screenshots to help Android developers to quickly get up to speed on Eclipse and to streamline their day-to-day software development"}
{"text": "9780471547 Personal Computers: Self-Teaching Guide\n\nOffers complete, easy-to-read guidance on selecting, buying and getting started with your first personal computer. Presents in-depth coverage on such topics as printing; purchasing software; using modems; graphic user interfaces; plus an overview of various software types. Features a list of essential buzzwords with clear explanations of their meanings; tips on mastering important PC applications including word processing, spreadsheets, drawing packages, desktop publishing, and utility programs. Also includes end-of-chapter"}
{"text": "9 of the Best Free C Books - Part 2\n\nC Elements of Style is a useful guide which covers the\nprincipals of good programming style, teaching C and C++ programmers\nhow to write code that can be easily read, understood, and maintained\nby others. Whether you are a student or professional programmer, you\nwill benefit from the\nmany tips and techniques for constructing elegant, reliable code.\n\nThe book attempts to show readers how to build a good\nprogramming style into your code. Since computer reads only the code\nand the human concentrates on the comments, a good programming style\npertains to both parts of a program.\n\nThe ultimate goal is to build a well-designed, well-written code which\nnot only make an effective use of the computer and but also contains\ncareful constructed comments to help humans understand it. This\ncondition will ease the debugging, maintenance and enhancement process,\nwhich will eventually improve the readability, portability, reliability\nand maintainability of your code.\n\nAn Introduction to GCC provides an introduction to the\nGNU C and C++ Compilers, gcc and g++, which are part of the GNU\nCompiler Collection (GCC).\n\nThis book explains how to use the compiler itself. Based\non years of observation of questions posted on mailing\nlists, it guides the reader straight to the important options of GCC.\n\nChapters:\n\nIntroduction\n\nCompiling a C program - describes how to\ncompile C programs using gcc. Programs can be compiled from a single\nsource file or from multiple source files, and may use system libraries\nand header files\n\nCompilation options - describes other\ncommonly-used compiler options available in\nGCC. These options control features such as the search paths used for\nlocating libraries and include files, the use of additional warnings\nand diagnostics, preprocessor macros and C language dialects\n\nUsing the preprocessor - describes the use\nof the GNU C preprocessor cpp, which is part of the GCC package. The\npreprocessor expands macros in source files before they are compiled.\nIt is automatically called whenever GCC processes a C or C++ program\n\nCompiling for debugging - provides the -g\ndebug option to store additional debugging information in object files\nand executables. This debugging information allows errors to be traced\nback from a specific machine instruction to the corresponding line in\nthe original source file\n\nCompiling with optimization - GCC is an\noptimizing compiler. It provides a wide range of\noptions which aim to increase the speed, or reduce the size, of the\nexecutable files it generates\n\nCompiling a C++ program - describes how to\nuse GCC to compile programs written in C++, and the command-line\noptions specific to that language\n\nTroubleshooting - GCC provides several help\nand diagnostic options to help troubleshoot problems with the\ncompilation process\n\nCompiler-related tools - describes a number\nof tools which are useful in combination with GCC. These include the\nGNU archiver ar, for creating libraries,\nand the GNU profiling and coverage testing programs,\ngprof and gcov\n\nHow the compiler works - describes in more\ndetail how GCC transforms source files to\nan executable file. Compilation is a multi-stage process involving\nseveral tools, including the GNU Compiler itself (through the gcc\nor g++ frontends), the GNU Assembler as, and the GNU\nLinker ld. The complete set of tools used in the compilation\nprocess is referred to as a toolchain\n\nCommon error messages - describes the most\nfrequent error and warning messages\nproduced by gcc and g++. Each case is accompanied by a\ndescription of the causes, an example and suggestions of possible\nsolutions\n\nGetting help - if readers encounters a problem not\ncovered by this introduction, there are several\nreference manuals which describe GCC and language-related topics in\nmore detail"}
{"text": "Computer Graphics Using Java 2D and 3D, CourseSmart eTextbook\n\nDescription\n\nFor junior/senior/graduate level courses in Computer Graphics.\n\nThis Java based graphics text introduces advanced graphic features to a student audience mostly trained in the Java language. Its accessible approach and in-depth coverage features the high-level Java 2D and Java 3D APIs\u2014offering an elegant and easy-to-understand presentation of 2D and 3D graphics without compromising the fundamentals of the subject.\n\nTable of Contents\n\n1. Introduction.\n\n2. Mathematical Background for Computer Graphics.\n\n3. 2D Graphics.\n\n4. Advanced 2D Topics.\n\n5. Basic 3D Graphics.\n\n6. Graphics Content.\n\n7. Geometric Transformation.\n\n8. Views.\n\n9. Lighting and Texturing.\n\n10. Behavior and Interaction.\n\n11. Animation.\n\n12. Additional 3D Topics"}
{"text": "Find millions of documents on Course Hero - Study Guides, Lecture Notes, Reference Materials, Practice Exams and more.\nCourse Hero has millions of course specific materials providing students with the best way to expand\ntheir education.\n\nPlan for TodayExpression evaluation (PA3 sneak peek) Syntax-directed expression evaluation example but what about grammar ambiguity? Ambiguity and examples of removing it using JavaCUP precedence and left and right keywords Start covering lexical\n\nECS 10, Basic Concepts of ComputingSpring Quarter 2009Tentative SyllabusThese are the topics I plan to cover at each lecture. I will change them as needed. All readings are from the text unless otherwise noted. Date 1. 2. 3. 4. 5. 6. 7. 8. 9. 10\n\n1 Today's questionsI II III IV How do we know that DNA is the genetic material? How much DNA is in the genome? How is the sequence of DNA organized in the genome? What is the physical organization of the genome in the cell?2 Griffith's experiment\n\nMacintosh HFS Filesystem for Linux Paul H. Hargrove, hargrove@sccm.Stanford.EDU version 0.95, 28 Apr 1997 This document describes version 0.95 of the Macintosh HFS filesystem for Linux. The most current versions of this document and the\n\nInstallation instructions for the HFS Filesystem for Linux Paul H. Hargrove, hargrove@sccm.Stanford.EDU version 0.95 28 Apr 1997 This document explains how to compile and install version 0.95 of hfs_fs, the HFS filesystem for Linux. 11.\n\nGrecki's Third Symphony is a 1 Transcendent ExperiencePhillip TorbertIt was in a church in Krakow, Poland, oddly enough, that my first transcendental experience in music occurred. I was conducting a piece of standard choral repertoire, Ralph Ma"}
{"text": "Thinking in C++, 2nd ed., Volume 2, Revision 3\n\n11: Tools & topics\n\nTools created & used during the development\nof this book and various other handy\nthings\n\nThe code extractor\n\nThe code for this book is automatically extracted directly\nfrom the ASCII text version of this book. The book is normally maintained in a\nword processor capable of producing camera-ready copy, automatically creating\nthe table of contents and index, etc. To generate the code files, the book is\nsaved into a plain ASCII text file, and the program in this section\nautomatically extracts all the code files, places them in appropriate\nsubdirectories, and generates all the makefiles. The entire contents of the book\ncan then be built, for each compiler, by invoking a single make command.\nThis way, the code listings in the book can be regularly tested and verified,\nand in addition various compilers can be tested for some degree of compliance\nwith Standard C++ (the degree to which all the examples in the book can exercise\na particular compiler, which is not too bad).\n\nThe code in this book is designed to be as generic as\npossible, but it is only tested under two operating systems: 32-bit Windows and\nLinux (using the Gnu C++ compiler g++, which means it should compile\nunder other versions of Unix without too much trouble). You can easily get the\nlatest sources for the book onto your machine by going to the web site\n and downloading the zipped archive containing all the\ncode files and makefiles. If you unzip this you'll have the book's\ndirectory tree available. However, it may not be configured for your particular\ncompiler or operating system. In this case, you can generate your own using the\nASCII text file for the book (available at  and the\nExtractCode.cpp program in this section. Using a text editor, you find\nthe CompileDB.txt file inside the ASCII text file for the book, edit it\n(leaving it the book's text file) to adapt it to your compiler and\noperating system, and then hand it to the ExtractCode program to generate your\nown source tree and makefiles.\n\nYou've seen that each file to be extracted contains a\nstarting marker (which includes the file name and path) and an ending marker.\nFiles can be of any type, and if the colon after the comment is directly\nfollowed by a '!' then the starting and ending marker lines are not\nreproduced in the generated file. In addition, you've seen the other\nmarkers {O}, {L}, and {T} that have been placed inside\ncomments; these are used to generate the makefile for each\nsubdirectory.\n\nIf there's a mistake in the input file, then the program\nmust report the error, which is the error( ) function at the\nbeginning of the program. In addition, directory manipulation is not supported\nby the standard libraries, so this is hidden away in the class\nOSDirControl. If you discover that this class will not compile on your\nsystem, you must replace the non-portable function calls in OSDirControl\nwith equivalent calls from your library.\n\nAlthough this program is very useful for distributing the code\nin the book, you'll see that it's also a useful example in its own\nright, since it partitions everything into sensible objects and also makes heavy\nuse of the STL and the standard string class. You may note that one or\ntwo pieces of code might be duplicated from other parts of the book, and you\nmight observe that some of the tools created within the program might have been\nbroken out into their own reusable header files and cpp files. However,\nfor easy unpacking of the book's source code it made more sense to keep\neverything lumped together in a single file.\n\nThe first tool you see is trim( ), which was\nlifted from the strings chapter earlier in the book. It removes the\nwhitespace from both ends of a string object. This is followed by the\nusage string which is printed whenever something goes wrong with the\nprogram.\n\nThe error( ) function is global because it uses a\ntrick with static members of functions. error( ) is designed so that\nif it is never called, no error reporting occurs, but if it is called one or\nmore times then an error file is created and the total number of errors is\nreported at the end of the program execution. This is accomplished by creating a\nnested class ErrReport and making a staticErrReport object\ninside error( ).That way, an ErrReport object is only\ncreated the first time error( ) is called, so if\nerror( ) is never called no error reporting will occur.\nErrReport creates an ofstream to write the errors to, and the\nErrReport destructor closes the ofstream, then re-opens it and\ndumps it to cerr. This way, if the error report is too long and scrolls\noff the screen, you can use an editor to look at it. The count of the number of\nerrors is held in ErrReport, and this is also reported upon program\ntermination.\n\nThe job of a PushDirectory object is to capture the\ncurrent directory, then created and move down each directory in the path (the\npath can be arbitrarily long). Each subdirectory in the file's path\ndescription is separated by a ':' and the\nmkdir( ) and chdir( ) (or the equivalent on your system)\nare used to move into only one directory at a time, so the actual character\nthat's used to separate directory paths is safely ignored. The destructor\nreturns the path to the one that was captured before all the creating and moving\ntook place.\n\nUnfortunately, there are no functions in Standard C or\nStandard C++ to control directory creation and movement, so this is captured in\nthe class OSDirControl. After reading the design patterns chapter, your\nfirst impulse might be to use the full \"Bridge\" pattern. However,\nthere's a lot more going on here. Bridge generally works with things that\nare already classes, and here we are actually creating the class to\nencapsulating operating system directory control. In addition, this requires\n#ifdefs and #includes for each different operating system and\ncompiler. However, the basic idea is that of a Bridge, since the rest of the\ncode (PushDirectory is actually the only thing that uses this, and thus\nit acts as the Bridge abstraction) treats an OsDirControl object as a\nstandard interface.\n\nAll the information about a particular source code file is\nencapsulated in a CodeFile object. This includes the type of target the\nfile should produce, variations on the name of the file including the name of\nthe target file it's supposed to produce. The entire contents of the file\nis contained in the vector<string> lines. In addition, the\nfile's dependencies (the files which, if they change, should cause a\nrecompilation of the current file) and the files on the linker command line are\nalso vector<string> objects. The CodeFile object keeps all\nthe compilers it won't work with in _noBuild, which is a\nset<string> because it's easier to look up an element in a\nset. The writeTags flag indicates whether the beginning and ending\nmarkers from the book listing should actually be output to the generated\nfile.\n\nThe three private helper functions target( ),\nheaderLine( ) and dependLine( ) are used by the\nCodeFile constructor while it is parsing the input stream. In fact, the\nCodeFile constructor does much of the work and most of the rest of the\nmember functions simply return values that are stored in the CodeFile\nobject. Exceptions to this are addFailure( ) which stores a compiler\nthat won't work, and compilesOK( ) which, when given a\ncompiler tells whether this file will compile successfully with that compiler.\nThe ostream operator<< uses the STL copy( ) algorithm\nand write( ) uses operator<< to write the file into a\nparticular directory and file name.\n\nLooking at the implementation, you'll see that the\nhelper functions target( ), headerLine( ) and\ndependLine( ) are just using string functions in order to\nsearch and manipulate the lines. The constructor is what initiates everything.\nThe idea is that the main program opens the file and reads it until it sees the\nstarting marker for a code file. At that point it makes a CodeFile object\nand hands the constructor the istream (so the constructor can read the\nrest of the code file) and the first line that was already read, since it\ncontains valuable information. This first line is dissected for the file name\ninformation and the target type. The beginning of the file is written (source\nand copyright information is added) and the rest of the file is read, until the\nending tag. The top few lines may contain information about link dependencies\nand command line arguments, or they may be files that are #included using\nquotes rather than angle brackets. Quotes indicate they are from local\ndirectories and should be added to the makefile dependency.\n\nYou'll notice that a number of the markers strings in\nthis program are broken up into two adjacent character strings, relying on the\npreprocessor to concatenate those strings. This is to prevent them from causing\nthe ExtractCode program from accidentally mistaking the strings embedded\nin the program with the end marker, when ExtractCode is extracting\nit's own source code.\n\nThe goal of CompilerData is to capture and make\navailable all the information about particular compiler idiosyncrasies. At first\nglance, the CompilerData class appears to be a container of static\nmember functions, a library of functions wrapped in a class. Actually, the class\ncontains two static data members; the simpler one is a\nset<string> that holds all the compiler names, but\ncompilerInfo is a map that maps string objects (the\ncompiler name) to CompilerData objects. Each individual\nCompilerData object in compilerInfo contains a\nvector<string> which is the \"rules\" that are placed in\nthe makefile (these rules are different for different compilers) and a\nset<string> which indicates the files that won't compile with\nthis particular compiler. Also, each compiler creates different extensions for\nobject files and executable files, and these are also stored. There are two\nflags which indicate if this is a \"dos\" or \"Unix\" style\nenvironment (this causes differences in path information and command styles for\nthe resulting makefiles).\n\nThe member function readDB( ) is responsible for\ntaking an istream and parsing it into a series of CompilerData\nobjects which are stored in compilerInfo. By choosing a relatively simple\nformat (which you can see in Appendix D) the parsing of this configuration file\nis fairly simple: the first character on a line determines what information the\nline contains; a '#' sign is a comment, a\n'{' indicates that the next compiler configuration is\nbeginning and this is the new compiler name, a '(' is used to\nestablish the object file extension name, a '&' indicates\nthe \"dos\" or \"Unix\" directive, and '@' is a\nmakefile rule which is placed verbatim at the beginning of the makefile. If\nthere is no special character at the beginning of the line, the it must be a\nfile that fails to compile.\n\nThe addFailures( ) member function takes\nit's CodeFile argument (by reference, so it can modify the outside\nobject) and checks each compiler to see if it works with that particular code\nfile; if not, it adds that compiler to the CodeFile object's\nfailure list.\n\nBoth obj( ) and exe( ) return the\nappropriate file extension for a particular compiler. Note that some situations\ndon't expect extensions, and so the '.' is added only\nif there is an extension.\n\nWhen the makefile is being created, one of the first things to\ndo is add the various make rules, such as the prefixes and target rules\n(see Appendix D for examples). This is accomplished with\nwriteRules( ). Note the use of the STL copy( )\nalgorithm.\n\nAlthough dos compilers have no trouble with forward slashes as\npart of the paths of #include files, most dos make programs expect\nbackslashes as part of paths in dependency lists. To adjust for this, the\nadjustPath( ) function checks to see if this is a dos compiler, and\nif so it uses the STL replace( ) algorithm, treating the path\nstring object as a container, to replace forward-slash characters with backward\nslashes.\n\nThe last class, Makefile, is used to create all the\nmakefiles, including the master makefile that moves into each subdirectory and\ncalls the other makefiles. Each Makefile contains a group of\nCodeFile objects, stored in a vector. You call\naddEntry( ) to put a new CodeFile into the Makefile;\nthis also adds the failure list to the CodeFile. In addition, there is a\nstatic set<string> which contains all the different paths where all\nthe different makefiles will be written; this is used to build the master\nmakefile so it can call all the makefiles in all the subdirectories. The\naddEntry( ) function also updates this set of paths.\n\nTo write the makefile for a particular path (once the entire\nbook file has been read), you call writeMakefiles( ) and hand it the\npath you want it to write the makefile for. This function simply iterates\nthrough all the compilers in compilers and calls\ncreateMakefile( ) for each one, passing it the compiler name and the\npath. The latter function is where the real work gets done. First the file name\nextensions are captured into local string objects, then the file name is\ncreated from the name of the compiler with \".makefile\" concatenated\n(you can use a file with a name other than \"makefile\" by using the\nmake -f flag). After writing the header comments and the rules for that\nparticular compiler/operating-system combination (remember, these rules come\nfrom the compiler configuration file), a vector<string> is created\nto hold all the different regions of the makefile: the master target list\nmakeAll, the testing commands makeTest, the dependencies\nmakeDeps, andthe commands for linking into executables\nlinkCmd. The reason it's necessary to have lists for these four\nregions is that each CodeFile object causes entries into each region, so\nthe regions are built as the list of CodeFiles is traversed, and then\nfinally each region is written in its proper order. This is the function which\ndecides whether a file is going to be included, and also calls\nadjustPath( ) to conditionally change forward slashes to backward\nslashes.\n\nTo write the master makefile in writeMaster( ),\nthe initial comments are written. The default target is called\n\"help,\" and it is used if you simply type make. This provides\nvery simple help to the first time user, including the options for make\nthat this makefile supports (that is, all the different compilers the makefile\nis set up for). Then it creates the list of commands for each compiler, which\nbasically consists of: descending into a subdirectory, call make\n(recursively) on the appropriate makefile in that subdirectory, and then rising\nback up to the book's root subdirectory. Makefiles in Unix and dos work\nvery differently from each other in this situation: in Unix, you cd to\nthe directory, followed by a semicolon and then the command you want to execute\n\u2013 returning to the root directory happens automatically. While in dos, you\nmust cd both down and then back up again, all on separate lines. So the\nwriteMaster( ) function must interrogate to see if a compiler is\nrunning under Unix and write different commands accordingly.\n\nBecause of the work done in designing the classes (and this\nwas an iterative process; it didn't just pop out this way),\nmain( ) is quite straightforward to read. After opening the input\nfile, the getline( ) function is used to read each input line until\nthe line containing CompileDB.txt is found; this indicates the beginning\nof the compiler database listing. Once that has been parsed,\nseekg( ) is used to move the file pointer back to the beginning so\nall the code files can be extracted.\n\nEach line is read and if one of the start markers is found in\nthe line, a CodeFile object is created using that line (which has\nessential information) and the input stream. The constructor returns when it\nfinishes reading its file, and at that point you can turn around and call\nwrite( ) for the code file, and it is automatically written to the\ncorrect spot (an earlier version of this program collected all the\nCodeFile objects first and put them in a container, then wrote one\ndirectory at a time, but the approach shown above has code that's easier\nto understand and the performance impact is not really significant for a tool\nlike this.\n\nFor makefile management, a map<string, Makefile>\nis created, where the string is the path where the makefile exists. The\nnice thing about this approach is that the Makefile objects will be\nautomatically created whenever you access a new path, as you can see in the\nline\n\nmakeFiles[cf.path()].addEntry(cf);\n\nthen to write all the makefiles you simply iterate through the\nmakeFilesmap.\n\nDebugging\n\nThis section contains some tips and techniques which may help\nduring debugging.\n\nassert( )\n\nThe Standard C library assert( ) macro is brief,\nto the point and portable. In addition, when you're finished debugging you\ncan remove all the code by defining NDEBUG, either on the command-line or\nin code.\n\nAlso, assert( ) can be used while roughing out the\ncode. Later, the calls to assert( ) that are actually providing\ninformation to the end user can be replaced with more civilized\nmessages.\n\nTrace macros\n\nSometimes it's very helpful to print the code of each\nstatement before it is executed, either to cout or to a trace file.\nHere's a preprocessor macro to accomplish this:\n\n#define TRACE(ARG) cout <<\n#ARG << endl; ARG\n\nNow you can go through and surround the statements you trace\nwith this macro. Of course, it can introduce problems. For example, if you take\nthe statement:\n\nWhich isn't what you want. Thus, this technique must be\nused carefully.\n\nA variation on the TRACE( ) macro is\nthis:\n\n#define D(a) cout << #a\n\"=[\" << a << \"]\" << nl;\n\nIf there's an expression you want to display, you simply\nput it inside a call to D( ) and the expression will be printed,\nfollowed by its value (assuming there's an overloaded operator\n<< for the result type). For example, you can say D(a + b).\nThus you can use it anytime you want to test an intermediate value to make sure\nthings are OK.\n\nOf course, the above two macros are actually just the two most\nfundamental things you do with a debugger: trace through the code execution and\nprint values. A good debugger is an excellent productivity tool, but sometimes\ndebuggers are not available, or it's not convenient to use them. The above\ntechniques always work, regardless of the\nsituation.\n\nTrace file\n\nThis code allows you to easily create a trace file and send\nall the output that would normally go to cout into the file. All you have\nto do is #define TRACEON and include the header file (of course,\nit's fairly easy just to write the two key lines right into your\nfile):\n\nAbstract base class for debugging\n\nIn the Smalltalk tradition, you can create your own\nobject-based hierarchy, and install pure virtual functions to perform debugging.\nThen everyone on the team must inherit from this class and redefine the\ndebugging functions. All objects in the system will then have debugging\nfunctions available.\n\nTracking new/delete & malloc/free\n\nCommon problems with memory allocation include calling\ndelete for things you have malloced, calling free for\nthings you allocated with new, forgetting to release objects from the\nfree store, and releasing them more than once. This section provides a system to\nhelp you track these kinds of problems down.\n\nTo use the memory checking system, you simply link the\nobj file in and all the calls to malloc( ),\nrealloc( ), calloc( ), free( ), new\nand delete are intercepted. However, if you also include the following\nfile (which is optional), all the calls to new will store information\nabout the file and line where they were called. This is accomplished with a use\nof the placement syntax for operator new (this trick was suggested\nby Reg Charney of the C++ Standards Committee). The placement syntax is intended\nfor situations where you need to place objects at a specific point in memory.\nHowever, it allows you to create an operator new with any number of\narguments. This is used to advantage here to store the results of the\n__FILE__ and __LINE__ macros whenever new is\ncalled:\n\n//: C11:MemCheck.h// Memory testing system// This file is only included if you want to// use the special placement syntax to find// out the line number where \"new\" was called.\n#ifndef MEMCHECK_H\n#define MEMCHECK_H\n#include <cstdlib> // size_t// Use placement syntax to pass extra arguments.// From an idea by Reg Charney:void* operatornew(\nstd::size_t sz, char* file, int line);\n#define newnew(__FILE__, __LINE__)\n\n#endif // MEMCHECK_H\n///:~\n\nIn the following file containing the function definitions, you\nwill note that everything is done with standard IO rather than iostreams. This\nis because, for example, the cout constructor allocates memory. Standard\nIO ensures against cyclical conditions that can lock up the system.\n\nOFile is a simple wrapper around a FILE*; the\nconstructor opens the file and the destructor closes it. The operator\nFILE*( ) allows you to simply use the OFile object anyplace you\nwould ordinarily use a FILE* (in the fprintf( ) statements in\nthis example). The #define that follows simply sends everything to\nstandard output, but if you need to put it in a trace file you simply comment\nout that line.\n\nMemory is allocated from an array called _memory_pool.\nThe _pool_ptr is moved forward every time storage is allocated. For\nsimplicity, the storage is never reclaimed, and realloc( )\ndoesn't try to resize the storage in the same place.\n\nAll the storage allocation functions call\ngetmem( ) which ensures there is enough space left and moves the\n_pool_ptr to allocate your storage. Then they store the pointer in a\nspecial container of class MemBag called MEMBAG_, along with\npertinent information (notice the two versions of operator new; one which\njust stores the pointer and the other which stores the file and line number).\nThe MemBag class is the heart of the system.\n\nYou will see many similarities to xbag in\nMemBag. A distinct difference is realloc( ) is replaced by a\ncall to getmem( ) and memmove( ), so that storage\nallocated for the MemBag is not registered. In addition, the typeenum allows you to store the way the memory was allocated; the\ntypestr( ) function takes a type and produces a string for use with\nprinting.\n\nThe nested struct M holds the pointer, the type, a\npointer to the file name (which is assumed to be statically allocated) and the\nline where the allocation occurred. v is a pointer to an array of\nM objects \u2013 this is the array which is dynamically sized.\n\nThe allocation( ) function prints out a different\nmessage depending on whether the storage was allocated with new (where it\nhas line and file information) or malloc( ) (where it\ndoesn't). This function is used inside validate( ), which is\ncalled by free( ) and delete( ) to ensure everything is\nOK, and in the destructor, to ensure the pointer was cleaned up (note that in\nvalidate( ) the pointer value v[i].mp is set to zero, to\nindicate it has been cleaned up).\n\nThe following is a simple test using the memcheck facility.\nThe MemCheck.obj file must be linked in for it to work:\n\nThe trace file created in MemCheck.cpp causes the\ngeneration of one \"pointer not in memory list\" message, apparently from the\ncreation of the file pointer on the heap. [[ This may not still be true \u2013\ntest it ]]\n\nCGI programming in C++\n\nThe World-Wide Web has become the common tongue of\nconnectivity on planet earth. It began as simply a way to publish\nprimitively-formatted documents in a way that everyone could read them\nregardless of the machine they were using. The documents are created in\nhypertext markup language (HTML) and placed on a central server machine\nwhere they are handed to anyone who asks. The documents are requested and read\nusing a web browser that has been written or ported to each particular\nplatform.\n\nVery quickly, just reading a document was not enough and\npeople wanted to be able to collect information from the clients, for example to\ntake orders or allow database lookups from the server. Many different approaches\nto client-sideprogramming have been tried such as Java applets,\nJavaScript, and other scripting or programming languages. Unfortunately,\nwhenever you publish something on the Internet you face the problem of a whole\nhistory of browsers, some of which may support the particular flavor of your\nclient-side programming tool, and some which won't. The only reliable and\nwell-established solution[27] to this problem\nis to use straight HTML (which has a very limited way to collect and submit\ninformation from the client) and common gateway interface (CGI) programs\nthat are run on the server. The Web server takes an encoded request submitted\nvia an HTML page and responds by invoking a CGI program and handing it the\nencoded data from the request.\nThis request is classified as\neither a \"GET\" or a\n\"POST\" (the meaning of\nwhich will be explained later) and if you look at the URL window in your Web\nbrowser when you push a \"submit\" button on a page you'll often\nbe able to see the encoded request and information.\n\nCGI can seem a bit intimidating at first, but it turns out\nthat it's just messy, and not all that difficult to write. (An innocent\nstatement that's true of many things \u2013 after you understand\nthem.) A CGI program is quite straightforward since it takes its input from\nenvironment variables and standard input, and sends its output to standard\noutput. However, there is some decoding that must be done in order to extract\nthe data that's been sent to you from the client's web page. In this\nsection you'll get a crash\ncourse in CGI programming, and we'll develop tools that will perform the\ndecoding for the two different types of CGI submissions (GET and POST). These\ntools will allow you to easily write a CGI program to solve any problem. Since\nC++ exists on virtually all machines that have Web servers (and you can get GNU\nC++ free for virtually any platform), the solution presented here is quite\nportable.\n\nEncoding data for CGI\n\nTo submit data to a CGI program, the HTML \"form\"\ntag is used. The following very simple HTML page contains a form that has one\nuser-input field along with a \"submit\" button:\n\nEverything between the <Form and the\n</Form> is part of this form (You can have multiple forms on a\nsingle page, but each one is controlled by its own method and submit button).\nThe \"method\" can be either \"get\" or \"post,\"\nand the \"action\" is what the server does when it receives the form\ndata: it calls a program. Each form has a method, an action, and a submit\nbutton, and the rest of the form consists of input fields. The most\ncommonly-used input field is shown here: a text field. However, you can also\nhave things like check boxes, drop-down selection lists and radio\nbuttons.\n\nCGI_GET.exe is the name of the executable program that\nresides in the directory that's typically called \"cgi-bin\" on\nyour Web server.[28] (If the named program is\nnot in the cgi-bin directory, you won't see any results.) Many Web servers\nare Unix machines (mine runs Linux) that don't traditionally use the\n.exe extension for their executable programs, but you can call the\nprogram anything you want under Unix. By using the .exe extension the\nprogram can be tested without change under most operating systems.\n\nIf you fill out this form and press the \"submit\"\nbutton, in the URL address window of your browser you will see something\nlike:\n\n\n\nThis+is+a+test&submit=Submit+Query\n\n(Without the line break, of course.) Here you see a little bit\nof the way that data is encoded to send to CGI. For one thing, spaces are not\nallowed (since spaces typically separate command-line arguments). Spaces are\nreplaced by '+' signs. In addition, each field contains the\nfield name (which is determined by the form on the HTML page) followed by an\n'=' and the field data, and terminated by a\n'&'.\n\nAt this point, you might wonder about the\n'+', '=,' and '&'.\nWhat if those are used in the field, as in \"John & Marsha\nSmith\"? This is encoded to:\n\nJohn+%26+Marsha+Smith\n\nThat is, the special character is turned into a\n'%' followed by its ASCII value in hex. Fortunately, the web\nbrowser automatically performs all encoding for\nyou.\n\nThe CGI\nparser\n\nThere are many examples of CGI programs written using Standard\nC. One argument for doing this is that Standard C can be found virtually\neverywhere. However, C++ has become quite ubiquitous, especially in the form of\nthe GNU C++\nCompiler[29] (g++)that can be\ndownloaded free from the Internet for virtually any platform (and often comes\npre-installed with operating systems such as Linux). As you will see, this means\nthat you can get the benefit of object-oriented programming in a CGI\nprogram.\n\nSince what we're concerned with when parsing the CGI\ninformation is the field name-value pairs, one class (CGIpair)will be used to represent a single name-value pair and a second class\n(CGImap) will use CGIpair to parse each name-value pair that is\nsubmitted from the HTML form into keys and values that it will hold in a\nmap of strings so you can easily fetch the value for each field at\nyour leisure.\n\nOne of the reasons for using C++ here is the convenience of\nthe STL, in\nparticular the map class. Since map has the operator[ ],\nyou have a nice syntax for extracting the data for each field. The\nmap template will be used in the creation of CGImap, which\nyou'll see is a fairly short definition considering how powerful it\nis.\n\nThe project will start with a reusable portion, which consists\nof CGIpair and CGImap in a header file. Normally you should avoid\ncramming this much code into a header file, but for these examples it's\nconvenient and it doesn't hurt anything:\n\nThe CGIpair class starts out quite simply: it inherits\nfrom the standard library pair template to create a pair of\nstrings, one for the name and one for the value. The second constructor\ncalls the member function decodeURLString( ) which produces a\nstring after stripping away all the extra characters added by the browser\nas it submitted the CGI request. There is no need to provide functions to select\neach individual element \u2013 because pair is inherited publicly, you\ncan just select the first and second elements of the\nCGIpair.\n\nThe operator bool provides automatic type conversion to\nbool. If you have a CGIpair object called p and you use it\nin an expression where a Boolean result is expected, such as\n\nif(p) {\n//...\n\nthen the compiler will recognize that it has a CGIpair\nand it needs a Boolean, so it will automatically call operator bool to\nperform the necessary conversion.\n\nBecause the string objects take care of themselves, you\ndon't need to explicitly define the copy-constructor, operator= or\ndestructor \u2013 the default versions synthesized by the compiler do the right\nthing.\n\nThe remainder of the CGIpair class consists of the two\nmethods decodeURLString( ) and a helper member function\ntranslateHex( ) which is used by decodeURLString( ).\n(Note that translateHex( ) does not guard against bad input such as\n\"%1H.\") decodeURLString( ) moves through and replaces\neach '+' with a space, and each hex code (beginning with a\n'%') with the appropriate character. It's worth noting\nhere and in CGImap the power of the string class \u2013 you can\nindex into a string object using operator[ ], and you can use\nmethods like find( ) and substring( ).\n\nCGImap parses and holds all the name-value pairs\nsubmitted from the form as part of a CGI request. You might think that anything\nthat has the word \"map\" in it's name should be inherited from\nthe STL map, but map has it's own way of ordering the\nelements it stores whereas here it's useful to keep the elements in the\norder that they appear on the Web page. So CGImap is inherited from\nvector<CGIpair>, and operator[ ] is overloaded so you get\nthe associative-array lookup of a map.\n\nYou can also see that CGImap has a copy-constructor and\nan operator=, but they're both declared as private. This is\nto prevent the compiler from synthesizing the two functions (which it will do if\nyou don't declare them yourself), but it also prevents the client\nprogrammer from passing a CGImap by value or from using\nassignment.\n\nCGImap's job is to take the input data and parse\nit into name-value pairs, which it will do with the aid of CGIpair\n(effectively, CGIpair is only a helper class, but it also seems to make\nit easier to understand the code). After copying the query string (you'll\nsee where the query string comes from later) into a local string object\ngq, the nextPair( ) member function is used to parse the\nstring into raw name-value pairs, delimited by '=' and'&' signs. Each resulting CGIpair object is\nadded to the vector using the standard vector::push_back( ).\nWhen nextPair( ) runs out of input from the query string, it returns\nzero.\n\nThe CGImap::operator[ ] takes the brute-force approach\nof a linear search through the elements. Since the CGImap is\nintentionally not sorted and they tend to be small, this is not too terrible.\nThe dump( ) function is used for testing, typically by sending\ninformation to the resulting Web page, as you might guess from the default value\nof nl, which is an HTML \"break line\" token.\n\nUsing\nGET can be fine for many applications. However, GET passes its data to the CGI\nprogram through an environment variable (called QUERY_STRING), and\noperating systems typically run out of environment space with long GET strings\n(you should start worrying at about 200 characters). CGI provides a solution for\nthis: POST. With POST, the data is encoded and concatenated the same way as with\nGET, but POST uses standard input to pass the encoded query string to the CGI\nprogram and has no length limitation on the input. All you have to do in your\nCGI program is determine the length of the query string. This length is stored\nin the environment variable CONTENT_LENGTH. Once you know the length, you\ncan allocate storage and read the precise number of bytes from standard input.\nBecause POST is the less-fragile solution, you should probably prefer it over\nGET, unless you know for sure that your input will be short. In fact, one might\nsurmise that the only reason for GET is that it is slightly easier to code a CGI\nprogram in C using GET. However, the last class in CGImap.h is a tool\nthat makes handling a POST just as easy as handling a GET, which means you can\nalways use POST.\n\nThe class Post inherits from a string and only has a\nconstructor. The job of the constructor is to get the query data from the POST\ninto itself (a string). It does this by reading the CONTENT_LENGTH\nenvironment variable using the Standard C library function\ngetenv( ). This comes back as a pointer to a C character string. If\nthis pointer is zero, the CONTENT_LENGTH environment variable has not been set,\nso something is wrong. Otherwise, the character string must be converted to an\ninteger using the Standard C library function atoi( ). The resulting\nlength is used with new to allocate enough storage to hold the query\nstring (plus its null terminator), and then read( ) is called for\ncin. The read( ) function takes a pointer to the destination\nbuffer and the number of bytes to read. The resulting buffer is inserted into\nthe current string using string::append( ). At this point,\nthe POST data is just a string object and can be easily used without\nfurther concern about where it came from.\n\nTesting the CGI parser\n\nNow that the basic tools are defined, they can easily be used\nin a CGI program like the following which simply dumps the name-value pairs that\nare parsed from a GET query. Remember that an iterator for a CGImap\nreturns a CGIpair object when it is dereferenced, so you must select the\nfirst and second parts of that CGIpair:\n\nWhen you use the GET approach (which is controlled by the HTML\npage with the METHOD tag of the FORM directive), the Web server grabs everything\nafter the '?' and puts in into the operating-system environment\nvariable QUERY_STRING. So to read that information all you have to do is\nget the QUERY_STRING. You do this with the standard C library function\ngetenv( ), passing it the identifier of the environment variable you\nwish to fetch. In main( ),notice how simple the act of\nparsing the QUERY_STRING is: you just hand it to the constructor for the\nCGImap object called query and all the work is done for you.\nAlthough an iterator is used here, you can also pull out the names and values\nfrom query using CGImap::operator[ ].\n\nNow it's important to understand something about CGI. A\nCGI program is handed its input in one of two ways: through QUERY_STRING during\na GET (as in the above case) or through standard input during a POST. But a CGI\nprogram only returns its results through standard output, via cout. Where\ndoes this output go? Back to the Web server, which decides what to do with it.\nThe server makes this decision based on the content-type header, which\nmeans that if the content-type header isn't the first thing it\nsees, it won't know what to do with the data. Thus it's essential\nthat you start the output of all CGI programs with the content-type\nheader.\n\nIn this case, we want the server to feed all the information\ndirectly back to the client program. The information should be unchanged, so the\ncontent-type is text/plain. Once the server sees this, it will\necho all strings right back to the client as a simple text Web page.\n\nTo test this program, you must compile it in the cgi-bin\ndirectory of your host Web server. Then you can perform a simple test by writing\nan HTML page like this:\n\nOf course, the CGI_GET.exe program must be compiled on\nsome kind of Web server and placed in the correct subdirectory (typically called\n\"cgi-bin\" in order for this web page to work. The dominant Web\nserver is the freely-available Apache (see  which runs on\nvirtually all platforms. Some word-processing/spreadsheet packages even come\nwith Web servers. It's also quite cheap and easy to get an old PC and\ninstall Linux along with an inexpensive network card. Linux automatically sets\nup the Apache server for you, and you can test everything on your local network\nas if it were live on the Internet. One way or another it's possible to\ninstall a Web server for local tests, so you don't need to have a remote\nWeb server and permission to install CGI programs on that server.\n\nOne of the advantages of this design is that, now that\nCGIpair and CGImap are defined, most of the work is done for you\nso you can easily create your own CGI program simply by modifying\nmain( ).\n\nUsing POST\n\nThe CGIpair and CGImap from CGImap.h can\nbe used as is for a CGI program that handles POSTs. The only thing you need to\ndo is get the data from a Post object instead of from the\nQUERY_STRING environment variable. The following listing shows how simple\nit is to write such a CGI program:\n\nAfter creating a Post object, the query string is no\ndifferent from a GET query string, so it is handed to the constructor for\nCGImap. The different fields in the vector are then available just as in\nthe previous example. If you wanted to get even more terse, you could even\ndefine the Post as a temporary directly inside the constructor for the\nCGImap object:\n\nWhen you press the \"submit\" button, you'll\nget back a simple text page containing the parsed results, so you can see that\nthe CGI program works correctly. The server turns around and feeds the query\nstring to the CGI program via standard\ninput.\n\nHandling mailing lists\n\nManaging an email list is the kind of problem many people need\nto solve for their Web site. As it is turning out to be the case for everything\non the Internet, the simplest approach is always the best. I learned this the\nhard way, first trying a variety of Java applets (which some firewalls do not\nallow) and even JavaScript (which isn't supported uniformly on all\nbrowsers). The result of each experiment was a steady stream of email from the\nfolks who couldn't get it to work. When you set up a Web site, your goal\nshould be to never get email from anyone complaining that it doesn't work,\nand the best way to produce this result is to use plain HTML (which, with a\nlittle work, can be made to look quite decent).\n\nThe second problem was on the server side. Ideally,\nyou'd like all your email addresses to be added and removed from a single\nmaster file, but this presents a problem. Most operating systems allow more than\none program to open a file. When a client makes a CGI request, the Web server\nstarts up a new invocation of the CGI program, and since a Web server can handle\nmany requests at a time, this means that you can have many instances of your CGI\nprogram running at once. If the CGI program opens a specific file, then you can\nhave many programs running at once that open that file. This is a problem if\nthey are each reading and writing to that file.\n\nThere may be a function for your operating system that\n\"locks\" a file, so that other invocations of your program do not\naccess the file at the same time. However, I took a different approach, which\nwas to make a unique file for each client. Making a file unique was quite easy,\nsince the email name itself is a unique character string. The filename for each\nrequest is then just the email name, followed by the string \".add\"\nor \".remove\". The contents of the file is also the email address of\nthe client. Then, to produce a list of all the names to add, you simply say\nsomething like (in Unix):\n\ncat *.add >\naddlist\n\n(or the equivalent for your system). For removals, you\nsay:\n\ncat *.remove >\nremovelist\n\nOnce the names have been combined into a list you can archive\nor remove the files.\n\nThe HTML code to place on your Web page becomes fairly\nstraightforward. This particular example takes an email address to be added or\nremoved from my C++ mailing list:\n\nEach form contains one data-entry field called\nemail-address, as well as a couple of hidden fields which don't\nprovide for user input but carry information back to the server nonetheless. The\nsubject-field tells the CGI program the subdirectory where the resulting\nfile should be placed. The command-field tells the CGI program whether\nthe user is requesting that they be added or removed from the list. From the\naction, you can see that a GET is used with a program called\nmlm.exe (for \"mailing list manager\"). Here it is:\n\nAgain, all the CGI work is done by the CGImap. From\nthen on it's a matter of pulling the fields out and looking at them, then\ndeciding what to do about it, which is easy because of the way you can index\ninto a map and also because of the tools available for standard\nstrings. Here, most of the programming has to do with checking for a\nvalid email address. Then a file name is created with the email address as the\nname and \".add\" or \".remove\" as the extension, and the\nemail address is placed in the file.\n\nMaintaining your list\n\nOnce you have a list of names to add, you can just paste them\nto end of your list. However, you might get some duplicates so you need a\nprogram to remove those. Because your names may differ only by upper and\nlowercase, it's useful to create a tool that will read a list of names\nfrom a file and place them into a container of strings, forcing all the names to\nlowercase as it does:\n\nSince it's a template, it will work with any\ncontainer of string that supports push_back( ).Again,\nyou may want to change the above to the form readln(in, s) instead of\nusing a fixed-sized buffer, which is more fragile.\n\nOnce the names are read into the list and forced to lowercase,\nremoving duplicates is trivial:\n\nA vector is used here instead of a list because\nsorting requires random-access which is much faster in a vector. (A\nlist has a built-in sort( ) so that it doesn't suffer\nfrom the performance that would result from applying the normal\nsort( ) algorithm shown above).\n\nThe sort must be performed so that all duplicates are adjacent\nto each other. Then unique( ) can remove all the adjacent\nduplicates. The program also keeps track of how many duplicate names were\nremoved.\n\nWhen you have a file of names to remove from your list,\nreadLower( ) comes in handy again:\n\nHere, a list is used instead of a vector (since\nreadLower( ) is a template, it adapts). Although there is a\nremove( ) algorithm that can be applied to containers, the built-in\nlist::remove( ) seems to work better.The second command-line\nargument is the file containing the list of names to be removed. An iterator is\nused to step through that list, and the list::remove( ) function\nremoves every instance of each name from the master list. Here, the list\ndoesn't need to be sorted first.\n\nUnfortunately, that's not all there is to it. The\nmessiest part about maintaining a mailing list is the bounced messages.\nPresumably, you'll just want to remove the addresses that produce bounces.\nIf you can combine all the bounced messages into a single file, the following\nprogram has a pretty good chance of extracting the email addresses; then you can\nuse RemoveGroup to delete them from your list.\n\nThe first thing you'll notice about this program is that\ncontains some C functions, including C I/O. This is not because of any\nparticular design insight. It just seemed to work when I used the C elements,\nand it started behaving strangely with C++ I/O. So the C is just because it\nworks, and you may be able to rewrite the program in more \"pure C++\"\nusing your C++ compiler and produce correct results.\n\nA lot of what this program does is read lines looking for\nstring matches. To make this convenient, I created a StringSet class with\na member function in( ) that tells you whether any of the strings in\nthe set are in the argument. The StringSet is initialized with a constant\ntwo-dimensional of strings and the size of that array. Although the\nStringSet makes the code easier to read, it's also easy to add new\nstrings to the arrays.\n\nBoth the input file and the output file in main( )\nare manipulated with standard I/O, since it's not a good idea to mix I/O\ntypes in a program. Each line is read using fgets( ), and if one of\nthem matches with the startsStringSet, then what follows will\ncontain email addresses, until you see some dashes (I figured this out\nempirically, by hunting through a file full of bounced email). The\ncontinuesStringSet contains strings whose lines should be\nignored. For each of the lines that potentially contains an addresses, each\naddress is extracted using the Standard C Library function strtok( )\nand then it is added to the set<string> called names. Using\na set eliminates duplicates (you may have duplicates based on case, but\nthose are dealt with by RemoveGroup.cpp. The resulting set of\nnames is then printed to the output file.\n\nMailing to your list\n\nThere are a number of ways to connect to your system's\nmailer, but the following program just takes the simple approach of calling an\nexternal command (\"fastmail,\" which is part of Unix) using the\nStandard C library function system( ). The program spends all its\ntime building the external command.\n\nWhen people don't want to be on a list anymore they will\noften ignore instructions and just reply to the message. This can be a problem\nif the email address they're replying with is different than the one\nthat's on your list (sometimes it has been routed to a new or aliased\naddress). To solve the problem, this program prepends the text file with a\nmessage that informs them that they can remove themselves from the list by\nvisiting a URL. Since many email programs will present a URL in a form that\nallows you to just click on it, this can produce a very simple removal process.\nIf you look at the URL, you can see it's a call to the mlm.exe CGI\nprogram, including removal information that incorporates the same email address\nthe message was sent to. That way, even if the user just replies to the message,\nall you have to do is click on the URL that comes back with their reply\n(assuming the message is automatically copied back to you).\n\nThe first command-line argument is the list of email\naddresses, one per line. The names are read one at a time into the string\ncalled name using getline( ). Then a temporary file\ncalled m.txt is created to build the customized message for that\nindividual; the customization is the note about how to remove themselves, along\nwith the URL. Then the message body, which is in the file specified by the\nsecond command-line argument, is appended to m.txt. Finally, the command\nis built inside a string: the \"-F\" argument to\nfastmail is who it's from, the \"-r\" argument is who to\nreply to. The \"-s\" is the subject line, the next argument is the\nfile containing the mail and the last argument is the email address to send it\nto.\n\nYou can start this program in the background and tell Unix not\nto stop the program when you sign off of the server. However, it takes a while\nto run for a long list (this isn't because of the program itself, but the\nmailing process). I like to keep track of the progress of the program by sending\na status message to another email account, which is accomplished in the last few\nlines of the program.\n\nA general information-extraction CGI program\n\nOne of the problems with CGI is that you must write and\ncompile a new program every time you want to add a new facility to your Web\nsite. However, much of the time all that your CGI program does is capture\ninformation from the user and store it on the server. If you could use hidden\nfields to specify what to do with the information, then it would be possible to\nwrite a single CGI program that would extract the information from any CGI\nrequest. This information could be stored in a uniform format, in a subdirectory\nspecified by a hidden field in the HTML form, and in a file that included the\nuser's email address \u2013 of course, in the general case the email\naddress doesn't guarantee uniqueness (the user may post more than one\nsubmission) so the date and time of the submission can be mangled in with the\nfile name to make it unique. If you can do this, then you can create a new\ndata-collection page just by defining the HTML and creating a new subdirectory\non your server. For example, every time I come up with a new class or workshop,\nall I have to do is create the HTML form for signups \u2013 no CGI programming\nis required.\n\nThe following HTML page shows the format for this scheme.\nSince a CGI POST is more general and doesn't have any limit on the amount\nof information it can send, it will always be used instead of a GET for the\nExtractInfo.cpp program that will implement this system. Although this\nform is simple, yours can be as complicated as you need it.\n\nThis means that particular field will not appear on the form\nthat the user sees, but the information will still be submitted as part of the\ndata for the CGI program.\n\nThe value of this field named \"subject-field\" is\nused by ExtractInfo.cpp to determine the subdirectory in which to place\nthe resulting file (in this case, the subdirectory will be\n\"test-extract-info\"). Because of this technique and the generality\nof the program, the only thing you'll usually need to do to start a new\ndatabase of data is to create the subdirectory on the server and then create an\nHTML page like the one above. The ExtractInfo.cpp program will do the\nrest for you by creating a unique file for each submission. Of course, you can\nalways change the program if you want it to do something more unusual, but the\nsystem as shown will work most of the time.\n\nThe contents of the \"reminder\" field will be\ndisplayed on the form that is sent back to the user when their data is accepted.\nThe \"test-field\" indicates whether to dump test information to the\nresulting Web page. If \"mail-copy\" exists and contains anything\nother than \"no\" the value string will be parsed for mailing\naddresses separated by ';' and each of these addresses will get a\nmail message with the data in it. The \"email-address\" field is\nrequired in each case and the email address will be checked to ensure that it\nconforms to some basic standards.\n\nThe \"confirmation\" field causes a second program\nto be executed when the form is posted. This program parses the information that\nwas stored from the form into a file, turns it into human-readable form and\nsends an email message back to the client to confirm that their information was\nreceived (this is useful because the user may not have entered their email\naddress correctly; if they don't get a confirmation message they'll\nknow something is wrong). The design of the \"confirmation\" field\nallows the person creating the HTML page to select more than one type of\nconfirmation. Your first solution to this may be to simply call the program\ndirectly rather than indirectly as was done here, but you don't want to\nallow someone else to choose \u2013 by modifying the web page that's\ndownloaded to them \u2013 what programs they can run on your machine.\n\nHere is the program that will extract the information from the\nCGI request:\n\nThe program is designed to be as generic as possible, but if\nyou want to change something it is most likely the way that the data is stored\nin a file (for example, you may want to store it in a comma-separated ASCII\nformat so that you can easily read it into a spreadsheet). You can make changes\nto the storage format by modifying store( ), and to the way the data\nis displayed by modifying show( ).\n\nmain( ) begins using the same three lines\nyou'll start with for any POST program. The rest of the program is similar\nto mlm.cpp because it looks at the \"test-field\" and\n\"email-address\" (checking it for correctness). The file name\ncombines the user's email address and the current date and time in hex\n\u2013 notice that sprintf( ) is used because it has a convenient\nway to convert a value to a hex representation. The entire file and path\ninformation is stored in the file, along with all the data from the form, which\nis tagged as it is stored so that it's easy to parse (you'll see a\nprogram to parse the files a bit later). All the information is also sent back\nto the user as a simply-formatted HTML page, along with the reminder, if there\nis one. If \"mail-copy\" exists and is not \"no,\" then the\nnames in the \"mail-copy\" value are parsed and an email is sent to\neach one containing the tagged data. Finally, if there is a\n\"confirmation\" field, the value selects the type of confirmation\n(there's only one type implemented here, but you can easily add others)\nand the command is built that passes the generated data file to the program\n(called ProcessApplication.exe). That program will be created in the next\nsection.\n\nParsing the data files\n\nYou now have a lot of data files accumulating on your Web\nsite, as people sign up for whatever you're offering. Here's what\none of them might look like:\n\nThis is a brief example, but there are as many fields as you\nhave on your HTML form. Now, if your event is compelling you'll have a\nwhole lot of these files and what you'd like to do is automatically\nextract the information from them and put that data in any format you'd\nlike. For example, the ProcessApplication.exe program mentioned above\nwill use the data in an email confirmation message. You'll also probably\nwant to put the data in a form that can be easily brought into a spreadsheet. So\nit makes sense to start by creating a general-purpose tool that will\nautomatically parse any file that is created by\nExtractInfo.cpp:\n\nThe DataPair class looks a bit like the CGIpair\nclass, but it's simpler. When you create a DataPair, the\nconstructor calls get( ) to extract the next pair from the input\nstream. The operator bool indicates an empty DataPair, which\nusually signals the end of an input stream.\n\nFormData contains the path where the original file was\nplaced (this path information is stored within the file), the email address of\nthe user, and a vector<DataPair> to hold the information. The\noperator[ ] allows you to perform a map-like lookup, just as in\nCGImap.\n\nThe DataPair::get( ) function assumes you are\nusing the same DataPair over and over (which is the case, in\nFormData::FormData( )) so it first calls erase( ) for\nits first and secondstrings. Then it begins parsing the\nlines for the key (which is on a single line and is denoted by the\n\"[{[\" and \"]}]\") and the value (which may\nbe on multiple lines and is denoted by a begin-marker of\n\"[([\" and an end-marker of \"])]\") which it\nplaces in the first and second members, respectively.\n\nThe FormData constructor is given a file name to open\nand read. The FormData object always expects there to be a file path and\nan email address, so it reads those itself before getting the rest of the data\nas DataPairs.\n\nThis program first creates a temporary file to build the email\nmessage in. Although it uses the Standard C library function\ntmpnam( ) to create a temporary file name, this program takes the\nparanoid step of assuming that, since there can be many instances of this\nprogram running at once, it's possible that a temporary name in one\ninstance of the program could collide with the temporary name in another\ninstance. So to be extra careful, the email address is appended onto the end of\nthe temporary file name.\n\nThe message is built, the DataPairs are added to the\nend of the message, and once again the Linux/Unix fastmail command is\nbuilt to send the information. An interesting note: if, in Linux/Unix, you add\nan ampersand (&) to the end of the command before giving it to\nsystem( ), then this command will be spawned as a background process\nand system( ) will immediately return (the same effect can be\nachieved in Win32 with start). Here, no ampersand is used, so\nsystem( ) does not return until the command is finished \u2013\nwhich is a good thing, since the next operation is to delete the temporary file\nwhich is used in the command.\n\nThe final operation in this project is to extract the data\ninto an easily-usable form. A spreadsheet is a useful way to handle this kind of\ninformation, so this program will put the data into a form that's easily\nreadable by a spreadsheet program:\n\nCommon data interchange formats use various delimiters to\nseparate fields of information. Here, a tab is used but you can easily change it\nto something else. Also note that I have checked for the\n\"workshop-suggestions\" field and specifically excluded that, because\nit tends to be too long for the information I want in a spreadsheet. You can\nmake another version of this program that only extracts the\n\"workshop-suggestions\" field.\n\nThis program assumes that all the file names are expanded on\nthe command line. Using it under Linux/Unix is easy since file-name global\nexpansion (\"globbing\") is handled for you. So you say:\n\nDataToSpreadsheet *.txt >>\nspread.out\n\nIn Win32 (at a DOS prompt) it's a bit more involved,\nsince you must do the \"globbing\" yourself:\n\nFor %f in (*.txt) do\nDataToSpreadsheet %f >> spread.out\n\nThis technique is generally useful for writing Win32/DOS\ncommand lines.\n\nSummary\n\nExercises\n\nIn ExtractInfo.cpp, change store( ) so it stores the\ndata in comma-separated ASCII format\n\n(This exercise may require a little\nresearch and ingenuity, but you'll have a good idea of how server-side\nprogramming works when you're done.) Gain access to a Web server somehow,\neven if you do so by installing a Web server that runs on your local machine\n(the Apache server is freely available from  and runs on\nmost platforms). Install and test ExtractInfo.cpp as a CGI program, using\nINFOtest.html.\n\nCreate a program called ExtractSuggestions.cpp\nthat is a modification of DataToSpreadsheet.cpp which will only extract\nthe suggestions along with the name and email address of the person that made\nthem.\n\n[27] Actually,\nJava Servlets look like a much better solution than CGI, but \u2013 at least at\nthis writing \u2013 Servlets are still an up-and-coming solution and\nyou're unlikely to find them provided by your typical\nISP.\n\n[28] Free Web\nservers are relatively common and can be found by browsing the Internet; Apache,\nfor example, is the most popular Web server on the Internet.\n\n[29] GNU stands\nfor \"Gnu's Not Unix.\" The project, created by the Free\nSoftware Foundation, was originally intended to replace the Unix operating\nsystem with a free version of that OS. Linux appears to have replaced this\ninitiative, but the GNU tools have played an integral part in the development of\nLinux, which comes packaged with many GNU components."}
{"text": "Java is a programming language designed to be independent of the computer processor and the operating system. This is because the Java compiler does not generate machine-specific byte code as do most traditional programming languages. It generates a byte code that can be understood by the Java Virtual Machine (JVM). The JVM is a program that can read and understand the JVM byte code, map it to native objects, and execute the code."}
{"text": "On-Forum Tutorial series: Coding\n\nAn on-forum tutorial series for coding, because I have very little time to dedicate my c++ experience to thrive in a major way (OpenGL implementation, SDL fiddling with, OOP, etc, etc) Therefore, i am hoping that an on-forum tutorial series will spark interest in at least basic programming. For now we'll focus on c++ (it's not so bad once you get into it)\n\nLesson1: C++ is a computer language which simplifies hardcore programming (01110100 01001000 01001001 01010011) In order to use c++, you must either use a compiler, or some kind of command line type of interface (what is there when you don't have an operating system) I, for the sake of your mental health, recommend using a compiler. Several compilers I know of, which are used often, are - Microsoft Visual Studio (express version is free), Code Blocks (totally free), and MinGW (minimalist GNU for windows) Once you have downloaded your preferred compiler, please read it's documentation and make sure you try to recognize anything that may set it apart. For this series, I will be using Visual Studio. The first thing you want to do is set up a new project, and if you're using VS, select Win32 console application, name your project, and press ok.\n\nNow for actual coding, in your shiny new project, you will start by first setting up a main function. It should look like:\n\nCode:\n\nint main() { return 0; }\n\nThis function(yes, basically what the name states, a function) acts like a starting point, it defines the entry point for the application. It is invaluable in coding and should always be in every program you compile. The int you see means integer, or whole number. It is the type of the function, other function types include float (decimal number), char (a character, like a letter) and void(no return) we will go in more detail with void and stuff at a later date. The return you see is what tells the function to go back wherever it came from(another function, a variable, or in this case nothing) the number is what it takes back with it. As for the { }, they represent start and finish of the function. So think of boundaries.\n\nNow that we learned about that, let's make your computer do something magical and wonderful, we're going to make it say Hello . First, we must add something to our program so that we can make use of this black magic. This something is, <iostream>(again, we'll discuss this in detail at a later date) to make use of <iostream> we will have to include it by putting #include <iostream> into our code. Another thing we'll need is using namespace std;(for right now this is just magical) Note: #include goes above all, and then using namespace std; comes next, always. so now we have:\n\nCode:\n\n#include <iostream>\n\nusing namespace std; int main() { cout << \"hello\"; return 0; }\n\nNow that we have, TEH POWUH, we will say hello. To do this, type cout << \"Hello\"; in your function. As you can probably imagine, anything typed between in the \" \" part will come up on your screen, ANYTHING, it's TEH POWUH! Also, cout means ComputerOutput. So now:\n\nCode:\n\n#include <iostream>\n\nusing namespace std; int main() { cout << \"hello\"; return 0; }\n\nnow if you run this program (in VS, it's the green arrow next to the word \"Debug\"). Absolutely nothing happens . Well this is because your computer did this program really fast and closed right up pretty much as soon as it opened. To stop this, we have to make the computer unable to finish unless you type something. To make use of this fun fun, we use cout's evil twin brother, cin(ComputerInput). So back to the code, in order to make the computer wait for you and use cin, we will put cin.get(); right above return. cin.get(). will proceed no matter what you press. so here's our code now:\n\nAnd woopty Belgiuming doo, your computer says hello until you press something on your keyboard . One final thing, if you are using VS, you must also have #include \"stdafx.h\" in your code. Next lesson we'll learn about more, so stay tuned for more mind boggling ,amazing, spectacular, awesomeness. Only on, the Thrive forums! please post all questions below. If you read none of this, stare at the pickle of shame, STARE AT IT. You lazy Belgium waffle.\n\nLesson 2: Now that you know about the int main() function, it is time to go over other functions(a set of statements), variables, and statements(instructions).\n\nIn C++ there are over 140 predefined functions already available for use. However, in the development of Thrive, it would be likely that you would often times have to make your own functions. To make a function, you must first make a prototype for that function at the top of your source code under the #include stuff, and above your int main() function. A prototype outlines what type the function will be, the name, and the argument(info in parentheses which can be used) of the function. It looks like the following:\n\nCode:\n\nvoid GiveMeMySandwich(void);\n\nThe first word you see (void, a data type) is the function type, the second word(s) is the name(no spaces allowed), and in the parentheses is the argument. Data types(like void) define what kind of function a function is,and what it returns, or what value is possessed in a variable or argument. here are the major types:\n\nvoid - Valueless(nothing). with this as your function type, your function returns nothing to the function that called(used) it, therefore the return(); statement(a line in code in a function) is not used. int - an integer, or whole number, as a function type an integer is returned. there are sub-types for int, but we won't discuss them right now bool - a Boolean, basically true or false. As a function type, true or false is returned. float - a decimal number, you can return decimals. double - what are often called \"real numbers\", double allows for a decimal or whole number to be used. As a function type a decimal or a whole number can be returned is returned. char - a character (letters and stuff) as a function type, a character is returned.\n\nSo now that we know all that, let's make ourselves a function, first, make sure you're typing outside of(more specifically below) the int main() function. Next put the function type you put in the prototype(in our case, void.) The name(i put GiveMeMySandwich) and an argument( two empty parentheses because our argument is void). After that, put an opening bracket ( { ) and on the next line a closing bracket ( } ) so now our code looks like:\n\nCode:\n\n#include <iostream>\n\nusing namespace std; void GiveMeMySandwich(void);\n\nint main() { cout << \"hello. \"; cin.get(); return 0; }\n\nvoid GiveMeMySandwich() { }\n\nAs of right now, our function does nothing. In order to make our function do stuff, we must fill it with statements(instructions), and then have our main function call(use) it. A statement you already know is cout <<, so let's use that:\n\nCode:\n\nvoid GetMeMySandwich() { cout << \"You now have a sandwich.\"; }\n\nNOTE: you must use ; at the end of every statement to signal to the computer you are done with that instruction.\n\nNow to tell main to use the GetMeMySandwich function. To do this, you type the function name, and give it an argument(if it can use arguments, our function doesn't) and type it out as a statement in main. So let's see our code now:\n\nAlright, looking good so far. In case you're wondering cout << endl; is how you make the next statement come up on the next line(it's like telling your computer to press enter.) Now for my last part of today's lesson, variables. A variable is a letter, or word which holds certain information depending on it's Data type (i covered that earlier). you construct a variable with, a data type, the name, an = operator, and a value relevant to the data type. So a variable would look like:\n\nCode:\n\nint number = 3;\n\nNOTE:you can always just make a variable(no = 3 or whatever), and assign it something whenever you want in the shown way. variables can be used pretty much like a specialized container. For example, if you have a container for trading cards, you cant stick baseballs in that container, just trading cards. to define what kind of container you're using, you use the previously mentioned data types. In our above case we said we wanted to store integers, so integers(whole numbers) like 3 are all that can be stored in our variable. To give you a sense of one of the ways we can use variables, lets make our program have main give GiveMeMySandwich a number and display it. first, we must change the prototype and actual function to accompany integers. so now our prototype is:\n\nCode:\n\nvoid GiveMeMySandwich(int);\n\nas you may tell, we will be using arguments to carry out this process. Now remember that statement in main where we called our custom function? well, now we must give it a value in its argument part. So let's put something like 7 in there:\n\nLesson 3: Today we're going to learn about OOP(Object Oriented Programming). OOP is vital for video games, why? Because, it organizes all those different components in your video game in a nice, clean way. OOP does this through the use of classes(a collection of variables and things), and then objects(uses a class to define it's properties.) Here's an example of a class:\n\nCode:\n\nclass gun { };\n\nThe class has nothing in it right now, but what you see is the basic structure of a class. As you may notice, the structure of it is really simple. we type the keyword class(to tell the computer we want to make a class) and then the name of the class, followed by brackets( { } ) to put our stuff in, then a semi-colon to say, we are finished making a class. Quite often(all the time), you're supposed to put your classes into a relevant header file. A header file ( .h ) is not to be confused with a source file ( .cpp, has functions in it ). I will go into further detail with header files some other day. So with our class we can outline the properties of different objects we create in the world, for example, with the gun class i would identify RateOfFire, Damage, and Range(real games have way more than just that):\n\nCode:\n\nclass gun { int RoF; int Dam; int Range; };\n\nAnother thing that goes into classes is the methods(functions done by an object belonging to the class). So for gun, we would have things like void shoot() or something. Thing about methods is you don't code these special functions in the class, rather you code them outside of the class. Next thing to know is you can make stuff in your class public and private. Public and private will be covered next lesson so disregard it for now. As for giving the variables we made values, we can allow objects to do that through methods and functions. We do this by first making a method in our class to set a certain variable's value, then a method to get the value. So you end up with something like this:\n\nNext, we're going to make special functions that will allow us to use the methods. We do this with the Scope Resolution Operator( :: ). When you use :: , you give the function a type, then you put the name of the class you wish to mess with, :: , and then the method. Like any other function, it must also have the brackets ( { } ). next, we will make statements that allow us to do what we want the method to do. so for setting say, RoF, we may try something like this:\n\nCode:\n\nvoid gun::SetRof(int rof) { RoF=rof; }\n\nand for GetRoF, this:\n\nCode:\n\nint gun::GetRoF() { return RoF; }\n\nWe are making the get function have int as it's value because, we will be returning the value of RoF(an integer) to the function that wants to know it. Now let's do the things shown above with all the other methods.\n\nCode:\n\nvoid gun::SetRoF(int rof) { RoF=rof; }\n\nint gun::GetRoF() { return RoF; }\n\nvoid gun::SetDam(int dam) { Dam=dam; }\n\nint gun::GetDam() { return Dam; }\n\nvoid gun::SetRange(int range) { Range=range; }\n\nint gun::GetRange() { return Range; }\n\nin order to make use of the \"set\" functions i made here as soon as i make an object, we'll use a constructor(method that runs when you create an object) to tell objects to use certain methods as soon as the object is made. We'll do this through arguments so what we will do is make variables that our code can mess with. So, for RoF, i could do rof, for Dam, i could do dam, and for Range, i could do range. So in our constructor's (which is made by simply typing the name of the class, and parentheses for the arguments btw) arguments we would type int rof, int dam, int range. Then we will identify what the method does with a :: function. for the statements, we copy all the statements from the sources we need( SetRoF, SetDam, and SetRange) and jam them into our constructor's statements. So our constructor function looks like:\n\nNow for the other thing you do besides make classes in OOP, make objects. Making objects is simple enough, you simply state the class, then state the name of the object, and then any arguments. So let's say i want to make an ak47 in my game. What i would do is somewhere along the lines I would type:\n\nCode:\n\ngun ak47(600, 33, 300);\n\nThrough that statement I would create an object that is named ak47, which is a member of the gun class. The numbers in the arguments for ak47 are RoF(600) Dam(33) and Range(300). Now i know you're probably wanting something you can do with this, well, let's make program. We could make a program that tells people information about the ak47. To do this, we will need cout <<. Here's where i want to explain something, notice how the whole lesson i didn't mention #include <iostream> or using namespace std like in previous lessons? Well, that's because I don't need them unless I want something to do with input or output(the io in iostream) And i can make the inclusion of things from namespace std as painless to the program as possible by specifying what I want, where I want it. How? simple, we take what we want from the std namespace using :: . Instead of the class being on the left, and some method on the right, we'll have the namespace (std) we want to use on the left, and on the right we'll have what we want( like cout ). we can then put our std::cout or whatever in the function where we want to use it in as a statement. After we have put std::cout in the function, we then do this to output certain characteristics of the ak47 object:\n\nAnd huzzah! We're done. You can obviously screw around with this stuff and make say, a class for certain animal parts, then objects belonging to that class of animal parts. or something else Thrive related. Stick around, and you'll learn more and more, and the possibilities will never stop expanding!\n\nIf you broke my heart and didn't read this, pickle. OF SHAME!\n\nLast edited by jaws2blood on Tue Jul 31, 2012 4:53 pm; edited 1 time in totalI'll help a little bit here and there but, I can't code the whole game, or allot. I don't really know if thrive is ready for code yet tbh, there's still basic code stuff to think about and design. As for people who want to learn, lesson 4 is coming soon, so stay strongHow much you contribute will come down to how much time you have, and whether you're a math guy or not."}
{"text": "Highlights\n\n\"This document explores methods for squeezing excess bytes out of\nsimple programs. (Of course, the more practical purpose of this\ndocument is to describe a few of the inner workings of the ELF file\nformat and the Linux operating system. But hopefully you can also\nlearn something about how to make really teensy ELF executables in the\nprocess.)\"\n\n\"This text explains the mathematics behind RSA -- how and why it works.\nThe intended audience is just about anyone who is interested in the\ntopic and who can remember a few basic facts from algebra: what a\nvariable is, the difference between a prime number and a composite\nnumber, and the like.\"\n\n\"The INTERCAL programming language was designed the morning of May 26,\n1972 by Donald R. Woods and James M. Lyon, at Princeton University.\nExactly when in the morning will become apparent in the course of this\nmanual.\"\n\nThis subsection of the\nMuppetlabs website is\nmaintained by Brian Raiter (aka Organic Worker Drone BR903), who is\nthe author of the contents where not otherwise indicated. Questions\nand other overtures should be directed to breadbox [whirlpool]\nmuppetlabs [spot] com."}
{"text": "Lecture01\n\nCourse: ECE 122, Fall 2009 School: UMass (Amherst) Rating:\n\nWord Count: 496\n\nDocument Preview Hoffmann TAs Claudiu Fatu Teng Fei Richa Prasad Sarma Vangala JianHong Xia\nGrade Composition\n3 exams. 15%, 15%, 30% 4 quizzes. 2.5% each 7 labs. 4% each. 5% each for the last two labs.\nTextbook\nHead First Java, Kathy Sierra & Bert Bates. OReilly Java 2: A Beginners Guide, Herbert Schildt\nWhat is a Computer?\nA device that computes. Has Hardware and Software. Hardware is the physical device. Software is the program that controls the function of the hardware and directs its operations. Software is written in a Programming Language.\nWhat is Programming Language?\nA programming language is a high level language that contains instructions that controls a computers operations. Examples: Java, C++, C, Visual Basic, Compiling. A programming language needs to be translated into a low level machine code before execution on a computer.\nWhat is Java Programming Language?\nSimple Object-oriented. Objectville vs. procedureland Platform Independent Safe. No pointers. Live in virtual machine. Multi-threaded Garbage collected\nHow Java Works --1\nHow Java Works 2\nTwo most important web sites\n \nThree most used Java command\njavac -- Compile source java code into Byte code. java -- Run a Java application. jar -- Archive files.\nEclipse Java IDE\nEclipse. Java Individual Development Environment. Free download from \nJava Code Structure --1\nJava Code Structure--2\nJava Code Structure --3\nJava Code Structure 4\nYour First Cup of Java --1\npublic class HelloWorld { public static void main(String[] args) { System.out.println(Hello World!\"); } }\nYour First Cup of Java --2\nSave the source code to HelloWorld.java Compile the source code into Byte code: javac HelloWorld.java Run the Byte code: java HelloWorld or java classpath . HelloWorld\nGood Programming Practice\nStart with a working Java program, modify it, break it, learn what you have broken it, then fix it. Learn Java through lots of hands on exercise. Use Eclipse to help you to learn. Use Blank lines and space characters to enhance program readability By Convention, always begin a class names identif Vehicle"}
{"text": "Introduction to Computing Systems: From bits & gates to C & beyond\n\nAbout The Book\n\nIntroduction to Computing Systems: From bits & gates to C & beyond, now in its second edition, is designed to give students a better...\nRead more\n\nunderstanding of computing early in their college careers in order to give them a stronger foundation for later courses. The book is in two parts: (a) the underlying structure of a computer, and (b) programming in a high level language and programming methodology. To understand the computer, the authors introduce the LC-3 and provide the LC-3 Simulator to give students hands-on access for testing what they learn. To develop their understanding of programming and programming methodology, they use the C programming language. The book takes a \"motivated\" bottom-up approach, where the students first get exposed to the big picture and then start at the bottom and build their knowledge bottom-up. Within each smaller unit, the same motivated bottom-up approach is followed. Every step of the way, students learn new things, building on what they already know. The authors feel that this approach encourages deeper understanding and downplays the need for memorizing. Students develop a greater breadth of understanding, since they see how the various parts of the computer fit together"}
{"text": "C+c++: Programming with Objects in C and C++\n\nThis book provides instruction for using C in an object-oriented fashion. The book covers the problems likely to arise in a C++ application, explains why C++ is inappropriate for some object-oriented applications, and shows how to do real object-oriented programming (based on a multitasking model) in a C or C++ environment. Using real-world examples throughout, the book relates C++ concepts directly to C, showing how a C++ feature could be implemented in C by presenting code in both languages. Readers will see exactly how the object-oriented methodology works and how it can be implemented in both C and C++.\n\nThe 18th century was a wealth of knowledge, exploration and rapidly growing technology and expanding record-keeping made possible by advances in the printing press. In its determination to preserve ...\n\nIf you are looking for a way to make your final working years better than all that have come before, this book is for you. Bestselling author and innovative career and life consultant Nancy Anderson ...\n\nThe various Christian, Muslim, traditional (African), and secular (Western) ways of imagining and coping with evil collected in this volume have several things in common. The most crucial perhaps and ..."}
{"text": "C++ Programming Advanced Course Objective\nAt the end of this course, you will be able to: demonstrate and apply advanced concepts of the C++ object-oriented programming language, employ inheritance and polymorphism in programs, utilize pointers, reverence variables, and dynamic memory allocation, apply class libraries and the standard dynamic memory allocation, apply the standard template library, and much more.\n\nHow can a Group C++ Training Program help my business?\nUnderstanding C++ will help your business create and customize software applications that can be used in many different ways. Imagine your business creating a software program specifically for your industry. Using C++ will help you create, manage, and manipulate that program.\n\nHow does this Group C++"}
{"text": "An Introduction to Metaprogramming\n\nA metaprogram is a program that generates other programs or program\nparts. Hence, metaprogramming means writing metaprograms. Many\nuseful metaprograms are available for Linux; the most common ones\ninclude compilers (GCC or FORTRAN 77), interpreters (Perl or Ruby), parser\ngenerators (Bison), assemblers (AS or NASM) and preprocessors (CPP or\nM4). Typically, you use a metaprogram to eliminate or reduce a tedious\nor error-prone programming task. So, for example, instead of writing\na machine code program by hand, you would use a high-level language, such\nas C,\nand then let the C compiler do the translation to the equivalent low-level machine instructions.\n\nMetaprogramming at first may seem to be an advanced topic, suitable only\nfor programming language gurus, but it's not really that\ndifficult once you know how to use the adequate tools.\n\nSource Code Generation\n\nIn order to present a very simple example of metaprogramming, let's\nassume the following totally fictional situation.\n\nErika is a very smart first-year undergraduate computer science\nstudent. She already knows several programming languages, including C\nand Ruby. During her introductory programming class, Professor Gomez,\nthe course instructor, caught her chatting on her laptop computer. As\npunishment, he demanded Erika write a C program that printed the\nfollowing 1,000 lines of text:\n\n1. I must not chat in class.\n2. I must not chat in class.\n...\n999. I must not chat in class.\n1000. I must not chat in class.\n\nAn additional imposed restriction was that the program could not use\nany kind of loop or goto instruction. It should contain only one big\nmain function with 1,000 printf instructions\u2014something like this:\n\n#include <stdio.h>\nint main(void) {\nprintf(\"1. I must not chat in class.\\n\");\nprintf(\"2. I must not chat in class.\\n\");\n/* 996 printf instructions omitted. */\nprintf(\"999. I must not chat in class.\\n\");\nprintf(\"1000. I must not chat in class.\\n\");\nreturn 0;\n}\n\nProfessor Gomez wasn't too naive, so he basically expected Erika to write\nthe printf instruction once, copy it to the clipboard, do 999 pastes, and\nmanually change the numbers. He expected that even this amount of irksome\nand repetitive work would be enough to teach her a lesson. But, Erika\nimmediately saw an easy way out\u2014metaprogramming. Instead of writing this\nprogram by hand, why not write another program that writes this program\nautomatically for her? So, she wrote the following Ruby script:\n\nThis code creates a file called punishment.c with the expected\n1,000+ lines of C source code.\n\nAlthough this example might seem a bit fabricated, it\nillustrates how easy it is to write a program that produces the source\nof another program. This technique can be used in more realistic\nsettings. Let's say that you have a C program that needs to include a PNG\nimage, but for some reason, the deployment platform can accept one file\nonly, the executable file. Thus, the data that conforms the PNG file data\nhas to be integrated within the program code itself. To achieve this,\nwe can read the PNG file beforehand and generate the C source text for\nan array declaration, initialized with the corresponding data as literal\nvalues. This Ruby script does exactly that:\n\nThis script reads the file called ljlogo.png and creates a new\noutput file called ljlogo.h. First, it writes the declaration of the\nvariable ljlogo as an array of unsigned characters. Next, it reads\nthe whole input file at once and unpacks every single input character as\nan unsigned byte. Then, it writes each of the input bytes as two-digit\nhexadecimal numbers in groups of eight elements per line. As should be\nexpected, individual elements are terminated with commas, except the last\none. Finally, the script writes the closing brace and semicolon. Here\nis a possible output file sample:\n\nThe following C program demonstrates how you could use the generated\ncode as an ordinary C header file. It's important to note that the PNG\nfile data will be stored in memory when the program itself is loaded:\n\nYou also can have a program that both generates source code and executes it\non the spot. Some languages have a facility called eval,\nwhich allows you to translate and execute a piece of source\ncode contained within a string of characters at runtime. This feature is usually\navailable in interpreted languages, such as Lisp, Perl, Ruby, Python and\nJavaScript. In this Ruby code"}
{"text": "Appendix A. Glossary\n\nThis appendix contains informal definitions for many of the terms you will encounter. Some of these terms have to do directly with the Objective-C language itself, whereas others have their etymology from the discipline of object-oriented programming. In the latter case, the meaning of the term as it specifically applies to the Objective-C language is provided."}
{"text": "Softd\n\n< dharanish\n\nBecome a Programmer, Motherfucker\nIf you don't know how to code, then you can learn even if you think you can't. Thousands of people have learned programming from these fine books: Learn Python The Hard Way\n\nThe C++ Standard Library: Index\nIndex This is the index of all code examples of the book The C++ Standard Library - A Tutorial and Reference by Nicolai M. Josuttis . [ contents ] [ examples-home ] [ book-home ] [ copyrights ]\n\nAsymptotic analysis\nIn mathematical analysis , asymptotic analysis is a method of describing limiting behavior. The methodology has applications across science. Examples are in computer science in the analysis of algorithms , considering the performance of algorithms when applied to very large input datasets. the behavior of physical systems when they are very large. in accident analysis when identifying the causation of crash through count modeling with large number of crash counts in a given time and space.\n\nNorman Matloff University of California, Davis June 17, 2008\nA Quick, Painless Tutorial on the Python Language\n\nPython Programming Language \u2013 Official Website\n\nJavaScript 101, Beginner's Guide to Learning Block / Inline JavaScript\nJavaScript is a programming language that web browsers understand. You can use it to make your web pages interactive by: Responding to user actions and changes on the page Manipulating the web page's contents and behaviour Communicating with the user directly You can do just about anything you want with a web page, using JavaScript. In this introductory tutorial and the series to follow, I'll introduce the JavaScript language and how to write it, through a series of practical worked examples. Example 1: Hello World!\n\nCSS Basics\n\nIllustration of an application which uses libvorbisfile to play an Ogg Vorbis file In computer science , a library is a collection of implementations of behavior, written in terms of a language, that has a well-defined interface by which the behavior is invoked. In addition, the behavior is provided for reuse by multiple independent programs.\nLibrary (computing)\n\nBranch table\nIn computer programming , a branch table (sometimes known as a jump table ) is a type of efficient method of transferring program control ( branching ) to another part of a program (or a different program that may have been dynamically loaded) using a table of branch instructions . It is a form of multiway branch . The branch table construction is commonly used when programming in assembly language but may also be generated by a compiler , especially when implementing an optimized switch statement (where known, small ranges are involved with few gaps).\n\nPython is a general-purpose , high-level programming language whose design philosophy emphasizes code readability . Python's syntax allows programmers to express concepts in fewer lines of code than would be possible in languages such as C , [ 11 ] [ 12 ] and the language provides constructs intended to enable clear programs on both a small and large scale. [ 13 ] Python supports multiple programming paradigms , including object-oriented , imperative and functional programming styles. It features a fully dynamic type system and automatic memory management , similar to that of Scheme , Ruby , Perl and Tclm and has a large and comprehensive standard library . [ 14 ] Like other dynamic languages , Python is often used as a scripting language , but is also used in a wide range of non-scripting contexts.\nPython (programming language)\n\nFunctional programming\nIn computer science , functional programming is a programming paradigm that treats computation as the evaluation of mathematical functions and avoids state and mutable data. It emphasizes the application of functions, in contrast to the imperative programming style, which emphasizes changes in state. [ 1 ] Functional programming has its roots in lambda calculus , a formal system developed in the 1930s to investigate computability , the Entscheidungsproblem , function definition, function application, and recursion . Many functional programming languages can be viewed as elaborations on the lambda calculus. [ 1 ]\n\nWhen CivilizationTM IV (Firaxis Games, published by Take2) was announced, one of the most exciting features was that much of the scripting code will be in python, and the game data in XML. This tutorial attempts to teach you the basics of python programming that you could use with civIV. Of course, this tutorial is not limited to those who want to play a slow-paced turn-based strategy game.\nHome\n\nVisual Studio 2012 RC Home | Microsoft Visual Studio 2012\n\nBrainfuck is the ungodly creation of Urban M\u00fcller, whose goal was apparently to create a Turing-complete language for which he could write the smallest compiler ever, for the Amiga OS 2.0. His compiler was 240 bytes in size. (Though he improved upon this later -- he informed me at one point that he had managed to bring it under 200 bytes.) I originally started playing around with Brainfuck because of my own interest in writing very small programs for x86 Linux.\nThe Brainfuck Programming Language\n\nHyperText Markup Language ( HTML ) is the main markup language for creating web pages and other information that can be displayed in a web browser . HTML is written in the form of HTML elements consisting of tags enclosed in angle brackets (like <html> ), within the web page content. HTML tags most commonly come in pairs like <h1>and </h1> , although some tags, known as empty elements , are unpaired, for example <img> .\nHTML"}
{"text": "You are here\n\nC programming\n\nSubmitted by yogesh on Wed, 31/08/2011 - 17:05\n\nC programming language: To easy learn c you must start making programs in it. As you may already know that to develop programs you need a text editor and a compiler to translate source program into machine code which can be executed directly on machine. Dev C++ IDE is a good choice, so if you are not having it then download Download Dev c++ compiler.\n\nC programming code\n\nNow you have the tool to create programs, if you wish to look at some example codes then see c programming examples. Below I explain you to how to compile and run your programs. You may be using different compilers or operating system. I will explain you how to use Dev C++, GCC and turbo c compiler.\n\nC programming basics\n\nComputer programming means giving instruction to the computer and to interact with the computer we need a language to communicate with it, there are many languages such as C, C++, Java, Python each having their own features. Let's discuss first why we need programming suppose you are given ten numbers and asked to arrange them in ascending order then you can do it easily, but what if the numbers are say ten thousand it will be a difficult task and may take a long time and result may also contain errors, to simplify we can write a program which does this task and if the algorithm is correct then we will get result accurately and quickly, this is where programming is helpful."}
{"text": "Book Description:\n\nThis book helps you exploit Microsoft Visual FoxPro 6, a powerful end-user tool that allows you to build small-scale but effective database programs quickly and that ships with Visual Studio 6. The guide assumes little programming or database experience and provides a basic tour of programming and objects, plus database objects like tables and views. (Visual FoxPro 6 is arguably a good place to try out basic object-oriented programming techniques for the very first time.)\n\nLater sections examine how to build user interfaces with forms and controls. The samples aren't fancy, but this capable book gets you up and running with actual database applications. Important topics such as reports, distributing applications (using the Visual FoxPro run-time environment), and the FoxPro API are introduced. Other chapters explore ways to scale up FoxPro applications to SQL Server and Oracle and ways to access external DLLs. --Richard Dragan\n\nThe MICROSOFT VISUAL FOXPRO 6.0 PROGRAMMER'S GUIDE is a comprehensive resource for the beginning to intermediate programmer using the Visual FoxPro 6.0 development tool. It provides a thorough introduction to application development using Visual FoxPro 6.0 design tools and object-oriented programming techniques. Discover the enhanced development environment and master new capabilities, such as powerful ActiveX extensibility, increased performance, and improved connectivity."}
{"text": "GrokCode\n\nvote\n\nGrokCode is a site by developers for developers. It covers programming tips & tutorials, recommendations for books and tools, sweet hacks, career advice specific to software development, and programming trends. GrokCode contains code samples in a wide variety of languages including Java, PHP, Lisp, Scala, and C."}
{"text": "Mono\n\nMono Basics\n\nAfter you get Mono installed, it's probably a good idea to run a quick Hello World program to make sure everything is set up properly. That way you'll know that your Mono is working before you try writing or running a more complex application."}
{"text": "Construct Your Own Favorite Programming Language\n\nAs long as we have computers, we have to have programming languages. It started from FORTRAN in 1958 with which a whole genealogy of language designs can be constructed and one may wonder why computer scientists are not making up their mind to define the definite language which unifies all good ideas thought up thus far. This paper discusses how one can create their own programming language. It starts out by observing that a new language in principle does not add anything to what we can express already (e.g., using plain machine code). It may only, albeit dramatically, improve the ease with which programmers can express themselves. Sometimes this new expressiveness is so huge that one can speak of a new paradigm - examples of languages introducing such new paradigms are Prolog (logic programming), Simula67 (object-oriented Programming), Lisp (functional programming), ML (type inferencing) and SASL (lazy evaluation). Most Domain Specific Programming Languages (DSLs) still look like a normal programming language, i.e. they require a linear, character-based representation of their programs. People working with model-based development are however used to more graphical representations (such as UML), and thus the question arises whether one can provide more domain-specific representations. A final observation is that with the gradual merging of type checking, program verification, providing editing feedback and code generation, the need for incrementally evaluated systems grows. With this, analysing large artefacts over and over again becomes infeasible."}
{"text": "About The Book : Based on the belief that computer-aided design, like many other skills, cannot be learned by merely reading about it, this text engages students in hands-on activity from the very beginning and integrates explanatory material, techniques, tips, and shortcuts with practical exercises."}
{"text": "... more...\n\nWith the introduction of Visual Basic .NET, VB is now a complete object-oriented language, letting programmers access the full power of the Windows platform while enabling them to build reliable and robust web solutions. It doesn't matter if you're new to programming or just to VB.NET, Visual Basic .NET Programming gets you up and running with the... more...\n\n?I have never reviewed a book I enjoyed as much as this one. Excellent coverage, perfect for the intended audience. Concise, clear, accurate descriptions. This is a winner.? ?Ken Getz, MCW Technologies, LLC Master Visual Basic 2005 by Building a Complete, Production-Quality Application from Start-to-Finish! This book... more...\n\nMicrosoft's new .NET version of Visual Basic is its most radical revamping of the product since it was first released. Even if you know your way around VB6, the latest version presents special challenges. There are some new ways of doing things, some new things to do, and a new environment in which to work. With a few tips and tricks from expert Matt... more...\n\nThere's no easier, faster, or more practical way to learn the really tough subjects. Visual Basic 2005 Demystified fully explains the language and its libraries and applications. You'll even learn to create a Visual Basic program without writing code. This self-teaching guide comes complete with key points, background information, quizzes... more...\n\nBestselling and highly acclaimed Visual Basic author Kris Jamsa delivers the ultimate VB.NET resource. Organized by topic and packed with critical information, this book effectively explains complex concepts with precision. Filled with proven techniques and hundreds of solutions that can be put to immediate use easily and effectively, this is a must-have... more...\n\nWith this completely up-to-date tutorial and reference, you'll quickly learn how to develop Visual Basic (VB) programs that leverage the latest features of Vista and .NET 3.0. You'll get in-depth descriptions of the development environment, basic program syntax, and standard controls. Plus, you'll explore the fundamental concepts... more...\n\nProviding programmers and developers of all skill levels with a comprehensive tutorial and reference to Visual Basic (VB) 2008, Microsoft MVP Rod Stephens presents a broad, solid understanding of essential topics on the latest version of VB. He explains the forms, controls, and other objects that VB furnishes for building applications in a modern windows... more..."}
{"text": "Assignment:\n\nDevelop your own interactive fiction work using Inform. Feel free to work in groups and base your story off of the provided examples. Keep it simple. Do not feel obligated to make your work a game or puzzle. Publish your work along with the source to the course blog.\n\nExercises (optional):\n\nExamine the simple ITP text adventure above. What is missing? What doesn't really make sense / work? Can you fix / improve it?\n\nWhy Interactive Fiction\n\nInteractive Fiction (IF), sometimes referred to as \"text adventure\" and not to be confused with Hypertext Fiction, describes an experience where a user inputs text and receives a reply in the form of text output. Interactive fiction walks back and forth across the line between literary narrative and computer game where a player character, or \"interactor,\" explores a simulated world.\n\nTo date, we've focused our energies on strategies and techinques for programming algorithms that analyze and generate text, mostly in Java, with some discussion of perl / php along the way. Why take a break for interactive fiction? First and foremost, playing interactive fiction is good for you. The skills you pick up problem-solving your way through a simulated world are the same skills you need to write good code. Logic, creativity, ingenuity, organization.\n\nPart of our goal this semester is to look at ways a computer can understand and process text, whether in the form of natural language or simply as abstract data. Interactive fiction deals with this problem head on and has been since 1975 when Will Crowther, a programmer and cave enthusiast, developed Adventure in Fortran. Learning the basics of this stripped-down-to-the-bare-text-essentials medium (no hiding behind fancy visualizations) should provide us with some insight into our own process for developing engaging and interesting text-based work. And if you're feeling particularly saucy, you might run with this and consider entering your work in the annual Interactive Fiction competition.\n\nHow to play: Interpreters and basic commands\n\nJust as java programs run on a Java vitual machine (the same java bytecode can be run on different platforms as long as a virtual machine exists for that platform) most interactive fiction programs run via a virtual machine, also known as an \"interpreter.\" For the Mac OS X, I suggest you download and install Zoom as your interpreter, for Windows: Windows Frotz 2002. Note that not all interactive fiction works exist as Z-code files that run on Z-machine interpreters. TADS (Text Adventures Development System) is also a popular authoring tool for IF and for these works, you'll need a TADS interpreter.\n\nIf you want to incorporate IF into your java programs, you might be interested in checking out zplet, an open-source java interpreter. Here's an example of the IF work Shade by Andrew Plotkin running as a zplet.\n\nExploring interactive fiction worlds is often a relatively intuitive process (certainly, there are exceptions). However, if you're new to it, there are some useful conventions and familiarizing yourself with a few basic commands (see: this article) will help you get started.\n\nInform: compiling\n\nTo develop your own interactive fiction works, you're probably going to want to use an existing authoring environment, such as Inform or TADs. The following instructions document how to compile interactive fiction works using Inform on a Mac (PC instructions).\n\nFirst, download the appropriate compiler for your system. Extract the files to your hard drive. With the Mac OS X compiler, you'll have two crucial elements: \"inform630_macosx\" \u2014 the executable compiler \u2014 and \"lib\" \u2014 a directory with all the required library files. (Note you may find it interesting to look through the library files, as they will provide insight into the guts of the Inform parser.)\n\nOk, you're ready to compile. Download HelloWorld.inf and use the syntax below (note I placed the inform compiler in the applications directory, but you may have placed it somewhere else).\n\nFortunately, we have a head start here since we already understand basic computer programming concepts such as conditional statments, variables, arrays, functions, and objects (an understanding of object-oriented design is fundamental to IF development). The following is not, by any means, a substitute for the above resources. This brief discussion barely scratches the surface of IF development and glosses over some of the finer points.\n\nComments\n\nAny text that appears after an exclamation point is ignored by the compiler as a comment:\n\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Hello World\n! HelloWorld.inf! by Daniel Shiffman\n! Example for Programming from A to Z, Spring 2006\n\nThe \"Story\" and \"Headline\" are displayed to the user when the game begins (if you didn't declare and define them, nothing would appear.) A ^ inside a string is a metacharacter that indicates new line.\n\nIncluding Libraries\nIt's also necessary to import the appropriate libraries, using an \"include\" statement. \"Parser\" and \"Verblib\" are the fundamental components of the Inform parser library. Nothing will work without including them!\n\nInclude \"Parser\";\nInclude \"VerbLib\";\n\nObjects\nEverything in your interactive fiction world is an Object. Objects can be defined with the following elements:\n\nobject_id \u2013 this is essentially your \"variable name\" for the object, i.e. how you refer to it in your source code.\n\ninterpreter_name \u2014 this is the name that the interpreter will display when talking about the object\n\nparent_object \u2014 if the object has a parent. For example, the parent of a \"sheep\" object might be a \"meadow\" object, assuming the sheep in your story lives in a meadow. Generally speaking, \"room\" objects do not have parents and things that are found in a room are \"children\" of room objects.\n\nproperties \u2014 objects can have one or more properties. For example, an object can have a description property. This is what would appear when the user types \"look.\" In the case of a \"room\", it might have a property like \"w_to\". This property would indicate what object is west of a given object. Properties can deal with events and actions associated with a given object. What happens when you take an object or listen to an object, etc.?\n\nattributes \u2014 Attributes are boolean values that describe the state of an object. A room might have \"light\" or \"~light\" (no light).\n\nThere's more things you can do with objects, but these basic elements will get you started!\n\nFor example, a computer lab in the example ITP.inf is described as follows:\n\nObject lab \"The Computer Lab.\"\nwith description\n\"A mysterious figure in the corner types madly at a keyboard.\nTo the west is a classroom. You see a printer.\",\ne_to lobby,\nw_to four0four,\nhas light;\n\nTranslated the above code reads as follows: Define an object called \"lab\" that will be displayed as \"The Computer Lab\" to the user. The object has no parent (it is a room.) Display this description when the user enters the lab. The object (room) \"lobby\" is to the east, and \"four0four\" is to the west. There is light in the lab so the user can see things upon entering.\n\nWe could also place an object in the lab. For example:\n\nObject student \"mysterious figure\" lab\nwith description\n\"The mysterious figure appears to be a stressed out student, quietly muttering.\",\nname 'student''person''figure''man''woman''mysterious figure',\nbefore [;\nListen:\"Paper. It needs paper. Find the paper.\";],\nhas scenery;\n\nNote the additional properties. \"Name\" indicates all the possible valid words that can be used to refer to a given object. The \"before\" block handles events and actions that occur in association with that object. If the user types \"Listen to person,\" the interpreter will reply with the above message. Before indicates we want our code to be executed before the default action taken by the interpreter. If we wanted something to happen afterwards, we would use after. This object is also \"scenery\", meaning it cannot be removed from the parent, nor will the user be made aware of its existence upon entering the room (note the description of the computer lab explicitly mentions the so-called \"mysterious figure.\")\n\nIn some examples, you will see an alternative syntax for creating a parent-child relationship between objects. The code below is equivalent to above (assuming the \"student\" object appears directly after the \"lab\").\n\nObject-> student \"mysterious figure\"\n\nWe can also use conditional statements inside our objects to handle different events depending on what has occured previously, what is currently in the user's inventory, etc. Here's a slightly more advanced object, a \"printer\" which also resides in the computer lab.\n\nThere's a lot more going on in this object. For example, the printer has many attributes. It is a container, meaning it can hold objects. It is openable, i.e. it can be opened or closed. It is switchable, meaning it can be turned on and off. We are also handling certain types of actions using \"after.\" When the printer is switched on, if it has paper in it, it prints out a thesis. If it does not have paper it beeps. We are also handling the \"Receive\" action. Here, the keyword noun works like an argument to \"receive,\" holding on to a reference to the object that was actually placed in or on an object. (We place objects in a \"container\" and on a \"supporter\"). So, in the case of the printer, if it receives paper, assuming it is on, it prints out the thesis. If not, it displays a message indicating that the user should consider turning on the printer.\n\nThis example also includes specific tasks that when achieved by the user increase his/her score. When the thesis is printed, \"Achieved(0)\" calls a function to indicate the first task has been completed. At the top of the code, we would include the following variables to describe the total number of tasks and respective scores for each task."}
{"text": "Chapter 3. Putting Object-Oriented Programming to Work\n\nChapter 3. Putting Object-Oriented Programming to Work\n\nNot all object-oriented programming (OOP) concepts are new to Visual Basic. The language has had support for classes and interface-based programming since Version 4, and, arguably, the drag-and-drop controls that have been central to the Visual Basic programming paradigm since Version 1 are a sterling example of what reusable objects can achieve. When you drop a Button control onto a VB 6 form, for example, you create a new instance of the control in a way that is analogous to the way a class is instantiated in a traditional object-oriented language. Likewise, when you set the Caption property of a Button or call the Show method of a form, you perform tasks that are analogous to setting a property or calling a method on an object.\n\nStill, it's hard to argue that VB 6 is a truly object-oriented language. It lacks support for such crucial features such as inheritance, which allows one class to derive its properties and functionality from another. Were that functionality present, for example, you would be able to create your own custom Buttons by deriving from the Button control that ships with VB 6. Interface-based programming is so difficult in VB 6 that few programmers have bothered to master it. VB 6 has no support for defining or working with interfaces, for example, and VB 6 programmers schooled in OOP principles must resort to virtual base classes to achieve the same result."}
{"text": "The Design and Analysis of Computer Algorithms\n\n9780201000290\n\nISBN:\n\n0201000296\n\nEdition: 1ST Pub Date: 1974 Publisher: Pearson Education\n\nSummary: With this text, you gain an understanding of the fundamental concepts of algorithms, the very heart of computer science. It introduces the basic data structures and programming techniques often used in efficient algorithms. Covers use of lists, push-down stacks, queues, trees, and graphs. Later chapters go into sorting, searching and graphing algorithms, the string-matching algorithms, and the Schonhage-Strassen inte...ger-multiplication algorithm. Provides numerous graded exercises at the end of each chapter. 0201000296B04062001[read more]\n\nWith this text, you gain an understanding of the fundamental concepts of algorithms, the very heart of computer science. It introduces the basic data structures and programmi [more]\n\nWith this text, you gain an understanding of the fundamental concepts of algorithms, the very heart of computer science. It introduces the basic data structures and programming techniques often used in efficient algorithms. Covers use of lists, push-"}
{"text": "A tutorial on how to create and execute JDBC SQL Statements and display records from a table in a MySQL Database. Also covers topics like creating databases and tables in MySQL. All code is explained in detail. all the code in detail.\n\nA tutorial on obtaining, installing and configuring MySQL Database and Connector/J JDBC Driver for use on Microsoft Windows. Advanced topics covered include installing MySQL as a Windows service and configuring MySQL and Connector/J JDBC Driver to use named pipes.\n\nAn article which discusses the similarites between different technologies of J2EE and .NET and helps you to move from J2EE to .NET. Quick tips to get you started, in case you need to migrate a J2EE based application to a .NET based application.\n\nIf html, JavaScript, Java, etc, are leaving you wondering if there shouldn't be something better, then you will want to take a *very* close look at the next generation web language, called \"Curl\" (Curl was originally a DARPA project and one of the investors is Tim Berners-Lee). Take a look at what is being called the \"X-Internet\" (for executable internet) and learn one of the most powerful and easiest languages that exists, even if you are just a web designer and not a pr\n\nIn part two of this ten part series, I discussed some basic Java language syntax. In this article, I will discuss some of the Java primitive types and describe the basics of a Java class. I will also touch on the JDK (Java Development Kit) and describe how to compile a small class.\n\nIn part three of this ten part tutorial, Chris discussed some of the primitive data types available in Java. He also went through a basic Java class. In this article, he will explore that class further and discuss some aspects of objects, as well as information hiding.\n\nJava is arguably the hottest programming language today. It can be used cross platform to build complete applications, applets and even web pages. In this 10 part series of articles, Chris will explain what Java is, and also provide working examples, clearly describing the Java language syntax.\n\nIn this, part two of this ten part series on Java, Chris looks at the Java language syntax, variable declerations, truth conditions, loops and more. He finishes by wrapping everything up into a simple Java function.\n\nThe Servlets trail teaches you about servlets, the bodies of code that run inside servers, and extend their functionality. For example, servlets offer an efficient platform-independent replacement for CGI scripts. Servers that can host servlets are Java-enabled servers that respond to client requests.\n\nSince it came into existence, Java code has had a reputation for executing slowly, and that reputation was partially deserved. This is particularly true of the early Java Virtual Machine implementations, which offered purely interpreted execution. However, while Java is still not (and may never be) the ideal language for performing extremely CPU-intensive operations, it is entirely suitable for most software applications.\n\nOnce you've identified a performance problem, there are usually ways that you can address the problem. The most obvious solution is to upgrade the hardware that the application runs on, but this is often not possible, especially when large numbers of client machines are involved.\n\nTag libraries are the one aspect of JSP which\nhas caused me to to choose JSP as my primary server-side web application tool. This tutorial will show you why tag libraries are so important and will help you to build your first tag library."}
{"text": "A tutorial on how to create and execute JDBC SQL Statements and display records from a table in a MySQL Database. Also covers topics like creating databases and tables in MySQL. All code is explained in detail. all the code in detail.\n\nA tutorial on obtaining, installing and configuring MySQL Database and Connector/J JDBC Driver for use on Microsoft Windows. Advanced topics covered include installing MySQL as a Windows service and configuring MySQL and Connector/J JDBC Driver to use named pipes.\n\nAn article which discusses the similarites between different technologies of J2EE and .NET and helps you to move from J2EE to .NET. Quick tips to get you started, in case you need to migrate a J2EE based application to a .NET based application.\n\nIf html, JavaScript, Java, etc, are leaving you wondering if there shouldn't be something better, then you will want to take a *very* close look at the next generation web language, called \"Curl\" (Curl was originally a DARPA project and one of the investors is Tim Berners-Lee). Take a look at what is being called the \"X-Internet\" (for executable internet) and learn one of the most powerful and easiest languages that exists, even if you are just a web designer and not a pr\n\nIn part two of this ten part series, I discussed some basic Java language syntax. In this article, I will discuss some of the Java primitive types and describe the basics of a Java class. I will also touch on the JDK (Java Development Kit) and describe how to compile a small class.\n\nIn part three of this ten part tutorial, Chris discussed some of the primitive data types available in Java. He also went through a basic Java class. In this article, he will explore that class further and discuss some aspects of objects, as well as information hiding.\n\nJava is arguably the hottest programming language today. It can be used cross platform to build complete applications, applets and even web pages. In this 10 part series of articles, Chris will explain what Java is, and also provide working examples, clearly describing the Java language syntax.\n\nIn this, part two of this ten part series on Java, Chris looks at the Java language syntax, variable declerations, truth conditions, loops and more. He finishes by wrapping everything up into a simple Java function.\n\nThe Servlets trail teaches you about servlets, the bodies of code that run inside servers, and extend their functionality. For example, servlets offer an efficient platform-independent replacement for CGI scripts. Servers that can host servlets are Java-enabled servers that respond to client requests.\n\nSince it came into existence, Java code has had a reputation for executing slowly, and that reputation was partially deserved. This is particularly true of the early Java Virtual Machine implementations, which offered purely interpreted execution. However, while Java is still not (and may never be) the ideal language for performing extremely CPU-intensive operations, it is entirely suitable for most software applications.\n\nOnce you've identified a performance problem, there are usually ways that you can address the problem. The most obvious solution is to upgrade the hardware that the application runs on, but this is often not possible, especially when large numbers of client machines are involved.\n\nTag libraries are the one aspect of JSP which\nhas caused me to to choose JSP as my primary server-side web application tool. This tutorial will show you why tag libraries are so important and will help you to build your first tag library."}
{"text": "Objective-C is the language you have to use if you want to write fantastic apps for Mac OS and iOS. This soup-to-nuts course on Objective-C gives you the solid basis in Objective-C that you absolutely need for writing applications for these platforms. This course is designed to be the the perfect foundation for you to start from whether you're going to be coding on either Mac OS or iOS.\n\nContent:\nChapter 01. INTRODUCTION\nIn this chapter we give a broad overview of the material that we will cover in the course.\nDuration: 13 mins.\n\nChapter 02. OBJECTIVE-C AND XCODE\nBefore writing Objective-C, you need to know a bit about your tools, so we introduce you to the IDE we'll be using during the course, Xcode, as well as discussing a bit about the history and origins of Objective-C and why it makes an interesting language to learn.\nDuration: 15 mins.\n\nChapter 03. WRITING YOUR FIRST PROGRAM\nHere you'll learn how to write your first Objective-C program and how the compilation process works.\nDuration: 11 mins.\n\nChapter 04. DECLARING VARIABLES & SCOPE\nEvery program has variables. In this section you'll learn the basics of how to declare variables and how variable scoping works.\nDuration: 21 mins.\n\nChapter 05. VARIABLE TYPES\nThere are many different types of variables you can use in Objective-C. In this chapter, we'll introduce you to all the important types, and how choosing particular variable types affects what kind of data you can store in them.\nDuration: 12 mins.\n\nChapter 06. STRUCTURES\nNow that you understand what kinds of variables you can use in Objective-C, we show you how you can group variables together in a slightly more advanced abstraction called structures. Objective-C uses these occasionally, and they're an important concept to understand.\nDuration: 15 mins.\n\nChapter 07. POINTERS\nPointers are the bane of C and C++ programmers. Fortunately, in Objective-C, they're mostly harmless, but you still need to understand them fully. In this chapter we delve into all the details on them, and show you how they're used in Objective-C.\nDuration: 22 mins.\n\nChapter 08. OPERATORS\nOnce you've learned about storing data, it's useful to learn about how you can manipulate your data using operators. You'll learn all the important operators such as addition, subtraction, and multiplication as well as how Objective-C handles the order in which operators are evaluated.\nDuration: 20 mins.\n\nChapter 09. FUNCTIONS & PROCEDURES\nFinally, all that data would be pretty useless if you couldn't pass it around to other parts of your program using functions and procedures. Objective-C is built upon C, which is a procedural language. That means all of C's procedural capabilities are available to you. This chapter you'll learn what you need to know to use it when you need to.\nDuration: 21 mins.\n\nChapter 10. INTERFACE & IMPLEMENTATION\nThe separation of interfaces and implementations really comes into it's own when we deal with objects in chapters 14-18, but here we introduce the concept so that you're ready for it when we get there. We use the simple building blocks from chapter 9, procedures, and show how you can put your procedures into other modules for reuse.\nDuration: 22 mins.\n\nChapter 11. CONDITIONALS\nConditionals enable you to make choices in your program and change the flow of execution while you're running. In this chapter we show you how to use them, and which conditional to choose for particular kinds of problems.\nDuration: 34 mins.\n\nChapter 12. ITERATION\nHand-in-hand with conditionals, another flow-control mechanism in Objective-C is iteration. For loops, while loops, and so on, allow you to work with collections, and allow you to perform operations multiples of times.\nDuration: 25 mins.\n\nChapter 13. REVIEW THE BASICS\nUp to here, everything we've talked about has been core language features. Now, before we move on to more advanced topics, we do a quick review to make sure you've gotten everything solidly in your skull!\nDuration: 28 mins.\n\nChapter 14. OVERVIEW OF OBJECTIVE ORIENTED PROGRAMMING\nNow here we put on the big boy pants: object oriented programming. Without object oriented programming, Objective-C would just be... well, C. In this chapter, we introduce you to the core concepts of OOP, and why it's cool.\nDuration: 28 mins.\n\nChapter 15. OBJECTS\nHaving learned about OOP in chapter 14, now we teach you how objects work in Objective-C and what language constructs Objective-C gives us for declaring them and using them.\nDuration: 28 mins.\n\nChapter 16. CREATING OBJECTS\nBefore you can use objects, you need to know how to create them, and how to create the classes from which objects are built. In this chapter, you learn all that and more.\nDuration: 22 mins.\n\nChapter 17. CLASS METHODS\nA powerful construct in Objective-C is the ability to create class methods. In this chapter, we'll show you how to declare and call class methods and give you some examples of how they're used in Cocoa and Cocoa Touch.\nDuration: 12 mins.\n\nChapter 18. PROPERTIES\nA new feature in Objective-C 2.0 is the concept of properties. Properties allow you to declaratively define access methods for the data members of your classes. They allow you to eliminate much of the boilerplate code needed in other languages. In this chapter you'll learn everything you need to know about them.\nDuration: 21 mins.\n\nChapter 19. MEMORY MANAGEMENT\niOS requires that you manually manage your memory in your applications. So in this, perhaps one of the most important chapters in this course, we show you everything you need to know in order to do that effectively.\nDuration: 47 mins.\n\nChapter 20. AUTORELEASE POOLS\nAutorelease pools are a vital part of Objective-C memory management, when working with iOS and other non-garbage collected environments. In this chapter you'll learn about them, and see how to use them to keep your applications from using too much memory even when they don't have memory leaks.\nDuration: 14 mins.\n\nChapter 21. GARBAGE COLLECTION\nMac OS X now has garbage collection available as an option for applications written for it. In this chapter, we'll explain how the garbage collector works, and show you what you need to know to use it effectively. We'll also show you some key pitfalls to look out for when converting non-garbage collected code to garbage collection.\nDuration: 20 mins.\n\nChapter 22. GARBAGE COLLECTOR PATTERNS\nWorking in a garbage collected environment presents many new challenges that require you to construct your code in particular ways. In this chapter we'll show you some of the more common constructs that you'll need to know and use.\nDuration: 21 mins.\n\nChapter 23. BLOCKS\nOne of the newest and coolest constructs added to Objective-C is that of blocks, or, as some might know them, closures. Here we show you everything you need to know about how to use blocks in your code.\nDuration: 26 mins.\n\nChapter 24. PROTOCOLS\nProtocols are cool because they allow you to define an interface for talking to other objects. This allows for powerful language constructs such as delegation, which are a vital part of using the Cocoa and Cocoa Touch frameworks. In this chapter we show you how to create and use protocols in your code.\nDuration: 28 mins.\n\nChapter 25. CATEGORIES/INFORMAL PROTOCOLS\nOne of the most powerful tools in Objective-C is categories. Categories allow you to modify the behaviour of existing classes, even if you don't have the source code to those classes. Using them makes it possible to do amazing customisation and all kinds of clever tricks. Here, we show you everything you need to know to use them.\nDuration: 17 mins.\n\nChapter 26. MACROS\nMacros are a relatively low level part of Objective-C, but they're also powerful, and an important concept to understand. Here we show you how to declare and use macros in your applications.\nDuration: 23 mins.\n\nChapter 27. HANDLING ERRORS\nWe all write perfect code right? If your code is always perfect and all the data your app gets is always correct, you can skip this chapter. Still here? Ok... for those of you who are realistic... this chapter shows you all of the different error handling mechanisms in Objective-C, and instructs you on how and when to use them in your applications.\nDuration: 35 mins.\n\nChapter 28. INTRODUCTION TO FOUNDATION FRAMEWORK\nThe Foundation Framework is rather like the standard library of Objective-C. It provides everything from strings, to collections, to even some of the basic functionality for the language itself. We couldn't teach an Objective-C course without at least a basic introduction to Foundation. This is the introduction to what Foundation is. chapters 29-35 cover individual important portions of it in detail.\nDuration: 5 mins.\n\nChapter 29. NSSTRING\nStrings are probably the most common object type used in applications today. Fortunately, Foundation has a very robust string class, and here you'll learn all about it.\nDuration: 37 mins.\n\nChapter 30. INTRODUCTION TO COLLECTIONS & ARRAYS\nPerhaps the second most common object used in applications is collections. From arrays, to dictionaries, to sets, Objective-C has classes for them, and you'll learn all about them starting here.\nDuration: 25 mins.\n\nChapter 31. DICTIONARIES & SETS\nSlightly less often used than arrays, dictionaries and sets are vital parts of the collections API in Foundation. This chapter shows you how to create and use them.\nDuration: 22 mins.\n\nChapter 32. ADVANCED COLLECTIONS\nNow that you know all about the basics of collections, here we show you some of the more advanced aspects of them. How to iterate over them, using blocks with them, and so on.\nDuration: 13 mins.\n\nChapter 33. NSNUMBER & BOXING\nThough integers, floats, and other basic types are available as part of the low-level capabilities of the Objective-C language, but if you want to use them in collections or other high-level APIs you'll need to learn to encapsulate them in objects. This concept is called boxing, and you'll learn how here.\nDuration: 13 mins.\n\nChapter 34. NSDATA\nNSNumber allows you to box up numbers, but what if you have more arbitrary data? NSData to the rescue! NSData lets you deal with generic blobs of memory goo as if it were modern clean and tidy objects!\nDuration: 15 mins.\n\nChapter 35. DATES & CALENDARS\nDates are a surprisingly difficult concept to deal with in software (queue Y2K slides)... fortunately, Foundation has classes that make it easy!\nDuration: 22 mins.\n\nChapter 36. CROSS PLATFORM OBJECTIVE-C\nObjective-C isn't just for Mac OS and iOS. You can write Objective-C on Linux, BSD, even Windows! We'll show you some cool web sites and projects to check out that will enable you to take your code to other platforms.\nDuration: 11 mins.\n\nChapter 37. SUMMING UP\nIt's been long and exhausting, but also exciting! You made it to the end! Now get yourself a beer... settle in to the couch, and watch the summary. Why? Because if you do, a homeless kitten will be adopted. Ok, not really... an angel will get it's wings! Ok, not really that either... Because we recorded it, and it'll make us cry if you don't.\nDuration: 5 mins.\n\nextabit:\n\n]ul.to:"}
{"text": "This lesson looks at how to create a file and then read/write data to it. This has many practical applications from storing user settings between sessions to high score tracking. The sample stack we'll build together will be configured for the iPhone, but these principles will work for al...\n\nA very common task when writing a program is to get a list of files or folders and either display it for the user to choose one, or go through each file or folder and perform some action. This lesson shows some simple methods of listing and sorting files and gives some hints on the relevant Li...\n\nIn Part 1 of this lesson we looked at how to list files and folders in LiveCode. In this lesson we will extend on what we have already learned by using recursion. Recursion is simply the name given to the process where a handler or function calls itself."}
{"text": "Page\n\nUser\n\nSuggestions to Aspiring Writers for Magazine Articles About Python\n\nPython and Relational Databases\n\nTalk about the DB-API that Python has standardized on, and how easy it is to write conventional SQL. Then move into one of the ORMs for Python, perhaps SQLObject or SQLAlchemy. Discuss how data types are automatically converted, and how cross-platform the solution is. Highlight the different database engines supported, both open source and commercial.\n\nPython and Object Databases\n\nTalk about how dynamic languages make a good match for object databases, with seamless serialization. Provide an overview of how an object database works, but focus on the end-developer and not the underlying mechanisms. Cover how the databases retain transaction support, and to what degree they provide support for the principles of ACID. Discuss the popular ZODB, Durus and APE frameworks, their tradeoffs (e.g. read-mostly usage, transaction rates) and the fact that they can be used standalone without the baggage of Zope or Quixote. Cover their lack of granular security and user identities at the database API level.\n\nHandling Email with Python\n\nPerhaps as a two part article, cover the essentials of first parsing an incoming email and then generating an outgoing. Demonstrate how the email module makes it easy to handle multi-part email bodies and convert various character sets into unicode, which Python supports natively. Also cover how the email module supports the use of international message headers and handles their conversion between the 7-bit ASCII used on the wire. Show how the email module addresses the issue of date and addressee parsing. End with how the support of iterators makes it easy to walk over complex emails and touch upon the support added in Python 2.5 for writing email archives.\n\nImage Processing, Array Numerics and Python\n\nCombine the use of the Python Imaging Library (PIL) module and one of the numeric modules and demonstrate how to effectively process large arrays of data, using images as something non-scientists can follow. Cover the array module, its strengths and weaknesses and then move on to the numpy/numeric/scipy framework. Note that this article could also be written using the processing of audio data instead.\n\nFunctional Programming in Python\n\nProvide an overview with examples of the functional programming features of Python. Cover the lambda, map and reduce functions but move on to the new all(), any() and generator/coroutine support in Python 2.5. Discuss the broad support Python iterators and the functionality in the itertools and functools (new in Python 2.5) modules. Lightly contrast the capabilities with existing functional programming languages like Haskell.\n\nMixing Network Protocols in Python\n\nGradually assemble an example using the Twisted framework of how a single Python program can serve web pages as well as handle the telnet or imap/pop protocols. One idea is to create a telnet-based chat room, with the web page displaying a list of attendees and any icon/slogan they may have set on their avatar via the telnet interface. The Twisted framework is complex and powerful so the article needs to keep things simple in this introductory article.\n\nInteracting with Python at the Prompt\n\nIntroduce the read to the interactive nature of Python, not just the entering of expressions but use of the inspect module, how tracebacks are a programmer's friend and using the pprint module to display complex data structures.\n\nPackaging your Python Application for Distribution\n\nProvide an introduction to the various packaging options for Python. Start with simple package imports and use of the zipimport module, work up to the distutils module and provide a light introduction to eggs. Wrap up with mention of the cheeseshop, what it is for and how to use easy_install to cryptographically sign and upload your work. Discuss briefly dependency resolution and perhaps compare it all to the CPAN network. Focus on what is needed to package an application and not on the underlying egg magic. Act like the reader is someone new to Python who has been given the task of packaging an existing application he didn't write.\n\nTesting Your Python Program\n\nIntroduce the reader to the test frameworks of Python. Cover the test and unittest modules, to show the conventional ways of building tests. Then progress to the doctest module, a more Pythonic approach, including both tests in the doc strings as well as those in standalone text files. For ideas/examples, look at how Zope3 has used text tutorial documents with embedded doctest expressions to combine teaching and testing. Consult the handouts from the Agile Testing tutorial at PyCon 2006 for other ideas of what to cover.\n\nGoing International with Python\n\nIntroduce the reader to the comprehensive support Python has for unicode. Cover the various codecs and the unicodedata and stringprep modules. Demonstrate use of the locale and gettest modules. Do something with the unicode, not just discuss it in an abstract manner. Perhaps show off a simple web server delivering unicode or an email generator.\n\nWorking at the Prompt - Shell Utilities in Python\n\nReach out to the bash/awk/sed scripter. Start with the flexible parsing of command-line arguments we have in the getopt/optparse modules. Demonstrate line-by-line file processing, and cover the shutil and commands modules. For an advanced wrapup touch upon the curses module and how non-graphic apps can be quickly written in Python.\n\nProcessing Compressed Archives with Python\n\nPython has rich support for handling compressed files and archives. Demonstrate the gzip, zlib, bz2 modules for compressing single files and then advance to full archives, using the zipfile and tarfile. Wrap up with a demonstration of use, showing off the zipimport module.\n\nDebugging and Profiling Your Python Code\n\nTalk about the power of the Python debugger, along with the profiler module and the (new for Python 2.5) cProfiler module. Contrast both the short-term ability to break on flexible conditions with the ability to profile code over the long-term. Discuss code coverage functionality and end with mentions of some of the IDE environments for Python that make some of this even easier.\n\nWriting a Web Client with Python\n\nWalk the reader thru the creation of a program to fetch content from a website, starting with simple HTML text, adding basic/digest authentication, cookie support and SSL certificate checking. Also discuss having this program talk thru a web proxy ala SOCKS and briefly cover parsing the retrieved page using one of the DOM modules. This article would cover a lot of the API in the urllib2 module. Also show use of the robotparser module so that the client doesn't walk sites it should not.\n\nSystem Administration with Python\n\nHighlight the useful Windows system administration tasks that can be achieved through Python - registry editing etc.\n\nGetting Graphical with Python\n\nStart with the Python Imaging Library (PIL) introducing low-level graphic capabilities, then SDL and Pango/SVG. Continue moving up the spectrum thru OpenGL and into control of graphic applications such as Blender and GIMP. Also bring in several of the scientific graphing and visualization frameworks.\n\nMaking Things Add Up with Python\n\nAn odd topic perhaps, but it would be cool to cover the various ways that Python can represent numbers. Introduce the integer / long integer pair, how conversions are automatic and then roll in the decimal module. Step up then to the NumPy framework and how vast arrays can be efficiently handled in Python. Then cover the rational and units module for Python and end with an overview of one of the symbolic algebra modules for Python. An article for the language or math geek, to be sure.\n\nPyPI (Cheeseshop) Introduction\n\nIntroduce the PyPI catalog to users: how to search it, how to register your Python packages and upload files.\n\nNarrate how Python can interface a hardware device beyond the parallel and serial port and HID keyboard and joystick events. Ideally a USB IO device, either high level general purpose libraries from USB HID or bulk based IO devices to more complex driver and system interaction. Most noteworthy is how to handle device and data availability via a polled or event based management. LibUSB is a start...\n\nComplex Python Desktop Application IO\n\nExplore Python desktop application approaches that present a desktop user interface component while also carrying a server or persistent network connection, or interface to an IO device."}
{"text": "know those books at the back of your kindergarten class? Well, they're different from the books at the back of the kindergarten class next door! And you have to base what you read on the books that your class contains, right? Well so do developers! Think of your class as a Mac machine and the class next door as a Windows machine. The book selection is the API (Application programming interface) - basically a set of resources available for developers to use to build their games on the platform. Just like you have to model your reading habits around the book selection in your class, game developers have to model their game around the API, which is different on every OS! Now isn't it past your bedtime?\n\nOne thing that can be done is to create a generic wrapper around different APIs that do basically the same thing. So all you would have to do is instead of using system-specific API calls in the code, you call the wrapper functions. The wrapper then deals with the system-specific API.\n\nThis would mean that you can just recompile the main code base, and would only have to include a different wrapper library for the system you want to run on.\n\nYou can see a computer as a kind of city. Now every time you place a CD in your CD-drive, you make some of these people that live in this city to go to school. An OS can be seen as the language classes. Windows and Mac are actually totally different languages and we don't expect you to play a game where the rules are written in French, do we? We have to translate it in their language before they know how to play the game.\n\nI don't know about Mac, but I can give you an idea about what happens in general. All applications written require some sort of support from the operating system. For example, if an application wants to display a window, it has to ask the operating system to create a window for it. If the application needs to read the input from the keyboard or find out when the user moves the mouse, it needs the help of the OS. The way the application asks the OS to do some tasks is through what is called the operating system's API. The problem here is that different operating systems provide this 'help' differently and have different API. So, if the game wanted to show a window on Microsoft Windows, it has to make some function calls which won't work on Mac. Hence, to make the application show a window on Mac, different code has to be written. That is the main reason why games have to be modified to run on different operating systems.\n\nWhat about the code that doesn't depend on the OS specific APIs? That code doesn't cause the above problem and can be directly re-used in other operating systems. The physics engines for games fall into this category. Their job is to do background stuff which involves lot of mathematical calculations. So, when a game is released for both Mac and Windows, part of the code would be the same, but the OS specific parts will be different.\n\nThere is one way to fix this problem of re-writing parts of the code for different operating systems. The way is to write a wrapper API on top of the OS's API. This wrapper API provides the same mechanism to do tasks on all systems. You can look up GTK or Qt in case you are interested in this.\n\nBut there is one thing to remember - the above discussion is for the source code that is written by programmers. This code has to go through a phase called 'compilation' so that the game can actually run on an OS. The output from this compilation is different for different operating systems. That is why and EXE file will run on Windows, but not on Mac. So, have to compile the code differently for each of them, even if the source code is the same."}
{"text": "programming newbie\n\nHey I'm Steven I'm a total noob to programming and so far am struggling and don't like it at all. I have to use eclipse, blueJ, and greenfoot for my 2 programming classes. I am only taking these classes because they are required. Unfortunately I have no interest in programming what so ever. My interest lies in electronics. I'm here to try and get some help and work my way through these courses."}
{"text": "Different software's, including library software's, operating systems; programming languages like Java are available on the net for free. Please go through the following links for further information. Some are available on a CD-ROM with nominal cost. Downloads of few of them can also be made from the popular website"}
{"text": "One of the Best Programming Languages\n\nPython\n\nThe programming language Python enjoys ever increasing popularity.\nCompared to other popular programming languages such as C++ or Java\nit provides several advantages, which lead to higher productivity.\nThose include:\n\nconsiderably shorter programs\n\nvery good code readability because of consistent code formatting\n\npure Python programs run without or very little changes on all common operating systems\n\nhigher level data structures such as lists and dictionaries are built\ninto the language, therefore the are always available like strings or\nintegers, enabling very efficient data manipulation\n\nPython is very dynamic making very simple solutions possible that would\nrequire considerable effort in other languages\n\nLearning Python\n\nWe decided to choose Python for our courses, because it is an excellent\nlanguage for learning programming and at the same time it is a very effective\nand elegant language for advanced programmers as well.\n\nFrom our experience Python is the optimal language for many applications.\nIt can be easily extended with other languages such as C or even FORTRAN,\nbroadening the range of its application to nearly all fields of programming.\n\nAnother important reason is that Python programming is by many users of the\nlanguage considered fun. This connotation is rather rare in other languages.\nWe believe work that is fun leads to better results.\n\nThe judgment of nearly all that use Python for a while is unanimous:\n\"Programs in Python are better because considerably fewer lines of code are\nneeded than in other popular languages to get the same result.\nFurthermore, programs are much better readable even after some time.\""}
{"text": "The Book of Zope\n\nThe Book of Zope covers most of what a beginning Zope developer will need to know.\n\nZope, an open-source application server,\nhas become an increasingly popular choice for web development in\nthe last few years. Zope Corporation, formerly known as Digital\nCreations, has gone to great lengths to prove their commitment to\nthe Open Source community and has encouraged Python and Zope\ndevelopers around the world to spread the Zope gospel. The fact\nthat Zope is written mainly in Python has given a boost to the\nworldwide Python community, providing what may indeed be the\n\"killer app\" that brings new people into the Python fold.\n\nWhile Zope is an extremely powerful system for creating web\napplications, it also can be daunting to new users. Its paradigms\nare quite different from other web development systems, in no small\npart because of its heavy reliance on objects. If you are not\ncomfortable with classes, instances, instance variables, class\nmethods and instance methods, the learning curve for Zope is even\nsteeper than otherwise would be the case.\n\nWhile the Zope documentation has improved considerably over\nthe last few years, and while many\nzope.org members have\ncontributed their own documentation, tips, code and tutorials,\nthere is still a need for solid introductory texts for learning\nZope.\n\nThe Book of Zope aims to fill this\nniche. It was written by a number of programmers at Beehive, a web\ndevelopment company with offices in Berlin and Washington, DC. The\nbook is an English translation of the original German version and\nreads better than I expected for a translation.\n\nThe Book of Zope covers most of what a\nbeginning Zope developer will need to know. (While some of the\nchapters may be useful for designers and other nontechnical people,\nnonprogrammers probably will have a difficult time understanding\nmany of the items in it.) Initial chapters describe how to navigate\nZope's management screens, DTML (the server-side programming\nlanguage that can be used to implement functionality without having\nto write Python programs) and permissions with users and\nroles.\n\nThe book then begins to cover more complex ground, describing\nZClasses, SQL connectivity and Python scripts. There is even a\nchapter on Zope products, introducing the notion of a product and\nhow to write one of your own in Python.\n\nThe Book of Zope covers everything that\nyou might expect in a book of this type and does so thoroughly. But\nas I was reading it, I felt that something was missing: a sense of\nperspective, helping the fledgling Zope programmer to get \"Zope\nZen\", an intuitive sense for how Zope works. The book's text was\ninformative, and its numerous examples were clear, but I wish that\nthere had been more pauses to explain where each technology fits\ninto the scheme of things, rather than simply introducing\nthem.\n\nThe Book of Zope is a good complement to\non-line Zope documentation and probably will be most useful to\nprogrammers who want more direction after experimenting with Zope\non their own. Someone who is completely new to Zope might benefit\nfrom this book, but they may find themselves confused and\nfrustrated\nor"}
{"text": "Mark Lutz is a leading Python trainer, the author of Python's earliest and best-selling texts, and a pioneering figure in the Python community.\n\nMark is the author of the three O'Reilly books Learning Python, Programming Python, and\nPython Pocket Reference, all currently in 4th or 5th Editions. He has been using and promoting Python since 1992, started writing Python books in 1995, and began teaching Python classes in 1997. As of Spring 2013, Mark has instructed 260 Python training sessions, taught roughly 4,000 students in live classes, and written Python books which have sold 400,000 units and been translated to at least a dozen languages.\n\nTogether, his two decades of Python efforts have helped to establish it as one of the most widely-used programming languages in the world today. In addition, Mark has been in the software field for 30 years. He holds BS and MS degrees in computer science from the University of Wisconsin where he explored implementations of the Prolog language, and over his career has worked as a professional software developer on compilers, programming tools, scripting applications, and assorted client/server systems.\n\nMark Lutz, coauthor of the recently released Learning Python, 2nd Edition, offers tips, gleaned from his first-hand experience as a Python trainer, on the most\ncommon programming and coding mistakes that new Python programmers make. For seasoned Python programmers, Mark offers tips on working with Python's larger features, such as datatypes, functions, modules, and classes.\n\nHire Mark Lutz"}
{"text": "Before we get too heavily involved in the technical detail,\nwe'll summarise the steps you go through to build and play a game.\nThere are three major stages:\n\ncreating a (human-readable) text file which contains the game's source,\n\ncompiling that source file into (binary) Z-code held in a second file,\n\nexecuting the Z-code within a Z-machine interpreter in order to play the game.\n\nText editor\n\nYou need a text editing program (rather than a word processor)\nto create and modify your game file. Any editor which doesn't mess around\nwith the source will do; on Windows you can use the standard NotePad, though\nyou'll find it much more efficient to get hold of a proper programmers' editor\nlike TextPad.\nOn a Macintosh, BBEdit Lite\nis a good bet.\nMost people find that syntax colouring -- where the editor displays Inform keywords\nin one colour, strings in a second colour, comments in a third... --\nis helpful in minimising syntax errors.\nHere is\na comprehensive list of editors.\n\nThere's an ongoing debate about Inform IDEs (Integrated Development Environments)\nwhich -- theoretically -- ease the problems of building and debugging games\nby combining editor, compiler and interpreter into a single intelligent toolset.\nThere are currently a few IDEs under construction (see for example\nInform Explorer and\nIF-IDE),\nbut they have yet to prove themselves in the heat of battle.\n\nInform compiler and Library files\n\nThe compiler transforms Inform source games into Z-code,\nor (more often) explains that it is unable to do so because of\nthe errors in your program. It may also issue warnings: for example\nwhen you've created a variable but not used it, or when part of\nyour program can never be executed. Although warnings don't prevent the\nZ-code being generated, they suggest something isn't quite as you\nintended; it's good policy to resolve the situation rather than let\nthe warning recur. And it can reports loads of statistical and\nother data about your game.\n\nThe compiler is maintained by Graham Nelson. It's written in C,\nand Graham has taken great pains to make it portable.\nPortability means that the compiler can be made to run -- virtually unchanged --\non PCs, Apple Macs, UNIX boxes and a wide variety of other computing devices,\nand therefore that a given game will compile into identical Z-code\non all of those platforms. The fact that a game's Z-code is always the same,\nirrespective of the computer on which it originated, is one of\nInform's strengths.\n\nNot that you have to worry much about the compiler.\nA host of public-spirited souls have already got it working\non almost every conceivable platform, so all you\nneed do is download the appropriate ready-to-run version.\nSee Graham's Inform Downloads page\nor Jonadab's list.\n(You can also find the compiler's C source program via Graham's page,\nbut you're most unlikely to need it in that form.)\n\nYou also need to download the Library:\nPARSER.H, VERBLIB.H, GRAMMAR.H\nand a few other Inform source files which provide a basic framework for your game.\nThanks to the Library, you get a bare-bones environment in which your\nplayers can receive commands, move around, and interact with things.\nThe Inform program that you write then builds on this foundation,\nfleshing it out with your own rooms, objects and people.\n\nZ-code interpreter\n\nThe Z-machine is an imaginary computer which exists not as physical hardware,\nbut rather as a software interpreter able to read and execute Z-code instructions;\nit's an example of what are often known as Virtual Machines.\nAs with the Inform compiler, there are versions of the Z-machine\ninterpreter readily available for PCs, Macs and most other things besides.\nUnlike the compiler, the various interpreters aren't all based on a single\nprogram of Graham's (though they do all conform to a\nwell-defined standard\nin whose authorship he played a major part).\nStandardization means that any piece of Z-code, irrespective of where or how it was compiled,\nwill run on any Z-machine. (And, as a nice bonus, those same Z-machines will also\nrun any of the old Infocom games: This Is Not A Coincidence.)\n\nThe Z-code interpreter is primarily intended for playing Inform text adventure games\n(though as a general computing engine it can occasionally be seen employed for\nsome alternative purpose, commonly referred to as an 'abuse of the Z-machine').\nSo, it reads a Z-code file created by the compiler, and then displays the game's\ndescriptions and command prompts in a scrolling text window.\nThe only time that the interpreter normally writes to an output file is when creating a\ntranscript -- a copy of your commands and the game's responses.\n\nControlling the compiler\n\nThe operation of the compiler can be controlled in certain respects,\nusing mechanisms which are rather sparsely explained in the Designer's Manual.\nMore detail is available from the compiler's help, but people often forget\nto look there.\nHere's what the Windows compiler says;\ncompilers on other platforms may have differing rules for the handling of file names.\n\nGame sizes\n\nThe compiler is able to generate several flavours of Z-code,\nbroadly similar but matching different versions of Infocom's Z-machine\nas it evolved over time in the 1980s.\nOnly two of these are used nowadays -- Version 5 (the default) and\nVersion 8 -- and these are identical other than in the maximum supported game size.\nIn a Version 5 game, the Z-code is limited to 256K bytes (large enough\nfor most games), while the Version 8 limit is 512K bytes.\nThis trick is accomplished by using packed addressing --\nsee the later Numbers segment for more detail.\n\nYou use the compiler's v8 switch to generate Version 8 Z-code\nrather than the default Version 5 Z-code.\nDon't confuse this with the compiler's $small, $large and $huge\ncommands; these control how much memory is needed to compile the game,\nand are largely unrelated to the size of the game itself once compiled.\n(A game with lots of little objects may consume more compiler memory than\na game with a few large objects, even though the two games generate a similar\namount of Z-code.)\n\nGlulx\n\nThe reason that Z-code sets an absolute limit of 512K bytes on\na compiled game is that the Z-machine uses a 16-bit architecture.\nA word of 16 bits can address 64K memory locations; packed addressing\nstretches this to 256K or 512K locations, but that's as good as it gets.\nThe inability to create larger games, together with some more subtle memory\nlimitations plus the lack of sensible graphical and audio capabilities,\nhave contributed towards the development of a 32-bit Virtual Machine,\ncalled Glulx (don't ask). You can read about Glulx, and also\ndownload copies of the new compiler, Library and Glulxe interpreter,\nfrom Andrew Plotkin's comprehensive pages.\nThe nice thing is: the new compiler reads your existing Inform source files\nand generates either Z-code or Glulx code.\nHardly any changes to the games are needed -- see Zarf's\nInform guide for details.\nThere's lots more good stuff at Adam Cadre's\nGull introduction\n(whose first few pages provide some excellent background to Glulx and Inform),\nand at Marnie Parker's\nGlulx for Dunces.\n\nFootnote: A short evolutionary history\n\nI think it happened roughly like this:\n\nIn 1975, Will Crowther and Don Woods wrote the first text adventure\nin FORTRAN; it ran on mainframes and mini-computers.\n\nAt the MIT AI-Lab, Mark Blank, Tim Anderson et al played Adventure;\nthey were sure that if an adventure game could be written in FORTRAN,\na better one could be done in MDL (a Lisp-like language).\nThe result, around 1978, was Dungeon, (from which Bob Supnik at DEC\ncreated a FORTRAN version); the MDL original, however, was soon renamed Zork.\n\nSince Zork was an obvious success, its authors formed Infocom\nto address the home computer market. MDL being unavailable there,\nthey devised the similar but simpler ZORK Implementation Language (ZIL)\nin which to create their games, and the (virtual) Z-machine on which to run them.\nZork was divided into the Zork I, II and III we know today.\n\nEventually, Infocom went out of business. Activision is believed to possess\nthe ZIL source for Zork, Enchanter and all the other 30-some Infocom games,\nbut has never made it available. In any case, the ZIL compiler and details\nof Infocom's Z-machine have been lost.\n\nBy reverse-engineering the Z-code of the published Infocom games,\na group of dedicated hobbyists known as the Infocom Task Force (ITF) reconstructed\nthe specification of the original Z-machine.\nThis made it possible to write additional Z-machines (for example in Java and Perl),\nand therefore to play the old Infocom games on many more platforms.\n\nThere was, however, no way to write new Z-code until Graham Nelson\ndevised the Inform compiler. Inform programs probably bear little or no relationship\nto ZIL; that doesn't matter. What's significant is that Inform games compile into\nZ-code, and therefore run on all of those Z-machines.\n\nAnd now, Andrew Plotkin's Glulxe is a new VM, bringing many benefits to today's\ngame writers, but incompatible with the Z-machine. Its Glulx compiler reads Inform\nprograms, and produces code for either the Z-machine or for Glulxe. At this point,\ntherefore, the 20-year-old link back to Infocom's ZORK is finally broken."}
{"text": "Tools\n\n\"... Every in ...\"\n\nEvery infrastructure that underlies the three debuggers, and describe the implementation of the procedural debugger. We give our reasons for each of our main design decisions, and show how several of these decisions are rooted in our experience with the debugging of large programs working with large data structures. This ...\"\n\nThis Prolog backtracking. 1 Motivation In the current world of programming language development, an enormous amount of effort is going into developing new ways of expressing and manipulating data values (e.g., type theory, object-oriented theory, etc.) and very little effort is going towards incorporating richer control-flow constructs into modern languages. As evidence, note that CLU-style iterators have been well-understood for around 20 years [LSAS77] and yet they appear in no mainstream language. 1 Generators (iterators) and goal-directed expression evaluation are extremely powerful control-flow mechanisms for succinctly expressing operations that operate over a sequence of values. The Pr...\n\n\"... J a ...\"\n\nJ and produces constructs not expressible as Java code. The runtime system, written in Java, finds object-oriented programming a great advantage in implementing a dynamically typed language, with method calls replacing many conditional tests. An all-encompassing descriptor class supports values, references, and suspended operations. The procedure call interface is simple and incurs overhead for generator support only when actually needed. Performance is somewhat disappointing, and some limitations are annoying, but in general Java provides a good implementation platform. Keywords: Icon, Java, compilation, generators, object-oriented programming, virtual machine This is a preprint of an article ..."}
{"text": "Scratch/Lessons/Introduction\n\nScratch Introduction\n\nWelcome to learning about Scratch!\n\nWhen you first start Scratch, you will see something that looks like this:\n\nIt is important before you begin to understand some basic ideas about Scratch. Scratch is a very visual programming language, and is mainly concerned with two major elements: The stage and sprites (or actors) who perform on that stage.\n\nEach sprite (and the stage itself) has three major parts:\n\nscripts - this is how you tell the stage and sprites to \"do their stuff\"\n\ncostumes/backgrounds - these are images which are added to Scratch which allow you to see the sprites. Each sprite can have multiple costumes, allowing a sprite to change its appearance.\n\nsounds - Not only can sprites appear and change, but they can also \"speak\" and tell a story. This can also include sound effects and background noises, which can also appear on the stage as well.\n\nScripts are made up of graphical blocks that each look something like this:\n\nThere are nearly a hundred different kinds of blocks that you can use within your Scratch projects, and each one does something just a little bit different.\n\nLanguage Options\n\nIt should also be pointed out that Scratch is available in multiple written languages. If you click on this button:\n\nYou will see a list of 13 different languages like this:\n\nWhat is useful about this tool is that the text of the blocks for Scratch scripts will change if you select a different language. An example of the move block \"translated\" into German would look like this:\n\nScratch will also \"remember\" the language you select, so you do not need to select a new language each time you start Scratch. When Scratch projects are saved, they are not saved in a specific \"written\" language, but instead are saved as a \"move block\" or a \"say block\" and are \"translated\" into the language of the person using Scratch to see the script. This allows Scratch projects to be shared between people from different cultures and countries, and is one of the strengths of this computer language.\n\nExtra Help\n\nClicking on the \"Want Help?\" button will automatically open your default web browser to the Scratch website help pages. These include some quick reference guides available in Adobe Acrobat\u2122 format, some \"Scratch Cards\" which are small trading-card like short ideas on how to use Scratch, and some video tutorials on learning the basics about Scratch.\n\nSome of these files are included when you install the Scratch software on your computer, but others can only be downloaded from the main Scratch website."}
{"text": "Java (programming language).\nJavaA compiler is a computer program that transforms source code written in a programming language into another computer language...\n\ns, virtual machines, and class libraries were developed by Sun from 1995. As of May 2007, in compliance with the specifications of.\n\nHistoryPatrick Naughton is an American software developer, best known as being one of the original creators of the Java programming language.-Working for Sun:...\n\ninitiated the Java language project in June 1991. Java was originally designed for interactive television, but it was too advanced for the digital cable television industry at the time. The language was initially called Oak\n\nOak (programming language)\n\nOak was a programming language created by James Gosling in 1991, initially for Sun Microsystems set-top box project. The language later evolved to become Java.The name Oak was used by Gosling after an oak tree that stood outside his office.-History:...\n\nAn oak is a tree or shrub in the genus Quercus , of which about 600 species exist. \"Oak\" may also appear in the names of species in related genera, notably Lithocarpus...\n\nthat stood outside Gosling's office; it went by the name Green later, and was later renamed Java, from Java coffee, said to be consumed in large quantities by the language's creators. Gosling aimed to implement a\"Write once, run anywhere\" , or sometimes write once, run everywhere , is a slogan created by Sun Microsystems to illustrate the cross-platform benefits of the Java language. Ideally, this means Java can be developed on any device, compiled into a standard bytecode and be expected to run on any...\n\nIn computing, an applet is any small application that performs one specific task that runs within the scope of a larger program, often as a plug-in. An applet typically also refers to Java applets, i.e., programs written in the Java programming language that are included in a web page...\n\ns within web pages, and Java quickly became popular. With the advent of Java 2 (released initially as J2SE 1.2 in December 1998\u20131999), new versions had multiple configurations built for different types of platforms. For example, J2EE targeted enterprise applications and the greatly stripped-down version J2ME for mobile applications (Mobile Java). J2SE designated the Standard Edition. In 2006, for marketing purposes, Sun renamed new J2 versions asISO/IEC JTC 1 is Joint Technical Committee 1 of the International Organization for Standardization and the International Electrotechnical Commission . It deals with all matters of information technology....to formalize Java, but it soon withdrew from the process. Java remains Java Community Process or JCP, established in 1998, is a formalized process that allows interested parties to get involved in the definition of future versions and features of the Java platform....\n\n. At one time, Sun made most of its Java implementations available without charge, despite theirstatus. Sun generated revenue from Java through the selling of licenses for specialized products such as the Java Enterprise System. Sun distinguishes between its Software Development Kit (SDK)HotSpot is a Java virtual machine for desktops and servers, maintained and distributed by Oracle Corporation. It features techniques such as just-in-time compilation and adaptive optimization designed to improve performance.-History:...\n\n(a subset of the SDK); the primary distinction involves the JRE's lack of the compiler, utility programs, and header files.The GNU General Public License is the most widely used free software license, originally written by Richard Stallman for the GNU Project....\n\n(GPL). On May 8, 2007, Sun finished the process, making all of Java's core code available under/open-source distribution terms, aside from a small portion of code to which Sun did not hold the copyright.\n\nSun's vice-president Rich Green said that Sun's ideal role with regards to Java was as an \"evangelist.\" Following Oracle Corporation\n\n's acquisition of Sun Microsystems in 2009\u20132010, Oracle has described itself as the \"steward of Java technology with a relentless commitment to fostering a community of participation and transparency\". Java software runs on There are 930 million Java Runtime Environment downloads each year and 3 billions run Java. On April 2, 2010, James Gosling resigned from Oracle.\n\nPrinciples\n\nThere were five primary goals in the creation of the Java language:\n\nIt should be \"simple, object-oriented and familiar\"\n\nIt should be \"robust and secure\"\n\nIt should be \"architecture-neutral and portable\"\n\nIt should execute with \"high performance\"\n\nIt should be \"interpreted, threaded, and dynamic\"\n\nVersions\n\nMajor release versions of Java, along with their release dates:\n\nJDK 1.0 (January 23, 1996)\n\nJDK 1.1 (February 19, 1997)\n\nJ2SE 1.2 (December 8, 1998)\n\nJ2SE 1.3 (May 8, 2000)\n\nJ2SE 1.4 (February 6, 2002)\n\nJ2SE 5.0 (September 30, 2004)\n\nJava SE 6 (December 11, 2006)\n\nJava SE 7 (July 28, 2011)\n\nJava Platform\n\nOne characteristic of Java is portability, which means that computer programs written in the Java language must run similarly on any hardware/operating-system platform.\nThis is achieved by compiling the Java language code to an intermediate representation called Java bytecode\n\nJava bytecode. Java bytecode instructions are analogous to machine code, but are intended to be interpreted\n\nInterpreter (computing)\n\nIn computer science, an interpreter normally means a computer program that executes, i.e. performs, instructions written in a programming languageRE) installed on their own machine for standalone Java applications, or in a Web browser for Java applet\n\nApplet\n\nIn computing, an applet is any small application that performs one specific task that runs within the scope of a larger program, often as a plug-in. An applet typically also refers to Java applets, i.e., programs written in the Java programming language that are included in a web page...\n\ns.\n\nStandardized libraries provide a generic way to access host-specific features such as graphics, threadingA computer network, often simply referred to as a network, is a collection of hardware components and computers interconnected by communication channels that allow sharing of resources and information....\n\n.\n\nA major benefit of using bytecode is porting. However, the overhead of interpretation means that interpreted programs almost always run more slowly than programs compiled to native executables would. Just-in-Time compilers were introduced from an early stage that compile bytecodes to machine code during runtime, and Solaris. In the past Sun licensed Java to Microsoft but the license expired without renewal. Because Windows does not ship with a Java software platform, a network of third-party vendors and licensees develop them for Windows and other operating system/hardware platforms.\n\nSun's trademark license for usage of the Java brand insists that all implementations be \"compatible\". This resulted in a legal dispute with Microsoft\n\nMicrosoft\n\nMicrosoft Corporation is an American public multinational corporation headquartered in Redmond, Washington, USA that develops, manufactures, licenses, and supports a wide range of products and services predominantly related to computing through its various product divisions...\n\nafter Sun claimed that the Microsoft implementation did not support RMI\n\nThe Java Native Interface is a programming framework that enables Java code running in a Java Virtual Machine to call and to be called by native applications and libraries written in other languages such as C, C++ and assembly.-Purpose and features:JNI enables one to write native methods to...\n\nand had added platform-specific features of their own. Sun sued in 1997, and in 2001 won a settlement of US$20 million, as well as a court order enforcing the terms of the license from Sun. As a result, Microsoft no longer ships Java withcannot support Java applets without a third-party plugin. Sun, and others, have made available free Java run-time systems for those and other versions of Windows.strategy, and an even more rigorous validation is required to certify an implementation. This environment enables portable server-side applications, such as WebA servlet is a Java programming language class used to extend the capabilities of servers that host applications accessed via a request-response programming model. Although servlets can respond to any type of request, they are commonly used to extend the applications hosted by Web servers... Open Services Gateway initiative framework is a module system and service platform for the Java programming language that implements a complete and dynamic component model, something that does not exist in standalone Java/VM environments...\n\nGlassFish is an open source application server project started by Sun Microsystems for the Java EE platform and now sponsored by Oracle Corporation. The supported version is called Oracle GlassFish Server...\n\nproject, Sun is working to create a fully functional, unified open source\n\nOpen source\n\nThe term open source describes practices in production and development that promote access to the end product's source materials. Some consider open source a philosophy, others consider it a pragmatic methodology(commonly known as the JDK), which includes development tools such as the Java compiler\n\nJava compiler\n\nA Java compiler is a compiler for the Java programming language. The most common form of output from a Java compiler is Java class files containing platform-neutral Java bytecode....\n\nPerformance\n\nPrograms written in Java have a reputation for being slower and requiring more memory than those written in C\n\nC (programming language)\n\nC is a general-purpose computer programming language developed between 1969 and 1973 by Dennis Ritchie at the Bell Telephone Laboratories for use with the Unix operating system....\n\nIn computing, just-in-time compilation , also known as dynamic translation, is a method to improve the runtime performance of computer programs. Historically, computer programs had two modes of runtime operation, either interpreted or static compilation...HotSpot is a Java virtual machine for desktops and servers, maintained and distributed by Oracle Corporation. It features techniques such as just-in-time compilation and adaptive optimization designed to improve performance.-History:...\n\nbecoming the default for Sun's JVM in 2000. Currently (November 2011), Java 2.0 code has approximately half the performance of C code.\n\nSome platforms offer direct hardware support for Java; there are microcontrollers that can run Java in hardware instead of a software JVM, and ARM\n\nARM\n\nAn arm is an upper limb of the body.Arm may also refer to:-Geography:* Arm , a narrow stretch of a larger body of water** Canal arm, a subsidiary branch of a canal or inland waterway** Distributary or arm, a subsidiary branch of a river...\n\nbased processors can have hardware support for executing Java bytecode through its Jazelle\n\nJazelle\n\nJazelle DBX allows some ARM processors to execute Java bytecode in hardware as a third execution state alongside the existing ARM and Thumb modes. Jazelle functionality was specified in the ARMv5TEJ architecture and the first processor with Jazelle technology was the ARM926EJ-S...\n\noption.\n\nAutomatic memory management\n\nIn computer science, garbage collection is a form of automatic memory management. The garbage collector, or just collector, attempts to reclaim garbage, or memory occupied by objects that are no longer in use by the program.... The programmer determines when objects are created, and the Java runtime is responsible for recovering the memory once objects are no longer in use. Once no references to an object remain, the unreachable memory\n\nUnreachable memory\n\nIn computer science, unreachable memory is a block of memory allocated dynamically where the program that allocated the memory no longer has any reachable pointer that refers to it. Similarly, an unreachable object is a dynamically allocated object that has no reachable reference to it...\n\nbecomes eligible to be freed automatically by the garbage collector. Something similar tomay still occur if a programmer's code holds a reference to an object that is no longer needed, typically when objects that are no longer needed are stored in containers that are still in use. If methods for a nonexistent object are called, a \"null pointer exception\" is thrown.\n\nOne of the ideas behind Java's automatic memory management model is that programmers can be spared the burden of having to perform manual memory management. In some languages, memory for the creation of objects is implicitly allocated on the stack\n\nStack (data structure), or explicitly allocated and deallocated from the heap. In the latter case the responsibility of managing memory resides with the programmer. If the program does not deallocate an object,occurs. If the program attempts to access or deallocate memory that has already been deallocated, the result is undefined and difficult to predict, and the program is likely to become unstable and/or crash. This can be partially remedied by the use of smart pointer\n\nSmart pointer\n\nIn computer science, a smart pointer is an abstract data type that simulates a pointer while providing additional features, such as automatic garbage collection or bounds checking. These additional features are intended to reduce bugs caused by the misuse of pointers while retaining efficiency...\n\ns, but these add overhead and complexity. Note that garbage collection does not prevent \"logical\" memory leaks, i.e. those where the memory is still referenced but never used.\n\nGarbage collection may happen at any time. Ideally, it will occur when a program is idle. It is guaranteed to be triggered if there is insufficient free memory on the heap to allocate a new object; this can cause a program to stall momentarily. Explicit memory management is not possible in Java.\n\nJava does not support C/C++ style pointer arithmetic, where object addresses and unsigned integers (usually long integers) can be used interchangeably. This allows the garbage collector to relocate referenced objects and ensures type safety and securityand some other object-oriented languages, variables of Java's primitive data types are not objects. Values of primitive types are either stored directly in fields (for objects) or on the stack\n\nStack-based memory allocation\n\nStacks in computing architectures are regions of memory where data is added or removed in a last-in-first-out manner.In most modern computer systems, each thread has a reserved region of memory referred to as its stack. When a function executes, it may add some of its state data to the top of the...\n\n(for methods) rather than on the heap, as commonly true for objects (but see Escape analysis\n\nEscape analysis\n\nIn programming language compiler optimization theory, escape analysis is a method for determining the dynamic scope of pointers. It is related to pointer analysis and shape analysis....\n\n). This was a conscious decision by Java's designers for performance reasons. Because of this, Java was not considered to be a pure object-oriented programming language. However, as of Java 5.0, autoboxing enables programmers to proceed as if primitive types were instances of their wrapper class.\n\nThe Concurrent Mark Sweep Garbage collector is the default garbage collector that is delivered with Java 1.4.1, 5, 6 and 7. It is also known as the CMS Garbage collector....\n\n, also known as the CMS Garbage Collector. However, there are also several other garbage collectors that can be used to manage the Heap. For 90% of applications in Java, the CMS Garbage Collector is good enough.\n\nSyntax. Unlike C++, which combines the syntax for structured, generic, and object-oriented programming, Java was built almost exclusively as an object-oriented language. All code is written inside a class, and everything is an object, with the exception of the primitive data types (integers, floating-point numbers, boolean values, and characters), which are not classes for performance reasons.\n\nProgramming languages typically support a set of operators: operations which differ from the language's functions in calling syntax and/or argument passing mode. Common examples that differ by syntax are mathematical arithmetic operations, e.g...\n\nIn object oriented computer programming, operator overloading\u2014less commonly known as operator ad-hoc polymorphism\u2014is a specific case of polymorphism, where different operators have different implementations depending on their arguments...\n\nMultiple inheritance is a feature of some object-oriented computer programming languages in which a class can inherit behaviors and features from more than one superclass....\n\nfor classes. This simplifies the language and aids in preventing potential errors and anti-pattern\n\nAnti-pattern\n\nIn software engineering, an anti-pattern is a pattern that may be commonly used but is ineffective and/or counterproductive in practice.The term was coined in 1995 by Andrew Koenig,...\n\ndesign.\n\nJava uses similar commenting methods to C++. There are three different styles of comments: a single line style marked with two slashes (//), a multiple line style opened with /* and closed with */, and the Javcommenting style opened with /** and closed with */. The Javadoc style of commenting allows the user to run the Javadoc executable to compile documentation for the program.\n\nExample:\n\n// This is an example of a single line comment using two slashes\n\n/* This is an example of a multiple line comment using the slash and asterisk.\nThis type of comment can be used to hold a lot of information or deactivate\ncode but it is very important to remember to close the comment. */\n\n/**\n* This is an example of a Javadoc comment; Javadoc can compile documentation\n* from this text.\n*/\n\nHello worldThe Hello world program is a simple computer program that prints the string \"Hello World\". It is typically one of the simplest programs possible in almost all computer languages, and often used as first program to demonstrate a programming language. As such it can be used to quickly compare syntax...\n\n.\n\nSource files must be named after the public class they contain, appending the suffix .java, for example, HelloWorldApp.java. It must first be compiled into bytecode, using a Java compiler\n\nJava compiler\n\nA Java compiler is a compiler for the Java programming language. The most common form of output from a Java compiler is Java class files containing platform-neutral Java bytecode...\n\n, producing a file named HelloWorldApp.class. Only then can it be executed, or 'launched'. The Java source file may only contain one public class but can contain multiple classes with less than public access and any number of public inner class\n\nInner class\n\nIn object-oriented programming , an inner class or nested class is a class declared entirely within the body of another class or interface. It is distinguished from a subclass.-Overview:...\n\nes.\n\nA class that is not declared public may be stored in any .java file. The compiler will generate a class file for each class defined in the source file. The name of the class file is the name of the class, with .class appended. For class file generation, anonymous classes are treated as if their name were the concatenation of the name of their enclosing class, a $, and an integer.\n\nThe keywordpublic denotes that a method can be called from code in other classes, or that a class may be used by classes outside the class hierarchy. The class hierarchy is related to the name of the directory in which the .java file is located.\n\nThe keyword static in front of a method indicates a static method, which is associated only with the class and not with any specific instance of that class. Only static methods can be invoked without a reference to an object. Static methods cannot access any class members that are not also static.\n\nThe keyword void indicates that the main method does not return any value to the caller. If a Java program is to exit with an error code, it must call System.exit explicitly.\n\nThe method name \"main\" is not a keyword in the Java language. It is simply the name of the method the Java launcher calls to pass control to the program. Java classes that run in managed environments such as applets and Enterprise JavaBean\n\nEnterprise JavaBeando not use or need a main method. A Java program may contain multiple classes that have main methods, which means that the VM needs to be explicitly told which class to launch from.. By convention, it is referenced as args although any other legal identifier name can be used. Since Java 5, the main method can also use variable arguments\n\nVariadic function\n\nIn computer programming, a variadic function is a function of indefinite arity, i.e., one which accepts a variable number of arguments. Support for variadic functions differs widely among programming languages....\n\n, in the form of public static void main(String... args), allowing the main method to be invoked with an arbitrary number of String arguments. The effect of this alternate declaration is semantically identical (the args parameter is still an array of String objects), but allows an alternative syntax for creating and passing the array.\n\nThe Java launcher launches Java by loading a given class (specified on the command line or as an attribute in a JAR\n\nJAR (file format)) and starting its public static void main(String[]) method. Stand-alone programs must declare this method explicitly. The String[] args parameter is containing any arguments passed to the class. The parameters to main are often passed by means of a command line\n\nCommand-line interface\n\nA command-line interface is a mechanism for interacting with a computer operating system or software by typing commands to perform specific tasks...\n\n.\n\nPrinting is part of a Java standard library: The class defines a public static field called . The out object is an instance of the class and provides many methods for printing data to standard out\n\nStandard streams\n\nIn Unix and Unix-like operating systems , as well as certain programming language interfaces, the standard streams are preconnected input and output channels between a computer program and its environment when it begins execution...\n\n, including which also appends a new line to the passed string.\n\nThe string \"Hello, world!\" is automatically converted to a String object by the compiler.\n\nA more comprehensive example\n\n// OddEven.java\nimport javax.swing.JOptionPane;\n\npublic class OddEven {\n// \"input\" is the number that the user gives to the computer\nprivate int input; // a whole number(\"int\" means integer)\n\n/*\n* This is the constructor method. It gets called when an object of the OddEven type\n* is being created.\n*/\npublic OddEven {\n/*\n* In most Java programs constructors can initialize objects with default values, or create\n* other objects that this object might use to perform its functions. In some Java programs, the\n* constructor may simply be an empty function if nothing needs to be initialized prior to the\n* functioning of the object. In this program's case, an empty constructor would suffice, even if\n* it is empty. A constructor must exist, however if the user doesn't put one in then the compiler\n* will create an empty one.\n*/\n}\n\n// This is the main method. It gets called when this class is run through a Java interpreter.\npublic static void main(String[] args) {\n/*\n* This line of code creates a new instance of this class called \"number\" (also known as an\n* Object) and initializes it by calling the constructor. The next line of code calls\n* the \"showDialog\" method, which brings up a prompt to ask you for a number\n*/\nOddEven number = new OddEven;\nnumber.showDialog;\n}\n\npublic void showDialog {\n/*\n* \"try\" makes sure nothing goes wrong. If something does,\n* the interpreter skips to \"catch\" to see what it should do.\n*/\ntry {\n/*\n* The code below brings up a JOptionPane, which is a dialog box\n* The String returned by the \"showInputDialog\" method is converted into\n* an integer, making the program treat it as a number instead of a word.\n* After that, this method calls a second method, calculate that will\n* display either \"Even\" or \"Odd.\"\n*/\ninput = Integer.parseInt(JOptionPane.showInputDialog(\"Please Enter A Number\"));\ncalculate;\n} catch (NumberFormatException e) {\n/*\n* Getting in the catch block means that there was a problem with the format of\n* the number. Probably some letters were typed in instead of a number.\n*/\nSystem.err.println(\"ERROR: Invalid input. Please type in a numerical value.\");\n}\n}of type int named input. Every instance of the OddEven class has its own copy of the input field. The private declaration means that no other class can access (read or write) the input field.\n\nOddEven is a public constructor. Constructors have the same name as the enclosing class they are declared in, and unlike a method, have no return type\n\nReturn type\n\nIn computer programming, the return type defines and constrains the data type of value returned from a method or function...\n\nIn computer science, an object is any entity that can be manipulated by the commands of a programming language, such as a value, variable, function, or data structure...\n\nthat is a newly created instance of the class.\n\nThe calculate method is declared without the static keyword. This means that the method is invoked using a specific instance of the OddEven class. (Theused to invoke the method is passed as an undeclared parameter of type OddEven named this\n\nThis (computer science)\n\nIn many object-oriented programming languages, this is a keyword that is used in instance methods to refer to the object on which they are working. C++ and languages which derive in style from it generally use this...\n\n.) The method tests the expression input % 2 0 using the if keyword to see if the remainder of dividing the input field belonging to the instance of the class by two is zero. If this expression is true, then it prints Even; if this expression is false it prints Odd. (The input field can be equivalently accessed as this.input, which explicitly uses the undeclared this parameter.)variable in the main method named number. This variable can hold a reference to an object of type OddEven. The declaration initializes number by first creating an instance of the OddEven class, using the new keyword and the OddEven constructor, and then assigning this instance to the variable.\n\nThe statement number.showDialog; calls the calculate method. The instance of OddEven object referenced by the numberlocal variable\n\nLocal variable\n\nIn computer science, a local variable is a variable that is given local scope. Such a variable is accessible only from the function or block in which it is declared. In programming languages with only two levels of visibility, local variables are contrasted with global variables...\n\nis used to invoke the method and passed as the undeclared this parameter to the calculate method.\n\ninput = Integer.parseInt(JOptionPane.showInputDialog(\"Please Enter A Number\")); is a statement that converts the type of String to the primitive data type int by using a utility function in the primitive wrapper class\n\nPrimitive wrapper class\n\nA primitive wrapper class in the Java programming language is one of eight classes provided in the package to provide object methods for the eight primitive types. All of the primitive wrapper classes in Java are immutable...\n\nInteger.\n\nApplet\n\nJava applets are programs that are embedded in other applications, typically in a Web page displayed in a Web Java compiler is a compiler for the Java programming language. The most common form of output from a Java compiler is Java class files containing platform-neutral Java bytecode...\n\nto include the and classes in the compilation. The import statement allows these classes to be referenced in theusing the simple class name (i.e. JApplet) instead of the fully qualified class name (i.e. javax.swing.JApplet).\n\nThe Hello class extends (subclasses) the JApplet (Java Applet) class; the JApplet class provides the framework for the host application to display and control the lifecycle\n\nObject lifetimeof the applet. The JApplet class is a JComponent (Java Graphical Component) which provides the applet with the capability to display a graphical user interface\n\nGraphical user interface\n\nIn computing, a graphical user interface is a type of user interface that allows users to interact with electronic devices with images rather than text commands. GUIs can be used in computers, hand-held devices such as MP3 players, portable media players or gaming devices, household appliances and...\n\nIn computer programming, event-driven programming or event-based programming is a programming paradigm in which the flow of the program is determined by events\u2014i.e., sensor outputs or user actions or messages from other programs or threads.Event-driven programming can also be defined as an...\n\n.\n\nThe Hello class overrides the method (additionally indicated with the annotation\n\nJava annotation\n\nAn annotation, in the Java computer programming language, is a special form of syntactic metadata that can be added to Java source code. Classes, methods, variables, parameters and packages may be annotated...\n\n, supported as of JDK 1.5, Override) inherited from the superclass to provide the code to display the applet. The paintComponent method is passed a Graphics object that contains the graphic context used to display the applet. The paintComponent method calls the graphic context method to display the \"Hello, world!\" string at aoffset of (65, 95) from the upper-left corner in the applet's display.. The applet tag has three attributes set: code=\"Hello\" specifies the name of the JApplet class and width=\"200\" height=\"200\" sets the pixel width and height of the applet. Applets may also be embedded in HTML using either the object or embed element, although support for these elements by Web browsers is inconsistent. However, the applet tag is deprecated, so the object tag is preferred where supported.\n\nThe host application, typically a Web browser, instantiates the Hello applet and creates an for the applet. Once the applet has initialized itself, it is added to the AWT display hierarchy. The paintComponent method is called bywhenever the display needs the applet to draw itself.\n\nServlet\n\nJava Servlet technology provides Web developers with a simple, consistent mechanism for extending the functionality of a Web server and for accessing existing business systems. Servlets are server-side\n\nServer-side. A servlet can almost be thought of as an applet that runs on the server side\u2014without a face.\n\nThe import statements direct the Java compiler to include all of the public classes and interfaces\n\nInterface (Java)\n\nAn interface in the Java programming language is an abstract type that is used to specify an interface that classes must implement. Interfaces are declared using the interface keyword, and may only contain method signature and constant declarations...\n\nfrom the and packages in the compilation.\n\nThe Hello class extends the class; the GenericServlet class provides the interface for theto forward requests to the servlet and control the servlet's lifecycle.\n\nAn interface in the Java programming language is an abstract type that is used to specify an interface that classes must implement. Interfaces are declared using the interface keyword, and may only contain method signature and constant declarations...\n\nto provide the code for the service request handler. The service method is passed a object that contains the request from the client and a object used to create the response returned to the client. The service method declares that it throws the exceptions\n\nException handling\n\nException handling is a programming language construct or computer hardware mechanism designed to handle the occurrence of exceptions, special conditions that change the normal flow of program execution....\n\nMultipurpose Internet Mail Extensions is an Internet standard that extends the format of email to support:* Text in character sets other than ASCII* Non-text attachments* Message bodies with multiple parts...\n\ncontent type of the returned data to \"text/html\". The method in the response returns a object that is used to write the data that is sent to the client. The method is called to write the \"Hello, world!\" string to the response and then the method is called to close the print writer, which causes the data that has been written to the stream to be returned to the client.\n\nJavaServer PagesA.Delimiters represent...\n\ns <% and %>. A JSP is compiled to a Java servlet, a Java application in its own right, the first time it is accessed. After that, the generated servlet creates the responsequa is the GUI and primary visual theme of Apple Inc.'s Mac OS X operating system. It is based around the theme of water, as its name suggests, with droplet-like elements and liberal use of translucency and reflection effects...\n\nMac OS X is a series of Unix-based operating systems and graphical user interfaces developed, marketed, and sold by Apple Inc. Since 2002, has been included with all new Macintosh computer systems...\n\n. Where prior implementations of these looks and feels may have been considered lacking, Swing in Java SE 6 addresses this problem by using more native GUI widget drawing routines of the underlying platforms.\n\nThis example Swing application creates a single window with \"Hello, world!\" inside:\n\nIn computing, the title bar consists of that part of a window where the title of the window appears. Most graphical operating systems and window managers position the title bar at the top of the application window as a horizontal bar....\n\nand a close control.\n\nThe Hello constructor initializes the frame by first calling the superclass constructor, passing the parameter \"hello\", which is used as the window's title. It then calls the method inherited from JFrame to set the default operation when the close control on the title bar is selected to \u2014 this causes the JFrame to be disposed of when the frame is closed (as opposed to merely hidden), which allows the JVM to exit and the program to terminate. Next, a is created for the string \"Hello, world!\" and the method inherited from the superclass is called to add the label to the frame. The method inherited from the superclass is called to size the window and lay out its contents.\n\nThe main method is called by the JVM when the program starts. It instantiates\n\nObject (computer science)\n\nIn computer science, an object is any entity that can be manipulated by the commands of a programming language, such as a value, variable, function, or data structure...\n\na new Hello frame and causes it to be displayed by calling the method inherited from the superclass with the boolean parameter true. Once the frame is displayed, exiting the main method does not cause the program to terminate becauseremains active until all of the Swing top-level windows have been disposed.\n\nGenerics\n\nIn a broad definition, generic programming is a style of computer programming in which algorithms are written in terms of to-be-specified-later types that are then instantiated when needed for specific types provided as parameters...\n\nwere added to the Java language, as part of J2SE 5.0. Prior to the introduction of generics, each variable declaration had to be of a specific type. For container classes, for example, this is a problem because there is no easy way to create a container that accepts only specific types of objects. Either the container operates on all subtypes of a class or interface, usually Object, or a different container class has to be created for each contained class. Generics allow compile-time type checking without having to create a large number of container classes, each containing almost identical code.\n\nCriticism\n\nA number of criticisms have been leveled at Java for various design choices in the language and platform. Such criticisms include the implementation of generics, the handling of unsigned numbers, the implementation of floating-point arithmetic, and security vulnerabilities.\n\nClass libraries\n\nThe Java Class Library is a set of dynamically loadable libraries that Java applications can call at run time. Because the Java Platform is not dependent on any specific operating system, applications cannot rely on any of the existing libraries...\n\nBytecode, also known as p-code , is a term which has been used to denote various forms of instruction sets designed for efficient execution by a software interpreter as well as being suitable for further compilation into machine codedeveloped by the JRE implementor to support application development in Java. Examples of these libraries are: tree structure is a way of representing the hierarchical nature of a structure in a graphical form. It is named a \"tree structure\" because the classic representation resembles a tree, even though the chart is generally upside down compared to an actual tree, with the \"root\" at the top and the...\n\nIn computer science, a set is an abstract data structure that can store certain values, without any particular order, and no repeated values. It is a computer implementation of the mathematical concept of a finite set... DataBase Connectivity, commonly referred to as JDBC, is an API for the Java programming language that defines how a client may access a database. It provides methods for querying and updating data in a database. JDBC is oriented towards relational databases...\n\nThe Java Naming and Directory Interface is a Java API for a directory service that allows Java software clients to discover and look up data and objects via a name. Like all Java APIs that interface with host systems, JNDI is independent of the underlying implementation...Java Management Extensions is a Java technology that supplies tools for managing and monitoring applications, system objects, devices and service oriented networks. Those resources are represented by objects called MBeansThe term native mode or native code is used in computing in two related senses.*to describe something running on a computer natively or in native mode meaning that it is running without any external support as contrasted to running in emulation....components, the means for laying out those components and the means for handling events from those componentsVM) that is the means by which the byte codes of the Java libraries and third party applications are executed\n\nA Java applet is an applet delivered to users in the form of Java bytecode. Java applets can run in a Web browser using a Java Virtual Machine , or in Sun's AppletViewer, a stand-alone tool for testing appletsDocumentationSun Microsystems, Inc. was a company that sold :computers, computer components, :computer software, and :information technology services. Sun was founded on February 24, 1982...\n\n, used by many Java developers. It provides developers with an organized system for documenting their code. Javadoc comments have an extra asterisk at the beginning, i.e. the tags are /** and */, whereas the normal multi-line comment tags comments in Java and C\n\nC (programming language)\n\nC is a general-purpose computer programming language developed between 1969 and 1973 by Dennis Ritchie at the Bell Telephone Laboratories for use with the Unix operating system....\n\nare set off with /* and */.\n\nEditions\n\nSun has defined and supports four editions of Java targeting different application environments and segmented many of its APIs\n\nApplication programming interface\n\nAn application programming interface is a source code based specification intended to be used as an interface by software components to communicate with each otherAn interface in the Java programming language is an abstract type that is used to specify an interface that classes must implement. Interfaces are declared using the interface keyword, and may only contain method signature and constant declarations...\n\nException handling is a programming language construct or computer hardware mechanism designed to handle the occurrence of exceptions, special conditions that change the normal flow of program execution....\n\n. Refer to the separate platforms for a description of the packages available.\n\nThe set of APIs is controlled by Sun Microsystems in cooperation with others throughprogram. Companies or individuals participating in this process can influence the design and development of the APIs. This process has been a subject of controversy.\n\nSee also\n\nProgramming languages are used for controlling the behavior of a machine . Like natural languages, programming languages conform to rules for syntax and semantics.There are thousands of programming languages and new ones are created every year...\n\nThis is a comparison of the Java programming language with the C++ programming language.- Design aims :The differences between the C++ and Java programming languages can be traced to their heritage, as they have different design goals....The Javapedia project was launched in June 2003 during the JavaOne developer conference. It is part of . The website is promoted by Sun Microsystems as the central meeting place for the Java community...."}
{"text": "All Titles\n\nBeginning C# 2008: From Novice to Professional, Second Edition is written to teach you how to use the C# programming language to solve problems. From the earliest chapters and the first introductory concepts, you'll be looking at real-world programming challenges and learning how C# can be used to overcome themThe most up-to-date and comprehensive introductory ASP.NET book you'll find on any shelf, Beginning ASP.NET 4 in C# 2010 guides you through Microsoft's latest technology for building dynamic web sites.\n\nThis long-awaited title provides a clear introduction to game programming for you, C# programmers! Microsoft insiders have written an easy-to-read guide, so you can start programming games quickly. This book even includes an introduction to Managed DirectX 9, and other advanced .NET features, like animation and sounds."}
{"text": "The central concept of Modula-2 is the module, which may be used to encapsulate a set of related subprograms and data structures, and restrict their visibility from other portions of the program. Modula-2 programs are made up of two parts: a definition module, the interface portion, which contains only those parts of the subsystem that are visible to other modules, and an implementation module, which contains the working code that is internal to the module.\n\nAlthough Modula-2 is by far the best-known and most widely used variant, there are several related languages: the original Modula, Modula-2+, Modula-2*, Modula-3, Oberon, Oberon-2, and a number of others. These are not \"later versions\" or \"replacements\" for Modula-2, they are different languages with different purposes, with strengths and weaknesses of their own. Along with C and Ada, Modula-2 is often regarded as one of the three \"modern\" programming languages. Of the three, Modula-2 is the smallest and the easiest to read.\n\nModula-2 was developed as the system language for the Lilith[?] workstation, and formed the basis of Oberon. Most current programming languages have adopted many of the features of Modula-2."}
{"text": "**Please note that this feature contains code that your web browser may try to run.\n\nThe promise of the Raspberry Pi sub-\u00a330 microcomputer is that it will usher in a new age of computer education not seen since the home-computing boom of the 1980s. If you followed our introduction to the Raspberry Pi last issue, you will now have a working computer connected to a keyboard, mouse, network and monitor or TV \u2013 but where do you go from there?\n\nIn this project, we will explain how to program a game for the Pi. Do not worry if you have absolutely no programming experience \u2013 we'll be walking through each step in a simple, plain-English style.\n\nGetting started with Python The Raspberry Pi Foundation, the organisation responsible for the Raspberry Pi, has chosen a computer programming language called Python to be its primary focus. It is this language, named after Monty Python's Flying Circus, that we'll use to write a version of the unending food-munching, tail-lengthening Snake game, popularised by Nokia phones.\n\nPython is a powerful programming language, but it is also designed to be as easy as possible to learn. It is also where the Raspberry Pi gets the second part of its name \u2013 Python shortened to Pi.\n\nThe Raspberry Pi Foundation recommends using Raspbian for an operating system. This comes with several software packages already installed \u2013 including Python and Pygame, a Python add-on that adds the relevant tools for writing games.\n\nIdle To write the required code, we will use a tool called Idle \u2013 named after Monty Python member Eric Idle \u2013 that is included in the Raspbian operating system.\n\nTo load Idle, double-click the icon on the Raspbian desktop. If two Idle icons are visible, don't worry. The first, labelled 'Idle', is the one to double-click; the second, 'Idle 3', is a special tool for programming in the latest version of Python \u2013 it includes features not needed for now, so ignore it.\n\nIdle has two main parts: an interactive portion, which operates a bit like a super-powerful calculator and is called the 'shell', and an editing portion. Having double-clicked the Idle icon, the shell appears. Test this by typing in a simple sum, such as 1+2, and pressing the Enter key \u2013 the answer 3 should appear.\n\nThe shell is useful for trying out simple commands, but not for more detailed work. Click the File menu and choose New Window to open an editing window; this is like a text editor or word processor. Multiple lines can be typed in this window, and pressing Enter inserts a new line beneath the text cursor (rather than immediately executing the command, as with the shell).\n\nTake a moment to click the File menu in the editor window and then choose Save As. In the box that appears, type raspberrysnake.py as the file name and click Save. As you work, periodically return to the File menu and click Save; this ensures that you will not lose too much work if the Pi experiences a power cut.\n\nStart writing code Programming a game is like writing a story \u2013 it needs a beginning, a middle and an end, and everything needs to occur in a specific order so that the reader does not become confused. Here, the reader is the Raspberry Pi and the story is a series of instructions.\n\nTo start the game's story, certain extras are required to extend the capabilities of the Python programming language. These packages, known as modules, include the Pygame add-on described earlier as well as tools for producing random numbers, measuring time and controlling the Python system"}
{"text": "Web Designers: PERL\n\nPERL Programmers and Designers\n\nPerl is a dynamic programming language created by Larry Wall and first released in 1987. Perl borrows features from a variety of other languages including C, shell scripting (sh), AWK, sed and Lisp.[1]\nPerl widely adopted for its strengths in text processing and lack of the arbitrary limitations of many scripting languages at the time.["}
{"text": "I'm a 14 year old boy and its summer so i have time to dedicate to start learning a program language. I have basically NO other experience other than HTML. I have a windows 7 computer so Objective C is out. Theres java and c++ that are my main choices but if you can sugjest another one that you think will be good for my situation. If your avaliable for email support please leave your email in your answer. thanks in Advance.\n\nWhen you mount the VS2010Express1.iso file, it will either autorun the installation, or you can start the setup.exe manually.\n\nNow that it is installed, you can go to Start, All Programs, Microsoft Visual Studio 2010 Express and see Microsoft Visual C++, Visual C#, Visual Basic, and Visual Web Dev.\n\nAfter you have done this, if you would like some starter assistance on writing some software with these tools, let me know. Also, if you are a student, you can participate in Microsoft's Dreamspark program and get the full tools for Absolutely Free.\n\nLet me just state, I am NOT a Microsoft fan boy, but this is a easy, free way to start learning how to write software.\n\nPost a response and give me a thumbs up if you want to learn more about writing software with these tools.\n\nPost a response also, if you would like to learn about how to develop software with other platforms (Ubuntu) or for other devices (iPhone, Android, Microsoft) and let me know.\n\nFYI: When I was 13-14, I wrote my first software on a TI-994A so believe me, you got it easy!\nThe medium to save information was a cassette tape which accoustically connected to a 300 baud (or 110 baud modem), and saved the data to the tape. -- I'm not kidding :)\n\nHere is your Ubuntu 10.04 LTS Free Software Development Solution.\nI did this straight from an Ubuntu clean install so it should work for you.\n\nThe solution I choose to first tell you about was Mono and MonoDevelop.\nThe solution is free and works on Linux, Windows and Mac OSX and supports C#, Visual Basic.Net, C/C++, Vala and Boo in an integrated development environment.\n\nIf an IDE comes up, you are done, but it probably won't and rather should say:\nTo install monodevelop, type sudo apt-get install monodevelop\n\nAnd so what you should do is\n\ntype: sudo apt-get install monodevelop\n\nThis command will automatically install the entire monodevelop application for you. It will take a little while\n\nWhen it is done, you can just type: monodevelop\nfrom the terminal window and the application should start.\n\nAlso, look in your Applications > Programming > monodevelop\nShould now be there.\n\nThere are many other solutions and I tried some others first.\nHowever, this solution took two lines of typing to get a tool on Ubuntu that will build applications that run so it was the easiest IDE to explain.\n\nyea... they are kinda the same thing these days. you seldom find a compiler alone anymore, and IDE is a text editor, compiler, linker, and debuger all in one. most people just call them compilers these days...\n\nMost people are incorrect to call an IDE a compiler. Code::blocks is an IDE that supports mingw, gcc and a bunch of other compilers. You'll find a compiler standalone if you install any Unix operating system.\n\nWell, I've been programming for three years now (learned several languages), and I found Visual Basic.NET to be the best programming language for starters. I was almost the same as you: started HTML when I was 12/13, then started Visual Basic.NET unfortunately when I was 16. I find VB.NET to be incredibly easy, especially with the Visual Studio IDE. I wouldn't recommend you try something has high level as C or C++ right after HTML. There's a lot of memory madness in those languages (ask one of your programming teachers if you have one about the joys of pointers). Java I haven't tried, but it's still probably not as easy as Visual Basic.NET. As for the game development option that Slydog proposed, I wouldn't recommend doing gaming JUST yet. If you need it to keep your morals up, fine. But in the end, if you get a programming job, there are WAY more web/desktop development jobs than game programming jobs. Just something to keep in mind.\n\nC and C++ aren't necessarily high level. You're mistaken. Low level = closer to hardware. Machine code is as low level as you can get. An implementations that interpretes the source code as the program executes is an example of \"high level\" implementations. C and C++ have few restrictions in regards to translation. That could be low level, or high level. VB .NET, as released with the .NET framework, requires a byte-code, JIT interpreter. That's high level.\n\nHTML is not a programming language. Whether you find VB .NET \"incredibly easy\" or not is your choice, but to others it may not hold true. I personally think VB .NET is a language that should not exist. What does VB .NET do that C++/.NET can't?\n\nPointers are reference types. VB .NET has reference types, too. There's nothing wrong with pointers (or reference types), providing you learn to use them correctly. It's no more difficult to learn VB .NET reference types than it is to learn how to do the same things using C++ reference types. In fact, C++ reference types are more powerful.\n\nVB .NET has object inheritance. C++ also has inheritance. It's no more difficult to learn inheritance in VB .NET than it is to learn how to do the same things using C++ inheritance. In fact, C++ inheritance is more powerful. You can inherit from multiple classes.\n\nVB .NET has a more \"human\" style. It uses keywords such as \"end if\", \"for x = n to p step q\", \"end for\" and \"end while\" to end blocks. C++ shortens these to single keystrokes. C++ seems far more productive and powerful, to me. The myth that it is \"more difficult than VB\" is just a myth, and can't be proven. If you have a decent resource, learning C++ will be easy.\n\nseb - C and C++ are high level languages, low level is assembly language almost entirely.\n\nI agree HTML is not programming. its formating... VB is easy as you do not have to worry about a lot of what you have to worry about in C or C++ it basically will take anything. VB.net is more restricted then C++, reason why im not comparing it with C is that they are different programming paradigm and very different syntax. i honestly have never had to use a pointer in VB programming.\n\ni personally found VB much easier to learn and pick up because of the more simple syntax.\n\ntrueb: The C and C++ standards do not make those restrictions. One could build a processor to process C and/or C++ source code, if it were worth it. Would C and/or C++ source code then be \"high level\"?\n\nVB .NET is a programming language that uses the .NET framework. The .NET framework requires Windows. To me, it would seem this makes it unconditionally high level.\n\ntrueb: And the reason you haven't encountered a pointer in VB code is because they don't let you use pointers.\n\nSeb: You're right. I was mistaken. I thought high level = closer to machine code. My apologies. As for the difficulty between C++ and VB.NET, it is my firm belief that Visual Basic.NET is more difficult than C++ programming. My primary source of this preference: Win32 programming. Creating a form is simple in VB, takes 70-80 lines of code in C++.\n\nIf you are just starting out, I'd recommend learning a 'BASIC' language.\nOnce you learn the fundamentals (variables, loops, conditions, etc) you can apply that to almost any language. You may want to eventually learn a 'C' based language (C++, C#), as it's the industry standard.\n\nBut for starters, I recommend a language called 'GLBasic' (\nThey have a free non-time limited trial (forced water mark plus 5 minute timeout).\nGLBasic has a simple language, centered around 2D and 3D game programming.\nThis should keep programming interesting as you learn.\nI just discovered it a month ago, and already have a 3D game 1/2 way done.\nThen there is always Visual Basic.net, which is free.\nIf you want to get into game programming, also take a look at Unity3D (unity3d.com/).\nThey recently released their standard package as free, no strings.\nIt has a steeper learning curve than GLBasic, but is much more powerful.\n\nI started programming when I was 11, (almost 40 now) and find it very rewarding.\nVery thrilling to get your first character to walk across the screen!\nGood luck!\n\nI started with C, got to know it pretty well, and decided I hated it - so I didn't look at another programming language for years. My advice: don't start there. It's not about difficulty learning it, it's about difficulty using it - too many caveats and stupid little things you have to hand-hold the compiler with. If I were you I'd start with a weakly-typed interpreted language rather than a compiled language. Some will tell you learning weakly-typed languages from the start will teach you bad habits, but that's malarkey in my opinion :) You get immediate results out of your code, allowing you to go rapidly through the learning process. It is necessarily guess-and-check to some extent, and you don't want to wait half an hour for your code to compile to find out what went wrong or make an improvement.\n\nYou already know HTML, so I'd say pick up either a server-side language for creating HTML pages like PHP, Python, Perl, Ruby, or ASP.NET, or learn JavaScript - with one caveat: although JavaScript is easy to use with a good framework like jQuery, Dojo or Mootools, it is subtly but vastly different from what you'll see in most object-oriented languages, so beware. I use PHP professionally so I may be biased, but it's a good jumping-off point for C-style languages like Java and the C family itself. You'll learn a lot of the \"grammar\" of C-style programming without the headaches that come along with it - and you can jump into learning to master the headaches when you're ready. As a bonus, PHP is a \"real\" language you can do professional work with, not just a rarely-used beginner language not suited for production code (coughBASICcough).\n\nYou're right, I sort of lumped all the C languages together but C# is substantially different from C & C++. In any case, they're still compiled and my recommendation to start with interpreted languages stands :) It would be natural to segue into C# if one started with ASP.NET.\n\nAs for interpreters for compiled languages, that they exist does not make the language an interpreted language. It just means it can be interpreted. A language intended to be interpreted is optimized for that paradigm. There was a C interpreter when I first learned C, but it sucked - slow and buggy; I didn't use it. Maybe the game has changed since then, but there still lies my other point about using a weakly-typed language. You could say that's largely personal preference but in my experience beginners have an easier time working with them.\n\nLanguages aren't optimized, compiled or interpreted. You're confusing implementation with specification. The specification specifies the rules for the language. Code is compiled or interpreted by the implementation, according to the rules set out in the specification.\n\nYou're going to want to know how to convert \"3\" as a string to an int at some point in time. The problem is, anything to do with types are hidden from your sight initially. In Javascript, both \"3\" + 3 and 3 + \"3\" will evaluate to strings. This may or may not be immediately picked up by a Javascript student. Assuming it is, he/she hasn't learnt anything about types. He/she isn't likely to know where to begin looking. However, in C# the types are immediately visible and the compiler will inform you: Cannot implicitely convert type 'string' to 'int'.\n\nThe other subtle problem that most weakly-typed programmers aren't aware of is the issue of boolean false values. In javascript 0 is a false value but new int(0), despite having the same value is evaluated to true when used in a conditional operation. In PHP the strings '0' and '0%' are false values, but '0.00' is evaluated to true when used in a conditional operation. This sort of thing would be picked up quickly in a strongly-typed programming language.\n\nI'd suggest Java, as every little detail is well defined. For any Java-related question you could most likely consult the documentation and find your answer fairly easily. C++ isn't so forgiving. There are a lot of undefined behaviours in C++ that may work with your implementation, but could break on a different implementation (compiler or OS, architecture, etc). This leads to a C++ Programmer who believes he/she knows how to program in C++ but is only capable of writing broken code.\n\nIf despite my warning you intend to learn C++, get yourself a decent book. I can recommend Programming: Principles and Practice using C++ by Bjarne Stroustrup (the guy who developed C++ initially). It's geared for people seeking to learn their first programming language. I do suggest you choose Java ahead of C++, initially, though.\n\nI started out programming in VB. In my opinion, it unnecessarily encourages the development of early arthritis. I moved on to C++ (a long time ago now). I can program in C++ (at a very basic level), but I moved on quickly to C which I prefer these days. I've been programming in C for somewhere between 6 and 8 years now, and along the way I've learnt some other nice programming languages such as C# and Javascript. I haven't any experience with Java myself (though C# is very similar), but I'll be learning that language next semester. If you need any assistance, feel free to add me to MSN: admin@geekycode.net.\n\nThings i would take into account when picking a first programming language are the following:\n\nis it easy?\ncan i find information on it online?\nis it useful?\ncan i get a compiler for free or cheep?\n\nobviously if your new to programming you dont want to be caught up on a bunch of syntax formalities and you just want you program to work. For this category i would say Visual Basic rules. in contrast Assembly is not the best one to start with.\n\nyou will have questions when learning a language, it is nice to be able to find a online community to help answer them. Visual Basic and C++ have a lot of communitys out there that have sample code and you can ask questions.\n\nIs it useful... Obviously it is pointless to learn a language that no one uses, for example there are a few people who know how to program in FORTRAN that is because few people use it anymore and not very marketable in the job market. C is the most universal and any C++ compiler that i have found atleast will accept C syntax. With C you can program a lot more things not just PCs such as embedded microprocessors. a close relative of C is C++ and if you learn C++ first C will come nicely and vice versa.\n\nFinlay can you find a free compiler? it is hard to find one in VB but in C and C++ there are a ton.\n\nin conclusion VB would be a good one to start, but its ease can kind of hurt you in the long run if you try to learn a better language as far as practicality.\n\nI would personally recommend you start looking into C or C++.\n\nhowever, i would also look into languages to learn next... i would say learn assembly for a challenge, it is difficult, but Assembly programmers almost always find jobs.\n\nAssembly and C no more difficult than VB. You still have to learn about types, operations and operands, syntax, sequence, etc. It's just a different representation. In fact, in VB there are even more concepts to learn. Enjoy understanding VBs inheritance and reference types as a beginner. Someone who learnt C initially is more likely to learn VB correctly than someone who is studying VB for the first time.\n\nI'm 15 and started programming when I was 13. I first started learning C++ on my own which believe me was a big mistake. C++ isn't an easy language to start with, it has many complicated concepts that get in the way of the basics. I took a course at my high school that was required before I could take their course on C++. It taught using Visual Basic which is probably one of the better languages in my opinion to learn with. It is important to know with Visual Basic, Microsoft has really simplified some of the more advanced concepts, so keep in mind that not everything works the way Visual Basic does when you move onto the more advanced languages."}
{"text": "I don't recommend Java. What I recommend you learn, is Objective-C, because it has very similar methods and definitions in there to the English language. I'm the same age as you, been programming since last year just about, and now, I'm pretty darn good at it. You can also make Mac and iPhone apps for it, and there are a lot more videos on YouTube for it. I'm self taught, no person taught me how to do it, no books, just the internet, and YouTube. Trust me, once you understand some of it, you won't need videos to know how to do something new.\n\nI put a lot of time in using the book 'Ivor Horton's Beginning Java 2: JDK 5 Edition'. It has loads of good examples and sample code on the website. A lot of it still applied to the newer Java versions.\n\nThere are also loads of online tutorials from lots of places and sample code that you can use to help you learn. I did not use any one as I simply searched for things that I wanted to know. However a site such as \n\nYou can also download the NetBeans IDE (integrated development environment) that might help you."}
{"text": "I don't recommend Java. What I recommend you learn, is Objective-C, because it has very similar methods and definitions in there to the English language. I'm the same age as you, been programming since last year just about, and now, I'm pretty darn good at it. You can also make Mac and iPhone apps for it, and there are a lot more videos on YouTube for it. I'm self taught, no person taught me how to do it, no books, just the internet, and YouTube. Trust me, once you understand some of it, you won't need videos to know how to do something new.\n\nI put a lot of time in using the book 'Ivor Horton's Beginning Java 2: JDK 5 Edition'. It has loads of good examples and sample code on the website. A lot of it still applied to the newer Java versions.\n\nThere are also loads of online tutorials from lots of places and sample code that you can use to help you learn. I did not use any one as I simply searched for things that I wanted to know. However a site such as \n\nYou can also download the NetBeans IDE (integrated development environment) that might help you."}
{"text": "ActionScript 3. 0 Game Programming ActionScript 3.0 the fun way, by creating 16 great games: real, robust games - not just \"web toys\"! Highly-rated ActionScript tutorial, now with seven new 3D and card games! Code and techniques easily adaptable to training, advertising, and more For Flash artists learning ActionScript, Flash programmers seeking to create games, and upgraders from ActionScript 1.0/2.0.Includes a chapter on developing games in Flash For The iPhone! Gary Rosenzweig's ActionScript 3.0 Game Programming University, Second Edition is the best hands-on tutorial ... MOREfor learning ActionScript 3.0, The programming language behind Flash Professional CS5. You will master all the basics of ActionScript programming by building 16 robust games. One step at a time, you'll learn techniques (and get tested code) that can be adapted to virtually any project, from games to training and advertising. The first edition earned widespread raves; Rosenzweig has now updated it with seven brand-new games that teach even more valuable ActionScript 3.0 skills and techniques. You will first learn how Flash and ActionScript 3.0 work together, The elements of an ActionScript program, and how to build a basic game framework with ActionScript. Next, Rosenzweig walks you through building the full spectrum of ActionScript games, including brain games, animation-based games, picture puzzles, games based on direction and movement, casual games, word games, Q and A games, action games, game worlds, and more. This edition adds new chapters on card games and 3D games, with High-Low, Video Poker, Blackjack, 3D Paddle Ball, 3D Scavenger Hunt, and two other new projects.\n\nGary Rosenzweig is a programmer, Web site developer, Internet entrepreneur, podcaster, and computer book author. Rosenzweig hosts and publishes the MacMost video podcast His thirteen computer books include The MacMost.com Guide to Switching to the Mac, ActionScript 3.0 Game Programming University, Special Edition Using Director MX and The MacAddict Guide to GarageBand."}
{"text": "A third-generation programming language (3GL) is a refinement of a second-generation programming language. The second generation of programming languages brought logical structure to software. The third generation brought refinements to make the languages more programmer-friendly. This includes features like improved support for aggregate data types, and expressing concepts in a way that favours the programmer, not the computer (e.g. no longer needing to state the length of multi-character (string) literals in Fortran). A third generation language improves over a second generation language by having the computer take care of non-essential details, not the programmer. \"High level language\" is a synonym for third-generation programming language."}
{"text": "Exploring the Science of Computing (PWS Series in Computer Science)\n\nAimed at first course computer science students, this text is intended to complement the \"Experiments in Computing\" laboratory manuals by the same authors. The labs may be used in conjunction with any Pascal text, but this book is constructed around the laboratories in Experiments in Computing. It provides an overview of typical computer science concepts, including context and background for the lab experiments. It is considerably shorter than most standard texts, shifting the focus from a passive to an active computer science learning experience."}
{"text": "This is the Rough Cut version of the printed\nbook.\nThe perfect guide for programming\nbeginners who want to get started with a language that's both\npowerful and easy: Python\nPython is the perfect \"first\nprogramming language.\" It's easy for beginners to read\nand understand, and since it's so widely used, you can apply\nwhat you've learned practically anywhere. Now, there's\na simple, up-to-date beginner's tutorial that will help you\nmaster the newest versions of Python: Sams Teach Yourself\nPython in 24 Hours, Second Edition.\nCompletely rewritten by pioneering Python\ndeveloper and advocate...\n\nLearn to capture videos, manipulate images and track objects with Python using the\nOpenCV Library\nSet up OpenCV, its Python bindings, and optional Kinect drivers on Windows, Mac or Ubuntu\nCreate an application that tracks and manipulates faces\nIdentify face regions using normal color images and depth images\nIn Detail\nComputer Vision can reach consumers in various contexts via webcams, camera phones and gaming sensors like Kinect. OpenCV's Python bindings can help developers meet these consumer demands for applications that capture images, change their appearance and...\n\nBy taking you through the development of a web application from beginning to end, this book demonstrates the practical advantages of test-driven development with Python. You'll learn everything from the basics of database integration and the use of JavaScript to browser-automation tools like Selenium, and advanced topics such as NoSQL, Web Sockets, and async programming....\n\nPython in Practice presents Python programming\ntechnologies and techniques to help programmers write code that's\nelegant, maintainable, and fast. Drawing on both the standard\nlibrary and important third-party libraries, the book shows how to\nachieve significant speedups using high-level concurrency and\ncompiled Python. The book is packed with examples and ideas that\nillustrate a wide range of techniques and modules, encompassing\nhigh-level networking, 2D graphics, 3D graphics, and GUI\nprogramming\u2014including concurrent GUI programming. The book is\naimed at programmers who want to take their...\n\nIf you need help writing programs in Python 3, or want to update older Python 2 code, this book is just the ticket. Packed with practical recipes written and tested with Python 3.3, this unique cookbook is for experienced Python programmers who want to focus on modern tools and idioms.......\n\nAre you new to SciPy and NumPy? Do you want to learn it quickly and easily through examples and concise introduction? Then this is the book for you. You'll cut through the complexity of online documentation and discover how easily you can get up to speed with these Python libraries....\n\nOver 70 interesting recipes for learning the Python open source mathematical library NumPy\nDo high performance calculations with clean and efficient NumPy code\nAnalyze large sets of data with statistical functions\nExecute complex linear algebra and mathematical computations\nIn Detail\nToday's world of science and technology is all about speed and flexibility. When it comes to scientific computing, NumPy is on the top of the list. NumPy will give you both speed and high productivity.\n\"NumPy Cookbook\" will teach you all about NumPy, a leading...\n\nGet started with Twisted, the event-driven networking framework written in Python. With this introductory guide, you'll learn the key concepts and design patterns to build event-driven client and server applications for many popular networking protocols. You'll also learn the tools to build new protocols using Twisted's primitives....\n\nMaster Python and become a\nprogrammer\u2014even if you never thought you could! This\nbreakthrough book and CD can help practically anyone get started in\nprogramming. It's called \"The Hard Way,\" but it's really quite\nsimple. What's \"hard\" is this: it requires discipline, practice,\nand persistence. Zed A. Shaw teaches the Python programming\nlanguage through a series of 52 brilliantly-crafted\nexercises\u2014all formatted consistently, and most no longer than\ntwo pages (including \"extra credit\"). Just read each exercise, type\nin its sample code precisely (no copy-and-paste!), and make the\nprograms run. As...\n\nIf you want to learn how to program, working with Python is an excellent way to start. This hands-on guide takes you through the language one step at a time, beginning with basic programming concepts before moving on to functions, recursion, data structures, and object-oriented design. Through exercises in each chapter, you'll try out programming concepts as you learn them.... vision applications as you follow clear examples written in Python...."}
{"text": "Article: Incremental Programming\n\nIncremental Programming\n\nProgramming Help for Beginners\n\nMany novice programmers start a program with a ?big bang? approach, meaning they want to write the whole program in one step and then only they would try to compile and run. However as humans we make many mistakes when programming, especially given that we have to use a programming language to do the job and most programming languages differ drastically from natural languages. Because it is very likely that we would make mistakes, we have to ensure that we leave room so that we could easily identify the mistakes we have made.\n\nIncremental Programming Helps\n\nThe solution to this situation is to adopt an incremental approach in programming. The idea is to keep building your code using several small working pieces. The ..."}
{"text": "Tools\n\n\"... The ...\"\n\nThe we present the STG language, an austere but recognisably-functional language, which as well as a denotational meaning has a well-defined operational semantics. The STG language is the \"abstract machine code\" for the Spineless Tagless G-machine. Lastly, we discuss the mapping of the STG language onto stock hardware. The success of an abstract machine model depends largely on how efficient this mapping can be made, though this topic is often relegated to a short section. Instead, we give a detailed discussion of the design issues and the choices we have made. Our principal target is the C language, treating the C compiler as a portable assembler. Version 2.5 of this paper (minus appendix) appe...\n\n\"... We Introd ...\"\n\nWe Introduction Computer Science is both a scientific and an engineering discipline. As a scientific discipline, it seeks to establish generic principles and theories that can be used to explain or underpin a variety of particular applications. As an engineering discipline, it constructs substantial artefacts of software and hardware, sees where they fail and where they work, and develops new theory to underpin areas that are inadequately supported. (Milner [1991] eloquently argues for this dual approach in Computer Science. ) Functional programming is a research area that offers an unusually close interplay between these two aspects (Peyton Jones [1992b]). Theory often has immediate practical appl..."}
{"text": "Learning Android Game Programming: A Hands-On Guide to Building Your First Android Game\n\nDescription\n\nThis is the Safari online edition of the printed book.\n\nGet Started Building Android Games!\n\nMany developers have clever ideas for their own games \u2013 games that they want to sell on Android Market. Professional game development of complex 3D games is difficult and expensive, and is beyond the reach of the individual developer. But there is also a class of games that a single developer can easily build using only Java/Dalvik and the standard APIs offered by the Android SDK. This book provides the knowledge and example code that will allow a relatively junior Android developer to develop their own games in Java and XML. It will also show the developer how to make their game available for download on Android Market."}
{"text": "Introduction to C Programming at GBdirect\n\nOur experience with C dates back to the 1970s when our leading C trainer was pioneering deployment of Unix (the first operating system to be written in C) in the UK.\n\nOne of our C trainers, Mike Banahan, authored the popular C Book, which we have made available online.\n\nSince then, our trainers have been using and teaching the language in some of the most demanding of environments, for example writing Unix device drivers for the bespoke systems in international investment banks and training their software developers to get the best out of the language.\n\nToday all of our C trainers are also C practitioners, using C and other languages for development projects and day-to-day work (and practicing what we preach).\n\nWith that kind of foundation in the language and with our experience in technical training you would be right to expect the very best from one of our C courses.\n\nWe can also offer bespoke courses in most aspects of the language for those with very particular needs. Please contact us if you have such a requirement."}
{"text": "Bad at Computers? Think Like a Programmer.\n\nLike everyone else, you spend way too much time staring at a computer screen.\n\nOkay, that's a fact of life. But what if you're spending far more time than you need to? What if you could conquer:\n\nRepetitive, boring tasks?\n\nIrritating features of your software that won't go away?\n\nMysterious rumors of time-saving processes that sound great but are\nprobably confusing?\n\nGuess what? You can.\n\nWhere does software come from? Programmers. They draw their salaries designing great software that will do everything you want with as few keystrokes as possible. And they succeed. Generally, software is quite powerful.\n\nThe problem? It's written by programmers.\n\nNo matter how many animated office supplies jump around and shout at you, beneath the glitz it's still software. It goes by different rules than real life.\n\nSo let's learn a few of those rules.\n\nSure, one class can't begin to cover all the specifics of all the\nsoftware on the market. But if you're generally confused and\nfrustrated with your computer, one class can and will explain a few basic\nprinciples that can get you thinking like a programmer. You won't\nlearn all the answers, but you will learn the most basic ideas you need so\nyou can find answers yourself."}
{"text": "c language computing, C is a general-purpose, block structured, procedural, imperative computer programming language developed in 1972 by Dennis Ritchie at the Bell Telephone Laboratories for use with the Unix operating system.[2] Although C was designed for implementing system software,[3] it is also widely used for developing application software.\nIt is widely used on a great many different software platforms and computer architectures, and several popular compilers exist.\nC has greatly influenced many other popular programming languages, most notably C++, which originally began as an extension to C. Source"}
{"text": "Practical C++ Programming\n\nOk, I know this isn't technically a PHP book. However, Ray was gracious enough to get me this book for review, and I believe the book offers techniques and advice to just about any programmer, not just for C++.\n\nPractical C++ Programming, like most O'Reilly books, is a top-notch technical book, with a focus on beginning programmers, but with enough readability to serve more experienced C++ coders. Steve Oualline does a great job of mixing technical, aesthetic, and design advice, spattered with small, amusing anecdotes and miniature quizzes. He uses examples effectively to reinforce standard programming concepts and gently nudge the reader along the sometimes painful path of C++.\n\nThe best aspect of the book isn't the technical knowledge passed along by Oualline; it's the more abstract things he tackles that truly separate it from other C++ books, such as object orientated and procedural design practice, styling and naming conventions, and the tools of programming that many books miss: Makefiles and a brief overview of debugging utilities. It's refreshing to read a book that takes such points into account, and I found myself nodding in agreement in these sections.\n\nAs far as technical material, Oualline keeps up-to-date by including sections on fairly new and complex topics such as namespaces, STL, and templates, without alienating the reader. He uses code often to explain various points, keeping most examples small, but building to larger snippets and build on previous chapters smoothly. The 'C to C++' chapter in particular was excellent, and I think even C++ programmers could benefit from a quick overview of this section.\n\nAll in all, Practical C++ is an excellent book as a supplement to your generic C++ reference book, especially for those new to C++ programming or just coding in general. However, I think many, more experienced, programmers could also benefit from his gems of wisdom on various topics that he sprinkles throughout the book. I've come to expect the best from O'Reilly, and, again, I wasn't disappointed."}
{"text": "CMPSC 030 Introduction to Computational Problem Solving (3 hours)\n\nAn introduction to computational problem-solving using a programming language. Students learn the syntax and semantics of a language and apply these to the solution of mathematical problems. The course is recommended for all who wish to explore computer science. Students review mathematical concepts and use them as the basis of an algorithmic solution during a hands-on lab"}
{"text": "Share\n\nC++ (C Plus Plus)\n\nC++ is a statically typed, free-form, multi-paradigm, compiled, general-purpose, powerful programming language. It is regarded as an intermediate-level language, as it comprises a combination of both high-level and low-level language features. C++ is one of the most popular programming languages and is implemented on a wide variety of hardware and operating system platforms.\nMore info \u00bb\n\nTags\n\nLinks\n\nYou're browsing C++++. It might\nnot be a good choice according to\nyou but it's still an alternative. Read more about our thoughts about alternatives here.\n\nA Java Virtual Machine (JVM) enables a set of computer software programs and data structures to use a virtual machine model for the execution of other computer programs and scripts. The model used by a JVM...\n\nRuby is a dynamic, reflective, general purpose object-oriented programming language that combines syntax inspired by Perl with Smalltalk-like features. Ruby originated in Japan during the mid-1990s and was...\n\nHaskell is an advanced purely-functional programming language. An open-source product of more than twenty years of cutting-edge research, it allows rapid development of robust, concise, correct software. With...\n\nClojure is a dynamic programming language that targets the Java Virtual Machine (and the CLR ). It is designed to be a general-purpose language, combining the approachability and interactive development of aREBOL (Relative Expression Based Object Language) is a cross-platform data exchange language and a multi-paradigm dynamic programming language originally designed by Carl Sassenrath for network communications...\n\nthinBasic is a simple, flexible, and easy-to-learn interpreted programming language. It lets you quickly and easily develop programs for Windows. thinBasic was first released in 2004. Since then thinBasic has...\n\nHaxe (pronounced as hex) is an open source and multiplatform programming language. If you are familiar with Java, PHP, JavaScript or ActionScript, the Haxe syntax should be very familiar, allowing you to"}
{"text": "A computer language is not just a way of getting a computer to perform operations but rather that it is a novel formal medium for expressing ideas about methodology.\n\nprograms must be written for people to read, and only incidentally for machines to execute.\n\nSecond, we believe that the essential material to be addressed by a subject at this level is not the syntax of particular programming language constructs, nor clever algorithms for computing particular functions efficiently, nor even the mathematical analysis of algorithms and the foundations of computing, but rather control the intellectual complexity of large software systems.\n\nComputer Science\n\nComputer Science is a terrible name for this business.\n\nIt's not about science. It is really much more about engineering or art than science.\n\nIt's not about computers, in the same way that physics is not really just about accelerators.\n\nDeclarative Knowledge => What is true?\n\nImperative Knowledge => How to Knowledge?\n\nControl Complexity\n\nBuilding abstractions that hide details when appropriate.\n\nEstablishing conventional interfaces that enable us to construct systems by combining standard, well-understood pieces in a ``mix and match'' way.\n\nEstablishing new languages for describing a design, each of which emphasizes particular aspects of the design and deemphasizes others. (Metaliguistic Abstraction)\n\nBuilding Abstractions with Procedures\n\nComputational processes are abstract beings that inhabit computers.\n\nFortunately, learning to program is considerably less dangerous than learning sorcery, because the spirits\nwe deal with are conveniently contained in a secure way.\n\nLisp\n\nLisp was invented in the late 1950s as a formalism for reasoning about the use of certain kinds of logical expressions, called recursion equations, as a model for computation.\n\nThe language was conceived by John McCarthy and is based on his paper ``Recursive Functions of Symbolic Expressions and Their Computation by Machine'' (McCarthy 1960).\n\nLisp is a practical programming language.\n\nA Lisp interpreter is a machine that carries out processes described in the Lisp language.\n\nLisp, whose name is an acronym for LISt Processing,\n\nLisp was designed to provide symbol-manipulating capabilities for attacking programming problems such as the symbolic differentiation and integration of algebraic expressions. It included for this purpose new data objects known as atoms and lists, which most strikingly set it apart from all other languages of the period.\n\nScheme\n\nA dialect of Lisp, the power and elegant of Lisp and Algol\n\nFrom Lisp\n\nMetalinguistic power that derives from the simple syntax\n\nThe uniform representation of programs as data objects\n\nThe garbage-collected heap-allocated data\n\nFrom Algol (short for ALGOrithmic Language)\n\nlexical scoping and block structure\n\nLanguage Elements - Primitives\n\nSelf-evaluating primitives => Value of expression is just object itself\n\nNumbers => 12, 1.25, 2e5\n\nStrings => \"Scheme\", \"lisp\"\n\nBoolean => true or false\n\nBuilt-n procedures => to manipulate primitive objects\n\nNumbers => +, -, *\n\nStrings => string=?, string-length\n\nBoolean => and, or, not\n\nLanguage Elements - Combination\n\nRules of evaluating\n\nIf self-evaluating primitives, return the value.\n\nIf name, return the value associated with name in environment.\n\nIf a Special Form, do some thing special.\n\nIf a Combination,\n\nEvaluate all subexpressions of combination (in any order)\n\napply the operator to the values of the operands (arguments) then return result.\n\nEvaluating Combinations\n\nTo evaluate a Combination, the lisp interpreter is following a procedure\n\nEvaluate each subexpression of the combination\n\nApply the procedure (operator) to the arguments that are result of the evaluated subexpression (operands)\n\nParameter vs Arguments\n\nthe parameters that defined in the function declaration\nthe arguments that defined in the function call\n\nThe Single var Pattern is very useful pattern to use at the top of functions in javascript.\nThe pattern help to type all local variables at the top of function and to reduce the global variables.\n\nSo we use one var statement to declare multiple variables, we can figure what variables we have in one place.\nIt also will improve the code readibility, Hoisting so we can avoid errors when calling a variable before it's defined.\n\nLearning JavaScript with Douglas Crockford lectures is highly recommended, he walks from scratch to advanced techniques of JavaScript. So if you are a beginner you can start with them.\nSo, in this first post i just take notes that i found very useful from the part one\n\nHe started talk about the histroy of the language.\n\n1992 - The first steps when James Gosling at sunmicrosystems invent a new language called OAK and then the name changed to Java at a cofeeShop.\n\n1995 - After that they make a webbrowser by java called hotjava, but after time they look at java and say this is not suitable for a webpage because it's a heavy language to do simple thngs such as form validation so they want something much lighter.\n\nBrendan Eich at Netscape start a new language called livescript inspired by:\n\nSelf [\"prototypel inheritance\", \"dynamic objects\"]\n\nScheme [\"lambda\", \"loose typing\"]\n\nJava [\"syntax\", \"conventions\"]\n\nPerl [\"regular expression\"]\n\nand it was the first scripting langaue implementd in a web browser and a web server(LiveWire platform)\n\n1996 Microsoft made a copy of javascript called jscript :).\nMicrosoft and NetScape toke live script and jscript to ECMA to make a standarlization of the language so the generate EcmaScript(Language Standard).\n\nJavascript has java as a pfefix but it's completly different from java. Script as a suffex, it's not a toy language but a completly programming language.\n\nHe recommended \"Javascript, The Definitive Guide\" book\n\nKey Ideas\n\nLoad and go delivery:\n\nthat means javascript is an interpreted not compiled language and delivered as text because webpage is text\n\nLoose Typing:\n\nthis means you can declare any variable without define it's type.\n\nObjects are general containers:\n\nUnification of Objects and hash tables, Objects are completly dynamic things which means new members and new methods could be added at any time.\n\nObject oriented language:\n\nevery thing is an object\n\nPrototypel inheritance:\n\nObject inherit directly from object and there are no classes.\n\nLambda:\n\nthat means it use function as first class objects so you can use, pass, return and store functions as values.\n\nJavaScript Values\n\nNumbers\n\none number type in Javascript no integers represented as 64-bit floating-point\n\nNaN => not a number\n\nTocix > any arithmetic operation with NaN as an input will have NaN as a result\n\nNaN is not equal to any thing including NaN, but it's a number, for example if you ask the typeof NaN it will return \"number\"\n\nNumber function\n\nNumber() => convert a value such as string into a number\nIt will return NaN if value has a problem\n\nParseInt() is a javascript function that converts a string value to a number.\n\nIt takes two arguments one for the string value and another for the radix.\n\nradix is an optional integer arguments that represent the base of the vaue.\nspecifying 10 will tell parseInt() to parse a decimal number(from 1 through 9), if it 8 will tell parseInt() to parse a octal number (from 0 through 7)\nif it 16 will parse value as a hexdecimal number (start with 0X).\n\nIf radix is omitted parseInt() will determine the value on it's based\n\nSo radix is strongly recommended because it defines the base of the value to be passed, because parseInt() stops at the first none digit character so if the first digit is 0 it interpret is as octal base (start with 0 through 7)\n\nparseInt() will return NaN if the string value start with none digit number such as string, or the radix less than 2 or greate than 36.\nand we can use isNaN() function to test the result.\n\nSo lets see parseInt() in action\n\nStrings\n\nStrings are a sequences of 0 or more 16-bit characters.\n\nCharacters are encoded using UCS-2, not quit UTF-16\n\nNo seperate character type : characters are represented as strings with a length of 1\nString.length: determine the number of 16-but character in a string\n\nYou can create Strings in JavaScript in two ways\n\nWay one is to create by calling the constructornew String() and this way will create a string object\n\nWay two is to create without new in front and this will create a primitive string, also notice that\n\nWhen you ommit the String and define the value directly this will also create a primitive string (literal string)\n\nA String function String(value) converts the value to a string\n\nTo know the type of the string we use typeof operator,\nand to covert the String coverts between them.\n\nFor example you can use a length property on a string primitive\n\nBooleans\n\nBooleans just true of false\n\nBoolean function\nBoolean(value)\n+ return true if the value is truthy\n+ return false if the value is falsy\n+ similar to !! prefix operator\n+ ! operator convert the value to boolean and the negates it\n\nObjects\n\nnull => is an object and a value that is not any thing\n\nundefined => when you declare a variable through var and do not give it a value\n\nThe default value for variables and parameters\n\nthe value of missing members in objects\n\nundefined can be confusing becuse variables can contain the velue undefined\n\nFalse vaues in javascript\n\nfalse\n\nnull\n\nundefined\n\n\"\"\n\n0\n\nNaN\n\nTrue values in JavaScript\n\nAll other value (including all objects) are truthy.\n\nEvery thing is an object\n\nunifications of objects and hashtables that mean objects are completly dynamic to add new members and methods at any time.\n\nnew Object() : produces an empty container of name/value pairs.\nA name can be any string, a value can be any thing except undefined\n\nmembers can be accessed by dot notation or subscript notation\n\nJavaScript it a loosley type language that means any variable can receive any kind of value and any function parameter can receive and return any kind of value.\n\nJavaScript is syntactically a C family language but it differs from C mainly in it's type system, which allows function to be values\n\nIdentifiers\n\nStart with a letter or _ or $ Followed by zero or more letters, digits, _ or $\n\nBy conventions, all variables, parameters, members and function names start with lower case except for constructors which starts with upper case\n\nInitial _ should be reserved for implementations\n\n$ was added to ECMA specefecations specefecly for machines and recommended to not use $ and should be reserved for machines.\n\noperators\n\nArithmetic ( + - * / % )\n\n+ for addition and concatenation, if both operands are numbers will add them, if one is a string convert both to string and concatenate them.\n/Division of two integers can produce a non-integer result\n\n==!= Equal and not Equal operators but they do type coercion and it's recommend to use === and !=== instead which don't do type coercion\n\nLogical ( && || ! )\n\n&& The guard operator, aka logical and if the first operand is truthy it return the second operand, else return the first operand\n\n||The default operator, aka logical or if the first operand is truthy then it return the first operand else it returns the second operand\n\n! Prefix logical not operator,if the operand is truthy, the result is false. Otherwise the result is true.\n\nJavascript shell is the fast and best way to test a snippets of javascript.\nRhino is a command line programme Like iPython in Python or IRB on Ruby.\nRhino is build in java so make sure you have java installed\n\n>> which java\n\nif you get output like\n\n>> [code]/usr/bin/java[/code]\n\nif not open ubuntu software center and seach for java to install it.\nafter you have java installed just write theses commands in terminal\n\nWay one is to create by calling the constructor new String() and this way will create a string object\n\nWay two is to create without new in front and this will create a primitive string, also notice that\nwhen you ommit the String and define the value directly this will also create a primitive string (literal string)\n\n<>A String function String(value) converts the value to a string\n\nto know the type of the string we use typeof operator,\nand to covert the Strong covverts between them."}
{"text": "And then SOM...\n\nby \u00c9ric Simenel\n\nIBM System Object Model (SOM), which was introduced on Mac OS with OpenDoc, has become even more important to developers with the introduction of the Contextual Menus in Mac OS 8. It's not restricted to the development of Contextual Menus plug-ins, though. SOM is also available to all developers and solves a lot of common issues which plague real-life project development, management and maintenance. This article will show how SOM can ease your product development and save your precious time.\n\nSince most developers develop in C++ or other object-oriented languages these days, most of you know the obvious reasons why object-oriented programming is better than the previous models. The main strengths (which are also its definitions) of OOP are encapsulation, polymorphism, and inheritance, all of which are conducive to easy reuse.\n\nThat's theory. In real life, we deal with different development environments which, even when they're dealing with the same language, are not always compatible because of implementation choices, and are usually even less compatible when dealing with different languages. Even when staying with the same development environment, it changes over time, and it's always trouble to reintegrate old code in new projects, and sometimes, it's even trouble trying to reopen an old project for maintenance with a current development environment.\n\nSo, a usual project these days involves many developers who have different tastes in development environments and languages, old legacy source codes written in different languages under different development environments, and sometimes old legacy binary codes whose source codes are no longer available.\n\nAlthough SOM is not the universal cure to these problems, it does bring a lot of relief, and even if you're a single developer using only one language, SOM can help you manage your project by breaking it into small easily reusable pieces.\n\nGetting SOM\n\nSOM provides developers with the advantages of both object-oriented programming and shared libraries. The main advantage is that whether you're just using a SOM class from a library or inheriting from it, if you later replace this library with a more recent version, you don't have to recompile or rebuild all the client code. When you stop and think about it, this feat is a real breakthrough from what we've been dealing with until now. The second advantage is SOM's language independence, which allows developers to use their favorite environment and still mesh with other people's code. Due to its rather recent emergence in the Mac OS, the preferred (and only) language used with SOM is C++, but it may change in the future.\n\nThis article will cover the basics of SOM encapsulation, polymorphism, and inheritance, the use of a SOM library in an application, and in another SOM library, multiple aspects of versioning, dealing with exceptions, etcetera. This article is aimed at giving you a kick start, covering the basics aspects of SOM and how to use it for fun and profit; it will explain in some places the internal works, in case you're interested, but not everywhere. If you're interested in more knowledge about SOM and its internals, then you should read the manuals provided where SOMObjects(tm) for Mac OS is distributed (for example, on the Mac OS SDK CD). This knowledge is not an absolute need, mostly you can just program by example (and a lot of examples are provided in this article). An alternate title for this article could have been \"SOM for C++ developers...\". When I refer in this article to the Users Guide, it means the Users Guide found in the documentation folder of SOMObjects.\n\nThroughout this article, I'll use the following example to illustrate the different techniques:\n\nFigure 1. SOM Classes of the example.\n\nWhere som_Taxes (encapsulation) is a SOM class used by som_Item (usage of a SOM lib within a SOM lib). som_Solid (inheritance) and som_CarWash (Meta Classes) both inherit from som_Item. som_Car (exception handling) inherits from som_Solid, som_Tires (multiple inheritance) multiple inherits from som_Solid and som_Attr, and som_Tapes (versionning) inherits from som_Solid but does interesting things when som_Item v1.1 is present.\n\nEach class is there to illustrate one interesting point at a time (to prevent confusion of the issues). To understand the example, you should note that I have assumed that we're located in a country where products are submitted to sales tax but services are not.\n\nI've been using the Direct-To-SOM capabilities of MetroWerks CodeWarrior MW C/C++ (CodeWarrior Pro release). I verified that MPW MrCpp also has the same capabilities, but I don't cover its usage in this article. I also verified that you can build 68K SOM libraries, but do not cover that in this article either as there are only minor differences in the project settings.\n\nThroughout this article, all the listings have been purged of irrelevant (for this article) lines, such as debugging information, to hilite the more interesting parts. Look at the real code provided with this article to see the complete sources.\n\nEncapsulation\n\nLet's say that you have old legacy source or binary code. Each time you want to use it in a new project it may be a pain to integrate, because things change over time. If it's binary code, it may be 68K code, for which you have to construct UniversalProcPtrs. If it's source code, it may be in a different language than the one you're currently using. Currently, if that code is callable from C/C++, then you can encapsulate it in 1 or more SOM classes distributed in 1 or more SOM shared libraries. In my example, that would be the som_Taxes SOM class.\n\nThe main advantage of encapsulation in a SOM wrapper is to enable you to use this old legacy code in all your new projects, with a nice interface. And, eventually, if you decide to rewrite all or part of it, all the projects which have been using this code won't have to be rebuilt to continue to work. The SOM wrapper really isolates the interface from the implementation. Whereas, if you were to keep this code the way it is, with maybe just a nice new set of headers to be able to use it easily in new projects, and if you decide later to modify all or part of it, then you would have to rebuild everything.\n\nThe costs involved are not only a development issue but also a sales issue, in the first case, since we're dealing with shared libraries, you just have to ship your customers the new version of the SOM library containing the old legacy code, now updated. In the second case, after having rebuild everything, you have to ship everything.\n\nCreating a SOM library is pretty straightforward. Without the Direct-To-SOM capabilities of the most recent C++ compilers, we would have had to write first an .idl file, then go through MPW somipc to generate the .xh, .xih and .cpp files, and then modify the .cpp file according to what had to be done. With the Direct-To-SOM capabilities, it's much quicker: we simply write a .hh header file (.hh is just a style convention to differentiate them from simple .h header files, but there are no other differences) and the corresponding .cpp file. As a reminder, let's take a look at the .idl we would have written for straight SOM:\n\nComparing both .idl and .hh, the meaning of the SOMReleaseOrder and SOMClassVersion pragmas are pretty much obvious. The SOMCallStyle pragma can take 2 arguments, IDL and OIDL. If we want to use the exceptions mechanism (more on that later in this article), it is imperative we use the IDL argument, so it's a good idea to get into this habit. This means that each method must have Environment *ev as its first parameter.\n\nThe first difference between a SOM class and a straight C++ class is that the constructor (ie. CalcTaxes_som_Taxes() in this example) for a SOM class can't have any arguments (we'll see later in this articles how to use an equivalent mechanism with Meta Classes). We can also override somInit, which is a method defined in SOMObject, but it can't take any arguments either. And anyway, you can't use an efficient exceptions mechanism with either constructor or somInit, so we'll see in the next example how you should use Initialize and Uninitialize methods to properly set up and unset your objects. In the case of som_Taxes, since it doesn't do much, we simply use a constructor which can't fail.\n\nIn this example, there's only one new method, CalcTheTax. CalcTaxes_som_Taxes is inheriting from SOMObject which is the root for SOM classes, and has methods like somGetClass and others which we'll see uses for later. The keyword IN found in the parameter list of CalcTheTax means that the parameter is passed to the method and, even if modified, not returned. As we'll see further below, the keywords OUT and INOUT can also be used, OUT meaning that the parameter doesn't receive an initial value and is returned by the method, INOUT meaning that the parameter is passed to the method with an initial value, and that the method can return another value. In fact, IN , OUT and INOUT are just for reading purposes, since these macros expand to nothing, they're just here as a reminder for SOM's in, out and inout keywords. But the same rules don't apply. A SOM out long value would be transformed in the .cpp as long *value. Here we have to say OUT long *value. In addition, the used SOM classes won't get an extra * (see the note on page 61 of develop 26).\n\nSOM Objects and SOM Classes\n\nSOM is a dynamic environment where classes themselves are instantiated as objects in memory. Those special objects are called class objects to differentiate them from simple objects, but there are objects nonetheless. Notwithstanding its name, SOMObject is a SOM class. SOMClass is also a SOM Class inheriting from SOMObject. To simplify complex matters, let's just say that when the SOM Runtime starts, it instantiates a class object of the class SOMClassMgr, a class object of the class SOMObject, and a class object of the class SOMClass. When you are instantiating an object of the class CalcTaxes_som_Taxes for the first time, SOM actually instantiates a class object for your class, and then, the object you requested. The class object of your class is instantiated only once, whatever the number of objects of this class you are instantiating. If you are interested in more details, please refer to chapter 2.1 of the Users Guide. Throughout this article, I made an effort to distinguish a SOM object from its SOM class, where it made sense, but mostly they're the same. When I'm writing about a method, for example, I may refer to it as the \"SOM object method\" or \"SOM class method\", but it doesn't matter much.\n\nThe next step is to write the .cpp file. It's in that .cpp file that you are going to either include or link to your old legacy code:\n\nA big difference between C++ and SOM is that, by definition, all fields of a SOM class are private to that object, and all methods declared in the releaseorder list must be public and virtual. That means that if you want classes, inheriting from your class, accessing your fields, you have to provide accessors for them.\n\nThe next step is simply to build the SOM shared library. Using MetroWerks CodeWarrior, we'll need an extra file which contains the only symbol which has to be exported, for CFM (Code Fragment Manager) and SOM to be happy. This symbol is the complete name of your SOM class concatenated at the end with ClassData, ie. CalcTaxes_som_TaxesClassData. The name of the file must end with .exp and may be put in the project, ie. d2som_Taxes.exp. If there are more than one SOM class defined in a particular library, then all the ClassData symbols should be listed in the .exp file. Another way to achieve symbol export is to use the #pragma export directive in your .hh file as in the following example (see the Solid project for more details):\n\n#pragma export on\nclass MSolid_som_Solid;\n#pragma export off\n\nSince the #pragma direct_to_som directive is on, the development environment does the right thing and adds the ClassData extension automatically.\n\nYou then create a new project based on the \"ANSI C++ Console PPC (DLL)\" (Pro 1) or \"Std C++ Console PPC (DLL)\" (Pro 2) stationery. You add the .cpp source file, the .exp file, and for convenience, the .hh file (duplicate the .h Target preference, and change the extension to .hh) and other source or resource files if you need. You also add the somlib shared library which contains the SOM code, and you modify the following settings:\n\nPPC Target: you select Shared Library as project type, you type in the name you chose, and you type cfmg as creator, unless you're providing your own bundle.\n\nPPC Linker: you clear all Entry Points fields\n\nPPC PEF: you select either the \"use the \".exp\" file\" or \"use #pragma\" item in the Export Symbols popup menu depending on the way you desire to export symbols.\n\nDepending on the code you either include or link to, you may or may not get rid of a lot of unuseful libraries automatically put in the project stationery. In my case, I only need to keep MSL ShLibRuntime.Lib and you build the library... (1421 bytes).\n\nFigure 2. MetroWerks CodeWarrior SOM project for PowerPC.\n\nIn both MPW and MetroWerks environments, the Enums should be int (required for Direct-To-SOM compilation), and it's a good idea to either generate MacsBug symbols (for 68K) or tracebacks (for PowerPC) to ease your debugging (don't forget to turn them off for your distribution release). You turn on the Direct-To-SOM compilation in MPW MrCpp with the -som directive in the command line, and you can turn it on (popup menu) in the C/C++ Language preference panel in MetroWerks CodeWarrior. You can alternatively use the #pragma direct_to_som on, if you prefer.\n\nUsing the SOM Shared Library\n\nIt's very simple to use the SOM shared library in your application project (or another SOM shared library project, in this case it's GeneralItem_som_Item), you just have to add the TaxesSOMLib to your project window, add the #include \"d2som_Taxes.hh\" directive in your .cpp source file, allocate the SOM object with a new, deallocated it with a delete, and use it as if it were a C++ object everywhere you need it.\n\nBut let's take a closer look at the d2som_Item project first. The .hh is:\n\nNote that you can't call anything which might throw an exception from somInit or somUninit or from the constructor or destructor of the C++ class. That's why it's usually a good idea to add to all your SOM classes the methods Initialize and Uninitialize which will be able to throw exceptions and which will be called just after the allocation and just before the deallocation of the SOM object.\n\nIn the example below, we do create the CalcTaxes_som_Taxes object in the Initialize method. The interesting part of d2som_Item.cpp is:\n\nAfter that, we set up our new project file as before, without forgetting to add the TaxesSOMLib, and we do a build Now we can test our new SOM shared library.\n\nTo test all the SOM shared libraries in this article, I built one testing application, TestLibraries, which uses console output to hilite only the SOM coding. Its project file contains, of course, somlib and all the SOM shared libraries directly used by the application. For instance, it uses directly the som_Item object, but not the som_Taxes object which is used indirectly via the som_Item object, so only the ItemSOMLib is included in the project window and not the TaxesSOMLib. Of course, when the application is launched, the Process Manager has to find the TaxesSOMLib somewhere (or else you will get the usual Finder message saying that the TaxesSOMLib couldn't be found, and the application won't launch). So for pure ease of development, I set up projects to have all my shared libraries (some through aliases) and the application in the same folder. If you're interested in knowing of others places the shared libraries can go and still be found by the Process Manager, look at the \"Mac OS Runtime Architectures\" document available on the \"Reference Library\" Developer CD.\n\nThe interesting part of the source code of TestLibraries for the manipulation of GeneralItem_som_Item is:\n\nSince we need an Environment* variable to pass to the SOM methods, we simply use the specially-defined-for-Direct-To-SOM-C++-compilation AutoInitEnvironment structure. We could also use Environment* ev = somGetGlobalEnvironment();. When you are writing an application, you care only about one Environment structure, so you might as well be using the one provided by the somlib shared library (somGetGlobalEnvironment). If you are writing threads, then it is imperative to allocate one Environment variable on the stack of each thread (AutoInitEnvironment) or else you will be in trouble.\n\nInheritance and Polymorphism\n\nNow that we have defined our som_Item base class, let's inherit from it.\n\nAll the previous SOM classes inherited from SOMObject, but this time we'll inherit from GeneralItem_som_Item, leading to the following declaration, implementation and usage:\n\nAs you can see, the Initialize method first calls its parent GeneralItem_som_Item::Initialize, and then calls methods which are defined only in the parent (such as SetProductOrService) or in this class (such as SetUnitPrice) in the same way.\n\nHere's the predictable result:\n\ntheSolid Price = 162\n\nAs we see, the calling application can as easily use methods defined by the class (SetQuantity) as methods defined by the parent (CalcTheATPrice) in the same way. So, basically, you design and use inheritance the same way as you would in C++ or Object Pascal or any other OOL. The only big difference is that the methods reside in different shared libraries (SetQuantity is in the SolidSOMLib shared library, whereas CalcTheATPrice is in the ItemSOMLib shared library), although they're being called the same way. This mechanism is transparent both for the developer and for the user. That also means, as we'll see in more detail further below, that the CalcTheATPrice method can be changed in the parent, without SolidSOMLib being any different, the fragile base class problem is solved.\n\nUnder its apparent simplicity, both in design and usage, the main strength of SOM resides in this mechanism, that all the methods of an object don't have to be all in the same shared library. Take five to think about it...\n\nMeta Classes\n\nA good feature of C++ is that we are able to allocate and initialize (with parameters) a class in one statement such as CRect r(0, 0, 50, 100); or CRect *r = new CRect(0, 0, 50, 100);. Although there is an equivalent mechanism in SOM, it's neither so direct nor so easy, but at least it exists.\n\nWe saw in the previous examples that our classes inherit from SOMObject. Well, we can also have a class inherit from SOMClass, which we'll use to allocate and initialize (with parameters) our objects. This class is a Meta Class:\n\nAnd this leads to the predictable result:\n\nCarWash with wax Price = 200\nCarWash without wax Price = 50\n\nMultiple Inheritance\n\nWe first create a SOM class (Attributes_som_Attr) the usual way, then we're going to create another SOM class (MTires_som_Tires) which inherits both from Attributes_som_Attr and from MSolid_som_Solid which inherits from GeneralItem_som_Item.\n\nThe .hh is not very different. After the usual #include directives, we find:\n\nThe interesting fact to note about the som_Tires object is that although we see it as one object, its code and methods actually reside in 4 different shared libraries: TiresSOMLib, AttrSOMLib, SolidSOMLib and ItemSOMLib, and it's all transparent.\n\nI advise those who are interested in knowing how SOM resolves the classic ambiguities problem when dealing with multiple parents who have different methods with the same name to read chapter 4.2 (Inheritance) of the Users Guide, since I see no point in repeating here the excellent explanations found there. I'll just say that somehow, SOM deals with the ambiguities.\n\nLet's Reap Some Benefits\n\nNow that we have enough classes to play with, let's see how we gain from the use of SOM.\n\nLet's say that suddenly, the state gets greedy (it happens!), and the sales tax on products goes from 8% to 10%.\n\nWell, no big deal. We just reopen the som_Taxes project, change the line ftax = 8; by ftax = 10;, recompile this SOM shared library, and that's it, we're done, we don't have to do any other building of any other library or application using this lib. We just launch our testing application, and the printed results will show that all products (but not the services) are now 2% more expensive:\n\nGood, but we could have achieved the same result with a simple dynamic shared library based on CFM, so in that case, although SOM didn't hinder, it didn't do anything that we couldn't have done in another way.\n\nSince, when prices go up, consumers tend to buy less. The providers have to react in some way; most of the time they offer discounts...\n\nSo we go back to the som_Item class, and we're going to update it to version 1.1, introducing the discount concept (to prevent confusion, I have a separated ItemDiscount project, with new d2som_ItemDiscount.xxx files, but the built shared library is still ItemSOMLib):\n\nAs you can see, there are only minor modifications. We introduced a new method SetItemDiscount which we also place in the releaseorder directive, and a new field fItemDiscount, and, very important, we changed the minorversion to 1 (it was 0).\n\nSOM Version Numbers\n\nSince I couldn't have explained it better myself, here's the excerpt from the Users Guide about major and minor version numbers:\n\n\"These numbers are checked against the version numbers built into the class library to determine if the class is compatible with the client's expectations. The class is compatible if it has the same major version number and the same or a higher minor version number. If the class is not compatible, an error is raised. Major version numbers usually only change when a significant enhancement or incompatible change is made to a class. Minor version numbers change when minor enhancements or fixes are made. Downward compatibility is usually maintained across changes in the minor version number.\"\n\nWe build the new library the usual way, and now we reap the SOM benefits: we don't have to rebuild all the libraries containing the classes which inherit from som_Item (ie. som_CarWash, som_Solid, som_Tires, som_Car, som_Tapes), nor do we have to rebuild our testing application. The simple act of rebuilding the new version of som_Item is enough. If we launch the testing application, we will get the following printed result:\n\nThat means that if the whole set of these libraries and testing application was a complete solution installed on your customers' Macintosh, to deal with both the new tax and the discount countermeasure, you just modify and rebuild 2 libraries, and you have only those 2 to send to your customers to update them. This is both a gain in time (we only deal with 2 libraries instead of a whole complex global project), and a gain in cost of goods (we only have to send away 2 libraries instead of the whole application). Whatever ways we could choose for the distribution (floppies, Internet, etc.), it will always be cheaper to send a few small items than one big item.\n\nVersioning\n\nSince we now may have 2 different versions of GeneralItem_som_Item floating in our customers' installed base, let's see how we can deal with it and profit from it.\n\nThe more the consumer buys, the greater the discount. Let's say that if a consumer buys 1000 tapes, s/he doesn't expects to pay the price of 1 tape times 1000. Now that we have this neat SetItemDiscount method in our GeneralItem_som_Item class, it would be great to be able to call it from one of its descendants. The problem is that this method doesn't exist in the version 1.0 of GeneralItem_som_Item . So let's create a som_Tapes class dealing with discounts and see how it's done. As usual, the .hh first:\n\nThere are many, many ways to verify at runtime if the version 1.1 of som_Item is present, and thus, if we can use its discount feature.\n\nJust like any good Macintosh developer checks with Gestalt to see if such or such feature is available, instead of checking the system version and then making some assumptions about which feature is there or not (these assumptions, often unjustified, have a way to bite the developer back (or rather her/his customers) at a later date), we can check the availability of any method by just using its name.\n\nTwo situations can arise: you have the .hh of GeneralItem_som_Item v.1.1, and this should be the usual situation, or for some strange reason (but strange is real life), you don't have the .hh but at least know the prototype of SetItemDiscount (if you don't, then you're stuck).\n\nSince we use that code in a descendant of GeneralItem_som_Item , and any method of GeneralItem_som_Item is in the scope of the methods of that descendant, we simply write in the first case:\n\nIf you insist on dealing with version numbers rather than features, then you can test if a direct instantiation of som_Item v.1.1 works:\n\nSOMObject *theObject;\ntheObject = somNewVersionedObject(GeneralItem_som_Item, 1, 0);\nif (theObject != 0) {\n/* a majorversion of 1 and a minor version >= 0 has been found */\nsomReleaseObjectReference(theObject);\n} else /* v.1.x unavailable, should never happen... */;\ntheObject = somNewVersionedObject(GeneralItem_som_Item, 1, 1);\nif (theObject != 0) {\n/* a majorversion of 1 and a minor version >= 1 has been found */\nsomReleaseObjectReference(theObject);\n} else /* most likely only v.1.0 is there... */;\n\nAs we saw in the \"Major and Minor Version Numbers\" side bar, if you ask for n.0, it will succeed if n.x is present, whatever the value of x. If you ask for n.m, it will succeed if n.x is present, with x >= m. It will fail in all cases if only p.x is present, with p \u00ac n (except if you ask for 0.0, then it will succeed if any p.x is present).\n\nIn my example, if both v.1.0 and v.1.1 are present in the same folder as the testing application, v.1.1 will be chosen by default, since SOM, unless told otherwise, will always load the higher possible version.\n\nIf you insist on dealing with version numbers rather than features, then you may also check a parent version with the following code (remember that in this case, although GeneralItem_som_Item may be v.1.1 or v.1.0, MTapes_som_Tapes is v.1.0, so it doesn't do us a lot of good testing the version of MTapes_som_Tapes):\n\nSince SOM offers multiple inheritance, the somGetParents method returns an array containing all the direct parents of the class. There is also a somGetParent method which returns only the leftest parent, but I strongly advise you to ignore that one, because it might well get you in trouble in the future (ie. some SOM classes, developed by other developers and which you are using, which were single inheriting from one parent begin to inherit from many parents).\n\nExceptions\n\nSince, according to Murphy's law, if anything can go wrong, it will, and according to some other bright person, Murphy was an optimist... It's really a good idea to check our code against reality. The good news is that we can use C++ native exceptions with Direct-To-SOM compilation, the bad news is that we have to do some effort to make it happen.\n\nYou can't throw from a SOM method. It's a compiler limitation. Maybe we'll be able to in future releases of C++ compilers, maybe never. What we can do, though, is to ask the compiler, through the SOMCheckEnvironment pragma, to generate calls to __som_check_ev and __som_check_new, after each call to a SOM method or a SOM object allocation. It's up to you to provide an implementation for those calls. You'll find mine below, but you are welcome to make your own. You get your chance to throw in those routines.\n\nThen, each time we're unhappy with something in a SOM method (not enough memory, disk full, and so on), we just fill the Environment structure with adequate parameters and return. The second parameter (after ev) is the nature of the exception. In your case, it should always be USER_EXCEPTION, then you can pass a string, and a long (in fact a void *). You can use this last parameter to just pass an integer code (that's what I do in this example since I don't have much need for a more complex setup), but you're welcome to allocate whatever structure you want, fill it, and pass its address as this last parameter (you'll have to deallocate it in __som_check_ev later). The exception mechanism you use is your own; you're free to do whatever you want with it.\n\nConclusion\n\nSo, if SOM is such a great technology, why isn't Apple using it for every little piece of software distributed to either developers or end users?\n\nThere are many good reasons. First, object-oriented programing is not necessary everywhere, it is good for an application or a complete solution, but not always very interesting for system software, where encapsulation, polymorphism or inheritance don't always make sense. And if you're not using object-oriented programing, then you're better off using CFM (which Apple is using for every little piece of software) which provides a good dynamic library architecture. But where OOP does make sense, as in Contextual Menus, then Apple uses SOM.\n\nDepending on what you're writing, you will find yourself in one of those cases:\n\nAnother reason is that, unfortunately, there is a small price to pay to get the benefits of SOM. Although its dispatch code (when you're calling a method which may or may not be overridden) is quite small (6 PowerPC instructions for a non-overridden method, 12 for an overridden method), it may lead to performance issues if you have too fine a granularity (that means that each method does not do much, so the ratio of useful code and dispatch code is not a good one). Typically, if you define classes where methods do jobs as small as those I've shown in the examples of this article, then if you were to overuse these objects (let's say a billion call of SetQuantity and CalcTheATPrice), you might not get the expected performance, even on the fastest Power Macintosh. That being said, let's not forget that if you're using C++ classes, then you also pay a price for method dispatch which is only marginally smaller than SOM's (1 PowerPC instruction for a non-virtual method, 6 for a virtual method). Furthermore, as my experience showed, when defining utility classes, you define most of them as virtual (so that you can override at your leisure later), although you override a small fraction of them in a particular project. In this case, you get 6 dispatch instructions for both C++ and SOM implementation, and your cost is really 6 additional instructions when you actually do an override in SOM. If your methods (which may contain loops, for instance) are thousands instructions long at runtime, then the cost of using SOM instead of C++ is marginal.\n\nSo the choice is between non-OOP versus SOM because, if you're going to use OOP, then the advantages of SOM vs. C++ truly more than compensate the very small amount of extra-time spent in the SOM dispatch code vs. the C++ dispatch code.\n\nAnd, as a reminder, the advantages of SOM are:\n\nLanguage and Development Environment independence\n\nShared Dynamic Libraries and Object-Oriented Programing\n\nKeeping the binary compatibility even when:\n\nAdding new methods,\n\nChanging the size of an object by adding or deleting\n\ninstance variables,\n\nInserting new parent (base) classes above a class in the\n\ninheritance hierarchy,\n\nRelocating methods upward in the class hierarchy\n\nMulti-platform (Mac OS, MS-Windows, OS/2, AIX, and many others...)\n\nSince you, readers, are more likely to develop applications or complete solutions than system software, then you should really think about using SOM to both clean up the past (with encapsulation) and provide for the future.\n\n\u00c9ric Simenel is really happy he transferred to Cupertino's DTS from Paris' DTS. Aside from the fact that he received a great welcome from his current colleagues, he's getting much more sun here than there. And, due to his constant location here, he has easier access to comic books conventions, so he has completed many runs: the current mark is at 23,000 and counting"}
{"text": "eBooks from Richard Foley\n\nAll books and eBooks by Richard Foley:\n\nChapter 1 Perl Debugger Pocket Reference What Is the Perl Debugger? In the ideal world, every program would be perfect the first time it is written. In reality, however, even the best program- mers make mistakes or forget to provide for all situations. The Perl debugger is an application you can use to follow the logic of a Perl program while it is being executed, saving you time and frustration in tracking down bugs in your programs. With the Perl debugger, you can stop the program at selected points, print and modify the contents of variables, and print stack traces out to see what has been called from where. This book describes every command, option, and variable of the Perl debugger. Any intermediate to advanced Perl pro- grammer should be familiar with the debugger to save time and frustration while debugging their programs. Why Use the Debugger? There are many\n\nChapter 1 CHAPTER 1 What Is Ticketing? If your organization is anything like any of ours, there's always a lot of stuff to do. Vendors need to get paid. Customers need to get invoiced. Staff need to do work for customers. Sales inquiries need to be answered. Bugs in hard- or software need to be fixed, and everyone needs to know that they have been fixed. Somebody needs to take out the garbage. And at the end of the day, you've got to know who wanted what, who did it, when it got done, and most importantly what remains undone. That's where a ticketing system comes in. Why \"Ticket\"? The convention is to call each request or piece of work a Ticket. When a new thing comes into the system, we give it a virtual slip of paper with a number, much like the ticket for checking your coat at"}
{"text": "Wide\n\nThis course serves both as an end-to-end tutorial for those new to the language and a solid reference for experienced C/C++ programmers.\n\nTopics include:\n\nPrerequisites\n\nAbout C\n\nAbout C++\n\nUsing pointers\n\nWorking with characters and strings\n\nWorking with increment and decrement operators\n\nDefining a function\n\nOverview of classes and objects\n\nOverview of class inheritance\n\nUsing studio file for I/O\n\nWriting iterators\n\nOverview of C++11\n\nAlong with the free video training tutorials you will also receive monthly offers, tips, and insider information you won't hear elsewhere - including"}
{"text": "Programming\n\nImagine how much easier it would be to solve a programming problem, if you had access to the best practices from all the top experts in the field, and you could follow the best design patterns that have evolved through the years. Well, now you can. This unique book offers development solutions ranging from high-level architectural patterns, to design patterns that apply to specific problems encountered ... Read More\n\nIf you're interested in discovering how to program (or how others program), Perl For Dummies, 4th Edition, ... Read More\n\nPHP and MySQL Everyday Apps For Dummies is a one-stop reference providing all you need to build dynamic, real-world, ready-to-use apps with the popular PHP (a scripting language) and MySQL (a database system) software. The book is a hands-on, go-to-guide that ... Read More\n\nIf you want to build dynamic Web sites that encourage users to interact with them, PHP and MySQL are among the best tools you'll find. PHP is a scripting language designed specifically for use on the Web, while MySQL is a database management system that works with it perfectly. Best of all, they're free. It's hard to beat that combination!\n\nTo be on the cutting edge, Web sites need to serve up HTML, CSS, and products specific to the needs of different customers using different browsers. An effective e-commerce site gathers information about users and provides information they need to get the desired result.\n\nPHP scripting language with a MySQL back-end database offers an effective way to design sites that ... Read More\n\nEverything you need to know to create a dynamic PHP and MySQL Web site!\n\nBeen. ... Read More\n\nPython is one of the most powerful, easy-to-read programming languages around, but it does have its limitations. This general purpose, high-level language that can be extended and embedded is a smart option for many programming problems, but a poor solution to others.\n\nPython For Dummies is the quick-and-easy guide to getting the most out of this robust program. This hands-on book will show you everything you need to know about building programs, debugging ... Read More\n\nMaster the programming language of choice among statisticians and data analysts worldwide\n\nComing exercises, and sample code, this extremely accessible guide is the ideal introduction to R for complete ... Read More\n\nCreate VBA, VB.NET, and C# custom applications with this radical new interface\n\nAre you ready to tackle RibbonX? This friendly, plain-English guide gives you the tips and techniques you need to design and implement Ribbon apps fast, as well as plenty of examples for working in VBA and Visual Studio(r). You'll customize the Ribbon to meet your needs, create new elements, and even find solutions ... Read More\n\nUse this free and easy programming language for e-commerce sites and blogs\n\nIf you need to build Web and database applications quickly but you don't dream in computer code, take heart! Ruby on Rails was created for you, and this book will have you up and running in no time. The Ruby scripting language and the Rails framework let you create full-featured Web applications fast. It's even fun! ... Read More\n\nLight up your system with a new resource manager, volume manager, and directory server\n\nIn the dark about Solaris 9? Open this book and let the sun shine in! It'll help you chart a course for StarOffice, explore CDE and GNOME desktops, and harness Solaris power to configure Web servers, access Internet services, build great Web sites, manage files and directories, and a galaxy of other tasks. ... Read More\n\nWrite programs that automate tasks and make Office 2007 work better for you\n\nIf your computer is becoming your boss instead of your servant, start using VBA to tell it what to do! Here's the latest on the VBA IDE and program containers, debugging and controlling your programs, working with multiple applications using a single program, and the most exciting stuff -- programming for all the Office 2007 applications ... Read More\n\n* Gives programmers, software developers, and advanced users of Microsoft Office applications all the key concepts necessary to write VBA programs for the new Office \"X\" * Fully updated to cover all the changes in the newest release of Office * VBA (Visual Basic for Applications) is the primary development tool for all applications in the Microsoft Office suite-Access, Excel, and Word-and according to Microsoft, more than 2.6 million programmers currently ... Read More\n\nVBA For Dummies is a real card-carrying Dummies title with its fresh, conversational and irreverent style, yet it still covers VBA programming with real depth and accuracy. The book starts with a brief background on VBA and an explanation of key jargon and theoretical concepts. Then you jump right into the practical programming covering topics such as: VBA development environment; Visual Basic Editor; Meat and potatoes coding techniques; Database ... Read More\n\nVisual Basic is a favorite programming language, so if you're new to programming, it's a great place to start. Visual Basic 2008 For Dummies is the fun and easy way to begin creating applications right away while you get the hang of using the Visual Studio environment. Soon you'll be building all sorts of useful stuff with VB 2008!\n\nThis step-by-step guide walks you through a logical series of tasks that build your skills as you get comfortable with ... Read More\n\nWhile previous versions of Visual Basic had some database facilities, with Visual Basic 6, Microsoft has created a robust, fully-fledged database programming language. VB6 includes a raft of highly effective database features and tools including hundreds of efficiencies, step-through wizards, and shortcuts that in most cases are extremely easy to understand and master. Among the most important of these are ADO Data Control, Data View window, Query ... Read More"}
{"text": "Computer programming (often shortened to programming or coding) is the process of designing, writing, testing, debugging, and maintaining the source code of computer programs. This source code is written in one or more programming languages (such as Java, C++, C#, pythonWhy Is Computer Programming So Important? So you wish to study computer programming. You have made a wise decision. Computer programming is an extremely interesting career path of study. Actually, it has acquired several remarkable advancement within the last ten years plus shows hardly any sign of stopping. It is actually one of the very few professions that specialists claim can survive for the next couple of years. It is dynamic, quite challenging and also very profitable both as a career or as a individual desire. If learning computer programming is your goal this year, here are some things you might want to learn about this field:\n\nComputer Programming Covers Countless Areas. The word programming is sometimes alternated with coding. Basically, it\u00eds a profession that requires writing the source code used by computer systems. In order to become a computer Programer, it\u00eds essential to uncover the strategies on how to construct this code. Since computer programs vary in style and also performance, so will the way with which their base codes are drafted.\nThis is why computer programming cannot be used to reference one particular computer language. It truly is, a term that describes various computer languages. If perhaps you intend to study computer programming, have a look among computer languages such as COBOL (outdated yet still efficient), FORTRAN (still utilized in several engineering programs), Java, HTML/XML, Visual Basic, C/C++, PHP, Perl and even Python, and others."}
{"text": "Computing Concepts with C++ Essentials\n\nCompiler and Tool Help\n\nGnu g++ on Microsoft Windows\n\nYou simply must be able to work with files and directories (also\ncalled\nfolders). Computers have become so easy to use that many casual\ncomputer\nusers seem to have no idea where their computer stores data. If you are\nsuch\na user, you need to learn more about files and directories. See the\nlinks\nat the end of this page for tutorials.\n\nThe g++ compiler can be freely downloaded in a number of forms. The\neasiest\nmethod is to install Cygwin, following these\ninstructions . Cygwin includes the g++ compiler.\n\nInstall Cygwin into c:\\cygwin, or modify the instructions\nbelow\nif you use a different installation directory.\n\nYou also need a text editor. You can use Notepad for very simple\nprograms,\nbut you should get a better editor such as Textpad or Emacs\n.\n\nYou invoke the compiler from a command shell (also called a DOS\nshell).\nIf you never used the DOS shell and don't know how to manoeuver around\nthe\nfile system with the cd command, you'll need to learn that\nfirst.\nSee the links at the end of this page for tutorials.\n\nIf you want to compile programs that use the Time/Employee\nclasses or CCC graphics, then you need to download and unzip the\nprograms\nfor this book from \n. Unzip all files into a directory such as c:\\cccbook. If you\nchoose\na different installation directory, modify these instructions\naccordingly.\n\nHere are the instructions for compiling programs:\n\nPrograms that don't include the Time/Employee\nclasses\nor CCC graphics:\n\ng++ -o executable_name source_file\n\nFor example,\n\ng++ -o hello hello.cpp\n\nPrograms that include the Time or Employee class:\n\nHere are the directions for the Time class. To use the Employee\nclass, simply replace ccc_time with ccc_empl.\nCompile with the following command:\n\nAlternatively, you can copy ccc_win.h, ccc_msw.h,\nccc_msw.cpp , ccc_shap.h, and ccc_shap.cpp\nfrom the c:\\cccbook\\cccfiles directory into the same\ndirectory as the\nprogram that uses them, and compile with a simpler command line.\n\nCompiling wxWidgets Programs in Microsoft Windows\n\nUnfortunately, this is harder than it should be. First, you need to\nmake\na resource file for each application. That is a file that has the same\nname\nas your program but extension .rc. It needs to contain the\nsingle\nline\n\n#include \"wx/msw/wx.rc\"\n\nMoreover, the compilation command is so complex that you need to use\na\nmake file. Run the command"}
{"text": "Programming Cycle helps the programmers to solve problems specially for those who are new in the field of programming. One way of solving programming problems is to use the concepts in programming cycleBefore beginning in writing any programs, you first and foremost need to download something called the JDK. It is the program used by Java developers that lets you write Java and actually compile it. Compiling just simply means to transfer it from a code that you cannot understand but the computer can.\n\nPython is an extraordinarily dominant, vibrant, and robust programming language that is utilized within a large number of application domains. The language is generally compared to Java, Scheme, Ruby, Perl, or Tcl.\n\nThe symbol of programming language that will be discussed later was rooted on the note of music which is the see sharp note. The sharp signifies a pitch that is higher in half-step. Due also to the restrictions of the computer display and because the symbol of sharp cannot be found on the standard computer keyboard that is why the number (#) sign was used to symbolize the character of sharp"}
{"text": "C# Programming\n\nC# Programming : From Problem Analysis to Program Design\n\nSummary\n\nMaster the problem-solving skills and techniques associated with object-oriented program development using this hands-on, reader-friendly text. C# Programming: From Problem Analysis to Program Design, Second Edition, introduces a variety of basic programming concepts, from data types and expressions to arrays and collections, all using C# as the programming language. Ideal for both novices and programmers with experience in other languages, this book goes beyond traditional programming books by including new, advanced software development features that are often only found in specialized books. The second edition has been revised to include new features of Visual C# 2005, including generics and partial classes, so readers receive an up-to-date education on programming."}
{"text": "Autocode\n\nAutocode is the name of a family of \"simplified coding systems\", later called programming languages, devised in the 1950s and 1960s for a series of digital computers at the Universities of Manchester and Cambridge. Autocode was a generic term; the autocodes for different machines were not necessarily closely related as are, for example, the different versions of the single language FORTRAN.\n\nThe first autocode and its compiler were developed by Alick Glennie in 1952 for the Mark 1 computer at the University of Manchester and is considered by some to be the first compiled programming language.[1]\n\nThe second autocode was developed for the Mark 1 by R. A. Brooker in 1954 and was called the \"Mark 1 Autocode\".\n\nBrooker also developed an autocode for the Ferranti Mercury in the 1950s in conjunction with the University of Manchester. Mercury Autocode had a limited repertoire of variables a-z and a'-z' and, in some ways resembled early versions of the later Dartmouth BASIC language. It pre-dated ALGOL, having no concept of stacks and hence no recursion or dynamically-allocatedarrays. In order to overcome the relatively small store size available on Mercury, large programs were written as distinct \"chapters\", each of which constituted an overlay. Some skill was required to minimise time-consuming transfers of control between chapters. This concept of overlays from drum under user control became common until virtual memory became available in later machines. Slightly different dialects of Mercury Autocode were implemented for the Ferranti Atlas (distinct from the later Atlas Autocode) and the ICT 1300 and 1900 range.\n\nThe version for the EDSAC 2 was devised by D. F. Hartley of University of Cambridge Mathematical Laboratory in 1961. Known as EDSAC 2 Autocode, it was a straight development from Mercury Autocode adapted for local circumstances, and was noted for its object code optimisation and source-language diagnostics which were advanced for the time. A version was developed for the successor Titan (the prototype Atlas 2 computer) as a temporary stop-gap while a more substantially advanced language known as CPL was being developed. CPL was never completed but did give rise to BCPL (developed by M. Richards), which in turn led to B and ultimately C. A contemporary but separate thread of development, Atlas Autocode was developed for the University of Manchester Atlas 1 machine.\n\nCampbell-Kelly, Martin (1980). \"Programming the Mark 1: Early Programming Activity at the University of Manchester\". Annals of the History of Computing (IEEE) 2 (2): 130\u2013167. doi:10.1109/MAHC.1980.10018."}
{"text": "Welcome to PyKata ... the website for Python practice. Learning Python is a skill.\nIt takes practice, not just an understanding of the theory. In fact, you can learn\nbasic Python without any theory. Just read the help pages if you get stuck. Start\nwith the easy problems first. Some of these have hints, or even a complete solution.\nvision statementteacher statementsmanifesto\n\nAbout Python ... Python is a modern mainstream computer language, much like Java\nand C++, but simpler. It's the closest thing we could find to pseudocode, the language used\nby scientists when they want to express an idea involving computation.\n\nYou don't have to take an entire course in programming to learn Python. Every high-school\ngraduate, certainly anyone considering a career in technology, should know how to write a\nsimple program. Python makes that possible. PyKata is the best way to learn Python."}
{"text": "Welcome to part II of the compiler design tutorial! Parsing is a pretty complex subject, so the examples I will present are basic but good enough for you to see how you can extend them to support a progamming language. We'll parse a conditional statement (if/then), arithmetic statements, and a few others.\n\nAfter the source code has been tokenized, the parsing phase commences. At the end of this stage, if the source code is syntactically valid, the compiler has generated either (1) an abstract syntax tree (AST) or (2) a syntax-directed translation (SDT) of the source code. These are known as immediate representations (IR). They are forms that can be optimized easily and later translated into assembler code. An AST is a simpler form of the source code that represents the syntactical structure of the code, and SDT is an assembler-like language that closely represents the actual layout of runtime instructions. SDT sort of skips the syntax tree all together. I'll cover SDT in part III.\n\nB. Grammar and Language\n\nGrammar provides a precise way to specify the syntax (structure or arrangement of composing units) of a language. In grade school we take grammar lessons that teach us to speak and write proper English. They teach us the correct way to form sentences with subjects, predicates, noun phrases, verb phrases, etc.\n\nSubjects, predicates, and phrases are some of the composing units of a sentence in English; similarly, if/else statements, assignment statements, and function definitions are some of the composing units of source code, which itself is a single sentence of a particular programming language. There are a very large number of valid English sentences one could compose; likewise, there are a large (probably infinite) number of valid source code programs one could create.\n\nIf someone says \"on the computer she is,\" we immediately recognize that the sentence is ill-formed. It's structure is invalid, because the noun phrase should proceed the verb phrase. It should be: \"She is on the computer.\" Diagramming is used to validate the sentence, or rather to specify the syntax of it. If you take a look at that diagramming article, you'll see that the model is exactly like an AST. So it goes without saying that parsing, or more formally, \"syntactical analysis,\" has its roots in Linguistics.\n\nMoreover, just as in English, programming languages need to be specified in a way that allows us to verify whether a sentence of the language is valid. That's where context-free grammars (CFG) come to into play; they allow us to specify the syntax of a programming language's source code.\n\nC. Context-Free Grammars\n\nA context-free grammar is a set of rules that specify how sentences can be structured; this set of rules can be defined recursively. All CFGs have (1) a start symbol, (2) a set of non-terminal symbols, (3) a set of terminal symbols, and (4) a set of productions or \"re-write rules.\" The following is a CFG that describes simple mathematical expressions that aren't aware of precedence or associativity rules.\n\nexpr \u2192 expr op expr\n\nexpr \u2192 (expr)\n\nexpr \u2192 -expr\n\nexpr \u2192 id\n\nop \u2192 * | / | + | -\n\nid \u2192 a | b | c\n\nNote: The division and addition symbols should be bold.\n\nEach line is a production (or \"rule\"). expr, op, id, *, /, +, -, a, b, c are all symbols. The pipe (|) indicates that each symbol can serve as the replacement for the left side of the production, but you can only choose one. When I say \"left side of the production\" I mean to the left of the arrow. You can see that some of the productions are recursively defined.\n\nThe start symbol is the symbol for which all sentences in the language can be derived from. It's also where we begin. Usually, the symbol on the left side of the first production is the designated start symbol, but sometimes it's specified explicitly if it's not in the first production. So expr is the start symbol.\n\nNon-terminals are symbols that can be replaced by the right side of their productions. They are symbols that represent a set of strings that may contain other non-terminals and terminals. They are a syntactical \"variable\" or \"category\" because there are many strings they can be replaced with. Each symbol on the left side is a non-terminal. Terminals are the symbols that can't be re-written. They are the tokens, or basic units, of which strings in the language are composed of. The terminals correspond to the set of tokens returned by the lexer. The bold face symbols are terminals. Here's another simple CFG that describes a few common programming constructs.\n\nstmt \u2192 if equality_expr then stmt else stmt\n\nstmt \u2192 do stmtList while equality_expr\n\nstmtList \u2192 stmt | stmt; stmtList\n\nHere's a set of productions that describe the Integer class in part I. This CFG partially describes our notion of a Java class, not just a class named Integer.\n\nSpoiler\n\nThe source code:\n\npublic class Integer { int value; }\n\nThese are the tokens returned by the lexer. Remember, the tokens are represented with a Symbol class and are fed to the parser sequentially on demand. These are also used as terminals in the CFG.\n\nID is a terminal that corresponds with the lexer token returned when an identifier that our language accepts is matched. There are a vast number of valid identifiers; therefore, ID is used instead of listing all possibilities. ID represents all the strings matched by the following regular expression:\n\nNotice that the type non-terminal can be reduced to a boolean or string as well, so we could have declared Integer.value (see source code) as a string type. We could also extend this CFG and define declaration to be a field declaration or method declaration. Note that I said declarations and definitions.\n\nWhen we apply the productions starting from the start symbol we try to derive a sentence in the language, that is, a string of terminals. a + b * c is a sentence of the language defined by our first CFG above. Similarly, the source code we write is a sentence of some language defined by some CFG. Let's walk through a derivation of the mathematical expression a + c using the first CFG above.\n\nExpand or \"reduce\" the start symbol, expr. This means replace the non-terminal in question with the appropriate string on the right side of its production. There are several to choose from: expr op expr, (expr), -expr, and id. Pick the one that you think will derive a + c in the least amount of steps. expr op expr seems like the right one, but why? If we look at the expression we can see it that matches up (or will match up in a few steps) with the production exactly. The terminal a is an id, which is an expr; + is an op and c 's case is the same as a's. As you can see a little intuition has to be exercised here. Note that we just did a recursive expansion. The current derivation is as follows:\n\nexpr \u2192 expr op expr\n\nI will use the term \"expansion\" many times throughout this part of the tutorial; what I call an \"expansion\" is commonly referred to as a \"reduction.\"\n\nWe are now working on expr op expr. Expand the first non-terminal from the left. Replace expr with the most appropriate production. Like we said above, since a is an id, we ought to use the production: expr \u2192 id. The current derivation becomes:\n\nexpr \u2192 expr op expr \u2192 id op expr\n\nWe are now working on id op expr. Since id is a non-terminal we expand that instead of moving on to op. id only has one production: id \u2192 a | b | c. We can choose between the three. We choose a. The current derivation becomes:\n\nexpr \u2192 expr op expr \u2192 id op expr \u2192 a op expr\n\nBecause we keeping expanding the leftmost non-terminal first, we call this a leftmost derivation.\n\nop is now the leftmost non-terminal, so we expand it to *, /, +, or -. We choose op \u2192 + . The current derivation becomes:\n\nAnd that's it folks! We've ensured the expression is syntactically valid and is therefore a sentence of the language described by our CFG. The final string is all terminals. This must be true for all derivations of any string in the language. If you had any trouble following along, this example should help to clarify the procedure.\n\nSuppose the expression was a + d. At step 6, when we try to expand id to d, we fail, because there's no production for that. If the expression was d + a, we would have failed at step 3. If the expression was b % a, we would have failed at step 4.\n\nNote that epsilon means \"nothing\" or that there's no match available. So in the sixth production a variableInitializationList can be reduced to nothing, meaning the method didn't have any initialization statements or that we've matched several initializations and there aren't any left. INTLITERAL is a terminal that corresponds to a lexer token returned when an integer literal is matched. Examples of integer literals are -123, 0, 432434, etc. The regular expression is:\n\nINTLITERAL = [-0-9][0-9]*\n\nSTRLITERAL is a terminal that corresponds to a lexer token returned when a string literal is matched. String literals are strings in double quotes: \"one\", \"_two?\", \"\\n\\t three\". Its regular expression is similar to the one for ID, which I talked about earlier.\n\nIn the statement directly above, we've included the first initialization statement of the source code in the derived string (in the middle):\n\nINTIDASSIGNINTLITERAL\n\nID would equal \"num,\" and INTLITERAL would equal 20 if we replaced them with the actual values. Let's continue. Next, we expand variableInitializationList and start this whole process over for the next initialization statement.\n\nMy point in doing this incredibly long leftmost derivation is to show you that the derivation proceeds in the same order as the execution of the program instructions. This is the first important point! We derived the first integer assignment first, not second or third. Then, we derived the boolean assignment second, and so on.\n\nAs you can see CFG is very powerful, having the ability to describe sentences of a potentially infinite size (as long as your system memory can accommodate it). I could have added 100,000 methods to IntegerTest and still validated its syntax.\n\nE. Abstract Syntax Trees\n\nAn AST is a type of parse tree that's used in source code compilation. It's abstract because minor details in the code like semicolons and braces are omitted. Parse trees that include those details are called concrete syntax trees. Enough information is stored to preserve the meaning of the program.\n\nEach tree node represents a grammar symbol. Every node that represents a non-terminal in the tree has a collection of child nodes that are either non-terminals or terminals. The child nodes represent the symbols that were produced from expanding the non-terminal. The leaves in the tree are always terminals and the interior nodes are always non-terminals. Terminal nodes are usually variable identifiers or literals This is the second important point.\n\nHere's a partial AST for IntegerTest:\n\nIt just so happens that a preorder tree traversal on our AST visits nodes in the same order as the derivation, so logically it follows that the traversal follows the order in which instructions are executed. This is the third and final important point. And that my friends is the way we generate assembler that preserves the exact order in which high-level instructions are written! We recurse through the AST, generating the corresponding assembler for the node type. Beautiful isn't it?\n\nTranslating assembler instructions line for line isn't difficult. No parsing is needed. This is essentially what an assembler does. It translates assembly statements to their binary counterparts. The nice thing is that the instructions execute in sequence.\n\n0x1 li $v0, 1\n0x2 syscall\n\nIt's guaranteed that the system call instruction will be executed directly after the load immediate instruction for this program. So an assembler doesn't have to worry about maintaining the order of executing instructions. An assembler literally goes through each line and translates it to machine code.\n\nWhat makes compilation more difficult is that you have to translate a program where high-level instructions jump from one method to another.\n\nI can't just go from line 0 to 5 and translate each statement into a runtime instruction. foo() may never even be called in the program. In short, there isn't a direct translation like with assembler. In assembler, when you see a load immediate instruction you just translate it to 010101011010101010 or whatever the ISA calls for.\n\nWhen you generate assembler from a node in the AST for a method call, there's a lot more to do. You have to save the state of your registers (save the local variables), plop arguments onto the stack (send the method parameters), set stack and frame pointers (don't destroy another method's state!), check the symbol table (how much stack space do I need?), etc.\n\nThe other nice thing about ASTs is that they can be represented in computer programs. It's just a regular ol' node-based tree. As the parser runs through its parse algorithm, it builds a tree with nodes that are specialized. The visitor pattern is very useful when working with ASTs because it allows the compiler to be extensible (supporting more CPU architectures). An example of AST nodes:\n\nCFG can describe all regular sets, but it's overkill for regular expressions. Regex is a concise and powerful notation for describing patterns. Here's an example of Regex vs. CFG.\n\nOur regular set:\n\nS = {\"ab-\", \"ab-dd\", \"ac-\", \"ac-ddd\", . . .}\n\nRegex pattern:\n\na(b|c)-d*\n\nCFG\n\nS \u2192 aA\n\nA \u2192 ( b-B ) | ( c-B )\n\nB \u2192 dB | e\n\ne \u2013 is the empty string\n\nDo the derivation if you want, it works.\n\nThe process involved in creating a parse table is quite complex; it's inefficient to use CFG when an easier array-based regex solution exists. Regex implementations are much, much easier to construct than parsers, as we're about to see. I'm totally disregarding advanced regex features like lookahead, reluctant quantifiers, capturing groups, etc.; but even with those added, parsers are still more complex. Allowing regex to handle lexing allows the compiler to be modular, where front-ends are interchangeable.\n\nG. Parsing Methods and Implementations\n\nWe saw how lexers were built programmatically in the last section, and in the future parts of this tutorial we'll see how to programmatically generate assembler. In this part we saw how to define a CFG for the beginnings of a programming language and how to derive a given sentence while building an AST for it. However, all of what we've learned about parsing is useless if we can't do it programmatically. There are many parsing methods, each of which require a fair bit of detailed explanation, so we're only going to hit the tip of the iceberg, mainly focusing on top-down parsing.\n\nThere are two types of parsing methods: top-down and bottom-up. Everything I've showed you up to this point is an example of top-down parsing. \"Top-down\" is pretty much self-explanatory. From left to right, we drill down through each non-terminal until we get to a terminal. We also build our tree from the root node down to the leaves in a top-down fashion. It's important to note that we drill down from left to right replacing the leftmost non-terminal first. The definitive meaning of top-down parsing is \"an attempt to find a leftmost derivation.\" In bottom-up parsing we are doing a rightmost derivation, where we replace the rightmost non-terminal first.\n\nAmbiguity\n\nAmbiguous grammars are those in which a string of the language has more than one parse tree. This is problematic because it may be hard to interpret the intended meaning of the string. Here's an example from Wikipedia's entry on ambiguous grammars.\n\nx * y;\n\nThat C statement can be interpreted as the multiplication of two variables, x and y, or as the declaration of a variable y whose type is a pointer to x. To resolve the conflict the compiler must locate y's type information in the symbol table. If it's a numerical type the statement is interpreted as an expression.\n\nGenerally speaking, ambiguity is an unwanted feature of any grammar and may pose a threat to the correctness of both top-down and bottom-up parsers. Different parsers handle it with varying efficacy. In spite of all this, ambiguity isn't always a problem. It's possible to generate a non-ambiguous language from an ambiguous grammar. Even if there are two parse trees that generate a string, as long as it has one intended meaning there's no problem. Some parser generators allow specifying precedence and associativity rules to remove any ambiguity.\n\nBottom-Up Parsing\n\nIn bottom-up parsing the derivation starts from the string of terminals (our sentence) . We try to derive the start symbol of our CFG. It's essentially a top-down derivation backwards. Initially, instead of replacing a non-terminal with another non-terminal or terminal (drilling down), we replace a terminal with non-terminal (drilling up). At certain points we may even replace several non-terminals with one non-terminal. Since the derivation is the exact reverse of a leftmost derivation, we are then replacing non-terminals from right to left (a rightmost derivation). When we make a replacement we create a node that becomes the parent of some other node instead of its child.\n\nTop-Down Parsing\n\nThere are several problems with top-down parsing. (1) Left-recursion can lead to infinite parsing loops, so it must be eliminated. Left recursion in a CFG production occurs when the non-terminal on the left side appears first on the right side of the arrow. For some bad input, we might find ourself continuously expanding the same non-terminal. At the beginning of this tutorial we had\n\nexpr \u2192 expr op expr\n\nexpr \u2192 (expr)\n\nThat's left recursion. There are simple algorithms to remove it, but the CFG becomes twice as long in many cases. (2) Top-down parsing may involve backtracking. Backtracking is the act of climbing back up the derivation (the parse), reversing everything you've done to try another derivation path. We end up re-scanning the input as well. If you're inserting information into a symbol table (explained later) as the parse proceeds, everything has to be removed. That's pretty costly in a 10 million line application. The need for backtracking can be eliminated by parsing with lookahead. Note that backtracking isn't restricted to top-down parsers. There are backtracking LR parsers as well. Finally, (3) the order in which we choose non-terminal expansions can cause valid inputs to be rejected without information as to why.\n\nTypes of Top-Down Parsers\n\nThere are two types of top-down parsers: recursive-descent parsers and predictive parsers.\n\nA recursive-descent parser consists of a set of functions that construct a leftmost derivation of the input. The functions don't actually have to be recursive, but they can be. Each function implements a grammar rule. RD parsers may need to implement backtracking.\n\nBelow is an example of a grammar that requires backtracking.\n\nS \u2192 cAd\n\nA \u2192 ab | a\n\nThe input is cad.\n\nAfter matching c, when we go to expand A and we have a as the next character in the input. We don't know exactly whether the alternative ab or a will be chosen without looking at the next character in the input after a, which is d. We have to look ahead two characters in the input to know the right alternative to choose, but we only have access to a. We choose the first alternative expansion, ab. We match a in the alternative and go the next input token, d. We then try to match b in the alternative, but the next token is d, so we have to back track and choose a as the alternative. To implement backtracking in the code we have to save a pointer to a previous place in the input before we try an expansion and possibly remove information we have saved. It's costly when your deep into a parse of many lines of source code.\n\nA predictive parser is a recursive-descent parser that needs no backtracking. It can predict the derivation path it'll take by specifying a certain amount of lookahead. Lookahead is the number of tokens in the input the parser needs to examine to decide which non-terminal expansion to take. This type of parser only works for LL(k) grammars, where k is the amount of lookahead the parser needs to make its decision. Lookahead is looking at a few more input items to determine the correct path to take. An LL(k) grammar must not be ambiguous or contain left recursion. This is a major restriction for compiler designers, so LR parsers are preferred.\n\nAn LL parser is a predictive parser that reads the input from left to right and constructs a leftmost derivation on LL(k) grammars.\n\nLets go back to one of the CFGs from before.\n\nprogram \u2192 PUBLICCLASS id LCURLY classBody RCURLY\n\nclassBody \u2192 declaration\n\ndeclaration \u2192 fieldDeclaration | methodDeclaration\n\nfieldDeclaration \u2192 type id SEMICOLON\n\nmethodDeclaration \u2192 PUBLICVOID id LPARENRPARENSEMICOLON\n\ntype \u2192 INT | BOOLEAN | STRING\n\nid \u2192 ID\n\nThis grammar only allows for one class declaration, so you can either have a member field or a member function signature, but not both. Below is a code snippet for a recursive-descent LL parser for the above grammar. It directly mimics the CFG. The code is an LL(1) parser since we only use the next token in the input to make our expansion decisions. As you can see we don't need to save a pointer to a place in the input or logic to backtrack and try another path through the derivation.\n\nI've left out code to build the tree, but I've commented where you'd insert the tree-building statements.\nThe input is formatted for easy tokenization to keep things simple.\n\nEasy enough. In parts IV and VI I will add in the tree building statements, so that we have an AST to experiment with. You'll be able to implement your own semantic analysis and code generation from the tree.\n\nIt's impractical to think this is an effective way to parse sentences for all grammars. The parsing logic is hard coded. We need something dynamic that we can load with parsing logic. We need a table-based parser.\n\nTable-Based Parsing\n\nA more flexible way of implementing a parser is to make it table-based, where we introduce a parsing table (a 2d array) and a stack. Each entry in the parse table represents a reduce action, and each entry on the stack is a symbol.\n\nHere's a simple run-down of a table-based LL(1) parsing algorithm:\n\nThe bottom of the stack starts with $ and the grammar's start symbol is on top of that. Look at the symbol on the top of stack, we'll call that X, and then look at the current token of the input, we'll call that a. If X is a terminal and it equals a, pop X off the stack and remove a from the input. If it doesn't equal a, an occur has occurred. If X is a non-terminal, retrieve the reduction from the table and swap it with X. Table(X, a) returns the string that X is reduced to when a is the next token in the input. That string is one of the alternatives on the right side of the production. The string of symbols are actually thrown on the stack backwards since we're doing a leftmost derivation. If there's no entry in the table for X and a , an error has occurred. Repeat the steps until X equals $, where there are no more stack symbols to be processed. That's literally the entire algorithm. If that example was difficult to understand, here's another example showing how the algorithm works.\n\nSo how do we compute the parse table? You have to construct the first and follow sets. The input to these algorithms are a CFG. You can find the algorithms here. They aren't too complicated.\n\nThe important thing to know is that the parsing algorithm utilizes a table that's dynamically generated from the output of the first and follow sets, which can be programmatically generated from a grammar specification. No more hard-coding your grammar rules! And no more having to write code to support more language syntax! This gives rise to what we call the parser generator. This is the sane way to create a complex parser.\n\nTypes of Bottom-Up Parsers\n\nOne form of bottom-up parsing is called shift-reduce parsing. This method of parsing uses a table of actions and a stack of symbols. The Wikipedia entry has an easy-to-understand example. It's a relatively simple algorithm that only supports a small class of grammars. The major disadvantage with shift-reduce parsers is that they don't support associativity or precedence rules, nor do they handle ambiguous grammars well. They are used to describe operator grammars and are commonly used to parse mathematical expressions.Operator-precedence parsing is a bottom-up shift-reduce parser that supports defining precedence rules for grammars. Perl 6 and GCC parsers use some form operator-precedence parsing for optimization purposes.\n\nLR Parsing\n\nLR parsers are a class of parsers that scan the input from left to right, but constructs a rightmost derivation. It's a bottom-up parser because it constructs a rightmost derivation instead of a leftmost derivation like the top-down parsers. LR(k) parsers require k lookahead. They are deterministic.\n\nLR parsers have some advantages over their counterparts:\n\nThey can handle virtually all CFG grammars (including left recursive ones), giving them the ability to handle many more languages than LL parsers.\n\nThey have better error reporting than backtracking parsers.\n\nLR parsers consist of a stack of symbols, an input buffer, and a parser driver but also have a few more components. The parse table for an LR parser is filled with states. There is also an action and a goto table. I said I wouldn't go to deeply into the details of bottom-up parsers, because it would be very time consuming, so I'll just give a high-level overview.\n\nThere are three general types of LR parsers: SLR parsers, Canonical LR parsers, and LALR parsers. SLR parsers are the simplest to implement, but fail to produce tables for certain grammars. Canonical LR parsers are the most powerful of the three but are also the hardest to implement. They cover the widest range of grammars. Lastly, LALR parsers cover the middle ground: they are between SLR and Canonical parsers in complexity and coverage but can handle grammars for most programming languages.\n\nGLR parsers are an extension of LR parsers that use a form of backtracking to handle ambiguous grammars. They work by forking sub-parsers at any point in the parse where they can't decide which transition to take. If any match in the sub-path fails, that sub-parse is thrown away and the next sub-parse is tried. If several sub-parses pass, the parser accepts both. In this sense, backtracking takes on a more general meaning: building up candidates as possible solutions and discarding them as soon as they fail.\n\nIt's worth mentioning that there are backtracking LR parsers as well.\n\nBacktracking parsers go through greater troubles to give the exact location of a syntax error, because they have to try many candidates before they're absolutely sure that the string isn't valid. The parser may have to record each possible syntax error and include logic to figure out the correct one upon failure. When deterministic parsers fail to match a token, the process as a whole fails at that point and the location of the failure is known at that point.\n\nUnlike the table-based top-down parser, an LR parser uses a table of states rather than productions. The LR parsing algorithm jumps from state to state. It's essentially a deterministic finite automaton. The algorithm is fairly simple, but constructing the parse tables is not.\n\nTo construct an LR parse table you have to turn the grammar into a DFA. From the DFA, you construct the parse table. The DFA is able to recognize prefixes in the grammar, and that allows the parser to determine what actions it needs to take without having to scan down the stack to make decisions. This is the \"power\" of LR parsers. To create the DFA you must perform the canonical sets-of-items algorithm, which depends on 3 other algorithms: augmenting grammars, closure, and goto. The inputs to these algorithms are a CFG. The algorithms are somewhat complicated. They are certainly harder to understand than those of a table-based predicative parser. Here's a overview of LR parse tables.\n\nLR parsers are hard to implement by hand because the sets-of-items construction will result in LR tables with several thousand states. The parse table for a typical programming language will have 20,000 entries; that's 20 KB! It gets messy quickly, even for very small grammars, so parser generators are normally used to create the parse tables. Generators are implementations of the aforementioned table-construction algorithms, which of course can do things much more efficiently than humans.\n\nSaving space is particularly important in constructing parse tables because many table entries (array elements) will be empty. One might use linked lists instead. There are also many duplicate rows that can be eliminated with the use of pointers, where you could compress many rows into one long row whose elements contain the index of the duplicate row.\n\nParser Generators\n\nParser generators are fantastic, and they're easy to use! You just feed them a specification file with a bunch of CFG rules, and it spits out a parser in your language of choice. Usually you can embed code into the specification to specify how you want the parser to build your AST. There are also ways to specify the precedence and associativity rules. And furthermore, they can usually handle ambiguous grammars.\n\nYacc was one of the earlier parser generators developed and was the default generator on UNIX systems. Two popular generators based off Yacc are GNU Bison and CUP. Both produce LALR parsers. GNU Bison is probably the most popular generator today. It can produce parsers in C, C++, and Java code. It's been used to create YARV (Ruby interpreter), Zend parser (PHP scripting engine), Bash Shell, and GCC (initially). ANTLR is another generator and probably is the most popular of them all. The ANTLR package has some really nice tools that make easing into compiler construction a lot more comfortable.\n\nCUP, formerly known as JCUP, is a parser generator for Java. I found it particularly easy to use and I would recommend it to anyone looking to build a Java parser or compiler. I had planned on showing a few examples of CFG for a simple language, but I ended up writing a post that goes somewhat in depth on how to do so using CUP. All the CFGs I wrote above can be translated into a CUP spec with minimal effort.\n\nBison and CUP require a lexer to produce a parser, usually Flex and JFlex, respectively. I covered how to use lexer generators in part I. The JFlex distribution has a few really good examples for generating lexers and parsers.\n\nH. Conclusion\n\nLuckily, we don't have to concern ourselves at all with how parsers are built. We focus only on specifying the CFG for our language and using a generator to create our parser. Creating an AST is an elegant way to represent the structure of source code that leaves the compiler open to optimization and code generation. To recap, we've covered the following important points:\n\nA derivation proceeds in the same order as the execution of the program instructions\n\nA preorder tree traversal on our AST visits nodes in the same order as the derivation, so logically it follows that the traversal follows the order in which instructions are executed.\n\nA table-based parsing algorithm utilizes a table that's dynamically generated from the output of the first and follow sets, which can be programmatically generated from a grammar specification.\n\nParser generators are implementations of the table-construction algorithms.\n\nIf your interested, I found this awesome set of lecture notes for the dragon book. In part III, we will take a short look at the wonderful world of syntax directed translation.\n\nReplies To: An Introduction to Compiler Design - Part II - Parsing\n\nthere are many more things a parser can produce than just ASTs or translations. they are however by far the most common.\n\nASTs are not IRs. IRs are languages unto themselves. frequently ASTs are used to get to an IR but sometimes you go directly to an IR\n\nin your issues with top-down parsing it seems worth mentioning that ambiguity causes all of those except for left-recursion(which can be eliminated via various methods and still maintain a top-down parser without modification to the grammar) ambiguity effects bottom-up just as much as top-down. the only real difference between top-down and bottom-up is the way the tree(or other output medium) is constructed. top-down does imply a certain difficulty with left-recursion however.\n\nwere does the idea that backtracking is unique to top-down parsing come from? backtracking is a method of dealing with grammars that require more look ahead that was is used. both are able to use this or not. for instance, check out backtracking LR parsers; I'm pretty sure they can handle all CFGs unlike vanilla LR parsers(e.g. equivalent to GLR parsers)\n\nyou say \"They can give information as to where syntax errors occur.\" in reference to bottom-up parsers. top-down can do that just fine.\n\n\"There are three types of LR parsers: SLR parsers, Canonical LR parsers, and LALR parsers\" there are more than that. GLR and backtracking LR just off the top of my head.\n\nThinking about it a bit further I would agree. Cmm, Haskell Core, and STG-code are used in GHC but are never handled in actual text. instead ASTs of the languages are used so I'd say your right about that; I under thought that one."}
{"text": "Software Build Systems:Principles and Experience\n\nInadequate build systems can dramatically impact developer productivity. Bad dependencies, false compile errors, failed software images, slow compilation, and time-wasting manual processes are just some of the byproducts of a subpar build system. In Software Build Systems, software productivity expert Peter Smith shows you how to implement build systems that overcome all these problems, so you can deliver reliable software more rapidly, at lower cost.\n\nSmith explains the core principles underlying highly efficient build systems, surveying both system features and usage scenarios. Next, he encapsulates years of experience in creating and maintaining diverse build systems\u2013helping you make well-informed choices about tools and practices, and avoid common traps and pitfalls. Throughout, he shares a wide range of practical examples and lessons from multiple environments, including Java, C++, C, and C#. Coverage includes\n\nIf you're a developer, this book will illuminate the issues involved in building and maintaining the build system that's best for your team. If you're a manager, you'll discover how to evaluate your team's build system and improve its effectiveness. And if you're a build \"guru,\" you'll learn how to optimize the performance and scalability of your build system, no matter how demanding your requirements are.\n\nSoftware Build Systems:Principles and Experience"}
{"text": "The Executive Computer; Borland Sees Its Future in Delphi\n\nSOMETIMES the financial and managerial travails of a company can obscure its products. That has certainly been the case with Borland International Inc., which has been beset with losses, layoffs and lawsuits as it labored to deliver upgrades of its mainstay products like the Paradox and dBase data-base management programs. Its newest product, Delphi, which ships this week, could be the company's last and best hope for renewed prosperity, if not continued survival.\n\nDelphi is a visual programming tool. That means software developers can create applications to run on Microsoft's Windows operating system by point-and-click and drag-and-drop commands rather than writing thousands of lines of computer code from scratch. Some coding is still necessary, and this is definitely not a product for end-users, but tools like Delphi can speed the programmer's task considerably. A corporate in-house programmer, for example, might use Delphi to create software for tracking purchasing orders.\n\nUnfortunately, Delphi is entering a market already defined by three successful products: Powerbuilder from Powersoft, a company recently acquired by Sybase; SQL Windows, from Gupta; and Visual Basic, from Microsoft. Borland says Delphi offers technological advantages over these products, but its competitors can claim one fundamental advantage over Borland: they are financially healthy. Borland, which hasn't had an operating profit in threes years, reported a $22.9 million third-quarter loss in January, on sharply lower revenues.\n\nCorporations are often reluctant to adopt a product, no matter how good, from a company that appears shaky -- especially a product in Delphi's league, which can cost $2,000 and would be used for a company's most important computing needs.\n\nDelphi's primary advantage over the other products is the inclusion of a compiler -- a software program that translates the English-like syntax of programming languages like Pascal and Basic into the ones and zeros of computer machine language. Compiled applications run faster than those that the computer must translate on the fly, which is basically how the competing tools work. That's a real advantage, analysts say, but one that the other companies will eventually match, so Borland may have a limited window of opportunity.\n\n\"They've got to prove that Delphi does something new and different besides providing compiled code,\" said Brent Williams, an analyst with the Gartner Group. \"A year and a half from now, everybody will have compiled code,\" he said.\n\nIn many ways, Delphi embodies the return to Borland's roots, something that the company's management has been talking about since it sold Quattro Pro, a spreadsheet application, to Novell Inc. last year.\n\nPhillipe Kahn, Borland's recently deposed chief executive, founded Borland in 1983 on the strength of his PC version of the programming language Pascal. He initially sold the product by mail, taking out small advertisements in computer magazines. Software developers remain loyal to Borland's languages and compilers, which have continued to win accolades even as the company has foundered.\n\n\"We looked at the combination of our skills -- Windows development, fast compiler technology and data base -- and asked how can we push past the limits of these other tools,\" said Paul H. Gross, Borland's vice president for research and development. Because it uses a programming language that can be compiled, he said, \"applications made with Delphi will run 10 to 20 times faster\" than ones created with other visual tools."}
{"text": "Thinking in C++, 2nd ed., Volume 2, Revision 3\n\n10: Design patterns\n\n\"... describes a problem which occurs over\nand over again in our environment, and then describes the core of the solution\nto that problem, in such a way that you can use this solution a million times\nover, without ever doing it the same way twice\" \u2013 Christopher\nAlexander\n\nThis chapter introduces the important and yet\nnon-traditional \"patterns\" approach to program design.\n\n[[ Much of the prose in this chapter still needs work, but the\nexamples all compile. Also, more patterns and examples are forthcoming\n]]\n\nProbably the most important step forward in object-oriented\ndesign is the \"design patterns\" movement, chronicled in\nDesign Patterns, by Gamma,\nHelm, Johnson & Vlissides (Addison-Wesley\n1995).[25] That book shows 23 different\nsolutions to particular classes of problems. In this chapter, the basic concepts\nof design patterns will be introduced along with examples. This should whet your\nappetite to read Design Patterns (a source of what has now become an\nessential, almost mandatory, vocabulary for OOP programmers).\n\nThe latter part of this chapter contains an example of the\ndesign evolution process, starting with an initial solution and moving through\nthe logic and process of evolving the solution to more appropriate designs. The\nprogram shown (a trash recycling simulation) has evolved over time, and you can\nlook at that evolution as a prototype for the way your own design can start as\nan adequate solution to a particular problem and evolve into a flexible approach\nto a class of\nproblems.\n\nThe pattern concept\n\nInitially, you can think of a pattern as an especially clever\nand insightful way of solving a particular class of problems. That is, it looks\nlike a lot of people have worked out all the angles of a problem and have come\nup with the most general, flexible solution for it. The problem could be one you\nhave seen and solved before, but your solution probably didn't have the\nkind of completeness you'll see embodied in a pattern.\n\nAlthough they're called \"design patterns,\"\nthey really aren't tied to the realm of design. A pattern seems to stand\napart from the traditional way of thinking about analysis, design, and\nimplementation. Instead, a pattern embodies a complete idea within a program,\nand thus it can sometimes appear at the analysis phase or high-level design\nphase. This is interesting because a pattern has a direct implementation in code\nand so you might not expect it to show up before low-level design or\nimplementation (and in fact you might not realize that you need a particular\npattern until you get to those phases).\n\nThe basic concept of a pattern can also be seen as the basic\nconcept of program design: adding layers of\nabstraction. Whenever you abstract\nsomething you're isolating particular details, and one of the most\ncompelling motivations behind this is to separate things that change from\nthings that stay the same. Another way to put this is that once you find\nsome part of your program that's likely to change for one reason or\nanother, you'll want to keep those changes from propagating other\nmodifications throughout your code. Not only does this make the code much\ncheaper to maintain, but it also turns out that it is usually simpler to\nunderstand (which results in lowered costs).\n\nOften, the most difficult part of developing an elegant and\ncheap-to-maintain design is in discovering what I call \"the\nvector of\nchange.\" (Here, \"vector\" refers to the maximum gradient and\nnot a container class.) This means finding the most important thing that changes\nin your system, or put another way, discovering where your greatest cost is.\nOnce you discover the vector of change, you have the focal point around which to\nstructure your design.\n\nSo the goal of design patterns is to isolate changes in your\ncode. If you look at it this way, you've been seeing some design patterns\nalready in this book. For example, inheritance could be\nthought of as a design pattern (albeit one implemented by the compiler). It\nallows you to express differences in behavior (that's the thing that\nchanges) in objects that all have the same interface (that's what stays\nthe same). Composition could also be considered a\npattern, since it allows you to change \u2013 dynamically or statically \u2013\nthe objects that implement your class, and thus the way that class works.\nNormally, however, features that are directly supported by a programming\nlanguage are not classified as design patterns.\n\nYou've also already seen another pattern that appears in\nDesign Patterns: the iterator. This is the\nfundamental tool used in the design of the STL; it hides the particular\nimplementation of the container as you're stepping through and selecting\nthe elements one by one. The iterator allows you to write generic code that\nperforms an operation on all of the elements in a range without regard to the\ncontainer that holds the range. Thus your generic code can be used with any\ncontainer that can produce\niterators.\n\nThe singleton\n\nPossibly the simplest design pattern is the\nsingleton, which is a way to provide one and only\none instance of an object:\n\nThe key to creating a singleton is to prevent the client\nprogrammer from having any way to create an object except the ways you provide.\nTo do this, you must declare all\nconstructors as private,\nand you mustcreate at least one constructor to prevent the compiler from\nsynthesizing a default constructor\nfor you.\n\nAt this point, you decide how you're going to create\nyour object. Here, it's created statically, but you can also wait until\nthe client programmer asks for one and create it on demand. In any case, the\nobject should be stored privately. You provide access through public methods.\nHere, getHandle( ) produces a reference to the Singleton\nobject. The rest of the interface (getValue( ) and\nsetValue( )) is the regular class interface.\n\nNote that you aren't restricted to creating only one\nobject. This technique easily supports the creation of a limited pool of\nobjects. In that situation, however, you can be confronted with the problem of\nsharing objects in the pool. If this is an issue, you can create a solution\ninvolving a check-out and check-in of the shared objects.\n\nVariations on singleton\n\nAny static member object inside a class is an expression of\nsingleton: one and only one will be made. So in a sense, the language has direct\nsupport for the idea; we certainly use it on a regular basis. However,\nthere's a problem associated with static objects (member or not), and\nthat's the order of initialization, as described in Volume 1 of this book.\nIf one static object depends on another, it's important that the order of\ninitialization proceed correctly.\n\nIn Volume 1, you were shown how a static object defined inside\na function can be used to control initialization order. This delays the\ninitialization of the object until the first time the function is called. If the\nfunction returns a reference to the static object, it gives you the effect of a\nsingleton while removing much of the worry of static initialization. For\nexample, suppose you want to create a logfile upon the first call to a function\nwhich returns a reference to that logfile. This header file will do the\ntrick:\n\nThe implementation must not be inlined, because that\nwould mean that the whole function, including the static object definition\nwithin, could be duplicated in any translation unit where it's included,\nand you'd end up with multiple copies of the static object. This would\nmost certainly foil the attempts to control the order of initialization (but\npotentially in a very subtle and hard-to-detect fashion). So the implementation\nmust be separate:\n\nWhen Singleton2::ref( ) is called, it causes its\nsole Singleton2 object to be created. In the process of this creation,\nSingleton1::ref( ) is called, and that causes the sole\nSingleton1 object to be created. Because this technique doesn't\nrely on the order of linking or loading, the programmer has much better control\nover initialization, leading to less problems.\n\nYou'll see further examples of the singleton pattern in\nthe rest of this\nchapter.\n\nClassifying patterns\n\nThe Design Patterns book discusses 23 different\npatterns, classified under three purposes (all of which revolve around the\nparticular aspect that can vary). The three purposes are:\n\nCreational: how an object can be created.\nThis often involves isolating the details of object creation so your code\nisn't dependent on what types of objects there are and thus doesn't\nhave to be changed when you add a new type of object. The aforementioned\nSingleton is classified as a creational pattern, and later in this\nchapter you'll see examples of Factory Method and\nPrototype.\n\nStructural:\ndesigning objects to satisfy particular project constraints. These work with the\nway objects are connected with other objects to ensure that changes in the\nsystem don't require changes to those\nconnections.\n\nBehavioral:\nobjects that handle particular types of actions within a program. These\nencapsulate processes that you want to perform, such as interpreting a language,\nfulfilling a request, moving through a sequence (as in an iterator), or\nimplementing an algorithm. This chapter contains examples of the Observer\nand the Visitor patterns.\n\nThe Design\nPatterns book has a section on each of its 23 patterns along with one or\nmore examples for each, typically in C++ but sometimes in Smalltalk. This book\nwill not repeat all the details of the patterns shown in Design Patterns\nsince that book stands on its own and should be studied separately. The catalog\nand examples provided here are intended to rapidly give you a grasp of the\npatterns, so you can get a decent feel for what patterns are about and why they\nare so important.\n\n[[ Describe different form of categorization, based on what\nyou want to accomplish rather than the way the patterns look. More categories,\nbut should result in easier-to-understand, faster selection\n]]]\n\nFeatures, idioms, patterns\n\nHow things have gotten confused; conflicting pattern\ndescriptions, na\u00efve \"patterns,\" patterns are not trivial nor\nare they represented by features that are built into the language, nor are they\nthings that you do almost all the time. Constructors and destructors, for\nexample, could be called the \"guaranteed initialization and cleanup design\npattern.\" This is an important and essential idea, but it's built\ninto the language.\n\nAnother example comes from various forms of aggregation.\nAggregation is a completely fundamental principle in object-oriented\nprogramming: you make objects out of other objects [[ make reference to basic\ntenets of OO ]]. Yet sometimes this idea is classified as a pattern, which tends\nto confuse the issue. This is unfortunate because it pollutes the idea of the\ndesign pattern and suggest that anything that surprises you the first time you\nsee it should be a design pattern.\n\nAnother misguided example is found in the Java language; the\ndesigners of the \"JavaBeans\" specification decided to refer to a\nsimple naming convention as a design pattern (you say getInfo( ) for\na member function that returns an Info property and\nsetInfo( ) for one that changes the internal Info property;\nthe use of the \"get\" and \"set\" strings is what they\ndecided constituted calling it a design\npattern).\n\nBasic complexity hiding\n\nYou'll often find that messy code can be cleaned up by\nputting it inside a class. This is more than fastidiousness \u2013 if nothing\nelse, it aids readability and therefore maintainability, and it can often lead\nto reusability.\n\nFactories: encapsulating object creation\n\nWhen you discover that you need to add new types to a system,\nthe most sensible first step to take is to use polymorphism to create a common\ninterface to those new types. This separates the rest of the code in your system\nfrom the knowledge of the specific types that you are adding. New types may be\nadded without disturbing existing code ... or so it seems. At first it would\nappear that the only place you need to change the code in such a design is the\nplace where you inherit a new type, but this is not quite true. You must still\ncreate an object of your new type, and at the point of creation you must specify\nthe exact constructor to use. Thus, if the code that creates objects is\ndistributed throughout your application, you have the same problem when adding\nnew types \u2013 you must still chase down all the points of your code where\ntype matters. It happens to be the creation of the type that matters in\nthis case rather than the use of the type (which is taken care of by\npolymorphism), but the effect is the same: adding a new type can cause\nproblems.\n\nThe solution is to force the creation of objects to occur\nthrough a common factory rather than to allow the creational code to be\nspread throughout your system. If all the code in your program must go through\nthis factory whenever it needs to create one of your objects, then all you must\ndo when you add a new object is to modify the factory.\n\nSince every object-oriented program creates objects, and since\nit's very likely you will extend your program by adding new types, I\nsuspect that factories may be the most universally useful kinds of design\npatterns.\n\nAs an example, let's revisit the Shape system.\nOne approach is to make the factory a static method of the base\nclass:\n\nThe factory( ) takes an argument that allows it to\ndetermine what type of Shape to create; it happens to be a string\nin this case but it could be any set of data. The factory( ) is now\nthe only other code in the system that needs to be changed when a new type of\nShape is added (the initialization data for the objects will presumably\ncome from somewhere outside the system, and not be a hard-coded array as in the\nabove example).\n\nTo ensure that the creation can only happen in the\nfactory( ), the constructors for the specific types of Shape\nare made private, and Shape is declared a friend so that\nfactory( ) has access to the constructors (you could also declare\nonly Shape::factory( ) to be a friend, but it seems\nreasonably harmless to declare the entire base class as a\nfriend).\n\nPolymorphic factories\n\nThe static factory( ) method in the previous\nexample forces all the creation operations to be focused in one spot, to\nthat's the only place you need to change the code. This is certainly a\nreasonable solution, as it throws a box around the process of creating objects.\nHowever, the Design Patterns book emphasizes that the reason for the\nFactory Method pattern is so that different types of factories can be\nsubclassed from the basic factory (the above design is mentioned as a special\ncase). However, the book does not provide an example, but instead just repeats\nthe example used for the Abstract Factory. Here is\nShapeFactory1.cpp modified so the factory methods are in a separate class\nas virtual functions:\n\nNow the factory method appears in its own class,\nShapeFactory, as the virtual create( ). This is a\nprivate method which means it cannot be called directly, but it can be\noverridden. The subclasses of Shape must each create their own subclasses\nof ShapeFactory and override the create( ) method to create\nan object of their own type. The actual creation of shapes is performed by\ncalling ShapeFactory::createShape( ), which is a static method that\nuses the map in ShapeFactory to find the appropriate factory\nobject based on an identifier that you pass it. The factory is immediately used\nto create the shape object, but you could imagine a more complex problem where\nthe appropriate factory object is returned and then used by the caller to create\nan object in a more sophisticated way. However, it seems that much of the time\nyou don't need the intricacies of the polymorphic factory method, and a\nsingle static method in the base class (as shown in ShapeFactory1.cpp)\nwill work fine.\n\nNotice that the ShapeFactory must be initialized by\nloading its map with factory objects, which takes place in the singleton\nShapeFactoryInizializer. So to add a new type to this design you must\ninherit the type, create a factory, and modify ShapeFactoryInizializer so\nthat an instance of your factory is inserted in the map. This extra complexity\nagain suggests the use of a static factory method if you don't need\nto create individual factory\nobjects.\n\nAbstract factories\n\nThe Abstract Factory pattern looks like the factory\nobjects we've seen previously, with not one but several factory methods.\nEach of the factory methods creates a different kind of object. The idea is that\nat the point of creation of the factory object, you decide how all the objects\ncreated by that factory will be used. The example given in Design\nPatterns implements portability across various graphical user interfaces\n(GUIs): you create a factory object appropriate to the GUI that you're\nworking with, and from then on when you ask it for a menu, button, slider, etc.\nit will automatically create the appropriate version of that item for the GUI.\nThus you're able to isolate, in one place, the effect of changing from one\nGUI to another.\n\nAs another example suppose you are creating a general-purpose\ngaming environment and you want to be able to support different types of games.\nHere's how it might look using an abstract factory:\n\nIn this environment, Player objects interact with\nObstacle objects, but there are different types of players and obstacles\ndepending on what kind of game you're playing. You determine the kind of\ngame by choosing a particular GameElementFactory, and then the\nGameEnvironment controls the setup and play of the game. In this example,\nthe setup and play is very simple, but those activities (the initial\nconditions and the state change) can determine much of the\ngame's outcome. Here, GameEnvironment is not designed to be\ninherited, although it could very possibly make sense to do that.\n\nThis also contains examples of Double Dispatching and\nthe Factory Method, both of which will be explained\nlater.\n\nVirtual constructors\n\nShow simpler version of virtual constructor scheme,\nletting the user create the object with new. Probably make constructor for\nobjects private and use a maker function to force all objects on the\nheap.\n\nOne of the primary goals of using a factory is so that\nyou can\norganize your code so you don't have to select an exact type of\nconstructor when creating an object. That is, you can say, \"I don't\nknow precisely what type of object you are, but here's the information:\nCreate yourself.\"\n\nIn addition, during a constructor call the virtual mechanism\ndoes not operate (early binding occurs). Sometimes this is awkward. For example,\nin the Shape program it seems logical that inside the constructor for a\nShape object, you would want to set everything up and then\ndraw( ) the Shape. draw( ) should be a virtual\nfunction, a message to the Shape that it should draw itself\nappropriately, depending on whether it is a circle, square, line, and so on.\nHowever, this doesn't work inside the constructor, for the reasons given\nin Chapter XX: Virtual functions\nresolve to the \"local\" function bodies when called in\nconstructors.\n\nIf you want to be able to call a virtual function inside the\nconstructor and have it do the right thing, you must use a technique to\nsimulate a virtual constructor (which is a variation of the Factory\nMethod). This is a conundrum. Remember the idea of a virtual function is\nthat you send a message to an object and let the object figure out the right\nthing to do. But a constructor builds an object. So a virtual constructor would\nbe like saying, \"I don't know exactly what type of object you are,\nbut build yourself anyway.\" In an ordinary constructor, the compiler must\nknow which VTABLE address to bind to the\nVPTR, and if it existed, a virtual constructor\ncouldn't do this because it doesn't know all the type information at\ncompile-time. It makes sense that a constructor can't be virtual because\nit is the one function that absolutely must know everything about the type of\nthe object.\n\nAnd yet there are times when you want something approximating\nthe behavior of a virtual constructor.\n\nIn the Shape example, it would be nice to hand the\nShape constructor some specific information in the argument list and let\nthe constructor create a specific type of Shape (a Circle,\nSquare) with no further intervention. Ordinarily, you'd have to\nmake an explicit call to the Circle, Square constructor\nyourself.\n\nCoplien[26]\ncalls his solution to this problem \"envelope and letter classes.\"\nThe \"envelope\" class is the base class, a shell that contains a\npointer to an object of the base class. The constructor for the\n\"envelope\" determines (at runtime, when the constructor is called,\nnot at compile-time, when the type checking is normally done) what specific type\nto make, then creates an object of that specific type (on the heap) and assigns\nthe object to its pointer. All the function calls are then handled by the base\nclass through its pointer. So the base class is acting as a proxy for the\nderived class:\n\nThe base class Shape contains a pointer to an object of\ntype Shape as its only data member. When you build a \"virtual\nconstructor\" scheme, you must exercise special care to ensure this pointer\nis always initialized to a live object.\n\nEach time you derive a new subtype from Shape, you must\ngo back and add the creation for that type in one place, inside the\n\"virtual constructor\" in the Shape base class. This is not\ntoo onerous a task, but the disadvantage is you now have a dependency between\nthe Shape class and all classes derived from it (a reasonable trade-off,\nit seems). Also, because it is a proxy, the base-class interface is truly the\nonly thing the user sees.\n\nIn this example, the information you must hand the virtual\nconstructor about what type to create is very explicit: It's a\nstring that names the type. However, your scheme may use other\ninformation \u2013 for example, in a parser the output of the scanner may be\nhanded to the virtual constructor, which then uses that information to determine\nwhich token to create.\n\nThe virtual constructor Shape(type) can only be\ndeclared inside the class; it cannot be defined until after all the derived\nclasses have been declared. However, the default\nconstructor can be defined inside\nclass Shape, but it should be made protected so temporary\nShape objects cannot be created. This default constructor is only called\nby the constructors of derived-class objects. You are forced to explicitly\ncreate a default constructor because the compiler will create one for you\nautomatically only if there are no constructors defined. Because you must\ndefine Shape(type), you must also define Shape( ).\n\nThe default constructor in this scheme has at least one very\nimportant chore \u2013 it must set the value of the s pointer to zero.\nThis sounds strange at first, but remember that the default constructor will be\ncalled as part of the construction of the actual object \u2013 in\nCoplien's terms, the \"letter,\" not the \"envelope.\"\nHowever, the \"letter\" is derived from the \"envelope,\" so\nit also inherits the data member s. In the \"envelope,\"\ns is important because it points to the actual object, but in the\n\"letter,\" s is simply excess baggage. Even excess baggage\nshould be initialized, however, and if s is not set to zero by the\ndefault constructor called for the \"letter,\" bad things happen (as\nyou'll see later).\n\nThe virtual constructor takes as its argument information that\ncompletely determines the type of the object. Notice, though, that this type\ninformation isn't read and acted upon until runtime, whereas normally the\ncompiler must know the exact type at compile-time (one other reason this system\neffectively imitates virtual constructors).\n\nInside the virtual constructor there's a switch\nstatement that uses the argument to construct the actual (\"letter\")\nobject, which is then assigned to the pointer inside the \"envelope.\"\nAt that point, the construction of the \"letter\" has been completed,\nso any virtual calls will be properly directed.\n\nAs an example, consider the call to draw( ) inside\nthe virtual constructor. If you trace this call (either by hand or with a\ndebugger), you can see that it starts in the draw( ) function in the\nbase class, Shape. This function calls draw( ) for the\n\"envelope\" s pointer to its \"letter.\" All types\nderived from Shape share the same interface, so this virtual call is\nproperly executed, even though it seems to be in the constructor. (Actually, the\nconstructor for the \"letter\" has already completed.) As long as all\nvirtual calls in the base class simply make calls to identical virtual function\nthrough the pointer to the \"letter,\" the system operates\nproperly.\n\nTo understand how it works, consider the code in\nmain( ). To fill the vector shapes, \"virtual\nconstructor\" calls are made to Shape. Ordinarily in a situation\nlike this, you would call the constructor for the actual type, and the VPTR for\nthat type would be installed in the object. Here, however, the VPTR used in each\ncase is the one for Shape, not the one for the specific Circle,\nSquare, or Triangle.\n\nIn the for loop where the draw( ) and\nerase( ) functions are called for each Shape, the virtual\nfunction call resolves, through the VPTR, to the corresponding type. However,\nthis is Shape in each case. In fact, you might wonder why\ndraw( ) and erase( ) were made virtual at all.\nThe reason shows up in the next step: The base-class version of\ndraw( ) makes a call, through the \"letter\" pointer\ns, to the virtual function draw( ) for the\n\"letter.\" This time the call resolves to the actual type of the\nobject, not just the base class Shape. Thus the runtime cost of using\nvirtual constructors is one more virtual call every time you make a virtual\nfunction call.\n\nIn order to create any function that is overridden, such as\ndraw( ), erase( ) or test( ), you must proxy\nall calls to the s pointer in the base class implementation, as shown\nabove. This is because, when the call is made, the call to the envelope's\nmember function will resolve as being to Shape, and not to a derived type\nof Shape. Only when you make the proxy call to s will the virtual\nbehavior take place. In main( ), you can see that everything works\ncorrectly, even when calls are made inside constructors and\ndestructors.\n\nDestructor operation\n\nThe activities of destruction in this scheme are also tricky.\nTo understand, let's verbally walk through what happens when you call\ndelete for a pointer to a Shape object \u2013 specifically, a\nSquare \u2013 created on the heap. (This is more complicated than an\nobject created on the stack.) This will be a delete through the\npolymorphic interface, as in the statement delete shapes[i] in\nmain( ).\n\nThe type of the pointer shapes[i] is of the base class\nShape, so the compiler makes the call through Shape. Normally, you\nmight say that it's a virtual call, so Square's destructor\nwill be called. But with the virtual constructor scheme, the compiler is\ncreating actual Shape objects, even though the constructor initializes\nthe letter pointer to a specific type of Shape. The virtual mechanism\nis used, but the VPTR inside the Shape object is\nShape's VPTR, not Square's. This resolves to\nShape's destructor, which calls delete for the letter\npointer s, which actually points to a Square object. This is again\na virtual call, but this time it resolves to Square's\ndestructor.\n\nWith a destructor, however, C++ guarantees, via the compiler,\nthat all destructors in the hierarchy are called. Square's\ndestructor is called first, followed by any intermediate destructors, in order,\nuntil finally the base-class destructor is called. This base-class destructor\nhas code that says delete s. When this destructor was called originally,\nit was for the \"envelope\" s, but now it's for the\n\"letter\" s, which is there because the \"letter\"\nwas inherited from the \"envelope,\" and not because it contains\nanything. So this call to delete should do nothing.\n\nThe solution to the problem is to make the\n\"letter\" s pointer zero. Then when the \"letter\"\nbase-class destructor is called, you get delete 0, which by definition\ndoes nothing. Because the default constructor is protected, it will be called\nonly during the construction of a \"letter,\" so that's\nthe only situation where s is set to zero.\n\nYour most common tool for hiding construction will probably be\nordinary factory methods rather than the more complex approaches. The idea of\nadding new types with minimal effect on the rest of the system will be further\nexplored later in this chapter.\n\nCallbacks\n\nDecoupling code behavior\n\nFunctor/Command\n\nStrategy\n\nObserver\n\nLike the other forms of callback, this contains a hook point\nwhere you can change code. The difference is in the observer's completely\ndynamic nature. It is often used for the specific case of changes based on other\nobject's change of state, but is also the basis of event management.\nAnytime you want to decouple the source of the call from the called code in a\ncompletely dynamic way.\n\nThe observer\npattern solves a fairly common problem: What if a group of objects needs to\nupdate themselves when some other object changes state? This can be seen in the\n\"model-view\" aspect of Smalltalk's MVC\n(model-view-controller), or the almost-equivalent \"Document-View\nArchitecture.\" Suppose that you have some data (the\n\"document\") and more than one view, say a plot and a textual view.\nWhen you change the data, the two views must know to update themselves, and\nthat's what the observer facilitates.\n\nThere are two types of objects used to implement the observer\npattern in the following code. The Observable\nclass keeps track of everybody who wants to be informed when a change happens,\nwhether the \"state\" has changed or not. When someone says \"OK,\neverybody should check and potentially update themselves,\" the\nObservable class performs this task by calling the\nnotifyObservers( ) member function for each\nobserver on the list. The notifyObservers( ) member function is part\nof the base class Observable.\n\nThere are actually two \"things that change\" in the\nobserver pattern: the quantity of observing objects and the way an update\noccurs. That is, the observer pattern allows you to modify both of these without\naffecting the surrounding code.\n\nThere are a number of ways to implement the observer pattern,\nbut the code shown here will create a framework from which you can build your\nown observer code, following the example. First, this interface describes what\nan observer looks like:\n\nSince Observer interacts with Observable in this\napproach, Observable must be declared first. In addition, the\nArgument class is empty and only acts as a base class for any type of\nargument you wish to pass during an update. If you want, you can simply pass the\nextra argument as a void*; you'll have to downcast in either case\nbut some folks find void* objectionable.\n\nObserver is an \"interface\" class that only\nhas one member function, update( ). This function is called by the\nobject that's being observed, when that object decides its time to update\nall it's observers. The arguments are optional; you could have an\nupdate( ) with no arguments and that would still fit the observer\npattern; however this is more general \u2013 it allows the observed object to\npass the object that caused the update (since an Observer may be\nregistered with more than one observed object) and any extra information if\nthat's helpful, rather than forcing the Observer object to hunt\naround to see who is updating and to fetch any other information it\nneeds.\n\nThe \"observed object\" that decides when and how to\ndo the updating will be called the Observable:\n\nAgain, the design here is more elaborate than is necessary; as\nlong as there's a way to register an Observer with an\nObservable and for the Observable to update its Observers,\nthe set of member functions doesn't matter. However, this design is\nintended to be reusable (it was lifted from the design used in the Java standard\nlibrary). As mentioned elsewhere in the book, there is no support for\nmultithreading in the Standard C++ libraries, so this design would need to be\nmodified in a multithreaded environment.\n\nObservable has a flag to indicate whether it's\nbeen changed. In a simpler design, there would be no flag; if something\nhappened, everyone would be notified. The flag allows you to wait, and only\nnotify the Observers when you decide the time is right. Notice, however,\nthat the control of the flag's state is protected, so that only an\ninheritor can decide what constitutes a change, and not the end user of the\nresulting derived Observer class.\n\nThe collection of Observer objects is kept in a\nset<Observer*> to prevent duplicates; the set\ninsert( ), erase( ), clear( ) and\nsize( ) functions are exposed to allow Observers to be added\nand removed at any time, thus providing runtime flexibility.\n\nMost of the work is done in notifyObservers( ). If\nthe changed flag has not been set, this does nothing. Otherwise, it first\nclears the changed flag so repeated calls to\nnotifyObservers( ) won't waste time. This is done before\nnotifying the observers in case the calls to update( ) do anything\nthat causes a change back to this Observable object. Then it moves\nthrough the set and calls back to the update( ) member\nfunction of each Observer.\n\nAt first it may appear that you can use an ordinary\nObservable object to manage the updates. But this doesn't work; to\nget an effect, you must inherit from Observable and somewhere in\nyour derived-class code call setChanged( ).\nThis is the member function that sets the \"changed\" flag, which\nmeans that when you call notifyObservers( )\nall of the observers will, in fact, get notified. Where you call\nsetChanged( ) depends on the logic of your program.\n\nNow we encounter a dilemma. An object that should notify its\nobservers about things that happen to it \u2013 events or changes in state\n\u2013 might have more than one such item of interest. For example, if\nyou're dealing with a graphical user interface (GUI) item \u2013 a\nbutton, say \u2013 the items of interest might be the mouse clicked the button,\nthe mouse moved over the button, and (for some reason) the button changed its\ncolor. So we'd like to be able to report all of these events to different\nobservers, each of which is interested in a different type of event.\n\nThe problem is that we would normally reach for multiple\ninheritance in such a situation: \"I'll inherit from\nObservable to deal with mouse clicks, and I'll ... er ... inherit\nfrom Observable to deal with mouse-overs, and, well, ... hmm, that\ndoesn't work.\"\n\nThe \"interface\" idiom\n\nThe \"inner class\" idiom\n\nHere's a situation where we do actually need to (in\neffect) upcast to more than one type, but in this case we need to provide\nseveral different implementations of the same base type. The solution is\nsomething I've lifted from Java, which takes C++'s nested class one\nstep further. Java has a built-in feature called inner classes, which\nlook like C++'s nested classes, but they do two other things:\n\nA Java inner class automatically has access to the private elements of the\nclass it is nested within.\n\nAn object of a Java inner class automatically\ngrabs the \"this\" to the outer class object it was created within. In\nJava, the \"outer this\" is implicitly dereferenced whenever you name\nan element of the outer class.\n\n[[ Insert the definition of\na closure ]]. So to implement the inner class idiom in C++, we must do these\nthings by hand. Here's an example:\n\nThe example begins with the Poingable and Bingable\ninterfaces, each of which contain a single member function. The services\nprovided by callPoing( ) and callBing( ) require that\nthe object they receive implement the Poingable and Bingable\ninterfaces, respectively, but they put no other requirements on that object\nso as to maximize the flexibility of using callPoing( ) and\ncallBing( ). Note the lack of virtual destructors in either\ninterface \u2013 the intent is that you never perform object destruction via\nthe interface.\n\nOuter contains some private data (name) and it\nwishes to provide both a Poingable interface and a Bingable\ninterface so it can be used with callPoing( ) and\ncallBing( ). Of course, in this situation we could simply use\nmultiple inheritance. This example is just intended to show the simplest syntax\nfor the idiom; we'll see a real use shortly. To provide a Poingable\nobject without inheriting Outer from Poingable, the inner class\nidiom is used. First, the declaration class Inner says that, somewhere,\nthere is a nested class of this name. This allows the friend declaration\nfor the class, which follows. Finally, now that the nested class has been\ngranted access to all the private elements of Outer, the class can be\ndefined. Notice that it keeps a pointer to the Outer which created it,\nand this pointer must be initialized in the constructor. Finally, the\npoing( ) function from Poingable is implemented. The same\nprocess occurs for the second inner class which implements Bingable. Each\ninner class has a single private instance created, which is initialized\nin the Outer constructor. By creating the member objects and returning\nreferences to them, issues of object lifetime are eliminated.\n\nNotice that both inner class definitions are private,\nand in fact the client programmer doesn't have any access to details of\nthe implementation, since the two access methods operator\nPoingable&( ) and operator Bingable&( ) only return\na reference to the upcast interface, not to the object that implements it. In\nfact, since the two inner classes are private, the client programmer\ncannot even downcast to the implementation classes, thus providing complete\nisolation between interface and implementation.\n\nJust to push a point, I've taken the extra liberty here\nof defining the automatic type conversion operators operator\nPoingable&( ) and operator Bingable&( ). In\nmain( ), you can see that these actually allow a syntax that looks\nlike Outer is multiply inherited from Poingable and\nBingable. The difference is that the casts in this case are one way. You\ncan get the effect of an upcast to Poingable or Bingable, but you\ncannot downcast back to an Outer. In the following example of observer,\nyou'll see the more typical approach: you provide access to the inner\nclass objects using ordinary member functions, not automatic type conversion\noperations.\n\nThe observer example\n\nArmed with the Observer and Observable header\nfiles and the inner class idiom, we can look at an example of the observer\npattern:\n\nThe events of interest are that a Flower can open or\nclose. Because of the use of the inner class idiom, both these events can be\nseparately-observable phenomena. OpenNotifier and CloseNotifier\nboth inherit Observable, so they have access to setChanged( )\nand can be handed to anything that needs an Observable. You'll\nnotice that, contrary to InnerClassIdiom.cpp, the Observable\ndescendants are public. This is because some of their member functions\nmust be available to the client programmer. There's nothing that says that\nan inner class must be private; in InnerClassIdiom.cpp I was\nsimply following the design guideline \"make things as private as\npossible.\" You could make the classes private and expose the\nappropriate methods by proxy in Flower, but it wouldn't gain\nmuch.\n\nThe inner class idiom also comes in handy to define more than\none kind of Observer, in Bee and Hummingbird, since both\nthose classes may want to independently observe Flower openings and\nclosings. Notice how the inner class idiom provides something that has most of\nthe benefits of inheritance (the ability to access the private data in the outer\nclass, for example) without the same restrictions.\n\nIn main( ), you can see one of the prime benefits\nof the observer pattern: the ability to change behavior at runtime by\ndynamically registering and un-registering Observers with\nObservables.\n\nIf you study the code above you'll see that\nOpenNotifier and CloseNotifier use the basic Observable\ninterface. This means that you could inherit other completely different\nObserver classes; the only connection the Observers have with\nFlowers is the Observer\ninterface.\n\nMultiple dispatching\n\nWhen dealing with multiple types which are interacting, a\nprogram can get particularly messy. For example, consider a system that parses\nand executes mathematical expressions. You want to be able to say Number +\nNumber, Number * Number, etc., where Number is the base class\nfor a family of numerical objects. But when you say a + b, and you\ndon't know the exact type of either a or b, so how can you\nget them to interact properly?\n\nThe answer starts with something you probably don't\nthink about: C++ performs only single dispatching. That is, if you are\nperforming an operation on more than one object whose type is unknown, C++ can\ninvoke the dynamic binding mechanism on only one of those types. This\ndoesn't solve the problem, so you end up detecting some types manually and\neffectively producing your own dynamic binding behavior.\n\nThe solution is called\nmultiple dispatching.\nRemember that polymorphism can occur only via member function calls, so if you\nwant double dispatching to occur, there must be two member function calls: the\nfirst to determine the first unknown type, and the second to determine the\nsecond unknown type. With multiple dispatching, you must have a virtual call to\ndetermine each of the types. Generally, you'll set up a configuration such\nthat a single member function call produces more than one dynamic member\nfunction call and thus determines more than one type in the process. To get this\neffect, you need to work with more than one virtual function: you'll need\na virtual function call for each dispatch. The virtual functions in the\nfollowing example are called compete( ) and eval( ), and\nare both members of the same type. (In this case there will be only two\ndispatches, which is referred to as\ndouble dispatching). If you\nare working with two different type hierarchies that are interacting, then\nyou'll have to have a virtual call in each hierarchy.\n\nVisitor, a type of multiple dispatching\n\nThe assumption is that you have a primary class hierarchy that\nis fixed; perhaps it's from another vendor and you can't make\nchanges to that hierarchy. However, you'd like to add new polymorphic\nmethods to that hierarchy, which means that normally you'd have to add\nsomething to the base class interface. So the dilemma is that you need to add\nmethods to the base class, but you can't touch the base class. How do you\nget around this?\n\nThe design pattern that solves this kind of problem is called\na \"visitor\" (the final one in the Design Patterns book), and\nit builds on the doubledispatching scheme shown in the last\nsection.\n\nThe visitor\npattern allows you to extend the interface of the primary type by creating a\nseparate class hierarchy of type Visitor to virtualize the operations\nperformed upon the primary type. The objects of the primary type simply\n\"accept\" the visitor, then call the visitor's\ndynamically-bound member function.\n\nEfficiency\n\nFlyweight\n\nThe composite\n\nEvolving a design: the trash recycler\n\nThe nature of this problem (modeling a trash recycling system)\nis that the trash is thrown unclassified into a single bin, so the specific type\ninformation is lost. But later, the specific type information must be recovered\nto properly sort the trash. In the initial solution, RTTI (described in Chapter\nXX) is used.\n\nThis is not a trivial design because it has an added\nconstraint. That's what makes it interesting \u2013 it's more like\nthe messy problems you're likely to encounter in your work. The extra\nconstraint is that the trash arrives at the trash recycling plant all mixed\ntogether. The program must model the sorting of that trash. This is where RTTI\ncomes in: you have a bunch of anonymous pieces of trash, and the program figures\nout exactly what type they are.\n\nOne of the objectives of this program is to sum up the weight\nand value of the different types of trash. The trash will be kept in\n(potentially different types of) containers, so it makes sense to templatize the\n\"summation\" function on the container holding it (assuming that\ncontainer exhibits basic STL-like behavior), so the function will be maximally\nflexible:\n\nWhen you look at a piece of code like this, it can be\ninitially disturbing because you might wonder \"how can the compiler know\nthat the member functions I'm calling here are valid?\" But of\ncourse, all the template says is \"generate this code on demand,\" and\nso only when you call the function will type checking come into play. This\nenforces that *tally produces an object that has member functions\nweight( ) and value( ), and that out is a global\nostream.\n\nThe sumValue( ) function is templatized on the\ntype of container that's holding the Trash pointers. Notice\nthere's nothing in the template signature that says \"this container\nmust behave like an STL container and must hold Trash*\"; that is\nall implied in the code that's generated which uses the\ncontainer.\n\nThe first version of the example takes the straightforward\napproach: creating a vector<Trash*>, filling it with Trash\nobjects, then using RTTI to sort them out:\n\nThis uses the classic structure of virtual functions in the\nbase class that are redefined in the derived class. In addition, there are two\nstatic data members in the base class:_count to indicate\nthe number of Trash objects that are created, and _dcount to keep\ntrack of the number that are destroyed. This verifies that proper memory\nmanagement occurs. To support this, the operator= and copy-constructor\nare disallowed by declaring them private (no definitions are necessary;\nthis simply prevents the compiler from synthesizing them). Those operations\nwould cause problems with the count, and if they were allowed you'd have\nto define them properly.\n\nThe Trash objects are created, for the sake of this\nexample, by the generator TrashGen, which uses the random number\ngenerator to choose the type of Trash, and also to provide it with a\n\"weight\" argument. The return value of the generator's\noperator( ) is upcast to Trash*, so all the specific type\ninformation is lost.In main( ), a\nvector<Trash*> called bin is created and then filled using\nthe STL algorithm generate_n( ). To perform the sorting, three\nvectors are created, each of which holds a different type of\nTrash*. An iterator moves through bin and RTTI is used to\ndetermine which specific type of Trash the iterator is currently\nselecting, placing each into the appropriate typed bin. Finally,\nsumValue( ) is applied to each of the containers, and the Trash\nobjects are cleaned up using purge( ) (defined in Chapter XX).\nThe creation and destruction counts ensure that things are properly cleaned\nup.\n\nOf course, it seems silly to upcast the types of Trash\ninto a container holding base type pointers, and then to turn around and\ndowncast. Why not just put the trash into the appropriate receptacle in the\nfirst place? (indeed, this is the whole enigma of recycling). In this program it\nmight be easy to repair, but sometimes a system's structure and\nflexibility can benefit greatly from downcasting.\n\nThe program satisfies the design requirements: it works. This\nmay be fine as long as it's a one-shot solution. However, a good program\nwill evolve over time, so you must ask: what if the situation changes? For\nexample, cardboard is now a valuable recyclable commodity, so how will that be\nintegrated into the system (especially if the program is large and complicated).\nSince the above type-check coding in the switch statement and in the RTTI\nstatements could be scattered throughout the program, you'd have to go\nfind all that code every time a new type was added, and if you miss one the\ncompiler won't help you.\n\nThe key to the misuse of RTTI here is that every type is\ntested. If you're only looking for a subset of types because that\nsubset needs special treatment, that's probably fine. But if you're\nhunting for every type inside a switch statement, then you're\nprobably missing an important point, and definitely making your code less\nmaintainable. In the next section we'll look at how this program evolved\nover several stages to become much more flexible. This should prove a valuable\nexample in program\ndesign.\n\nImproving the design\n\nThe solutions in Design Patterns are organized around\nthe question \"What will change as this program evolves?\" This is\nusually the most important question that you can ask about any design. If you\ncan build your system around the answer, the results will be two-pronged: not\nonly will your system allow easy (and inexpensive) maintenance, but you might\nalso produce components that are reusable, so that other systems can be built\nmore cheaply. This is the promise of object-oriented programming, but it\ndoesn't happen automatically; it requires thought and insight on your\npart. In this section we'll see how this process can happen during the\nrefinement of a system.\n\nThe answer to the question \"What will change?\" for\nthe recycling system is a common one: more types will be added to the system.\nThe goal of the design, then, is to make this addition of types as painless as\npossible. In the recycling program, we'd like to encapsulate all places\nwhere specific type information is mentioned, so (if for no other reason) any\nchanges can be localized inside those encapsulations. It turns out that this\nprocess also cleans up the rest of the code\nconsiderably.\n\n\"Make more objects\"\n\nThis brings up a general object-oriented design principle that\nI first heard spoken by Grady Booch: \"If the design\nis too complicated, make more objects.\" This is simultaneously\ncounterintuitive and ludicrously simple, and yet it's the most useful\nguideline I've found. (You might observe that \"make more\nobjects\" is often equivalent to \"add another level of\nindirection.\") In general, if you find a place with messy code, consider\nwhat sort of class would clean things up. Often the side effect of cleaning up\nthe code will be a system that has better structure and is more\nflexible.\n\nConsider first the place where Trash objects are\ncreated. In the above example, we're conveniently using a generator to\ncreate the objects. The generator nicely encapsulates the creation of the\nobjects, but the neatness is an illusion because in general we'll want to\ncreate the objects based on something more than a random number generator. Some\ninformation will be available which will determine what kind of Trash\nobject this should be. Because you generally need to make your objects by\nexamining some kind of information, if you're not paying close attention\nyou may end up with switch statements (as in TrashGen) or cascaded\nif statements scattered throughout your code. This is definitely messy,\nand also a place where you must change code whenever a new type is added. If new\ntypes are commonly added, a better solution is a single member function that\ntakes all of the necessary information and produces an object of the correct\ntype, already upcast to a Trash pointer. In Design Patterns this\nis broadly referred to as a\ncreational pattern (of\nwhich there are several). The specific pattern that will be applied here is a\nvariant of the Factory\nMethod (\"method\" being a more OOPish way to refer to a member\nfunction). Here, the factory method will be a static member of\nTrash, but more commonly it is a member function that is overridden in\nthe derived class.\n\nThe idea of the factory method is that you pass it the\nessential information it needs to know to create your object, then stand back\nand wait for the pointer (already upcast to the base type) to pop out as the\nreturn value. From then on, you treat the object polymorphically. Thus, you\nnever even need to know the exact type of object that's created. In fact,\nthe factory method hides it from you to prevent accidental misuse. If you want\nto use the object without polymorphism, you must explicitly use RTTI and\ncasting.\n\nBut there's a little problem, especially when you use\nthe more complicated approach (not shown here) of making the factory method in\nthe base class and overriding it in the derived classes. What if the information\nrequired in the derived class requires more or different arguments?\n\"Creating more objects\" solves this problem. To implement the\nfactory method, the Trash class gets a new member function called\nfactory( ). To hide the creational data, there's a new class\ncalled Info that contains all of the necessary information for the\nfactory( ) method to create the appropriate Trash object.\nHere's a simple implementation of Info:\n\nAn Info object's only job is to hold information\nfor the factory( ) method. Now, if there's a situation in\nwhich factory( ) needs more or different information to create a new\ntype of Trash object, the factory( ) interface doesn't\nneed to be changed. The Info class can be changed by adding new data and\nnew constructors, or in the more typical object-oriented fashion of\nsubclassing.\n\nHere's the second version of the program with the\nfactory method added. The object-counting code has been removed; we'll\nassume proper cleanup will take place in all the rest of the examples.\n\nIn the factory method Trash::factory( ), the\ndetermination of the exact type of object is simple, but you can imagine a more\ncomplicated system in which factory( ) uses an elaborate algorithm.\nThe point is that it's now hidden away in one place, and you know to come\nto this place to make changes when you add new types.\n\nThe creation of new objects is now more general in\nmain( ), and depends on \"real\" data (albeit created by\nanother generator, driven by random numbers). The generator object is created,\ntelling it the maximum type number and the largest \"data\" value to\nproduce. Each call to the generator creates an Info object which is\npassed into Trash::factory( ), which in turn produces some kind of\nTrash object and returns the pointer that's added to the\nvector<Trash*>bin.\n\nThe constructor for the Info object is very specific\nand restrictive in this example. However, you could also imagine a vector\nof arguments into the Info constructor (or directly into a\nfactory( ) call, for that matter). This requires that the arguments\nbe parsed and checked at runtime, but it does provide the greatest\nflexibility.\n\nYou can see from this code what\n\"vector\nof change\" problem the factory is responsible for solving: if you add new\ntypes to the system (the change), the only code that must be modified is within\nthe factory, so the factory isolates the effect of that\nchange.\n\nA pattern for prototyping creation\n\nA problem with the above design is that it still requires a\ncentral location where all the types of the objects must be known: inside the\nfactory( ) method. If new types are regularly being added to the\nsystem, the factory( ) method must be changed for each new type.\nWhen you discover something like this, it is useful to try to go one step\nfurther and move all of the activities involving that specific type\n\u2013 including its creation \u2013 into the class representing that type.\nThis way, the only thing you need to do to add a new type to the system is to\ninherit a single class.\n\nTo move the information concerning type creation into each\nspecific type of Trash,the\n\"prototype\" pattern\nwill be used. The general idea is that you have a master container of objects,\none of each type you're interested in making. The \"prototype\nobjects\" in this container are used only for making new objects. In\nthis case, we'll name the object-creation member function\nclone( ).When you're ready to make a new object,\npresumably you have some sort of information that establishes the type of object\nyou want to create. The factory( ) method (it's not required\nthat you use factory with prototype, but they commingle nicely) moves through\nthe master container comparing your information with whatever appropriate\ninformation is in the prototype objects in the master container. When a match is\nfound, factory( ) returns a clone of that object.\n\nIn this scheme there is no hard-coded information for\ncreation. Each object knows how to expose appropriate information to allow\nmatching, and how to clone itself. Thus, the factory( ) method\ndoesn't need to be changed when a new type is added to the system.\n\nThe prototypes will be contained in a staticvector<Trash*> called prototypes. This is a private\nmember of the base class Trash. The friend class\nTrashPrototypeInit is responsible for putting the Trash*\nprototypes into the prototype list.\n\nYou'll also note that the Info class has changed.\nIt now uses a string to act as type identification information. As you\nshall see, this will allow us to read object information from a file when\ncreating Trash objects.\n\nThe basic part of the Trash class remains as before.\nThe rest of the class supports the prototyping pattern. The id( )\nmember function returns a string that can be compared with the\nid( ) of an Info object to determine whether this is the\nprototype that should be cloned (of course, the evaluation can be much more\nsophisticated than that if you need it). Both id( ) and\nclone( ) are pure virtual functions so they must be\noverridden in derived classes.\n\nThe last two member functions, addToBin( ) and\naccept( ), are \"stubs\" which will be used in later\nversions of the trash sorting problem. It's necessary to have these\nvirtual functions in the base class, but in the early examples there's no\nneed for them, so they are not pure virtuals so as not to intrude.\n\nThe factory( ) member function has the same\ndeclaration, but the definition is what handles the prototyping. Here is the\nimplementation file:\n\nThe string inside the Info object contains the\ntype name of the Trash to be created; this string is compared to\nthe id( ) values of the objects in prototypes. If\nthere's a match, then that's the object to create.\n\nOf course, the appropriate prototype object might not be in\nthe prototypes list. In this case, the return in the inner loop is\nnever executed and you'll drop out at the end, where a default value is\ncreated. It might be more appropriate to throw an exception here.\n\nAs you can see from the code, there's nothing that knows\nabout specific types of Trash. The beauty of this design is that this\ncode doesn't need to be changed, regardless of the different situations it\nwill be used in.\n\nTrash subclasses\n\nTo fit into the prototyping scheme, each new subclass of\nTrash must follow some rules. First, it must create a protected\ndefault constructor, so that no one but TrashPrototypeInit may use it.\nTrashPrototypeInit is a singleton, creating one and only one prototypeobject for each subtype. This guarantees that the Trash subtype will\nbe properly represented in the prototypes container.\n\nAfter defining the \"ordinary\" member functions and\ndata that the Trash object will actually use, the class must also\noverride the id( ) member (which in this case returns a\nstring for comparison) and the clone( ) function, which must\nknow how to pull the appropriate information out of the Info object in\norder to create the object correctly.\n\nThere's one other issue: initialization of the static\ndata members. TrashPrototypeInit must create the prototype objects and\nadd them to the static Trash::prototypes vector. So it's\nvery important that you control the order of initialization of the\nstatic objects, so the prototypes vector is created before any of\nthe prototype objects, which depend on the prior existence of prototypes.\nThe most straightforward way to do this is to put all the definitions in a\nsingle file, in the order in which you want them initialized.\n\nTrashPrototypeInit must be defined separately because\nit inserts the actual prototypes into the vector, and throughout the\nchapter we'll be inheriting new types of Trash from the existing\ntypes. By making this one class in a separate file, a different version can be\ncreated and linked in for the new situations, leaving the rest of the code in\nthe system alone.\n\nThis is taken a step further by making\nTrashPrototypeInit a singleton (the constructor is private), even\nthough the class definition is not available in a header file so it would seem\nsafe enough to assume that no one could accidentally make a second\ninstance.\n\nUnfortunately, this is one more separate piece of code you\nmust maintain whenever you add a new type to the system. However, it's not\ntoo bad since the linker should give you an error message if you forget (since\nprototypes is defined in this file as well). The really difficult\nproblems come when you don't get any warnings or errors if you do\nsomething wrong.\n\nParsing Trash from an external file\n\nThe information about Trash objects will be read from\nan outside file. The file has all of the necessary information about each piece\nof trash in a single entry in the form Trash:weight. There are multiple\nentries on a line, separated by commas:\n\nTo parse this, the line is read and the\nstring member function\nfind( ) produces the index of the\n':'. This is first used with the string member\nfunction substr( ) to\nextract the name of the trash type, and next to get the weight that is turned\ninto a double with the atof( ) function (from\n<cstdlib>).\n\nThe Trash file parser is placed in a separate file\nsince it will be reused throughout this chapter. To facilitate this reuse, the\nfunction fillBin( ) which does the work takes as its first argument\nthe name of the file to open and read, and as its second argument a reference to\nan object of type Fillable. This uses what I've named the\n\"interface\" idiom at the beginning of the chapter, and the only\nattribute for this particular interface is that \"it can be filled,\"\nvia a member function addTrash( ). Here's the header file for\nFillable:\n\nAfter the file is opened, each line is read and parsed into\nentries by looking for the separating comma, then each entry is parsed into its\ntype and weight by looking for the separating colon. Note the convenience of\nusing the trim( ) function from chapter 17 to remove the white space\nfrom both ends of a string. Once the type and weight are discovered, an\nInfo object is created from that data and passed to the\nfactory( ). The result of this call is a Trash* which is\npassed to the addTrash( ) function of the bin (which is the\nonly function, remember, that a Fillable guarantees).\n\nAnything that supports the Fillable interface can be\nused with fillBin( ). Of course, vector doesn't\nimplement Fillable, so it won't work. Since vector is used\nin most of the examples, it makes sense to add the second overloaded\nfillBin( ) function that takes a vector, as seen previously\nin fillBin.h. But how to make a vector<Trash*> adapt to the\nFillable interface, which says it must have an addTrash( )\nmember function? The key is in the word \"adapt\"; we use the\nadapter pattern to create a class that has a vector and is also\nFillable.\n\nBy saying \"is also Fillable,\" the hint is\nstrong (is-a) to inherit from Fillable. But what about the\nvector<Trash*>? Should this new class inherit from that? We\ndon't actually want to be making a new kind of vector, which would\nforce everyone to only use our vector in this situation. Instead, we want\nsomeone to be able to have their own vector and say \"please fill\nthis.\" So the new class should just keep a reference to that\nvector:\n\nYou can see that the only job of this class is to connect\nFillable's addTrash( ) member function to\nvector's push_back( ) (that's the\n\"adapter\" motivation). With this class in hand, the overloaded\nfillBin( ) member function can be used with a vector in\nfillBin.h:\n\nThe process of opening the data file containing Trash\ndescriptions and the parsing of that file have been wrapped into\nfillBin( ), so now it's no longer a part of our design focus.\nYou will see that throughout the rest of the chapter, no matter what new classes\nare added, fillBin( ) will continue to work without change, which\nindicates a good design.\n\nIn terms of object creation, this design does indeed severely\nlocalize the changes you need to make to add a new type to the system. However,\nthere's a significant problem in the use of RTTI that shows up clearly\nhere. The program seems to run fine, and yet it never detects any cardboard,\neven though there is cardboard in the list of trash data! This happens\nbecause of the use of RTTI, which looks for only the types that you tell\nit to look for. The clue that RTTI is being misused is\nthat every type in the system is being tested, rather than a single type\nor subset of types. But if you forget to test for your new type, the compiler\nhas nothing to say about it.\n\nAs you will see later, there are ways to use polymorphism\ninstead when you're testing for every type. But if you use RTTI a lot in\nthis fashion, and you add a new type to your system, you can easily forget to\nmake the necessary changes in your program and produce a difficult-to-find bug.\nSo it's worth trying to eliminate RTTI in this case, not just for\naesthetic reasons \u2013 it produces more maintainable\ncode.\n\nAbstracting usage\n\nWith creation out of the way, it's time to tackle the\nremainder of the design: where the classes are used. Since it's the act of\nsorting into bins that's particularly ugly and exposed, why not take that\nprocess and hide it inside a class? This is simple \"complexity\nhiding,\" the principle of \"If you must do something ugly, at least\nlocalize the ugliness.\" In an OOP language, the best place to hide\ncomplexity is inside a class. Here's a first cut:\n\nA TrashSorter object holds a vector that somehow\nconnects to vectors holding specific types of Trash. The most\nconvenient solution would be a vector<vector<Trash*>>, but\nit's too early to tell if that would work out best.\n\nIn addition, we'd like to have a sort( )\nfunction as part of the TrashSorter class. But, keeping in mind that\nthe goal is easy addition of new types of Trash, how would the\nstatically-coded sort( ) function deal with the fact that a new type\nhas been added? To solve this, the type information must be removed from\nsort( ) so all it needs to do is call a generic function which takes\ncare of the details of type. This, of course, is another way to describe a\nvirtual function. So sort( ) will simply move through the\nvector of Trash bins and call a virtual function for each.\nI'll call the function grab(Trash*), so the structure now looks\nlike this:\n\nHowever, TrashSorter needs to call grab( )\npolymorphically, through a common base class for all the vectors. This\nbase class is very simple, since it only needs to establish the interface for\nthe grab( ) function.\n\nNow there's a choice. Following the above diagram, you\ncould put a vector of trash pointers as a member object of each\nsubclassed Tbin. However, you will want to treat each Tbin as a\nvector, and perform all the vector operations on it. You could\ncreate a new interface and forward all those operations, but that produces work\nand potential bugs. The type we're creating is really a Tbinand a vector, which suggests multiple inheritance. However, it\nturns out that's not quite necessary, for the following reason.\n\nEach time a new type is added to the system the programmer\nwill have to go in and derive a new class for the vector that holds the\nnew type of Trash, along with its grab( ) function. The code\nthe programmer writes will actually be identical code except for the type\nit's working with. That last phrase is the key to introduce a\ntemplate, which will do all the work of adding a new type. Now the diagram looks\nmore complicated, although the process of adding a new type to the system will\nbe simple. Here, TrashBin can inherit from TBin, which inherits\nfrom vector<Trash*> like this (the multiple-lined arrows indicated\ntemplate instantiation):\n\nThe reason TrashBin must be a template is so it can\nautomatically generate the grab( ) function. A further\ntemplatization will allow the vectors to hold specific types.\n\nThat said, we can look at the whole program to see how all\nthis is implemented.\n\nTrashSorter needs to call each grab( )\nmember function and get a different result depending on what type of\nTrash the current vector is holding. That is, each vector\nmust be aware of the type it holds. This \"awareness\" is accomplished\nwith a virtual function, the grab( ) function, which thus\neliminates at least the outward appearance of the use of RTTI. The\nimplementation of grab( ) does use RTTI, but it's\ntemplatized so as long as you put a new TrashBin in the\nTrashSorter when you add a type, everything else is taken care\nof.\n\nMemory is managed by denoting bin as the \"master\ncontainer,\" the one responsible for cleanup. With this rule in place,\ncalling purge( ) for bin cleans up all the Trash\nobjects. In addition, TrashSorter assumes that it \"owns\" the\npointers it holds, and cleans up all the TrashBin objects during\ndestruction.\n\nA basic OOP design principle is \"Use data members for\nvariation in state, use polymorphism for variation in\nbehavior.\" Your first thought might be that the grab( ) member\nfunction certainly behaves differently for a vector that holds\nPaper than for one that holds Glass. But what it does is strictly\ndependent on the type, and nothing else.\n\nTbinList holds a set of Tbin pointers, so that sort( ) can iterate\nthrough the Tbins when it's looking for a match for the Trash object\nyou've handed it.\n\nsortBin( ) allows you to pass an entire Tbin\nin, and it moves through the Tbin, picks out each piece of Trash, and sorts it\ninto the appropriate specific Tbin. Notice the genericity of this code: it\ndoesn't change at all if new types are added. If the bulk of your code\ndoesn't need changing when a new type is added (or some other change\noccurs) then you have an easily-extensible system.\n\nNow you can see how easy\nit is to add a new type. Few lines must be changed to support the addition. If\nit's really important, you can squeeze out even more by further\nmanipulating the design.\n\nOne member function call causes the contents of bin\nto be sorted into the respective specifically-typed\nbins.\n\nApplying double dispatching\n\nThe above design is certainly satisfactory. Adding new types\nto the system consists of adding or modifying distinct classes without causing\ncode changes to be propagated throughout the system. In addition, RTTI is not as\n\"misused\" as it was in Recycle1.cpp. However, it's\npossible to go one step further and eliminate RTTI altogether from the operation\nof sorting the trash into bins.\n\nTo accomplish this, you must first take the perspective that\nall type-dependent activities \u2013 such as detecting the type of a piece of\ntrash and putting it into the appropriate bin \u2013 should be controlled\nthrough polymorphism and dynamic binding.\n\nThe previous examples first sorted by type, then acted on\nsequences of elements that were all of a particular type. But whenever you find\nyourself picking out particular types, stop and think. The whole idea of\npolymorphism (dynamically-bound member function calls) is to handle\ntype-specific information for you. So why are you hunting for types?\n\nThe multiple-dispatch pattern demonstrated at the beginning of\nthis chapter uses virtual functions to determine all type information,\nthus eliminating\nRTTI.\n\nImplementing the double dispatch\n\nIn the Trash hierarchy we will now make use of the\n\"stub\" virtual function addToBin( ) that was added to\nthe base class Trash but unused up until now. This takes an argument of a\ncontainer of TypedBin. A Trash object uses addToBin( )\nwith this container to step through and try to add itself to the appropriate\nbin, and this is where you'll see the double dispatch.\n\nThe new hierarchy is TypedBin, and it contains its own\nmember function called add( ) that is also used polymorphically. But\nhere's an additional twist: add( ) is overloaded to\ntake arguments of the different types of Trash. So an essential part of\nthe double dispatching scheme also involves overloading (or at least having a\ngroup of virtual functions to call; overloading happens to be particularly\nconvenient here).\n\nIn each particular subtype of Aluminum, Paper,\nGlass, and Cardboard, the addToBin( ) member function\nis implemented, but it looks like the code is exactly the same in each\ncase. The code in each addToBin( ) calls add( ) for each\nTypedBin object in the array. But notice the argument: this. The\ntype of this is different for each subclass of Trash, so the code\nis different. So this is the first part of the double dispatch, because once\nyou're inside this member function you know you're Aluminum,\nor Paper, etc. During the call to add( ), this information is\npassed via the type of this. The compiler resolves the call to the proper\noverloaded version of add( ). Butsince tb[i] produces\na pointer to the base type TypedBin,this call will end up calling\na different member function depending on the type of TypedBin\nthat's currently selected. That is the second dispatch.\n\nYou can see that the overloaded add( ) methods all\nreturn false. If the member function is not overloaded in a derived\nclass, it will continue to return false, and the caller\n(addToBin( ), in this case) will assume that the current\nTrash object has not been added successfully to a container, and continue\nsearching for the right container.\n\nIn each of the subclasses of TypedBin, only one\noverloaded member function is overridden, according to the type of bin\nthat's being created. For example, CardboardBin overrides\nadd(DD<Cardboard>). The overridden member function adds the\nTrash pointer to its container and returns true, while all the\nrest of the add( ) methods in CardboardBin continue to return\nfalse, since they haven't been overridden. With\nC++ templates, you\ndon't have to explicitly write the subclasses or place the\naddToBin( ) member function in Trash.\n\nTo set up for prototyping the new types of trash, there must\nbe a different initializer file:\n\nTrashBinSet encapsulates all of the different types of\nTypedBins, along with the sortIntoBins( ) member function,\nwhich is where all the double dispatching takes place. You can see that once the\nstructure is set up, sorting into the various TypedBins is remarkably\neasy. In addition, the efficiency of two virtual calls and the double dispatch\nis probably better than any other way you could sort.\n\nNotice the ease of use of this system in main( ),\nas well as the complete independence of any specific type information within\nmain( ). All other methods that talk only to the Trash\nbase-class interface will be equally invulnerable to changes in Trash\ntypes.\n\nThe changes necessary to add a new type are relatively\nisolated: you inherit the new type of Trash with its\naddToBin( ) member function, then make a small modification to\nTypedBin, and finally you add a new type into the vector in\nTrashBinSet and modify\nDDTrashPrototypeInit.cpp.\n\nApplying the visitor pattern\n\nNow consider applying a design pattern with an entirely\ndifferent goal to the trash-sorting problem. As demonstrated earlier in this\nchapter, the visitor pattern's goal is to allow the addition of new\npolymorphic operations to a frozen inheritance hierarchy.\n\nFor this pattern, we are no longer concerned with optimizing\nthe addition of new types of Trash to the system. Indeed, this pattern\nmakes adding a new type of Trash more complicated. It looks like\nthis:\n\nNow, if t is a Trash pointer to an\nAluminum object, the code:\n\nPriceVisitor pv;\n\nt->accept(pv);\n\ncauses two polymorphic member function calls: the first one to\nselect Aluminum's version of accept( ), and the second\none within accept( ) when the specific version of\nvisit( ) is called dynamically using the base-class Visitor\npointer v.\n\nThis configuration means that new functionality can be added\nto the system in the form of new subclasses of Visitor. The Trash\nhierarchy doesn't need to be touched. This is the prime benefit of the\nvisitor pattern: you can add new polymorphic functionality to a class hierarchy\nwithout touching that hierarchy (once the accept( ) methods have\nbeen installed). Note that the benefit is helpful here but not exactly what we\nstarted out to accomplish, so at first blush you might decide that this\nisn't the desired solution.\n\nBut look at one thing that's been accomplished: the\nvisitor solution avoids sorting from the master Trash sequence into\nindividual typed sequences. Thus, you can leave everything in the single master\nsequence and simply pass through that sequence using the appropriate visitor to\naccomplish the goal. Although this behavior seems to be a side effect of\nvisitor, it does give us what we want (avoiding RTTI).\n\nThe double\ndispatching in the visitor pattern takes care of determining both the type of\nTrash and the type of Visitor.In the following example,\nthere are two implementations of Visitor: PriceVisitor to both\ndetermine and sum the price, and WeightVisitor to keep track of the\nweights.\n\nYou can see all of this implemented in the new, improved\nversion of the recycling program. As with DoubleDispatch.cpp, the\nTrash class has had an extra member function stub\n(accept( ))inserted in it to allow for this\nexample.\n\nSince there's nothing concrete in the Visitor\nbase class, it can be created as an interface:\n\nNote that the shape of main( ) has changed again.\nNow there's only a single Trash bin. The two Visitor objects\nare accepted into every element in the sequence, and they perform their\noperations. The visitors keep their own internal data to tally the total weights\nand prices.\n\nFinally, there's no run-time type identification other\nthan the inevitable cast to Trash when pulling things out of the\nsequence.\n\nOne way you can distinguish this solution from the double\ndispatching solution described previously is to note that, in the double\ndispatching solution, only one of the overloaded methods, add( ),\nwas overridden when each subclass was created, while here each one of the\noverloaded visit( ) methods is overridden in every subclass of\nVisitor.\n\nMore coupling?\n\nThere's a lot more code here, and there's definite\ncoupling between the Trash hierarchy and the Visitor hierarchy.\nHowever, there's also high cohesion within the respective sets of classes:\nthey each do only one thing (Trash describes trash, while Visitor\ndescribes actions performed on Trash), which is an indicator of a\ngood design. Of course, in this case it works well only if you're adding\nnew Visitors, but it gets in the way when you add new types of\nTrash.\n\nLow coupling between classes and high cohesion within a class\nis definitely an important design goal. Applied mindlessly, though, it can\nprevent you from achieving a more elegant design. It seems that some classes\ninevitably have a certain intimacy with each other. These often occur in pairs\nthat could perhaps be called couplets, for\nexample, containers and iterators. The Trash-Visitor pair above appears\nto be another such\ncouplet.\n\nRTTI considered harmful?\n\nVarious designs in this chapter attempt to remove RTTI, which\nmight give you the impression that it's \"considered harmful\"\n(the condemnation used for poor goto). This isn't true; it is the\nmisuse of RTTI that is the problem. The reason our\ndesigns removed RTTI is because the misapplication of that feature prevented\nextensibility, which contravened the stated goal of\nadding a new type to the system with as little impact on surrounding code as\npossible. Since RTTI is often misused by having it look for every single type in\nyour system, it causes code to be non-extensible: when you add a new type, you\nhave to go hunting for all the code in which RTTI is used, and if you miss any\nyou won't get help from the compiler.\n\nHowever, RTTI doesn't automatically create\nnon-extensible code. Let's revisit the trash recycler once more. This\ntime, a new tool will be introduced, which I call a TypeMap. It inherits\nfrom a map that holds a variant of type_info object as the key,\nand vector<Trash*> as the value. The interface is simple: you call\naddTrash( ) to add a new Trash pointer, and the map\nclass provides the rest of the interface. The keys represent the types\ncontained in the associated vector. The beauty of this design (suggested\nby Larry O'Brien) is that the TypeMap dynamically adds a new\nkey-value pair whenever it encounters a new type, so whenever you add a new type\nto the system (even if you add the new type at runtime), it adapts.\n\nThe example will again build on the structure of the\nTrash types, and will use fillBin( ) to parse and insert the\nvalues into the TypeMap. However, TypeMap is not a\nvector<Trash*>, and so it must be adapted to work with\nfillBin( ) by multiply inheriting from Fillable. In addition,\nthe Standard C++ type_info class is too restrictive to be used as a key,\nso a kind of wrapper class TypeInfo is created, which simply extracts and\nstores the type_infochar* representation of the type (making the\nassumption that, within the realm of a single compiler, this representation will\nbe unique for each type).\n\nTypeInfo is templatized because typeid( )\ndoes not allow the use of void*, which would be the most general way to\nsolve the problem. So you are required to work with some specific class, but\nthis class should be the most base of all the classes in your hierarchy.\nTypeInfo must define an operator< because a map needs it\nto order its keys.\n\nAlthough powerful, the definition for TypeMap is\nsimple; the addTrash( ) member function does most of the work. When\nyou add a new Trash pointer, the a TypeInfo<Trash> object\nfor that type is generated. This is used as a key to determine whether a\nvector holding objects of that type is already present in the map.\nIf so, the Trash pointer is added to that vector. If not, the\nTypeInfo object and a new vector are added as a key-value\npair.\n\nAn iterator to the map, when dereferenced, produces a pair\nobject where the key(TypeInfo)is the first\nmember, and the value (Vector<Trash*>)is the second\nmember. And that's all there is to it.\n\nThe TypeMap takes advantage of the design of\nfillBin( ), which doesn't just try to fill a vector but\ninstead anything that implements the Fillable interface with its\naddTrash( ) member function. Since TypeMap is multiply\ninherited from Fillable, it can be used as an argument to\nfillBin( ) like this:\n\nfillBin(\"Trash.dat\",\nbin);\n\nAn interesting thing about this design is that even though it\nwasn't created to handle the sorting, fillBin( ) is performing\na sort every time it inserts a Trash pointer into bin. When the\nTrash is thrown into bin it's immediately sorted by\nTypeMap's internal sorting mechanism. Stepping through the\nTypeMap and operating on each individual vector becomes a simple\nmatter, and uses ordinary STL syntax.\n\nAs you can see, adding a new type to the system won't\naffect this code at all, nor the code in TypeMap. This is certainly the\nsmallest solution to the problem, and arguably the most elegant as well. It does\nrely heavily on RTTI, but notice that each key-value pair in the map is\nlooking for only one type. In addition, there's no way you can\n\"forget\" to add the proper code to this system when you add a new\ntype, since there isn't any code you need to add, other than that which\nsupports the prototyping process (and you'll find out right away if you\nforget that).\n\nSummary\n\nComing up with a design such as TrashVisitor.cpp that\ncontains a larger amount of code than the earlier designs can seem at first to\nbe counterproductive. It pays to notice what you're trying to accomplish\nwith various designs. Design patterns in general strive to separate the\nthings that change from the things that stay the same. The \"things\nthat change\" can refer to many different kinds of changes. Perhaps the\nchange occurs because the program is placed into a new environment or because\nsomething in the current environment changes (this could be: \"The user\nwants to add a new shape to the diagram currently on the screen\"). Or, as\nin this case, the change could be the evolution of the code body. While previous\nversions of the trash-sorting example emphasized the addition of new\ntypes of Trash to the system, TrashVisitor.cpp allows you\nto easily add new functionality without disturbing the Trash\nhierarchy. There's more code in TrashVisitor.cpp, but adding new\nfunctionality to Visitor is cheap. If this is something that happens a\nlot, then it's worth the extra effort and code to make it happen more\neasily.\n\nThe discovery of the vector of change\nis no trivial matter; it's not something that an analyst can usually\ndetect before the program sees its initial design. The necessary information\nwill probably not appear until later phases in the project: sometimes only at\nthe design or implementation phases do you discover a deeper or more subtle need\nin your system. In the case of adding new types (which was the focus of most of\nthe \"recycle\" examples) you might realize that you need a particular\ninheritance hierarchy only when you are in the maintenance phase and you begin\nextending the system!\n\nOne of the most important things that you'll learn by\nstudying design patterns seems to be an about-face from what has been promoted\nso far in this book. That is: \"OOP is all about polymorphism.\" This\nstatement can produce the \"two-year-old with a hammer\" syndrome\n(everything looks like a nail). Put another way, it's hard enough to\n\"get\" polymorphism, and once you do, you try to cast all your\ndesigns into that one particular mold.\n\nWhat design patterns say is that OOP isn't just about\npolymorphism. It's about \"separating the things that change from the\nthings that stay the same.\" Polymorphism is an\nespecially important way to do this, and it turns out to be helpful if the\nprogramming language directly supports polymorphism (so you don't have to\nwire it in yourself, which would tend to make it prohibitively expensive). But\ndesign patterns in general show other ways to accomplish the basic goal,\nand once your eyes have been opened to this you will begin to search for more\ncreative designs.\n\nSince the Design Patterns book came out and made such\nan impact, people have been searching for other patterns. You can expect to see\nmore of these appear as time goes on. Here are some sites recommended by Jim\nCoplien, of C++ fame ( who is one of the\nmain proponents of the patterns movement:\n\nAlso note there has been a yearly conference on design\npatterns, called PLOP, that produces a published proceedings. The third one of\nthese proceedings came out in late 1997 (all published by\nAddison-Wesley).\n\nExercises\n\nUsing SingletonPattern.cpp as a starting point, create a class that\nmanages a fixed number of its own objects. Assume the objects are database\nconnections and you only have a license to use a fixed quantity of these at any\none time.\n\nCreate a minimal Observer-Observable design in two classes,\nwithout base classes and without the extra arguments in Observer.h and\nthe member functions in Observable.h. Just create the bare minimum in the\ntwo classes, then demonstrate your design by creating one Observable and\nmany Observers, and cause the Observable to update the\nObservers.\n\nExplain how AbstractFactory.cpp demonstrates Double\nDispatching and the Factory Method.\n\nModify\nShapeFactory2.cpp so that it uses an Abstract Factory to create\ndifferent sets of shapes (for example, one particular type of factory object\ncreates \"thick shapes,\" another creates \"thin shapes,\"\nbut each factory object can create all the shapes: circles, squares, triangles\netc.).\n\nCreate a business-modeling environment with three types of\nInhabitant: Dwarf (for engineers), Elf (for marketers) and\nTroll (for managers). Now create a class called Project that\ncreates the different inhabitants and causes them to interact( ) with\neach other using multiple dispatching.\n\nModify the above example to make the\ninteractions more detailed. Each Inhabitant can randomly produce a\nWeapon using getWeapon( ): a Dwarf uses Jargon or\nPlay, an Elf uses InventFeature or\nSellImaginaryProduct, and a Troll uses Edict and\nSchedule. You must decide which weapons \"win\" and\n\"lose\" in each interaction (as in PaperScissorsRock.cpp). Add\na battle( ) member function to Project that takes two\nInhabitants and matches them against each other. Now create a meeting(\n) member function for Project that creates groups of Dwarf,\nElf and Manager and battles the groups against each other until\nonly members of one group are left standing. These are the\n\"winners.\"\n\nImplement Chain of Responsibility to create an\n\"expert system\" that solves problems by successively trying one\nsolution after another until one matches. You should be able to dynamically add\nsolutions to the expert system. The test for solution should just be a string\nmatch, but when a solution fits, the expert system should return the appropriate\ntype of problemSolver object. What other pattern/patterns show up\nhere?"}
{"text": "Programming TutorialJava Tutorial 5 \u2013 Arrays.\n\nProgramming TutorialJava Tutorial 4 \u2013 Methods.\n\nProgramming TutorialJava Tutorial 3 \u2013 The For Statement and Operators.\nJava Tutorial 3 \u2013 The For Statement and Operators\n\nProgramming TutorialJava Tutorial 2 \u2013 Classes and Objects: A First Look.\n\nProgramming TutorialJava Tutorial 1 \u2013 Hello World: The Application.\n\nProgramming TutorialC Tutorial 12 \u2013 Accepting command line arguments 11 \u2013 Typecasting 10 \u2013 C File I/O and Binary File I/O\nWhen accessing files through C, the first necessity is to have a way to access the files. For C File I/O you need to use a FILE pointer, which will let the program keep track of the file being accessed. (You can think of it as the memory address of the file or the location of the file).\nFor example:\n\nProgramming Tutorial\nThis lesson will discuss C-style strings, which you may have already seen in the array tutorial. In fact, C-style strings are really arrays of chars with a little bit of special sauce to indicate where the string ends. This tutorial will cover some of the tools available for working with strings\u2013things like copying them, concatenating them, and getting their length.\n\nProgramming TutorialC Tutorial 8 \u2013 Arrays\nArrays are useful critters that often show up when it would be convenient to have one name for a group of variables of the same type that can be accessed by a numerical index. For example, a tic-tac-toe board can be held in an array and each element of the tic-tac-toe board can easily be accessed by its position (the upper left might be position 0 and the lower right position 8). At heart, arrays are essentially a way to store many values under the same name. You can make an array out of any data-type including structures and classes.\n\nProgramming TutorialC tutorial 7 \u2013 Structures\nWhen programming, it is often convenient to have a single name with which to refer to a group of a related values. Structures provide a way of storing many different values in variables of potentially different types under the same name. This makes it a more modular program, which is easier to modify because its design makes things more compact. Structs are generally useful whenever a lot of data needs to be grouped together\u2013for instance, they can be used to hold records from a database or to store information about contacts in an address book. In the contacts example, a struct could be used that would hold all of the information about a single contact\u2013name, address, phone number, and so forth.\nC tutorial 7 \u2013 Structures\n\nProgramming tutorial\nPointers are an extremely powerful programming tool. They can make some things much easier, help improve your program's efficiency, and even allow you to handle unlimited amounts of data. For example, using pointers is one way to have a function modify a variable passed to it. It is also possible to use pointers to dynamically allocate memory, which means that you can write programs that can handle nearly unlimited amounts of data on the fly\u2013you don't need to know, when you write the program, how much memory you need. Wow, that's kind of cool. Actually, it's very cool, as we'll see in some of the next tutorials. For now, let's just get a basic handle on what pointers are and how you use them.\n\nProgramming tutorial\nSwitch case statements are a substitute for long if statements that compare a variable to several \"integral\" values (\"integral\" values are simply values that can be expressed as an integer, such as the value of a char). The basic format for using switch case is outlined below. The value of the variable given into switch is compared to the value following each of the cases, and when one value matches the value of the variable, the computer continues executing the program from that point."}
{"text": "Core Java Articles\n\nHot Java Topics\n\nJava is a programming language developed by\nJames Gosling from Sun Microsystems in 1991. The\nfirst public available version of Java (Java 1.0) was released 1995. Over time several version of Java were\nreleased which enhanced the language and its libraries. The current version of\nJava is 1.6also known as Java 6.0. The main\ncomponents of java language are compiler java virtual machine and Java class libraries. The Java virtual machine (JVM) is a\nsoftware implementation of a computer that executes programs like a real\nmachine. The Java compiler translates Java coding into byte-code. The Java virtual machine interprets\nthis byte-code and runs the program. The Java virtual machine is written specifically for a specific operating system. The Java runtime\nenvironment (JRE) consists of the JVM and the Java\nclass libraries.\n\nFEATURES OF JAVA The main objective of java development is to write the program\nonce and run it on multiple plateforms. other features of java are: 1.Simple :-Programs are easy to write and debug\nbecause java does not use the pointers explicitly. It is much harder to write\nthe java programs that can crash the system but we can not say about the other\nprogramming languages. 2.Object-orientated programming language:- Except\nthe primitive data types, all elements in Java are objects. 3.Automatic Memory Management :-Automatic garbage\ncollection - memory management handled by JVM 4.Dynamic:-User can access the files from the any location ,from\nlocal system or from anywhere location 5.Distributed:-Using protocols like\nHTTP and FTP java developers . can call functions on these protocols and can get access the files\nfrom any remote machine on the internet . 6.Portable:-The feature Write-once-run-anywhere\nmakes the java language portable provided that the system must have interpreter\nfor the JVM. 7.Security :- Java is secure because java do not\nused memory pointers explicitly. programs are run inside the\nJVM sand box 8.Plateform independent: -Write once run anywhere\nmakes java platform independent.\n\nBASICS OF JAVA TECHNOLOGY Java technology as programming language and a platform. Java\ntechnology is a simple, secure, robust, complete object oriented and platform\nindependent high level programming language. Java is\nportable, high performance, multithreaded and network security provider that enable it in constructing software that can run along in small machines. The\nwhole technology is based on the concept of JavaVirtual Machine (JVM) that acts\nas translators of byte code into machine language.\n\nIMPORTANCE OF JAVA TECHNOLOGY Java is high level programming language .As java provide Java\ntechnology as programming language and a platform. Java technology is a simple,\nsecure, robust, complete object oriented and platform independent high level\nprogramming language.\nThe whole technology is based on the concept of Java Virtual Machine (JVM)\nthat acts as a translators of\nbyte code into machine language.\n\nEDITIONS OF JAVA TECHNOLOGY There are three editions of java technology 1.JAVA SE:-Java standard edition provide Tolls\nand APIs that you can use to create server\napplications ,desktop application, and applets Programs developed using SE edition can run on any operating\nsystem. like Linux, Macintosh, Solaris and Windows 2.JEE:-Java Enterprise Edition helps in web\napplication service, component model and enterprise class service oriented\narchitecture (SOA) 3.JME:- Java Micro edition is basically used for development of software\nfor small devices like mobile phones ,game programming ,PDAsetc.\n\nDEVELOPMENT OF JAVA PROGRAM The programmer writes Java source code in an text editor which\nsupports plain text. IDE (integrated development\nenvironment )is required for programming .An IDE support the programmer in the\ntask of writing code, e.g. it provides auto-formatting of the source code,\nhighlighting of the important keywords, etc. . The Java\ncompiler creates platform independent code which is called byte code. This byte-code is\nstored in \".class\" files. Byte code can be executed by the Java runtime environment. The\nJava runtime environment (JRE) is a program which\nknows how to run the byte code on the operating system. The JRE translates the\nbyte code into\nnative code and executes.\n\nCLASS PATH The Classpath is the connection between the Java compiler and Java\ninterpreter. It defines where the compiler and interpreter look for .class files\nto load What is Java API? Java API is a set of classes and interfaces which comes with the JDK.\nJava API is basically a huge collection of library routines that performs basic programming tasks\n.All java classes and interfaces are packaged in packages. These\nclasses are written in Java and runs on the JVM. Java classes are platform independent but JVM is not platform independent.\nYou will find different downloads for each OS.\n\nFUNDAMENTAL PROGRAMMING STRUCTURES IN JAVA A SIMPLE JAVA PROGRAM Write the program using note pad for window system or either\nused net bean or eclipse these are the IDE for program writing.following program\nis written in note pad\n\nCompilation of program\nOpen the command prompt and write cd javadir,\nfor example in my case cd c:\\r4r\\java. Use the command dir to see that the\nsource file is in the directory then on command prompt write\njavac Hello.java (File saved with the name of class\nhere file is saved with Hello.java ,. java is the extension of jav files)\n\nRun The Java Program write java hello world\non command prompt to run the program.\n\nJAVA COMMENTS Java has uses three ways of showing comments. The\nmost common method is a //. You use this for a\ncomment that will run from the // to the end of the line. for longer comments\n(number of lines of comments) you can write the the comments within the\n/* and */. there is a third kind of comment\nthat can be used to generate documentation automatically. This comment uses a\n/** to start and a */ to end.\n\nJAVA VARIABLES Variables are used to store the value for any\ndata type in memory.In Java, every variable has a type. You declare\na variable by placing the type first, followed by the name of the variable. few\nexamples are given below\n\ndouble salary;int vacationDays;long earthPopulation;char yesChar\n\nJAVA ASSIGNMENT AND INITIALIZATIONS After you declare a variable, you must explicitly initialize it by means of\nan assignment statement\u2014you can never use the values of un initialized variables. You assign to a previously declared variable using the variable\nname on the left, an equal sign (=), and then some Java expression that has an appropriate value on the right.\n\nint vacationDays; // this is a declaration vacationDays = 12; // this is an assignment\n\nint vacationDays = 12; // this is an initialization\n\nOPERATORS The usual arithmetic operators + \u2013 * / are used in Java for addition,\nsubtraction, multiplication, and division. The / operator denotes integer\ndivision if both arguments are integers, and floating-point division otherwise. Integer\nremainder (that is, the mod function) is denoted by %. For example, 13 / 2 is 6, 13 % 2 is 1, and 19.0 / 2 is 8.5.\n\nIncrement and Decrement Operators Increment operator is (++) which is used to increase the value of variable by\none. on other hand decrement operator (--) is used to decrease the value of variable by one. x++ adds 1 to the current value of the variable x,\nand x-- subtracts 1 from it. int n = 12; n++;\n\nRelational and Boolean Operators\nJava has the full complement of relational operators. To test for equality you\nuse a double equal sign, ==. For example, the value of\n\n3 == 7\n\nis false.\n\nJava, following C++, uses && for the logical \"and\" operator and || for the\nlogical \"or\" operator. As you can easily remember from the != operator, the exclamation point ! is the logical negation operator. The && and || operators\nare evaluated in \"short circuit\" fashion. This means that when you have an\nexpression like:\n\nA && B\nonce the truth value of the expression A has been determined to be false, the\nvalue for the expression B is not calculated. For example, in the expression\n\nx != 0 && 1 / x > x + y // no division by 0\n\nBitwise Operators\nWhile working with any of the integer types, the there are operators that can work\ndirectly with the bits that make up the integers. Which means that you can use\nmasking techniques to get at individual bits in a number. The bitwise operators\nare:\n\n& (\"and\") , | (\"or\") ,^ (\"xor\"), ~ (\"not\")\n\nControl Flow\njava provide some control statements to control the flow of program.\nthese statements are if, if else ,while ,do while, goto ,\nswitch ,break and continue.\n\nKeywords in java :-keywords are\nthose words with are defined in has special meaning for every keywords they\ncannot be used as literals.some of the key words are int, char, if, switch, ,while\n,volatile, final , synchronized ,Boolean, super, protected , private ,public,\ntransient,new , package ,import etc the list is very large.goto and const are the reserved keywords which are not\nimplemented.\n\nBig Numbers If the declaration of the basic integer and floating-point types is not\nsufficient, than you can turn to a some classes in the java.math package,\ncalled BigInteger and BigDecimal. These are classes for manipulating numbers with an\narbitrarily long sequence of digits. The BigInteger class implements arbitrary precision integer arithmetic, and BigDecimal does the same for\nfloating-point numbers.\n\nBigInteger a = BigInteger.valueOf(100);\n\nArrays\nAn array is a data structure which used to stores a collection same type\nof values.\nYou access each individual value through an integer index. For example, if a is\nan array of integers, then a[i] is the ith integer in the array.\n\nOOPS FUNDAMENTALS THAT JAVA FOLLOW Java follow the three basic fundamental of oops that is\nEncapsulation( some times called hiding of data), inheritance (inherit the\nproperties of super class) and polymorphism (method overriding and method\noverloading).\n\nObjects:- As java is object based programming .object is defined\nas the instance of class .All objects that are instances of the same class share\na family resemblance by supporting the same behavior. The behavior of an object\nis defined by the methods that you can call. Classes:A class can be defined as the blueprint from which individual objects are\ncreated. A class must consists the methods and data.\n\nsuper class and sub class\nin java: -parent class is called\nsuper class and child class is called sub class in java. sub is extend from\nsuper class sometime method is also override in sub class which is declare in\nsuper class.\n\nMethods:-A\nmethod is a group of instructions that is given a name and can be called up at\nany point in a program simply by quoting that name.\n\nHere is an example of a typical method declaration:\n\npublic double calculateAnswer(double wingSpan, int numberOfEngines, double length, double grossTons) { //do the calculation here Constructor:-Constructors are used to initialize the instance\nvariables (fields) of an object. Constructors are similar to methods, but with\nsome important differences. Constructor is always called by new operator.\nConstructor are declared just like as we declare methods, except that theconstructor\ndon't have any return type. constructor is declare with name of class.\nconstructors are overloaded just like methods. public class Point { int m_x; int m_y;\n\nADDITIONAL JAVA FUNDAMENTALS Super Keyword:-The super keyword in java programming\nlanguage refers to the superclass of the class where the super keyword is\ncurrently being used.The super keyword as a standalone\nstatement is used to call the constructor of the superclass in the base class.\n\nThe syntax super.<method_Name>() is used to give a\ncall to a method of the superclass in the base class.\n\nFinal classes and methods.:- The\nClasses those are not extended are called final classes, and use the final\nmodifier in the definition of the class to indicate this. we can also make a\nspecific method in a class final. If we do this, then no subclass can override\nthat method. (All methods in a final class are automatically final.)\n\nInterfaces :-In the Java\nprogramming language, an interface is not a class but a set of requirements for\nclasses that want to conform to the interface.Interfaces are not classes. In particular, you can never use the new operator\nto instantiate an interface. However, even though you can't construct interface objects, you can still declare interface variables. Here is what the Comparable interface looks like:\n\npublic interface Comparable { int compareTo(Object other);\n\nmethods in an interface are automatically public, fields are always public\nstatic final.\n\nAbstract Classes:-Java\nAbstract classes are used to declare common characteristics of subclasses. An\nabstract class cannot be instantiated. It can only be used as a superclass for other classes that extend the abstract\nclass. Abstract classes are declared with the abstract keyword. Abstract classes are used to provide a template or design for concrete subclasses down\nthe inheritance tree.\n\nACCESS MODIFIERS IN JAVA The Java has three explicit access modifiers viz. public, private and\nprotected, and also has a default modifier, which is used when you do not explicitly specify a modifier. public modifier : The public modifier makes an element most\nvisible, it can be applied to various classes and their members (instance\nvariable and methods)\nprivate modifier : The private modifier is used to make a java element\nleast visible. The private modifier cannot be used for a top-level class, and\ncan be applied only to the members of a top-level class viz. instance variables,\nmethods.\nprotected modifier : The protected modifier makes a class member more\nvisible than private modifier but less accessible than public modifier. This\nmodifier may be applied only to class members viz. variables, methods, and inner\nclasses\u2014but not to the class itself\ndefault modifier : In java we cannot specify any modifier for the\nvariables inside a method, and also we cannot specify the protected modifier for\na class. When we do not specify any access modifier for an element, it is\nimplied that the access is default.\n\nJAVA PACKAGES A package is a grouping of related types providing access protection and name\nspace management. Note that types refers to classes, interfaces, enumerations, and annotation types. Enumerations and annotation types are\nspecial kinds of classes and interfaces, respectively, so types are often referred to in this lesson simply as classes and interfaces. some packages\nare java . langl , java.util, java.io,java.net ,java.awts\n\nMETHOD OVERLOADING AND METHOD OVERRIDING IN JAVA Method overloading when you have more than one method with the same name but different\narguments, the methods are said to be overloaded.\nExample:\n\npublic class OverLoadingExample{\n\npublic void add(int i, int j)\n\n{\n\nint k = i + j;\n\n}\n\npublic void add(String s, String t)\n\n{\n\nint k = Integer.parseInt(s) + Integer.parseInt(t);\n\n}\n\n}\n\nMethod overriding\nwhen you want to extend a class and the ethod of super class write in the derived class\n.then, it is termed as\noverriding. public class BaseClass{\n\npublic void methodToOverride()\n\n{\n\n//Some code here\n\n}\n\n}\n\npublic class DerivedClass extends BaseClass{\n\npublic void methodToOverride()\n\n{\n\n//Some new code here\n\n}\n\n}\nEXCEPTION HANDLING IN JAVA Exceptions are used for handling errors which are occurs\nduring the program execution .During the program execution if any error occurs and you want to print your own message or the system message about the\nerror then you write the part of the program which generate the error in the try{} block and catch the errors\nusing catch() block. Exception turns the direction\nof normal flow of the program control and send to the related catch() block. In Java, an exception\nobject is always an instance of a class derived from\nThrowable\nThrowable class is divided into two----Errors and\nExceptions .Exception is further divide into IO Exceptions and Run\nTime Exceptions.\n\nMULTITHREADING IN JAVA Multithreading is a technique that allows a program or a process to execute\nmany tasks concurrently (at the same time and parallel). It allows a process to run its tasks in parallel mode on a single processor system.In the\nmultithreading concept, several multiple lightweight processes are run in a single process/task or program by a single processor.\nThread:-A thread is an independent path of\nexecution within a program. Many threads can run concurrently within a\nprogram. Every thread in Java is created and controlled by the java.lang Thread class.\nprocess: :-A process consists of the memory\nspace allocated by the operating system that can contain one or more threads. A\nthread cannot exist on its own; it must be a part of a process. A process remains running until all\nof the non-daemon threads are done executing.\n\nLife cycle of tread Life cycle of tread consists five stages\n.1.New state:-After the creations of Thread instance the thread will come in\nthis state but before the start() method invocation. At this point, the thread\nis considered not alive\n.2.Runnable(ready to run):-A thread start its life from Runnable state.\nA thread first enters runnable state after the invoking of start() method but a thread can return to this state after either running, waiting, sleeping or\ncoming back from blocked state also\n3.Running state:-A thread is in running state means it is\ncurrently executing..\n4.Dead state :-A thread can be considered dead when its run() method\ncompletes.\n5.Blocked state:-In this state thread will come if only when the resource is\nused by the other thread\n\nCREATION OF THREAD Thread can be created in two ways :\n1.By extending thread class by own. FirstExtend the java.lang.Thread Class.Override\nthe run( ) method in the subclass from the Thread\nclass to define the code executed by the thread.\nCreate an instance of this subclass. Invoke the start(\n) method on the instance of the class to make the thread eligible for\nrunning. class MyThread extends Thread{\n\n2.implementing runnable interface: To create a thread is to first create a class that implements the Runnable interface. To implement Runnable, a class need only implement a single method called run( ), which is declared like this:\n\nThread Priorities:Every Java thread has a priority that helps the operating system determine the\norder in which threads are scheduled.Java priorities are in the range between MIN_PRIORITY (a\nconstant of 1) and MAX_PRIORITY (a constant of 10).\nBy default, every thread is given priority NORM_PRIORITY (a constant of 5).Threads with higher priority are more important to a program and should be\nallocated processor time before lower-priority threads.\n\nVolatile and Synchronized\nKeywords\nVolatile is a Keyword used to define the variable\nin java. If no. of threads have access the same variable, the JVM\nmay its own copy of the variable.\nChanges to the variable by one thread may or may not be seen by other threads;\nusing the volatile key word essentially synchronizes access to a\nvariable. When you declare a variable with the volatile keyword, the JVM must\nmake sure that all threads accessing the variable have their copies\nupdated whenever the variable is modified.The Java programming language provides two basic\nsynchronization idioms: synchronized methods and\nsynchronized statements\n\nSynchronized methods To make a method synchronized, simply add the synchronized keyword to its\ndeclaration:\n\npublic synchronized void increment()\nmaking methods synchronized has two effects:-\n\nSynchronized Statements\nAnother way to create synchronized code is with synchronized statements. Unlike\nsynchronized methods, synchronized statements must specify the object that provides the intrinsic lock.\n\nCOLLECTIONS IN JAVA Collections is defined as a group of objects also known as its elements.\nActually collection is a package of data structures which includes ArrayLists,\nLinkedLists, HashSets, etc. A collection is a simple an object which groups multiple elements into a\nsingle unit. Collection is used to store, retrieve, manipulate, and communicate aggregate data. The manipulation and passing of collections is done by this interface\n.These classes typically implement Collection indirectly through one of its\nsub interfaces.\n1.Void (no arguments) constructor which creates an\nempty collection.\n2.Constructor with a single argument of type Collection, which creates a new\ncollection with the same elements as its argument.\n\nCOLLECTIONS API Java Collections of\nAPI (Application Programming Intreface) Consists several interfaces, and classes\nwhich are implement those interfaces, within the java.util package.\nIt provides tools for maintaining a data container of objects.The\nvalue of primitive is must be wrapped in an object of its appropriate wrapper class (Boolean,\nCharacter, Integer, Double, etc.) to maintain a collection of primitive\ndata. .\n\nGARBAGE COLLECTION The Java virtual machine's heap stores all objects created by a running Java\napplication. Garbage collection is the process of automatically freeing objects\nthat are no longer referenced by the program. Every time when an object is created in java, it\nwill goes into an area of memory which is called\nas the HEAP. All the objects are stored on heap whether they are created\nsomewhere else. the java heap\nis actually called the Garbage-collectible Heap. When an object is\ncreated, java allocates memory space on the heap according to the requirement by\nthe that\nparticular object. java manage that memory for user .When the JVM can find that an object can never be used again ,\nthen that object become will be\neligible for garbage collection. and if you're running low on memory ,the garbage collector will run, throw out the unreachable objects, and free up\nthe space. so that the space can be reused.\n\nTolal:3 Click:\n1\nUsername :Pankaj Singh Comments :All pdf of this site are very understandable which can help a lot to java beginner.\nBut some places spelling mistake are there in this pdf\nlike..\nMethod overriding\nwhen you want to extend a class and the ethod of super class write in the derived class. URL : Username :Megh Comments :Its very useful.thank u. URL : Username :seshubabu Comments :what are the different types of loadfactors in java? Can you explain me.... URL :\n1\nShow All Comments"}
{"text": "Syndicate\n\nFour new web tutorials for Qt are now available on Forum Nokia. Each tutorial features an introduction, IDE walkthrough explaining the\ndevelopment environment, programming guide describing the key points, an\noptional test to ensure mastery of key concepts, a step-by-step guide\nto creating an application, and a summary with links pointing to\nrelevant reference information and useful downloads. The four new tutorials are:"}
{"text": "Object-oriented programming languages came into their commercial heyday in the 1990s, and one of the fringe benefits of object-oriented programming research was the development of a standard way to diagram the internal structure of programs.\n\nObject-oriented programming languages came into their commercial heyday in the 1990s, and one of the fringe benefits of object-oriented programming research was the development of a standard way to diagram the internal structure of programs.\nA standard managed by the Object Management Group, UML (Unified Modeling Language) is officially described as \"the industry-standard language for specifying, visualizing, constructing and documenting the artifacts of software systems\" (go to  to access the UML Resource Center Web site).\n\nGrady Booch, Ivar Jacobson and Jim Rumbaugh, three leading software design experts who ended up working together at Rational Software Corp., initially designed UML.\n\nThere are seven basic UML diagram types, ranging from the high-level use case diagram, showing the people and tasks in a business process, to the low-level class diagram, showing class, method and variable names used in a particular program.\nHigh-level diagram types such as use case, activity or sequence are effective ways for users (through an interview with someone who knows UML) to specify how applications should work.\nClass diagrams, on the other hand, are programmers tools. UML-based modeling tools take completed class diagrams and use them to directly generate code. Modeling tools can also reverse-engineer existing code back to class diagrams to visually show how a programs components fit together.\nOne area that UML does not currently address is database modeling, now based on entity-relationship model diagrams. There is some exploratory work going on to see how UML could be used to do database modeling.\nOther future directions for UML include models for designing real-time systems, more ways to describe the run-time behavior of software, and distributed computing modeling.\nUsing UML to describe software plans in a clear, visual way will help analysts ensure that their software plans meet business needs and help developers supply finished software that does the same"}
{"text": "Menu\n\nMy Books\n\nMy Software\n\nHello World in Java\n\nIntroduction\n\nIn this tutorial, we will look at how to write a simple application that prints out text to the screen.\n\nThe Program\n\nTo get started with Java, we will make the standard first program - one that prints out \"Hello World!\" to the screen. Create a new file called HelloWorld.java and place the following code in it. Remember that a .java file must contain only one class, and that class has to have the same name as the file.\n\n// Place this code in a file called HelloWorld.javapublicclassHelloWorld{publicstaticvoidmain(String[]args){System.out.println(\"Hello World!\");\n}}\n\nNow let's look at this one line at a time. The first line says:\n\npublicclassHelloWorld\n\nWe can see from this line, and the curly braces ('{' and '}') below it, that our program is contained within what is called a 'class'. We will learn more about classes in another tutorial. Basically, though, classes are simply containers that represent objects in real life. They hold data (any kind of information) and operations or methods(what you can do to the data).\n\nNotice that before the keyword 'class' is the keyword 'public'. This is called an access modifier. We will talk more about these in another tutorial as well. But by listing the class as public, we indicate that the class can be seen by any one. It's public!\n\nbelow the class definition, we have the line that says:\n\npublicstaticvoidmain(String[]args)\n\nThis line is our first glimpse at what is called a method in Java. In some other programming languages, they are called functions, or subroutines. Like we discussed earlier, a class can contain operations or methods. This line of code shows us that there is one method in our class called main.\n\nTo create a method, we need to state a few things. First of all, we need to state its access modifier. In our case, we are using the public modifier, to show that this method can be used by anyone, just like the class.\n\nThe next thing we have when we create our method is the word static. This may be a little confusing at first, since we don't really have the background necessary to explain it well. We'll talk about it more later, but for now we'll just mention that it means the method belongs to the class, rather than an instance of the class.\n\nA method's job is to perform a particular task. Usually, we want the method to do something, like a mathematical computation, and then give us the result. Each method has the ability to return a value back to the place that called it. The value could be a number, a word, true or false, or a complex structure - just about anything. It can also not return anything. In our program, we simply want to write out a word to the screen. We don't need to return anything back. To indicate that we don't want to return anything, we use the keyboard void. We will look at other return types later.\n\nThe next thing on the line is the word main. This is the name of our method. Methods can be called whatever you want, as long as you follow Java's rules for naming. Well talk more about this later as well.\n\nAfter the name of our method, we have a couple of parentheses, with the words String[] args in the middle. Each method can be given some data to work with. These data are called parameters. Our list has one parameter, which is called args and has the type String[]. The String type is basically words or text. the [] indicates that the parameter is an array (the word in Java for list) of them. So we're giving our main method a list of words to use. It turns out that our method is going to completely ignore this parameter\u2026.\n\nIn order to run a program in Java, we need to have a class that contains a method that looks like the method we've defined in our program:\n\npublicstaticvoidmain(String[]args)\n\nWhen we run the program, it goes looking specifically for this method, so be sure to have this method somewhere in your program!\n\nNow, the last important line in our small program is the line that says:\n\nSystem.out.println(\"Hello World!\");\n\nSystem is another class that is defined in Java. We are going to use one of the class's data objects, called out, which has a method called println. This method, println prints out a line of text. Then in the parentheses, we give it a parameter - in this case, what we want to print out. We give it the String (Java's word for text) \"Hello World!\".\n\nWe can now compile and run our program, and we will get the following output:\n\nHello World!\n\nConclusion\n\nWe've seen how to write a very simple Java program. But we're really just getting started. Some of the directions we might want to go to next is to learn about data types in Java, and to do some more with methods in Java. These are the two building blocks in a Java program.\n\nExercises\n\nModify the code so that it prints out the text \"Goodbye world!\" instead.\n\nChange the name of the main method and look at the error that occurs when you try to run the program. Why does this error occur?"}
{"text": "Synopses & Reviews\n\nPublisher Comments:\n\nC is one of the oldest programming languages and still one of the most widely used. Whether you're an experienced C programmer or you're new to the language, you know how frustrating it can be to hunt through hundreds of pages in your reference books to find that bit of information on a certain function, type or other syntax element. Or even worse, you may not have your books with you. Your answer is the C Pocket Reference. Concise and easy to use, this handy pocket guide to C is a must-have quick reference for any C programmer. It's the only C reference that fits in your pocket and is an excellent companion to O'Reilly's other C books.\n\nIdeal as an introduction for beginners and a quick reference for advanced programmers, the C Pocket Reference consists of two parts: a compact description of the C language and a thematically structured reference to the standard library. The representation of the language is based on the ANSI standard and includes extensions introduced in 1999. An index is included to help you quickly find the information you need.\n\nThis small book covers the following:\n\nC language fundamentals\n\nData types\n\nExpressions and operators\n\nC statements\n\nDeclarations\n\nFunctions\n\nPreprocessor directives\n\nThe standard library in your work and need to get to a solution quickly, the new C Pocket Reference is the book you'll want to have.\n\nAbout the Author\n\nPeter Prinz specializes in developing software and in teaching Assembler, C/C++/C#, Java, Windows (MFC), and UNIX system programming. As the chief developer and cofounder of an IT company, Peter has gained extensive experience in software development for computer telephony. As a seminar leader and key course developer at a professional consulting and training company he has taught courses to thousands of software developers. Peter is the co-author with his wife Ulla of several other books on software development in C/C++. More recent projects include \"A Complete Guide to Programming in C++\" (Jones & Bartlett Publishers, 2002). Peter currently resides in Munich, Germany, with Ulla and their two children: Vivi and Jeany. He may be contacted by email at prinz_peter@t-online.de"}
{"text": "Lisp languages also have an instantly-recognizable appearance. Program code is written using the same syntax as lists -- the parenthesized S-expression syntax. Every sub-expression in a program (or data structure) is set off with parentheses. This makes Lisp languages easy to parse, and also makes it simple to do metaprogramming -- creating programs which write other programs. This is a major reason for its great popularity in the 70s and 80s because it was believed by artificial intelligence programmers that Lisp would lend itself naturally to self-propagating programs.\n\nOriginally specified in 1958, Lisp is the second-oldest high-level programming language in widespread use today; only Fortran is older. Like Fortran, Lisp has changed a great deal since its early days, and a number of dialects have existed over its history. Today, the most widely-known Lisp dialects for general-purpose programming are Common Lisp and Scheme.\n\nHistory\n\nInformation Processing Language was the first AI language, from 1955 or 1956, and already included many of the concepts, such as list-processing and recursion, which came to be used in Lisp.\n\nLisp was invented by John McCarthy in 1958 while he was at MIT. McCarthy published its design a paper in Communications of the ACM in 1960, entitled \"Recursive Functions of Symbolic Expressions and Their Computation by Machine, Part I\". (Part II was never published.) He showed that with a couple of simple operators and a notation for functions (see minimal lisp below) you can build a whole programming language.\n\nLisp was originally implemented by Steve Russell on an IBM 704 computer, and two instructions on that machine became the primitive operations for decomposing lists: car (Contents of Address Register) and cdr (Contents of Decrement Register). Most dialects of LISP still use car and cdr (pronounce as cooder) for the operations that return the first item in a list and the rest of the list respectively.\n\nBecause of its expressiveness and flexibility, Lisp became popular with the artificial intelligence community. However, Lisp had its downsides as well: programs generate a large amount of intermediate output, which take up memory and have to be garbage collected. This made it difficult to run Lisp on the memory-limited stock hardware of the day. In the 1970s, an increasing user community and generous government funding led to the creation of LISP machines: dedicated hardware for running Lisp environments and programs. Along with modern compiler construction techniques, today's gigantic computer capacities (by the standards of the 1970s) have made this specialization unnecessary and quite efficient Lisp environments now exist.\n\nDuring the 1980s and 1990s, a great effort was made to unify the numerous Lisp dialects into a single language. The new language, Common Lisp, was essentially a superset of the dialects it replaced. In 1994, ANSI published the Common Lisp standard, \"ANSI X3.226-1994 Information Technology Programming Language Common Lisp.\" By this time the world market for Lisp was much smaller than in its heyday.\n\nThe language is amongst the oldest programming languages still in use as of the time of writing in 2003. Algol, Fortran and COBOL are of a similar vintage, and Fortran and COBOL are also still being used.\n\nThe now-ubiquitous if-then-else structure, now taken for granted as an essential element of any programming language, was invented by McCarthy for use in Lisp, where it saw its first appearance. It was inherited by Algol, which popularized it.\n\nSee also The Evolution of Lisp ( a paper written by Guy L. Steele, Jr. and Richard P. Gabriel.\n\nSyntax\n\nLisp is an expression-oriented language. Unlike most other languages, no distinction is made between \"expressions\" and \"statements\"; all code and data are written as expressions. When an expression is evaluated, it produces a value (or list of values), which then can be embedded into other expressions.\n\nMcCarthy's 1958 paper introduced two types of syntax: S-expressions (Symbolic Expressions), which are also called sexp's, and M-expressions (Meta Expressions), which express functions of S-expressions. M-expressions never found favour, and almost all LISPs today use S-expressions to manipulate both code and data.\n\nThe heavy use of parentheses in S-expressions has been criticized -- one joke acronym for Lisp is \"Lots of Irritating Superfluous Parentheses\" -- but the S-expression syntax is also responsible for much of Lisp's power: the syntax is extremely regular, which facilitates manipulation by computer.\n\nThe reliance on expressions gives the language great flexibility. Because Lisp functions are themselves written as lists, they can be processed exactly like data: programs can easily be written to manipulate other programs. This is known as metaprogramming. Many Lisp dialects exploit this feature using macro systems, which make it possible to extend the language almost without limit.\n\nA Lisp list is written with its elements separated by whitespace, and surrounded by parentheses. For example,\n\n(1 2 \"foo\")\n\nis a list whose elements have the values 1, 2, and \"foo\". These values are implicitly typed: they are respectively two integers and a string, and do not have to be declared as such. The empty list () is also represented as nil.\n\nExpressions are written as lists, using prefix notation. The first element in the list is the name of a form, i.e. a function, operator, macro, or \"special form\" (see below.) The remainder of the list are the arguments. For example, the function list returns its arguments as a list, so the expression\n\n(list 1 2 \"foo\")\n\nevaluates to the list (1 2 \"foo\"). If any of the arguments are expression, they are recursively evaluated before the enclosing expression is evaluated. For example,\n\n(list 1 2 (list 3 4))\n\nevaluates to the list (1 2 (3 4)). Note that the third argument is a list; lists can be nested.\n\nArithmetic operators are treated similarly. The expression\n\n(+ 1 2 3 4)\n\nevaluates to 10. The equivalent under infix notation would be \"1+2+3+4\".\n\n\"Special forms\" provide LISP's control structure. For example, the special form if takes three arguments. If the first argument is non-nil, it evaluates to the second argument; otherwise, it evaluates to the third argument. Thus, the expression\n\n(if nil\n(list 1 2 \"foo\")\n(list 3 4 \"bar\"))\n\nevaluates to (3 4 \"bar\"). (Of course, this would be more useful if a non-trivial expression had been substituted in place of nil!)\n\nAnother special form, defun, is used to define functions. The arguments to defun are the function name, a list of arguments, and the expression that the function evaluates to.\n\nPairs and lists\n\nA Lisp list is a singly-linked list. Each cell of this list is called a cons (or sometimes a pair, because it contains two pointers), and is composed of two pointers, called the car and cdr. These names are today arbitrary, but stem from the assembly-code operations for dereferencing parts of a 36-bit word on an IBM 704. (\"CAR\" was an acronym for \"Contents of Address Register\", and \"CDR\" was \"Contents of Decrement Register\".) Today, \"car\" and \"cdr\" should be taken as simply shorthand for \"first pointer of a cons\" and \"second pointer of a cons\". They are equivalent to the data and next fields discussed in the article linked list.\n\nOf the many data structures that can be built out of singly-linked lists, one of the most basic is called a proper list. A proper list is either the special NIL (empty list) symbol, or a pair in which the car points to a datum (which may be another pair structure, such as a list), and the cdr points to another proper list.\n\nIf a given pair is taken to be the head of a linked list, then its car points to the first element of the list, and its cdr points to the rest of the list. For this reason, the car and cdr functions are also called first and rest when referring to conses which are part of a linked list (rather than, say, a tree).\n\nThus, a Lisp list is not an atomic object, as an instance of a container class in C++ or Java would be. A list is nothing more than an aggregate of linked conses. A variable which refers to a given list is simply a pointer to the first cons in the list. Traversal of a list is usually done by \"cdring down\" the list; that is, taking successive cdrs to visit each cons of the list.\n\nParenthesized S-expressions represent linked list structure. There are several ways to represent the same list as an S-expression. A cons can be written in dotted-pair notation as (a . b), where a is the car and b the cdr. A longer proper list might be written (a . (b . (c . (d . NIL)))) in dotted-pair notation. This is conventionally abbreviated as (a b c d) in list notation. An improper list may be written in a combination of the two -- as (a b c . d) for the list of three conses whose last cdr is d.\n\nBecause conses and lists are so universal in Lisp systems, it is a common misconception that they are Lisp's only data structure. In fact, all but the most simplistic Lisps have other data structures -- such as vectors (arrays), hash tables, structures, and so forth.\n\nShared structure\n\nLisp lists, being simple linked lists, can share structure with one another. That is to say, two lists can have the same tail, or final sequence of conses. For instance, after the execution of the following Common Lisp code --\n\n(setq foo (list 'a 'b 'c))\n(setq bar (cons 'x (cdr foo)))\n\n? the lists foo and bar are (a b c) and (x b c) respectively. However, the tail (b c) is the same structure in both lists. Altering it, such as by replacing the c with a goose, will affect both lists.\n\nSharing structure rather than copying can be a dramatic performance improvement. However, it means that Lisp functions can alter lists passed to them as arguments. This can be a source of bugs, and functions which alter their arguments are documented as destructive for this very reason.\n\nAficionados of functional programming avoid destructive functions. In the Scheme dialect, which favors the functional style, the names of destructive functions are marked with a cautionary exclamation point, or \"bang\" ? such as set-car! (read set car bang), which replaces the car of a cons. In the Common Lisp dialect, destructive functions are commonplace; in fact, the language includes a special facility, setf, to make it easier to define and use them. A frequent style in Common Lisp is to write code functionally (without destructive calls) when prototyping, then to add destructive calls as an optimization where it is safe to do so.\n\nSelf-evaluating forms and quoting\n\nLisp evaluates expressions which are entered by the user. Most expressions evaluate to some other (usually, simpler) expression -- for instance, a variable evaluates to its value; (+ 2 3) evaluates to 5. However, some expressions evaluate to themselves. They are parsed by the read function, but are left alone by eval. Numbers and strings are this way: if you enter 5 into Lisp, you just get back the same 5.\n\nOther expressions -- such as lists and symbols -- can also be marked to prevent them from being evaluated. This is the role of the quote special form, or its abbreviation ' (a single quotation mark). For instance, usually if you enter the symbol foo you will get back the value of that variable -- or an error, if there is no such binding. If you wish to refer to the symbol itself, you enter (quote foo) or, usually, 'foo.\n\nMore complex forms of quoting are used with macros. For instance, both Common Lisp and Scheme support the backquote or quasiquote, entered with the ` character. This is almost the same as the plain quote, except it allows variables to be interpolated into a quoted list.\n\nSelf-evaluating forms and quoted forms are Lisp's equivalent of literals. However, they are not necessarily constants. In some Lisp dialects it is possible to modify the values of literals in program code. For instance, if a quoted form is used in the body of a function, and is changed as a side-effect, that function's behavior may differ on subsequent iterations. This is usually a bug, and is undefined behavior in some dialects. When behavior like this is intentional, using a closure is the explicit way to do it.\n\nList structure of program code\n\nA fundamental distinction between Lisp and other languages is that in Lisp, program code is not simply text. Parenthesized S-expressions, as depicted above, are the printed representation of Lisp code, but as soon as these are entered into a Lisp system they are translated by the parser (called the READ function) into linked list and tree structures in memory. Lisp macros operate on these structures, not on the program text. In contrast, in most other languages the parser's output is purely internal to the language implementation and cannot be manipulated by the programmer. Macros in C, for instance, operate on the level of the preprocessor, before the parser is invoked, and cannot re-structure the program code in the way Lisp macros can.\n\nIn simplistic Lisp implementations, this list structure is directly interpreted to run the program; a function is literally a piece of list structure which is traversed by the interpreter in executing it. However, most actual Lisp systems (including all conforming Common Lisp systems) also include a compiler which transforms such functions into machine code.\n\nEvaluation and the REPL\n\nLisp languages are frequently used with an interactive command line, which may be combined with an integrated development environment. The user types in expressions at the command line, or directs the IDE to transmit them to the Lisp system. Lisp reads the entered expressions, evaluates them, and prints the result. For this reason, the Lisp command line is called a \"read-eval-print loop\", or REPL.\n\nThe basic operation of the REPL is as follows. This is a simplistic description which omits many elements of a real Lisp, such as quoting and macros.\n\nThe read function accepts textual S-expressions as input, and parses them into list structure. For instance, if you type the string (+ 1 2) at the prompt, read translates this into a linked list with three elements -- the symbol +, the number 1, and the number 2. It so happens that this list is also a valid piece of Lisp code; that is, it can be evaluated. This is because the car of the list names a function -- the addition operation -- and the cdr (1 2) is a valid list of arguments to that function.\n\nThe eval function evaluates list structure, returning some other piece of structure as a result. Evaluation does not have to mean interpretation; some Lisp systems compile every expression to native machine code. It is simple, however, to describe evaluation as interpretation: To evaluate a list whose car names a function, eval first evaluates each of the arguments given in its cdr, then applies the function to the arguments. In this case, the function is addition, and applying it to the argument-list (1 2) yields the answer 3. This is the result of the evaluation.\n\nIt is the job of the print function to represent output to the user. For a simple result such as 3 this is trivial. An expression which evaluated to a piece of list structure would require that print traverse the list and print it out as an S-expression.\n\nTo implement a Lisp REPL, it is necessary only to implement these three functions and an infinite-loop function. (Naturally, the implementation of eval will be complicated, since it must also implement all the primitive functions like car and + and special forms like if.) This done, a basic REPL itself is but a single line of code: (loop (print (eval (read)))).\n\nExample programs\n\nHere are some examples of Lisp code. While not typical of Lisp programs used in industry, they are typical of Lisp as it is usually taught in computer science courses.\n\nAs the reader may have noticed from the above discussion, Lisp syntax lends itself naturally to recursion. Mathematical problems such as the enumeration of recursively-defined sets are simple to express in this notation. This function evaluates to the factorial of its argument:\n\n(defun factorial (n)\n(if (<= n 1)\n1\n(* n (factorial (- n 1)))))\n\nThis is an alternative function, which is more efficient in some Lisp systems because it uses tail recursion:\n\nImplementation\n\nThere have been many implementations of Lisp languages. Very early Lisps were implemented as interpreters, although native-code compilation was also an early feature. During the 1980s, a number of firms produced Lisp machines -- computers dedicated to running Lisp, whose operating system and hardware were customized for Lisp. Almost all modern Common Lisp systems are native-code compilers, while most Scheme systems are interpreters. A Lisp system may be implemented using a SECDvirtual machine.\n\nGenealogy and Variants\n\nOver its almost fifty-year history, Lisp has spawned many variations on the core theme of an S-expression language. Moreover, each given dialect may have several implementations -- for instance, there are more than a dozen implementations of Common Lisp.\n\nDifferences between dialects may be quite significant -- for instance, Common Lisp and Scheme do not even use the same keyword to define functions! Within a dialect that is standardized, however, conformant implementations support the same core language, but with different extensions and libraries.\n\n(Note: The following list is a mix of dialects and implementations, and is far from complete and not in chronological order!)\n\nLisp -- McCarthy's original version, developed at MIT.\n\nCommon Lisp -- descended mainly from ZetaLISP and Franz, with some InterLISP input. Prevailing standard for industrial use today.\n\nMacLisp -- developed for MIT's Project MAC (no relation to Apple's Macintosh, or to MacCarthy (sic)), direct descendant of LISP.\n\nSymmetric Lisp -- A parallel Lisp in which environments are first-class objects. It is implemented in Common Lisp.\n\nSTING -- A parallel dialect of Scheme intended to serve as a high-level operating system for symbolic programming languages. Features include first-class threads and processors and customisable scheduling policies.\n\n*LISP (STARLISP) -- A data-parallel extension of Common LISP for the Connection Machine, uses \"pvars\".\n\nJatha ( is a Java library that implements a fairly large subset of Common LISP\n\nIsis ( is a Lisp dialect developed at the MIT Media Lab for multimedia applications."}
{"text": "People that have a lot of knowledge in a specific area have a difficult time looking at it from a newcomer's perspective, and writing as such. I'm not a PHP \"guru\" by any means - and I understand how hard it can be to grasp a concept. It's split up into 3 sections, specifically written to start simple and build skills\u2026with real world usage examples included! I start with the basics of PHP - echoing to the screen, setting variables, using includes, etc. and move up from there to more advanced topics such as arrays, loops, and functions. Then it's on to MySQL - connecting, reading, inserting - enough to get you started."}
{"text": "123.73\n\nFREE\n\nNone(1 Copy):\nAcceptable This copy of the book has some wrinkled pages but can still be used without any problem or hassle. May have some notes/highlighting, slightly worn covers, general wear/tear. Ships same or next business day.\n\nPennText\nPA, USA\n\n$69.2683.65\n\nFREE\n\nUsed Good(1 Copy):\nGood 3rd Edition. Used-Good. Used books do not include online codes or other supplements unless noted. h.\n\nTextbook Brokers\nTN, USA\n\n$89.0789.37188.32\n\nFREE\n\nAbout the Book\n\n\"A Balanced Introduction to Computer Science, 3/e\" is ideal for Introduction to Computing and the Web courses in departments of Math and Computer Science. This thoughtfully written text uses the Internet as a central theme, studying its history, technology, and current use. Experimental problems use Web-based tools, enabling students to learn programming fundamentals by developing their own interactive Web pages with HTML and JavaScript. Integrating breadth-based and depth-based chapters, Reed covers a broad range of topics balanced with programming depth in a hands-on, tutorial style."}
{"text": "THE C PROGRAMMING LANGUAGE\n\nWithout C, where would we be? The beauty and simplicity of C gave birth\nto the golden age of software development. UNIX, Internet protocols, Java,\nand personal computer software, have mostly been written in C. Not C++,\nsimple C. It's compact and easy to learn, yet powerful enough to write\noperating systems, and the vast majority of modern systems software.\nLanguages like Perl and Java are made possible by interpreters which are\nwritten in C. Most of the chips on your computer boards, and perhaps in\nyour car, were programmed in C. And if you use an application not written\nin C, it was probably developed by tools written in C.\n\nDennis Ritchie developed C on an early UNIX system in the 70's, at what\nwas then Bell Laboratories. The proof of the pudding was rewriting\nUNIX in C. This was a watershed event in the evolution of software.\nTogether, UNIX and C championed the idea that software does not\nhave to be tied to a particular piece of hardware. Platform neutrality.\nEssential as well for the success of the Internet. It doesn't matter if\nyou have a Mac, a PC running Windows, a Solaris system, or a router, the\nTCP/IP and related protocols written in C are what enable it to communicate\non the Internet. And your Web browser, the server on the other side, all\nbrought to you by C. Adaptability is a strong survival trait. For an\ninteresting article about the history of C, see this article by\nDennis Ritchie,\nThe Development Of The C Language.\n\nIf you would like to learn C, or one of its derivatives, essential reading\nis the classic \"The C Programming Language\", by Kernighan and Ritchie. The\nsecond edition reflects the ANSI C standard (X3.159-1989). The first edition\nis my personal favorite, a collector's item. The ANSI C standard also defines\nthe standard C library, and essential include files, which most applications\nwill need. Additional features come from higher level libraries, and a\nnumber of standards define the interfaces for them. Unfortunately,\nGUI programming standardization never made it to the desktops of personal\ncomputer users. In this respect, Java has an advantage over C for\ndeveloping cross platform GUI based programs, although I have yet to see\none with the snappy feel of a native program.\n\nA free C compiler is available from GNU,\nGCC\n(GNU Compiler Collection). A binary version is included in the\nCygwin tools for Windows.\nThese tools provide a UNIX-like shell environment for Windows based on\nbash, and includes many useful GNU utilities and libraries."}
{"text": "Course Content\n\nThis Advanced Python course has been developed for real-world, commercial scenarios by our expert instructors. See below for detailed syllabus. If you have a technical question, please email sales@jbinternational.co.uk\n\nPython Training Course Outline\n\n1. Networking:\n\na. Standard networking tools in the Python distribution.\n\nPython has some APIs for low-level socket programming and some higher-level API for things such as Web protocol processing. This session is a review of the networking terminology and to these Python API.\n\nb. Twisted Internet -- an event driven framework for networking.\n\nThis package, which is not part of the standard Python distribution but is freely available, is an example of an event-driven approach to networking applications.\n\n2. Graphical user interface (GUI) programming:\n\na. Tkinter -- the orignal toolkit/API distributed with Python.\n\nPython has traditional distributed the Tk widget set and the Tkinter package for GUI programming.This session reviews the model of event-driven programming for GUI programming and uses the Tkinter package for implementing user interfaces.\n\nb. wxPython -- a more modern toolkit/API distributed withPython.\n\nwxWidgets are a set of widgets designed to replace Tk for cross-platform programming. wxPython is a binding for Python to wxWidgets. This session reviews the model of event-driven programming for GUI programming and uses the wxPython package for implementing user interfaces.\n\n3. XML processing.\n\nXML is an important technology in modern computing. This session reviews the XML technology and the API available in Python for parsing, processing and generating XML.\n\n4. Regular expressions and String Processing.\n\nString processing is an important aspect of many systems, and working with regular expression is a crucial part of string processing. This session quickly reviews the Python features for string processing and then focuses on working with regular expressions to process strings.\n\n5. Introspection, etc.:\n\na. The Python computational model.\n\nThis session focuses on the way in which Python programs are executed to show what features are available to support dynamic programming.\n\nb. Meta-object protocol.\n\nThis session reviews in more detail how the Python computational model can be extended.\n\n6. Dynamic language techniques.\n\nBecause Python is a dynamic programming language, code can be compiled and linked on the fly. This session focuses on what this means for programs, and in particular new techniques for configuring systems and passing information between subsystems.\n\n7. Threads and concurrency.\n\nMost modern systems a required to do more than one thing at once. Indeed many algorithms these days cannot be implemented without using concurrency. This session focuses on the threading package as a high-level API for realizing concurrentsystems.\n\n8. Data structures, algorithms and complexity.\n\nIntroductory and intermediate courses on programming introduce variables, lists, dictionaries (aka maps). However it is the combination of these data structures that allow for the organization of data to easily solve problems. This session focuses on creating complex data structures so as to make algorithms straightforward, and introduces the technology needed to reason about the complexity of the data structures and algorithms.\n\n9. Numerical methods, NumPy and SciPy.\n\nPython, along with all dynamic programming languages, is generally poor for computationally intensive applications -- traditionally such applications are associated with Fortran, C, C++, and increasingly Java, programs. NumPy and SciPy are packages that are Python bindings to Fortran libraries that mean that algorithms can be implemented in Python and yet not suffer any performance degredation. This session investigates a small numeric application to show what is possible.\n\n10. Domain Specific Languages.\n\na. Designing a DSL.\n\nIncreasingly programming is explicitly about defining a language with which to describe the solution to a problem. This has always been so in fact but now we have a name for it \"Domain Specific Languages\". Designing a DSL is about using the ability to explicilty define meaning to symbols and sequences of symbols. Traditionally C++ with its operator overloading has been seen as the vehicle for this, but dynamic programming languages are even more suited to the task since definitions can change at runtime as needed. Designing a DSL is all about creating abstractions for the domain. This session will choose an example highly applicable to the attenders of the course, and could range from a language for acturial analysis for premium quoting to game semantics.\n\nb. Implementing a DSL.\n\nImplementing a DSL requires using all the dynamic and MOP features of Python and this session will do that in spades."}
{"text": "Smalltalk: An Introduction to Applied Development Using Visual Works (Prentice-Hall Object-Oriented)\n\nThis is an introduction for students who want to start constructing prototype applications in Smalltalk-80, but who don't want a detailed guide to the implementation. Requiring no previous exposure to Smalltalk-80 or object-oriented programming in general, the text offers a tutorial approach, with a large number of short chapters, each covering specific points. It mixes the language syntax, the class hierarchy and the user interface to maximize student interest and to stress relationships between them, and uses cross-referencing and indexing so that students can find what they are looking for. The book also provides a large number of illustrations of Smalltalk-80 operation, and contains extensive original exercises of various degrees of complexity at the end of most sections."}
{"text": "BEGINNING VISUAL BASIC\n.NET (Table of Contents) is an adult adaptation of our\nVISUAL BASIC .NET FOR KIDS - the primary difference between the two\nversions is that BEGINNING VISUAL BASIC .NET has more adult projects.\nIt is an introduction to computer programming that provides an\ninteractive, self-paced tutorial to the Visual Basic .NET programming\nlanguage and environment. This product is written for the absolute\nbeginner - no programming experience is required, but familiarity with\nWindows use is expected. We now offer a newer version of this\ntutorial calledBEGINNING VISUAL BASIC EXPRESS 2010.\n\nBEGINNING VISUAL BASIC .NET is presented using a combination of over 400 pages of notes\nand actual Visual Basic .NET examples. Ten \"plain-English\" lessons explain the Visual\nBasic .NET toolbox, event procedures, and many elements of the BASIC computer language.\nExamples are used to demonstrate every step in the application building process. The\ntutorial also includes several computer projects that illustrate practical applications of\nVisual Basic .NET, including loan calculators, graphics programs, portfolio\nmanagers, checkbook balancers, and even a simple video game (Project\nScreen Shots)!"}
{"text": "Programming Courses\n\nMicrosoft Programming Courses\n\nIntroduction to Programming in C# (42 Hours)\n\nThis course introduces the foundations of the C# programming language using Microsoft's C# on the .NET Framework. Basic data structures and control structures of the language will be explored, as well as the basics of Object-Oriented Programming. This course is a lab-oriented course with a mixture of instructor led lectures, class lab exercises, and student projects. The course will use Microsoft's Visual Studio 2010 as the development environment in the lab.\n\nThis course is an introduction to Microsoft C# programming and is an entry-level course for students planning to take the Microsoft Certified Professional Developer examinationsAdvanced Programming in C# with Microsoft Visual Studio (42 Hours)\n\nThis course introduces more advanced programming topics in the C# programming language and Microsoft's .NET Framework. The course is intended for students that want to sharpen their expertise in C# and .NET programming, as well as students that want to start their preparation for the Microsoft Certification Exams. This course is a lab-oriented course with a mixture of instructor led lectures, class lab exercises, and student projects. The course will use Microsoft's Visual Studio 2010 as the development environment in the labIntroduction to Web Development using microsoft's Visual Studio with ASP.NET (42 Hours)\n\nThis course is designed for students already familiar with the fundamentals of C# who are looking for a concentration in developing Web applications. This course will expand upon the C# language foundation and fundamentals of ASP.NET and focus on developers who write or support applications that access data written in C# using Visual Studio 2010 and the Microsoft .NET Framework 4.0. The course will be a mix of instructor-led lecture and hands-on lab exercises in class using Microsoft's Visual Studio Integrated Development Environment"}
{"text": "3.13 Vectors\n\n3.13\nVectors\n\nOn paper, vectors look exactly the same as Cartesian coordinates, as both have an x and a y component. However, vertices represent points in space, while vectors represent direction. A vector simply points in a direction, indicating where something must travel. Vectors are useful for\ngames\nbecause they can\nindicate\nthe direction in which objects are moving.\n\nFigure 3.26\n\n3.13.1\nVector Magnitude\n\nMagnitude\ncan describe the\nsize\nof an angle, but here it refers to the length of a vector; that is, the linear distance along the diagonal. Calculating the length of a vector is simple; it is the Pythagorean theorem.\n\nFigure 3.27\n\n3.13.2\nUnit Vector\n\nA vector is said to be\nnormalized\nwhen it is a unit vector. A\nunit vector\nis a vector whose magnitude is 1. It has no length and indicates only direction.\n\nFigure 3.28\n\n3.14\nConclusion\n\nThis chapter covered a broad range of subjects, none of which were examined in quite the detail any of them deserve. Nonetheless, each of them is\nvaluable\nto gaming, and I have covered many of them insofar as will be immediately relevant to game programming in order to get started. This chapter marks the end of the discussion of mathematics in this book, and I recommend that, as we progress in programming and game development, the reader returns to these chapters as required in order to recap and understand how mathematics is\nrelated\nto gaming concepts.\n\nChapter 4:\nC++ and Programming\n\nOverview\n\nThe computer is often represented by analogy to be a brain. Unlike a brain, however, a computer cannot think for itself. Whatever intelligence a computer might have, or appear to have, has been set in motion by human operatives. If a computer makes a decision, it is because it has been instructed to do so. When a\nuser\nis writing a letter in a word processor or arranging a spreadsheet for accounts and decides to print the document, he or she usually does so using a keyboard shortcut or a button click. When the button is clicked, the document prints. Of course, something in between needs to occur-something, when the button is clicked, needs to instruct the computer to print. In fact,\nconsidered\non a wider scale, the computer is a brain that\nfollows\ninstructions, and everything it does it has to be instructed to do. These instructions are written by programmers. The process by which they do this is called programming, and the language in which they communicate with a computer is called a programming language. C++ is one of many languages, and the most popular choice for\ngames\n. This chapter begins our journey into the world of C++. Specifically, this chapter explains the following:\n\nBasics of C++\n\nIntegrated development environments\n\nSource and header files\n\nVisual Studio\n\nCode::Blocks\n\nDev C++\n\n4.1\nProgramming\n\nProgrammers are responsible, directly or indirectly, for all of the software we use. Millions across the globe communicate through email, through online messengers, and via website browsers. If it weren't for programmers, none of this would exist. If there were no programmers, those applications would sit there lifelessly doing nothing because there would be no valid instructions telling them what to do. Each time we send an email or message, we take it for granted that it will be sent and received successfully, and all\nsubsequent\nemails will continue to do so in the future. Each time we write a letter, book a holiday online, or play the latest game, we tend not to think too deeply about\nhow\nit works and instead we come to expect that it\nwill\nwork, regardless of how. Most users therefore use software all the time without\nrealizing\nthe\nintricate\nextents to which instructions are being fed to the computer and how fundamental those instructions are.\n\nThis book focuses on the language of C++ in the context of programming\ngames\n. It\nfollows\nthat C++ is used to send instructions to the computer to determine how a computer should present a game to the\nuser\n. Hopefully, if we've done our job properly as programmers, it'll be a game that works. In order for a game to work, we must provide the computer with appropriate instructions. We've said the instructions are called programming, but this is more technically called\nsource code\n, sometimes abbreviated by programmers to either\nsource\nor\ncode\n. Let's say we're making a game where a man runs along shooting baddies and can jump from platform to platform. The computer needs to be told how to accomplish this and it will be told how to do so via source code. For example, if the player wishes to jump, the computer must be told how this is to occur. The figure must be launched into the air and then, under the influence of gravity, it must return to the ground. In short, programming is an ambitious task that can be as challenging as it is fascinating."}
{"text": "The BASIC programming Language is a high-level programming language invented in 1964 by John George Kemeny and Thomas Eugene Kurtz at Dartmouth College. It was designed to allow students not in science fields to use computers. At the time, all computer use required writing custom software, which was something only scientists and mathematicians tended to do. The name is an acromyn for Beginner's All-purpose Symbolic Instruction Code.1 The acronym is tied to the name of an unpublished paper by Thomas Kurtz and has no relation to C. K. Ogden's series titled \"Basic English\"."}
{"text": "Cobol Wizard: A Wiley Programmer's Reference\n\nThis standard reference manual presents the format use of the COBOL programming language, incorporating Third Standard COBOL, also known as COBOL-85, which is the latest standard form of the language. Using this book in conjunction with the documentation for your compiler, your programs will be transportable to other compilers that conform to the new standard. Chapter 1 summarizes basic concepts and features of COBOL Programs. Chapter 2 through 5 cover the COBOL-85 components in each of the four main divisions in the nucleus module. Also covered is the the use of the interprogram communication module, along with discussions of the use of file I/O: it deals with the sequential, relative and indexed modules. The use of the sort/merge module is explained and the remaining COBOL modules are covered briefly in appendix C."}
{"text": "Chapter 8. Introducing the Graphic User Interface\n\nChapter 8. Introducing the Graphic User Interface\n\nThese days people are accustomed to working with applications that have rich user interfaces. If you develop rich Internet applications, JavaFX is the newest platform for development offered by Oracle. But Java itself offers a library of components called Swing, which is used for building graphic user interfaces (GUIs) for desktop applications, as well as a web program called applets (see Lesson 10). In this and the following lesson you'll learn the principles of building GUIs while developing a simple desktop calculator using the Java Swing library.\n\nNOTE\n\nEclipse Foundation offers another library of UI components called SWT, which is out of the scope of this book."}
{"text": "Because sometims all programming needs is a rap\n\nOOP Based Roughly on the OPP rap by Naughty By Nature.\nNerded up by me.\n\nOOP how can I explain it\nI'll take you frame by frame it\nTo have y'all jumpin' shall we singin' it\nO is for Object O is for Oriented\nThe last P\u2026well\u2026that's not that simple\nIt's code and jive and variables like strings\nIt's catching exceptions and return theresult.toString()\nThere are functions and methods, classes too\nYou instantiate an object, yea you know what to do\nBust it\n\nThis girl ah tried to learn OOP\nI was this girl and mater-of-fact got a degree in that\nHad a thesis, some classes, projects and whatnot\nInstead of Java it was PHP she sought\nIt was hard until the little rhyme, it clicked\n'Cos after that she kept on coming back not ticked\nShe was creatin' the objects to extend other objects\nShe said, \"Oh no, I love you Tech\" as she reflects\nIt was parse errors that got her down, the made her frown\nBut she kicked them to the curb with a curly brace rub-down\nThis was a thing, a little thing, you shouldn't have put your heart\n'Cos you know it was OOP, hell from the very start\nCome on, come on, now let me tell you what it's all about"}
{"text": "Apr 18, 2010\n\nTeaching Perl - Week 1 - ( Part2 )\n\nPadre - Perl IDE\n\nNow let's install Padre the Perl IDE to give the students a nice development environment. There are instructions on the website, however, cpanp -i Padre should get the trick done since it is on CPAN In the future Strawberry will ship with Padre but that future isn't quite here.\n\nFirst Program\n\nOk so we want to make sure that we have Perl installed correctly and since you're taking my advice I'm assuming that you've given your students access to 5.10.1 and may have 5.8 as well... So I'm gonna do this one twice. Have them create a text file hello_world.pl and add the following lines\n#!/usr/bin/env perl\n\nprint \"Hello, World\\n\";\n\nSince I'm sure this is not your students first programming class this will be familliar to them. Explain the shebang (#!) line and note that it has no effect on windows. Now let's modernize it, using the say feature from perl 5.10.\n\n#!/usr/bin/env perl\nuse feature 'say';\nsay \"Hello, World\";\n\nnote the removal of the \\n and that use feature is a pragma that allows you to enable features that are newer in perl that weren't available in the original perl 5. Perl is a bit backwards about this, IMO. We should be using the newest version and features unless we specify otherwise, IMO, but that's not how it works, ATM. If 5.10 isn't available to you and your students just use print in future examples. I will be excluding the shebang line from future examples too.\n\nThis example is inspired by Programming: Principles and Practice Using C++ ( This is an excellent book and should be the textbook for BOTH C++ classes at Baker. I recommend all novice to intermediate programmers have a copy whether you like C++, or not, this book is excellent ). Please note that the . operator is in the front. This draws a programmers attention to it and notes that it's a continuation. See Perl Best Practices for more details on this.\n\nYour output will be.\n\nHello, programming Here we go\n\nThat's not what we want! obviously say appends a newline to the end but doesn't help with long strings.\n\nnote: you can use < STDIN > but blogger screws it up because of the brackets. This code works exactly the same.\n\nSo now you can discuss: scalars, if then else statements,and readline. There are also two additional pragma's strict and warnings that you should tell your students to always use unless they have a 'good' reason to disable them (these have been there since the beginning).\n\nSo usually on the first night of class you're lucky to get past hello world. I think this is all doable. In 1 small program I just took you all the way to Chapter 6 in Perl by Example (3rd Edition) the chapter on control structures. Remember, this is not your students first class... you don't need to hold their hand through all this. Race through it so they can improve on it as the term goes on. Instead of spending 4 weeks (assuming a chapter a week) on if then statements you can now spend 10\n\nHomework\n\nStart a blog using whatever site you prefer (preexisting blogs acceptable) and add it to Iron Man. Do a first post that talks a little about you (blog can be anonymous). Include a copy of the simple game and what you think would be better about it. Also mention anything you'd like to do with, or know about, Perl."}
{"text": "Many of times I keep talking about advance JavaScript or various other technologies that might not be geared towards beginners. And the most common feedback I get by emails from my readers is that they want to learn the basics of web development and are confused on where to start. If they should take classes,buy a book etc. But there I am suggesting a different approach to learn the very basics of web-development \u2013 the basic building of the web. by Watching Cool Videos!\n\nDo Programming Languages scare you? Or You need some other programming language apart from C/C++ which offers quick-and-dirty development? Enter Python.\n\nPython is general purpose programming High-level language creating by Guido van Rossum in 1991.It is open-source object-oriented programming language that offers two to ten fold productivity increases over other languages like C, C++, Java, C#, Visual Basic (VB), and Perl.\n\nWhy Python?\n\nBecause using python you can do more in less time.Its syntax is easy; almost english like. its flexible and extendable. And has huge libraries which you can reuse instead of writing your own.This is the major reason Python is gaining traction. It used for scripting in enterprise environments and it's used extensively by Google(youtube, App Engine), Even NASA uses it. It can be used for Web Development ,GUI Applications, Mobile Apps etc. In short, Python is good and you should learn it.Continue reading \u00bb\n\nNPTEL is an acronym for National Programme on Technology Enhanced Learning which is an initiative by all seven Indian Institutes of Technology (IITs) and Indian Institute of Science (IISc) for creating course contents in engineering and science.\n\nBasically, Senior Profs of Indian Institutes of Technology (IITs) and Indian Institute of Science (IISc) have recorded video of their lectures and they have been hosted at Youtube.these are high quality lectures by experienced & well trained. The course contents focus mainly on engineering and science.\n\nMisc\n\nYou can find more information on its Website and don't forget to read F.A.Qs. Dowloading videos from youtube is easy, search on google with \"download youtube videos\" in search box.\n\nThese Courses are very useful for Student who have a habbiat of bunking classes,working professionals who don't have time to do a regular course and people who are curious by nature and want to know everything. Its a +1 from my side"}
{"text": "Adobe Reader.\n\n\"Use MacTranslator and WinTranslator to understand legacy code, reuse it, fix defects and develop new projects. Click a few buttons and piles of source code are transformed into an organized stack of diagrams.\" Source: Excel Software\n\nEveryone who writes computer software eventually faces the requirement of converting a large code base from one programming language to another. That requirement is sometimes driven by the need to port software between operating systems, to a new programming language or development system or from one computer, operating system, phone or gadget to another.\n\nSource code conversion is inherently a tedious, error-prone and labor intensive process. While there is no magic button to turn old code into new code, there are tools that can dramatically reduce the time and cost of a conversion project. While a development project includes testing and other activities, this discussion will focus on the code translation process.\n\nProject Plan\n\nThe first step in any successful project is to understand what you are starting from, where you are going and then develop a plan to get there. For a code conversion project, you want to identify:\n\nOld and New Code Design and Architecture\n\nFoundational Differences Between Old and New System\n\nProgramming Language Syntax and Semantic Differences\n\nDesired Feature Changes\n\nThink about the design and architecture of the old and new code base. Is the code written in a procedural language like C, object-oriented language like Java or a mix of both? Is the new and old code a single program, collection of programs, libraries and components or even a multi-threaded system? A big architectural change like procedural C to object-oriented Java takes more effort than say C++ to Java since both share an object-oriented design.\n\nThink about the foundational differences in the old and new system. Software usually sits on top of an infra-structure of hardware, operating system services, third-party components and code libraries. Identify core resources that change in the old and new system and how it impacts the translated software.\n\nThink about the old and new language and its supporting environment. Programming languages have both semantic and syntactic differences. A lot of search, replace and grunt-work can usually take care of syntactic differences, but if the old system relies heavily on semantic features like language generics, automatic garbage collection, etc. that aren't available or easily emulated in the new programming environment, than design changes may be required.\n\nThink about the feature changes needed in the new system. Don't waste time converting features that are no longer relevant or cost-justified or leave out features that are required to make the new system work in its new environment.\n\nNow that you understand the scope of the project, where you are coming from and where you are going, we can discuss some tools that automate and accelerate many of the steps in the translation process.\n\nThe translation process consists of:\n\nCreate Design of Old Code\n\nModify Design for New Code\n\nGenerate New Code Structure\n\nTranslate Function Logic\n\nCreate Design of Old Code\n\nThe design of the old code base can be graphically represented as structure charts for procedural code like C, Basic or Pascal, UML class diagrams for object-oriented code like C++, Java or Delphi or data models for SQL database-centric code. These diagrams show the static structure of the code with objects on the diagram linked directly to the associated code fragment.\n\nAutomation Tools\n\nWinA&D is a tool that runs on Windows and can represent the architecture and design of any software system. It supports procedural designs, object-oriented design, database-centric design, multi-threaded software, desktop applications, embedded systems, cloud based services or any mixture of the above. MacA&D runs on Mac OS X will similar capabilities.\n\nIf you already use WinA&D or MacA&D to design and generate code for your old software system, you already have and understand the current design. If not, WinTranslator on Windows or MacTranslator on Mac can be used to generate diagrams with dictionary information from your current code base.\n\nWinTranslator scans source code files stored in a collection of folders to extract design information to a set of text files. Those files are imported into an empty WinA&D project to populate the data dictionary and automatically generate a set of graphic diagrams. This automated process can usually be done in minutes.\n\nConsider a translation project with Objective-C source code being converted to Java code using MacA&D and MacTranslator on a Mac OS X computer. The concepts, tools and approach are essentially the same for other languages or when using WinA&D and WinTranslator on Windows. For example, perhaps C# code on Windows will be converted to Objective-C code on Mac.\n\nClass Diagram\n\nA screen shot of the Class window, Dictionary window and Code Browser window illustrates how Objective-C code is represented within the MacA&D modeling tool. A named box represents each class. The class name is red, attribute names are blue and operation names are green. Some class are shown with a normal presentation that shows all attributes and operations, while others are shown with a suppressed presentation that only shows the class name. Various relationship lines connect related classes.\n\nA project may have one class diagram, many diagrams within one class document or hundreds of separate diagrams and documents. The UML notation includes many diagram types that are all supported by MacA&D, but for the purpose of this discussion on code translation, only the class diagram will be used.\n\nData Dictionary\n\nEach object on a class diagram has an associated dictionary entry. In addition to a class type entry, each attribute and each operation of the class also has an associated dictionary entry.\n\nThe dictionary entry holds detailed information associated with that class. A class diagram is a visual presentation of that dictionary information. A MacA&D project may have many diagram, code, specification and other document types that are all logically linked together through one data dictionary.\n\nThe Dictionary window shows entry names on the left and the details of a specific selected entry in the Name, Composition, Definition and References fields on the right. Red, blue and green entry names indicate entries of type class, attribute and operation, respectively.\n\nCode Browser\n\nEach selected object on the diagram is linked to an associated code file stored in one of many code folders. A developer can select a class object of interest, click to the Browse window to view, edit or navigate through the code files.\n\nBy understanding the main steps required to generate graphic diagrams from code, the software designer will be able to customize the process to fit the specific needs of a project.\n\nUse MacTranslator's Reengineer Project dialog to identify the source code folders, choose the Objective-C programming language and select the type of design data to collect. MacTranslator then scans the code files and produces one Dictionary.rp file for all the code files in each code folder. The top toolbar in MacTranslator shows the file path of each code file being processed. A Dictionary.List file is generated for the project that includes the full file path of the individual Dictionary.rp files.\n\nDictionary List File Format\n\nThe Dictionary.rp file is a plain text file using a simple data format to describe each dictionary entry. A software developer can view the Dictionary.rp file with a text editor to understand the kind of collected information. These files are imported into the MacA&D modeling tool to populate the Dictionary document for a project.\n\nRemember how each class object has an entry in the dictionary for the class itself and for each of its attributes and operations. Within the Dictionary.rp text file, each entry is represented with four fields of information:\n\nName\n\nComposition\n\nDefinition\n\nReferences\n\nThe right-hand side of the Dictionary window shows the Name, Composition, Definition and References field for a selected entry. This directly corresponds to the simple format used by data in the Dictionary.rp file. MacTranslator generated the text fragment from the Init operation of the AppController class.\n\nThe Name of the dictionary entry takes the form Class.Operation and Composition field is empty. The Definition field holds a GeneralDetails section of data and an ObjectiveCDetails section of data. If this entry was generated from Java source code, that section would be named JavaDetails. Finally, notice the entry type \"Operation\" and code file named \"AppController.m\" in the References field.\n\nDiagrams from Dictionary List\n\nUse the New Project dialog in MacA&D to create a new project folder that holds a class diagram document and associated dictionary document. Import the Dictionary.List file into the Dictionary using the Import Dictionary command. Data from each Dictionary.rp file referenced from the Dictionary.List file is imported into the Dictionary window.\n\nOnce the Dictionary is populated, select the Class window and choose the Generate Class Model command to generate one or more class diagrams from the dictionary information.\n\nThere are many options to choose from when generating class diagrams from dictionary information including the specific classes to include on each diagram, the types of relationships to show between classes and the amount of white space between classes.\n\nIf a class has many attributes and operations, displaying it on the diagram with a normal presentation takes a lot of diagram space. Each class can also be shown with a suppressed presentation (all class members hidden) or a customized presentation (only selected class members visible).\n\nThe Document Defaults dialog for a class document has additional customization options. For example, you can choose which class members (attributes, properties, operations, events) to show in each class box, the color convention to use, and how much detail (data type, arguments, etc.) to present for each class member.\n\nModify Design for New Code\n\nClass diagrams enable the designer to see the structure of the existing source code. Class objects are linked to associated source code files making it easy to explore the big picture and drill down to the specific code details.\n\nTo see the code for a selected class object, click the Code button in the tool bar. MacA&D presents the associated code file in the Browse window. The language-independent Browse window is used to browse or edit object-oriented source code.\n\nClass objects on a diagram have associated dictionary entries with the same name as the class itself. MacA&D links selected diagram objects to associated code files using the file name referenced in the dictionary entry. MacA&D knows the source code file can be located in either the main project folder or any one of the namespace folders defined in the Document Defaults dialog of the Dictionary document. MacTranslator automatically collects the folder paths when scanning source code.\n\nDesign changes are often needed to fit the new target language or environment. Using the class model editor in MacA&D, new classes, attributes or operations can be added, modified or deleted.\n\nMacTranslator captured Objective C details like data types, arguments, etc., however, Java specific details are needed before new Java code can be generated. Since the syntax, standard data types, etc. are different for each language, this step requires human editing. Java language specific details can be edited from the Attribute Details or Operation Details dialog by first selecting Java from the Language menu.\n\nAfter editing Java code specific details like data types and function arguments select a Java class on any diagram and click the Generate Code button to generate a Java code file.\n\nTranslate Function Logic\n\nMacTranslator has an option to simplify the language translation process by creating the Java details section of each dictionary entry from a cloned copy of the Objective-C details. From the Details dialog, select \"Clone Language Details for\" checkbox and select Java from the language popup menu before processing the source code.\n\nFor a Java project, MacA&D generates the class declarations with an empty function frame to hold the user written function logic code. To assist the programmer in a code translation project, MacTranslator can capture the code of each class operation into a Notes section of the class operation dictionary entry.\n\nWithin the MacA&D class model editor, the captured code can be viewed or edited within the Notes panel of the Operation Details dialog. During Java code generation, MacA&D can emit this Notes section into the body of each generated class operation.\n\nThe automated process of capturing function code with MacTranslator, editing it with MacA&D and generating it into the new Java code can save the programmer a significant amount of time. The code within each function can now be human translated from Objective-C to Java from either the MacA&D code editor or the Java development environment.\n\nProject Summary\n\nTranslating source code from one programming language or target environment to another is normally a very labor intensive, error-prone process. Automated tools can eliminated much of the grunt work by capturing the current design and enabling the designer to modify the design to fit the new environment. The tool generates code files with the new class structure and helps the programmer translate the code for each function."}
{"text": "Programming Languages\n\nA deep understanding of programming languages is essential. And that is what this course is about. You will be introduced to and learn the fundamentals of programming languages. This course teaches key programming languages concepts such as variables, bindings, type systems, control structures, exceptions, concurrency, and modularity."}
{"text": "Log in\n\nLinguagens de programa\u00e7\u00e3o\n\nPerl is a high-level programming language. It derives from the ubiquitous C programming language and to a lesser extent from sed, awk, the Unix shell, and at least a dozen other tools and languages. Perl's process, file, and text manipulation facilities make it particularly well-suited for tasks involving quick prototyping, system utilities, software tools, system management tasks, database access, graphical programming, networking, and world wide web programming.\n\nPython is an interpreted, interactive, object-oriented programming language. It is often compared to Tcl, Perl, Scheme or Java.\nPython"}
{"text": "Beginning C for Arduino: Learn C Programming for the Arduino by Jack Purdum\n\nItem# 1430247762\n\nList price: $39.99\n\nSoftpro Price: $31.99\n\nBeginning C for Arduino is written for those who have no prior experience with microcontrollers or programming but would like to experiment and learn both. This book introduces you to the C programming language, reinforcing each programming structure with a simple demonstration of how you can use C to control the Arduino family of microcontrollers. Author Jack Purdum uses an engaging style to teach good programming techniques using examples that have been honed during his 25 years of university teaching.\n\nBeginning C for Arduino will teach you:\n\nThe C programming language\n\nHow to use C to control a microcontroller and related hardware\n\nHow to extend C by creating your own library routines\n\nDuring the course of the book, you will learn the basics of programming, such as working with data types, making decisions, and writing control loops. You'll then progress onto some of the trickier aspects of C programming, such as using pointers effectively, working with the C preprocessor, and tackling file I/O. Each chapter ends with a series of exercises and review questions to test your knowledge and reinforce what you have learned.\n\nWhat you'll learn\n\nThe syntax of the C programming language as defined for the Arduino\n\nTried and true coding practices (applicable to any programming language)\n\nHow to design, code, and debug programs that drive Arduino microcontrollers\n\nHow to extend the functionality of C\n\nHow to integrate low cost, off-the-shelf, hardware shields into your own projects\n\nWho this book is for\n\nThe book is aimed at a complete novice with no programming background. It assumes no prior programming or hardware design experience and is written for creative and curious people who would like to blend a software and hardware learning experience into a single, enjoyable endeavor"}
{"text": "Chapter 1. Introduction\n\n1.1. Introduction to the Qore Programming Language\n\nThe Qore programming language is a powerful, thread-capable, embeddable weakly-typed language with optional strong typing and procedural and object-oriented features designed for anything from quick scripting to complex multithreaded, network-aware application development to embedded application scripting. Qore was initially designed to facilitate the rapid implementation of sophisticated interfaces in embedded code in an enterprise environment, and has since grown into a general-purpose language as well.\n\nQore exports a C++ API to allow programs or libraries to embed Qore code; this manual documents Qore's user-level features, for more information about Qore's C++ API, see the Qore home page.\n\nFlexible character encoding support is also built-in to Qore strings, and automatic character encoding conversions are supported, enabling correct behavior when working in an environment with mixed character encoding requirements (see Qore Strings and Character Encoding).\n\nQore includes the following design points:\n\nSupport for Embedded Logic\n\nQore was designed to support embedding logic in applications; this also applies to applications written in Qore as well as applications using the Qore library's public C++ API. By using the Program class, discrete objects can be created and destroyed at will containing embedded code to extend or modify the behavior of your application in user-defined ways. The Program class allows the capabilities of embedded code to be arbitrarily restricted as well.\n\nThread Safety and SMP Scalability\n\nAll elements of Qore are thread-safe, and the language in general has been designed with SMP scalability in mind. The internal design and implementation of Qore favors multithreaded performance over single-threaded performance, so multithreaded Qore programs can count on an efficient and stable execution platform, and do not have to limit themselves to a subset of Qore's functionality (see Threading). Additionally, Qore includes optimizations designed to reduce the number of SMP cache invalidations that provide a substantial performance boost on SMP machines.\n\nQore supports deadlock detection in complex locking scenarios and will throw an exception rather than allow an operation to be performed that would cause a deadlock. Furthermore, Qore's threading primitives detect threading errors and throw exceptions in these cases as well.\n\nDatabase Integration and DBI Layer\n\nRetrieving, comparing, and manipulating data in a consistent manner from heterogenous database types is made possible by Qore's built-in database integration. Qore was designed with a database independent interfacing (DBI) layer, providing a standard interface for Qore programs to access any database supported by a Qore DBI driver (see the Datasource Class).\n\nQore's operators are designed to produce the expected results for the programmer even when data types are mixed, a feature meant to further flatten the learning curve for new programmers.\n\nSimple or complex interfaces involving data extraction and manipulation from multiple Oracle, MySQL, PostgreSQL and other databases and/or multiple applications connected with a supported messaging bus or through lightweight web service protocols bus can be developed quickly and easily with Qore, particularly in comparison with Java, Perl, or C/C++. Furthermore, solutions based on Qore are transparent and easily maintainable, bringing advantages for the developer and end-user alike.\n\nAdditionally, Qore is thoroughly tested with valgrind on Linux and dbx on Solaris for memory leaks and memory errors. While it is possible that there are bugs in some less tested code paths, every effort is made to eliminate all bugs before each new release, particularly memory bugs and race conditions, in order to ensure that Qore releases are of the highest possible quality.\n\n1.2. Document Conventions\n\nExamples of Qore code are given in the following font:\n\n#!/usr/bin/qore\n#\n# this is an example of Qore code\n\nkeywords are given in bold:\n\n# \"if\" is a key word\nif ($a == 1) print(\"yes\\n\");\n\nplaceholders are given in italics:\n\nif ( expression )\nstatement\n\nwhere expressions and statements are\ndefined in this document. The text above indicates that any valid expression and\nany valid statement may be used in the positions indicated.\n\nOptional text is given in square brackets \"[\" and \"]\" as follows:\n\nsub name([$variable1, $variable2, ...])\n\nindicating that an arbitrarily long list of variable names separated by commas (or nothing at all) may appear in function declarations.\n\nChapter 2. Qore Language Description\n\n2.1. Language Overview\n\nA Qore program is composed of a series of declarations, statements, function definitions, and/or class definitions. Non-block statements are terminated by a semi-colon \";\". Block statements are grouped by using curly brackets (\"{\" and \"}\"), as in C, C++, Java, and Perl.\n\nProgrammers familiar with C, C++, Java, and/or Perl should find the standard Qore syntax intuitive and should be productive fairly quickly with the language. However Qore has unique features that differentiate it from other languages, and these features must be mastered in order to leverage the full power of Qore.\n\nQore programs/scripts are free form. Formatting does not affect the execution of the program; formatting is at the discretion of the programmer and should be used to enhance readability and clarity of the source code.\n\nQore was created as a weakly typed language. That means that variables (without type restrictions) can hold values of any type and functions (without a return type restriction or parameter type descriptions) can return any value type (or none at all, see Variables) and take arguments of any type. Furthermore list elements can be of any type (they do not have to be uniform), and multidimensional lists can have a different number of elements in each list. The same type flexibility holds true of hashes, objects, and all combinations of container types.\n\nQore also allows variable, parameter, class member, and return types to be declared, so that APIs can be formally defined or the programmer can decide to declare types to catch more errors at parse time (which is often preferable to discovering a type error at runtime).\n\nQore automatically converts data types when necessary when evaluating operators. The goal is to provide the expected result for the programmer without requiring the programmer to explicitly convert data types. Please see Operators for more information.\n\nUNIX operating systems allow an executable script to specify their interpreter. This is done by setting the first line in the program to a special string indicating the location of the Qore binary. For the purposes of this document, the location for the Qore binary is assumed to be /usr/bin/qore. The first line of Qore scripts in this case should look as follows:\n\n#!/usr/bin/qore\n\nIf another installation directory is used (such as /usr/local/bin), then the correct path must be reflected in the first line of the Qore script.\n\nQore convention dictates that Qore script file names end with .q.\n\n2.2. Environment Variables\n\nThis section will outline the environment variables that are used by Qore.\n\nTable 2.1. Qore Environment Variables\n\nEnvironment Variable\n\nDescription\n\nQORE_AUTO_MODULE_DIR\n\nThis environment variable should contain a colon-separated list of directories which will be searched for Qore modules when Qore starts. If any modules are found, they are loaded automatically before any parsing starts.\n\nQORE_MODULE_DIR\n\nThis environment variable should contain a colon-separated list of directories which will be searched when modules are loaded with the %requires parse directive\n\nQORE_INCLUDE_DIR\n\nThis variable should be a colon-separated list\nof directories where the Qore binary should look for include\nfiles\n\nQORE_CHARSET\n\nIf this variable is set, then the default character encoding name for the process will be the value of this variable. This variable takes precedence over the LANG variable, but can be overridden by the command line using option --charset (see Qore Strings and Character Encoding for more information on this option)\n\nLANG\n\nIf this variable is set and includes a character encoding specification, then, if the QORE_CHARSET variable is not set (and no character encoding was specified on the command line), this character encoding will be the default for the process.\n\n2.3. Conditional Parsing and Parse Defines\n\nQore supports conditional parsing with parse defines similar to the C/C++ preprocessor. In the current version of Qore, the implementation is very simple; only the following parse directives are supported: %define, %else, %endif, %ifdef, and %ifndef.\n\nBasically, the above allow for the existence (or lack thereof) of a parse define to affect which code is parsed into the program at parse time.\n\nParse defines are defined on the command-line (or through the C++ API when executed in embedded code), as well as created automatically based on sytem options; all library options (if the option is True, then it is defined as True, if the option is False, then it is not defined at all).\n\nNote that Unix is defined on all Unix platforms (also on Cygwin), while Windows is defined on native Windows ports (but not on Cygwin, as this is treated as Unix when compiling, as all Unix features are available).\n\nAdditionally, the following options are defined in every program (however they are not yet useful when parsing as the value of parse options cannot be used yet at parse time; only the existence or lack thereof can affect parsing in this version of Qore when parsing at least):\n\nQoreVersionString: Version string for the Qore library\n\nQoreVersionMajor: Major version for the Qore library\n\nQoreVersionMinor: Minor version for the Qore library\n\nQoreVersionSub: Sub version for the Qore library\n\nQoreVersionBuild: Build version for the Qore library\n\nQoreVersionBits: 32 or 64 depending on the library target\n\nQorePlatformCPU: The CPU targeted by the library\n\nQorePlatformOS: The OS targeted by the library\n\nAdditionally, only if the Qore library was compiled with debugging support, the following parse define is present (otherwise it is not defined):\n\nQoreDebug: True\n\nHere is an example of using parse defines in a program:\n\n%ifndef HAVE_TERMIOS\nprintf(\"This program requires UNIX TermIOS features to be present; it does not run on platforms without this feature (current platform: %s); exiting...\\n\", Qore::PlatformOS);\nexit(1);\n%endif\n\nFurthermore, parse defines can be manipulated in embedded code using the following functions:\n\n2.4. Qore Modules\n\nQore modules allow the Qore language to be extended at run-time. Qore modules must conform to the Qore Module API and have the file extension *.qmod. Qore modules normally depend on other shared libraries and therefore can only be loaded if the libraries they require are present on the system and can be found in the library path.\n\nPlease note that as of version 0.7.0 onwards, modules are no longer delivered with the Qore library. Modules must be downloaded separately; see Qore's home page for more information.\n\nTo load a module at parse time (normally required for most modules), use the %requires parse directive. If the named feature is not already present in Qore, Qore looks for a module with this name in the directories listed in the QORE_MODULE_DIR environment variable.\n\nUse the load_module() function to load Qore modules at run-time; however, note that any module providing parse support (classes, constants, functions, etc) must be loaded at parse time using the %requires directive.\n\nFrom Qore 0.7.1 onwards, you can specify a comparison operator (one of < <=, =, >=, or >) and version information after the module name as well. Version numbers are compared via integer comparisons of each element, where elements are separated by a '.'. If one of the versions does not have as many elements as another, the missing elements are assumed to be '0' (i.e. version \"1.0\" compared with version \"1.0.1\" will be exteneded to \"1.0.0\").\n\nBLACKLISTED: old QT4 modules: please use the much more complete qt4 module. These old modules (never officially released) use a namespace management trick that does not work with qore 0.8.0+, so they will not load with newer versions of qore.\n\n2.5. Include Files\n\nA Qore program can include other program code to be used and executed in the current program by using the %include directive. The %include directive must be the first text on the line, and the file name to include must follow. All text on the line after the %include directive will be used for the file name to include. The file name should not be quoted.\n\nHere is an example:\n\n#!/usr/bin/qore\n%include /usr/qore/lib/functions.lib\n\nAfter this, any variable, function, namespace, constant, or object declared in the above file can be used by the Qore program.\n\nThe QORE_INCLUDE_DIR environment variable determines the search path for include files.\n\n2.6. Identifiers\n\nQore identifiers must start with an alphabetic character, and then may contain any number of alphabetic, numeric, or \"_\" characters. There is no length limit on Qore identifiers.\n\nAll Qore identifiers are case-sensitive, therefore the identifier hello_there is not the same as Hello_There or HELLO_THERE.\n\nThe following are examples of valid Qore identifiers:\n\nTable 2.3. Examples of Valid Qore Identifiers\n\nIdentifier\n\nDescription\n\ni\n\nSimple one-character identifier\n\nfoo21\n\nIdentifier with number\n\nthis_is_a_long_identifier\n\nLong identifier with underline characters\n\nTotal_318\n\nIdentifier with underline and number\n\nAVeryBigNumber\n\nMixed case identifier name\n\nCAPS\n\nIdentifier in all capital letters\n\nThe following are invalid identifiers:\n\nTable 2.4. Examples of Invalid Qore Identifiers\n\nIdentifier\n\nDescription\n\n1a\n\nDoes not start with an alphabetic character\n\nthis-and-that\n\nContains \"-\" characters\n\nStart#10\n\nContains \"#\" character\n\n2.7. Comments\n\nComments are allowed in Qore scripts; line comments are preceded by a hash \"#\", and block comments are made C-style, ex:\n\n# this is a line comment\n/*\nthis is a block comment\n*/\n\nFor line comments, all text following a hash until the end-of-line character \"\\n\" is considered a part of the comment.\n\nFor block comments, all text between the /* and */ is ignored by the parser.\n\nHere is an example Qore script containing comments:\n\n#!/usr/bin/qore\n#\n# these are line comments\n# another line comment\n/*\n--- this text is in block comments\nprint(\"hello\"); <- this won't get executed\n--- because it's in the block comment\n*/\n\n2.8. Variables\n\nUnless parse option %allow-bare-refs is set, variables are Qore identifiers prefixed by a \"$\" sign, similar to Perl. If a variable is declared without any type restriction, then it is assumed to have type any. In this case, variables so declared can hold any data type.\n\nA few variables are set by the Qore language during the execution of Qore programs. These are normal variables that can be reassigned to other values by the user if necessary.\n\nTable 2.5. Special Qore Variables\n\nVariable\n\nType\n\nData Type\n\nExplanation\n\n$argv\n\nLocal\n\nList\n\nautomatically assigned local variable containing the list of function or method arguments that were not assigned to parameter variables (see Functions and Implicit Arguments for supporting related information)\n\nNote\n\nAs of version 0.5.0, $STDERR and $STDOUT have been removed from Qore. Use the I/O constantsstderr, stdout, and stdin constants of the File Class instead.\n\n2.8.1. Variable Declarations and Lexical Scope\n\nUnless the %assume-local parse directive is used, variables not in a parameter list automatically have global scope unless the first reference is prefixed with my. Variable names in a parameter list are always local to their associated function, method, or catch block. Global variables can be explicitly declared with our. The our keyword is required if the parse option %require-our (-O or --require-our command-line option) is set for the parent program. See the section on Parse Options for more information.\n\nWhen the %assume-local parse directive is used, variables without an explicit scope declaration (i.e. my or our) are assumed to be local variables.\n\nVariables may be assigned any value unless restricted with a type declaration. If no type declaration is given, then the variable is assumed to be type any. Note that type declarations are required for all variables (and for function and method parameters and class members) when the %require-types parse option is set.\n\nLocal variables are not shared between threads (local variables have a distinct value in each thread), however global variables are. See Threading (and in particular Threading and Variables) for more information.\n\nRepresents the state of a variable having no value or function returning no value (not equivalent to NULL)\n\nNOTHING\n\nNOTHING\n\n2.9.1. Boolean\n\nThe Boolean type can have two values, True and False. When converting other types to a Boolean, any value that converts to a non-zero integer will be evaluated as True. Otherwise the result of the conversion will be False.\n\n2.9.2. String\n\nString values are specified with text between double or single quotes. Text between double quotes is subject to interpretation of escape characters. Please see String Formatting for more information.\n\nStrings are assumed by default to have the encoding given by the QORE_CHARSET or the LANG environment variable. If neither of these variables is set, then all strings will be assumed to have UTF-8 encoding.\n\n2.9.5. Date\n\n2.9.5.1. Absolute Date/Time Values\n\nAbsolute date/time values specify a specific point in time in a certain time zone, such as January 1, 2005 10:35:00 +01:00. They are stored interally as a 64-bit signed offset from the Qore epoch (1970-01-01Z), a positive 4-byte integer for microseconds, and a pointer to a time zone description object that provides the UTC offset and daylight savings time information (see Time Zones for more information). Note that all absolute date/time values in Qore are stored internally in UTC and are converted for display purposes to the representation of wall time in their tagged time zone.\n\nAbsolute date/time values can be specified with a syntax based on ISO-8601 date formats as follows:\n\nYYYY-MM-DD[THH:mm:SS[.n*]][Z|[+-]HH[:mm[:SS]]]\n\nNote that if no time zone information is given, the local time zone will be assumed. If a time zone UTC offset is given, it is given in units of time east of UTC (i.e. +05:00 means five hours east of UTC).\n\nOr an alternative format (with a '-' instead ofa 'T' to separate the time component):\n\nYYYY-MM-DD[-HH:mm:SS[.n*]][Z|[+-]HH[:mm[:SS]]]\n\nfor example, for just the date in UTC, without a time component:\n\n2010-05-26\n\nor, for just the time, without a date component (note that in this case the date component will be set to Jan 1, 1970, in order for time arithmetic to function properly and will also be tagged with the local time zone):\n\n20:05:10.458342\n\nSome further examples (note that the date/time values without a time zone specification here are tagged with the local time zone):\n\nThe year must be a four-digit number, and all other values except microseconds must be two-digit numbers. If microseconds are present, at least one and up to 6 digits may be given after the decimal point. Pad the numbers with leading zeros if the numbers are smaller than the required number of digits. The hour component must be in 24-hour time format. Except for the month and day values, all other values start with 0 (hour = 00 - 23, minute and second: 00 - 59). Any deviation from this format will cause a parse exception.\n\nWhen a date/time value is converted to an integer or vice-versa, a 64-bit offset in seconds from the start of the \"epoch\" is used for the conversion. Qore's \"zero date\" (the start of Qore's \"epoch\") is January 1, 1970 UTC. When calculating second offsets from this date, a 64-bit integer is used.\n\nNote\n\nThe default local time zone for qore is set when the qore library is initialized; see Time Zones for more information.\n\n2.9.5.2. Relative Date/Time Values (Durations)\n\nRelative dates (durations) are normally used for date addition and subtraction. See Date/Time Arithmetic for more information.\n\nInternally, durations are stored as a set of seven discrete signed integer values, one each for years, months, days, hours, minutes, seconds, and microseconds.\n\nThere are 3 different formats understood by the Qore parser for describing literal durations in Qore.\n\nSingle Relative Time Format\n\nA single relative date/time value (or a duration) may be specified as follows (note that this format is specific to Qore and not based on ISO-8601):\n\nShort Relative Time Format\n\nThis and the next duration format for composite relative date/time values are both based on ISO-8601.\n\nThis first format has the following syntax:\n\nPnYnMnDTnHnMnSnu\n\nEach element above is optional, but at least one element must be present. Note that \"M\" means months when before the \"T\" and minutes when found after the \"T\". The other elements are years, days, hours, seconds, and, as an extension to ISO-8601, \"u\" for microseconds. Additionally, the values may be negative.\n\nHere are some examples (using qore's -X command-line option to evaluate and expression and print out the result):\n\nNote that this is not an exhaustive list; see the function and class library documentation for more examples.\n\n2.9.7. NULL\n\nThis data type represents an SQL NULL value. Note that NULL is not equivalent to NOTHING.\n\n2.9.8. NOTHING\n\nThis special data type represents no value.\n\nNote\n\nThe exists operator will return False when given NOTHING as an argument; for example:\n\nprompt% qore -X 'exists NOTHING'\nFalse\n\n2.9.9. Conversions\n\nBoolean, string, integer, date, and floating point data types can be freely converted from one type to the other, although data loss is possible depending on the conversion (particularly when converting to the boolan type as only two possible values are supported).\n\nThe special types NULL and NOTHING are not equivalent and cannot be converted to or from any other type.\n\nWhen date types are converted from strings, any of the following formats can be used: \"YYYYMMDDHHmmSS[.us][Z|+-HH[:MM[:SS]]]\", \"YYYY-MM-DD HH:mm:SS.us\", \"YYYY-MM-DDTHH:mm:SS\", \"YYYY-MM-DDTHH:mm:SS[.us][Z|+-HH[:MM[:SS]]]\", and most reasonable combinations thereof. If the time zone component is missing, then the local time zone will be assumed (see Time Zones).\n\nWhen dates are converted to and from integer values, the a 64-bit second offset from January 1, 1970 in the local time zone is used for the conversion. For example int(2006-01-01) gives 1136073600 (regardless of the local time zone the date is in). To get the second offset of a date from 1970-01-01Z (i.e. the true epoch offset), call get_epoch_seconds() instead.\n\nWhen an expression requires a certain data type and the source data type cannot be converted to the desired data type, the default value for the desired data type will be used. The default values are given here.\n\n2.10. Container Data Types\n\nQore supports three types of container types: lists, hashes (associative arrays), and objects (see Objects and Classes for more information). These container types can be combined to make arbitrarily complex data structures.\n\nThe data type of any element can be any basic type or another aggregate type. The types do not have to be uniform in one container structure.\n\n2.10.1. Lists\n\nLists (or arrays) are simply ordered containers of values. A list element can be any Qore type (even another list, hash, or object).\n\nLists are specified by giving expressions separated by commas as follows:\n\n$list = (expression, expression [, expression ...]);\n\nHere is a concrete example:\n\nmy list $list = (1, 2, \"three\", 4.0, 5, 6, 2001-01-15Z);\n\nNote\n\nNote that trailing commas can be left on the end of a list (or a hash, for that matter). This makes it easier to comment-out the last element of a multi-line list without having to worry about removing the trailing comma.\n\nList elements are dereferenced using square brackets: \"[\" and \"]\". The first element in a list has index zero.\n\n2.10.2. Hashes\n\nHashes are containers that associate values to a string key.\n\nNote\n\nNote that Qore hashes preserve the insertion order in order to be able to guarantee the order of keys when hashes are serialized to XML strings, therefore the keys operator will always return the hash keys in insertion/creation order.\n\nHashes are specified using the following syntax:\n\n$hash = ( \"key1\" : expression,\n\"key2\" : expression,\n... );\n\nHere is a concrete example:\n\nmy hash $hash = ( \"apple\" : 1 + 1,\n\"pear\" : \"good\" );\n\nHashes are dereferenced in one of two ways, either using curly brackets: \"{\" and \"}\", where any valid Qore expression can be used, or using the dot \".\" hash member dereferencing operator, where literal strings can be used.\n\n$element3 = $hash{\"pe\" + \"ar\"};\n\nIs equivalent to:\n\n$element3 = $hash.pear;\n\nand:\n\n$element3 = $hash.\"pear\";\n\nand:\n\n$element3 = $hash.(\"pe\" + \"ar\");\n\nHash members can have the names of keywords, but in this case to dereference them, you cannot use the dot operator with a literal string, otherwise a parse error will be raised. Use quotes around the member name when dereferencing hash members with the same name as a qore keyword as follows:\n\n$element3 = $hash.\"keys\";\n\n$element3 = $hash{\"keys\"};\n\nA literal string after the dot \".\" hash member dereferencing operator must be a valid Qore identifier; therefore if you want to use a hash key that's not a valid identifier, enclose the string in quotes.\n\nIf you want to use the result of an expression to dereference the hash, then the curly bracket syntax must be used.\n\nNote that hash keys can also be given by constants (as long as the constant resolves to a string) when using curly brackets.\n\n2.10.3. Objects\n\nQore objects are instantiations of a class. They have members (like a hash - values associated to string keys), and methods. The class definition specifies the methods that run on objects of that class, private members, and static methods associated with the class (however note that static methods do not run in the scope of an object). Qore classes are declared with a special syntax.\n\nThe recommend way to instantiate an object is to declare its type and give constructor arguments after the variable name in parentheses as follows:\n\nmyclass_name_or_path $var_name([argument list])\n\nFor example (for a constructor taking no arguments or having only default values for the aguments, the list is empty):\n\nmy Mutex $m();\n\nIf parse option %new-style is set, the above example declaring a local variable of class Mutex would look as follows:\n\nObjects have named data members that are referenced like hash elements, although this behavior can be modified for objects using the memberGate() method. Object members are accessed by appending a dot '.' and the member name to the object reference as follows:\n\nThe object references above are normally variable references holding an object, but could be any expression that returns an object, such as a new expression or even a function call.\n\nNote\n\nObjects are treated differently than other Qore data types; they are only explicitly copied (see Object References for more informaion). Any object instantiated with the new operator will remain unique until deleted or explicitly copied. An explicit copy is made with the copy method, and does not always guarantee an exact copy of the source object (it depends on the definition of the copy method for the class in question).\n\nObjects exist until they go out of scope, are explicitly deleted, or their last thread exits. For detailed information, see the section Classes on Qore classes.\n\n2.11. Data Type Declarations\n\nStarting in Qore 0.8.0, it is possible to restrict variables, class members, and function and method parameters to certain data types. This allows programmers to write safer code, as many more errors can be caught at parse time that would otherwise be caught at run time. Furthermore, providing type information to the parser allows Qore to implement performance optimizations by performing lookups and resolutions once at parse time rather than every time a variable or class member is accessed at run time.\n\nWhen types are declared in a parameter list, functions and methods can be overloaded as well.\n\nThe types in the following table can be used as well as any class name or '*classname', meaning either the given class or NOTHING:\n\nAccepts Integer, Date and converts dates to an integer value representing milliseconds and returns the integer; incoming integers are assumed to represent milliseconds. If no value is passed, then NOTHING is returned.\n\n2.12. Time Zone Handling in Qore\n\nQore assumes a default time zone for all programs when it starts up. The rules for determining the default time zone are similar to those for the C library in most UNIX or UNIX-like operating systems.\n\nIf the TZ environment variable is defined, then the contents of that variable are used to find a zoneinfo file that contains the time zone definition. If this file cannot be found, then the default time zone will default to UTC.\n\nIf the TZ environment variable is not defined or is empty, then the Qore library tries to find the default zoneinfo definition file (normally /etc/localtime). If found, this file is read in and provides the information about the local time zone. If not found, the default time zone will default to UTC.\n\nWhen a zoneinfo file is found, information about local time zone names and daylight savings time is available for times tagged with that time zone.\n\nSee the TimeZone class for information about retrieving, setting, and querying time zone information; see Date and Time Functions for a list of functions related to date/time processing.\n\nHere are some examples using Qore's '-X' option for evaluating an expression and displaying the result immediately:\n\nNote that posix-style time zone rules are not understood if assigned to the TZ environment variable, only file names to a zoneinfo file can be processed at the moment. Furthermore if the zoneinfo file contains leap second information, it is currently ignored.\n\n2.13. Qore Strings and Character Encoding\n\n2.13.1. Overview\n\nThe Qore language is character-encoding aware. All strings are assumed to have the default character encoding, unless the program explicitly specified another encoding for certain objects and operations. Every Qore string has a character encoding ID attached to it, so, when another encoding is required, the Qore language will attempt to do an encoding translation.\n\nQore supports character encodings that are backwards compatible with 7-bit ASCII. This includes all ISO-8859-* character encodings, UTF-8, KOIR-8, KOIU-8, and KOI7, among others (see the table below: Character Encodings Known to Qore).\n\nHowever, mutibyte character encodings are currently only properly supported for UTF-8. For UTF-8 strings, the length(), index(), rindex(), substr(), reverse(), the splice operator, print formatting (regarding field lengths) functions and methods taking format strings, and regular expression operators and functions, all work with character offsets, which may be different than byte offsets. For all character encodings other than UTF-8, a 1 byte=1 character relationship is assumed.\n\nQore will accept any encoding name given to it, even if it is not a known encoding name or alias. In this case, Qore will tag the strings with this encoding, and pass this user-defined encoding name to the iconv library when encodings must be converted. This allows programmers to use encodings known by the system's iconv library, but unknown to qore. In this case, Qore will assume that the strings are backwards compatible with ASCII, meanin that that one character is represented by one byte and that the strings are null-terminated.\n\nNote that when Qore matches an encoding name to a code or alias in the following table, the comparison is not case-sensitive.\n\n2.13.2. Default Character Encoding\n\nThe default character encoding for Qore is determined by environment variables.\n\nFirst, the QORE_CHARSET environment variable is checked. If it is set, then this character encoding will be the default character encoding for the process. If not, then the LANG environment variable is checked. If a character encoding is specified in the LANG environment variable, then it will be used as the default character encoding. Otherwise, if no character encoding can be derived from the environment, UTF-8 is assumed.\n\nCharacter encodings are automatically converted by the Qore language when necessary. Encoding conversion errors will cause a Qore exception to be thrown. The character encoding conversions supported by Qore depend on the Operating System's iconv library function.\n\n2.13.3. Character Encoding Usage Examples\n\nThe following is a non-exhaustive list of examples in Qore where character encoding processing is performed.\n\nCharacter encodings can be explicitly performed with the convert_encoding() function, and the encoding attached to a string can be checked with the get_encoding() function. If you have a string with incorrect encoding and want to change the encoding tag of the string (without changing the actual bytes of the string), use the force_encoding() function.\n\nThe Datasource, DatasourcePool, and SQLStatement classes will translate character encodings to the encoding required by the database if necessary as well (this is actually the responsibility of the DBI driver for the database in question).\n\nThe File and Socket classes translate character encodings to the encoding specified for the object if necessary, as well as tagging strings received or read with the object's encoding.\n\nThe HTTPClient class will translate character encodings to the encoding specified for the object if necessary, as well as tag strings received with the object's encoding. Additionally, if an HTTP server response specifies a specific encoding to use, the encoding of strings read from the server will be automatically set to this encoding as well.\n\nAdditionally you can serialize a Qore hash to an XML string and specify the character encoding to use. If the target encoding is different than the source encoding conversions are automatically performed.\n\n2.14. Expressions\n\nAn expression can be any of the following (note that expressions are also recursively defined):\n\nTable 2.10. Expressions\n\nType\n\nDescription\n\nExamples\n\nAn immediate value\n\nQore values that can be expressed directly (see Basic Data Types for more information)\n\nA contextual reference to the current row of complex data structure being iterated by a context, summarize, subcontext statement, or a find expression. This expression will return a hash of the current row.\n\nA reference to a function or object method call (similar to a function pointer in C or C++). Function references are resolved in the second phase of parsing (commit phase), and object method references are resolved at run-time.\n\nAn anonymous function used a value; technically in computer science a closure must have at least one bound variable, but in qore a closure is any function used as a value, whether or not it encloses local variables from the scope in which it was created or not.\n\nstring sub (string $a) { return $a + $b; }\n\nA call reference call\n\nCalls the code referenced by the call reference expression or closure using any arguments supplied and returns the result.\n\n2.14.1. Static Method Calls\n\nSynopsis\n\nCalls to static class methods are made by giving the class name followed by two colons and then the method name. The method name must be implemented and accessible (i.e. not private and accessed outside the class) somewhere within the class hierarchy and must be static or a parse exception will occur.\n\nSyntax\n\nclass_name::method_name( [argument_expressions...] )\n\nDescription\n\nclass_name\n\nThe name of the class implementing the static method.\n\nmethod_name\n\nThe name of the static method to call.\n\n[argument_expressions...]\n\nExpressions passing arguments to the static method.\n\nExample\n\nTimeZone::setRegion(\"Europe/Prague\");\n\n2.14.2. Find Expressions\n\nSynopsis\n\nThe find expression can be used to quickly find data in a hash of lists (such as a query result set returned by the Datasource::select() or SQLStatement::fetchColumns() methods). The find expression will loop through a data structure, and for each element in the structure where the where expression is True, it will evaluate and return a result expression. If the where expression only is true for one element in the list, it will return the result of evaluating the result expression directly, otherwise if the where expression is true more than once, then a list of the results of evaluting the result expression for each element is returned. In each expression in the find expression, column names can be referred to by preceding the name with a '%\" character (as with context statements).\n\nSyntax\n\nfindresult_expressionindata_expressionwhere ( where_expression )\n\nDescription\n\nresult_expression\n\nThis expression will be evaluated and returned when the where_expression evaluates to True.\n\ndata_expression\n\nThis expression must evaluate to a hash of lists, so that the internal context can be set up for the find loop.\n\nwhere_expression\n\nThis expression will be evaluated for each row in the data_expression. Each time it evaluates to True, the result_expression will be evaulated and used for the return value for the find expression.\n\nExample\n\n$rlist = find %name, %id in $data where (%name =~ /Smith/);\n\n2.14.3. Call References\n\nSynopsis\n\nReferences to functions or object methods are called call references. A call reference can be used like a function pointer; a call reference is a Qore data type that can be returned by functions or methods or assigned to variables.\n\nNote that it is currently not legal to assign a call reference to a constant. This restriction may be lifted in a future version of Qore.\n\nFunction Call References\n\nCall references to functions are resolved at parse time; if the function does not exist a parse exception will be thrown.\n\nObject Method Call References\n\nCall references to object methods are executed and resolved at run time; if the object expression does not evaluate to an object at run-time, an OBJECT-METHOD-REFERENCE-ERROR exception will be thrown. If the method does not exist, a METHOD-DOES-NOT-EXIST run-time exception will be thrown.\n\nWhen called, a call reference to an object method will be executed in the context of the object originally referenced.\n\nObject method call references do not prolong the lifetime of an object; if the object is deleted (for example, by going out of scope), then if called the call reference will cause a OBJECT-ALREADY-DELETED exception to be thrown.\n\nSyntax\n\n\\function_name();\n\\object_expression.method_name();\n\nDescription\n\n\\function_name()\n\nThis form gives a function call references. The function name can be any valid user or builtin function name. Note the backslash at the beginning and the empty pair of parentheses at the end; these are required when specifying a call reference.\n\n\\object_expression.method_name()\n\nThis form gives an object method call reference. The object expression can be any valid Qore expression that evaluates to an object. The method_name must be an unquoted string (see examples below) and must represent a valid method name of the object's class.\n\nExample\n\nmy code $call_ref = \\func_name();\n$call_ref = \\$object.method_name();\n\n2.14.4. Closures\n\nSynopsis\n\nA closure is an anonymous function used as a value. Closures can be returned from functions or methods, assigned to variables, or passed as arguments to other functions.\n\nClosures encapsulate the state and value of local variables of the outer code block referenced from within the closure when the closure is created. Whenever local variables are bound within a closure, these variables are subject to concurrent thread access protection (locking) just as with global variables, in order to allow closures to be used in any context without restriction and to preseve thread-safety regarding bound local variables.\n\nNote that returning a closure from within an object method encapsulates the state of the object as well (it's legal to refer to $self and $.<variable> from within closures created from objects) and additionally prolongs the scope of the object for the lifetime of the closure.\n\n# if $b is a local variable in the function where the closure is created\n# then $b will be bound to the closure when the closure is created\nmy code $closure = int sub (int $a) { return $a + $b; };\n\n2.14.5. Implicit Argument References\n\nSynopsis\n\nImplicit arguments are arguments not captured by parameter variables as well as automatic arguments in list-processing operator expressions. A special syntax to reference these arguments is documented here.\n\nSyntax\n\n$<integer> # for a single implicit argument\n$$ # for the entire implicit argument list\n\nDescription\n\nImplicit arguments can be directly referenced using the dollar sign ($) and either a number from 1 onwards (giving the position in the argument list, where 1 is the first element) or a double dollar sign ($$) giving the entire implicit argument list.\n\nFor unassigned arguments to functions or methods, this syntax supplements the automatic $argv variable holding all function arguments not assigned to parameter variables.\n\nThis syntax is particularly useful when writing expressions for the map, map, foldr, and select operators, where implicit argument references are the only way the operator expressions can reference the current list values that are populated as implicit arguments as the operators traverse the list.\n\n2.15. Operators\n\nThe following table lists all Qore operators in order of precedence, starting with the highest precedence. The lower the precedence number, the higher the precedence, therefore the operators with precedence level 1 (\"{}\", \"[]\", \".\") have the highest precedence of all Qore operators. The precedence levels in Qore are roughly equal to the precedence levels of C language operators. To explicitly specify the precedence for expression evaluation, use parentheses ().\n\nNote\n\nAll Qore operators perform thread-atomic actions with respect to the immediate arguments of the operator. If the operators are used in a complex expression, the entire expression is not thread-atomic unless explicit user-level locking is used. For example: $a += 5 is a thread-atomic action, but $a += $b-- is not atomic, but rather made up of two atomic actions.\n\nNote\n\nWhen an operator taking more than one argument\nis used with arguments of different data types, Qore automatically converts one\nor both data types to a data type supported by the operator in order to evaluate\nthe result, according to the precedence lists in the following section. That is;\nwhen an operator operates on mixed types, the types listed first in the\nfollowing sections have precedence over types listed farther down in the lists.\nThe result type will always be equal to the final operation type after any\nconversions due to type precedence per operator. If no type of either argument\nmatches a supported data type for the operator, both types will be converted to\nthe highest precedence data type for the operator and then the operator will\nevaluate the result. For explicit type conversion, please see the\nboolean(), string(),\ndate(), int(),\nfloat(), etc functions.\n\n2.15.1. Backquote Operator (``)\n\nSynopsis\n\nExecutes the shell command in a separate process and returns the stdout as a string. To perform the same action using a Qore expression, see the backquote() function.This expression is evaluated and converted to a string if necessary. The value of the hash key corresponding to this string will be returned. If the key or member does not exist, then no value is returned.\n\nThis expression must evaluate to a hash or an object. If not, then the operator returns no value.\n\nidentifier\n\nThe value of the hash key or object member corresponding to this identifier will be returned. If no such key exists, then no value is returned. In order to use hash keys that are not valid Qore identifiers, please use the {} operator. If the member is a private member and access is made outside the class, a run-time exception will be thrown.\n\nmethod_\u00eddentifier\n\nThe container expression must evaluate to an object, or a run-time exception is thrown. If the method does not exist in the class a run-time exception is thrown. Otherwise the method is called with any optional arguments given.\n\nexpression = listexpression != list\n\nThis expression is evaluated and converted to a string if necessary. The value of the hash key corresponding to this string will be returned. If the key or member does not exist, then no value is returned.\n\nTable 2.17. Exceptions Thrown by .\n\nerr\n\ndesc\n\nPRIVATE-MEMBER\n\nAttempt to access a private member outside the class.\n\nMETHOD-DOES-NOT-EXIST\n\nAttempt to access a method not defined for this class.\n\nMETHOD-IS-PRIVATE\n\nAttempt to access a private method from outside the class.\n\nBASE-CLASS-IS-PRIVATE\n\nAttempt to access a method of a privately-inherited base class from outside the class.\n\nOBJECT-METHOD-EVAL-ON-NON-OBJECT\n\nAttempt to execute a method on a non-object.\n\n2.15.4. List, String, and Binary Dereference Operator ([])\n\nSynopsis\n\nRetrieves the value of a list element, the given character of a string, or the integer value of a byte for a binary object. If the index value is not valid for the argument, NOTHING is returned. Note that this operator only works as a list dereferencing operator in lvalue expressions; you cannot assign a character or a byte value to strings or binaries using this operator.\n\nIf the expression evaluates to a list, then the offset_expression will be used to return the given element from the list.\n\nstring_expression\n\nIf the expression evaluates to a string, then the offset_expression will be used to return the given character from the list; note that multi-byte characters with UTF-8 are properly respected with this operator.\n\nbinary_expression\n\nIf the expression evaluates to a binary, then the offset_expression will be used to return the integer value of the byte given from the binary object.\n\nexpression\n\nThe expression is evaluated and converted to an integer if necessary. Then the value of the list element given is returned (elements start at position 0).\n\nThis operator does not throw any exceptions; if the first expression does not evaluate to either a list, string, or binary, then no value is returned.\n\n2.15.6. Integer Post-Increment Operator (++)\n\nFirst converts the value of lvalue to an integer if necessary, then saves this value as the result, then increments the lvalue, then returns the saved original value of lvalue (after conversion to an integer if necessary)\n\n2.15.8. Integer Post-Decrement Operator (--)\n\nFirst converts the value of lvalue to an integer if necessary, then saves this value as the result, then decrements the lvalue, then returns the saved original value of lvalue (after conversion to an integer if necessary)\n\nThis operator does not throw any exceptions.\n\n2.15.9. New Object Operator (new)\n\nSynopsis\n\nCreates an instance of a class by running the class' constructor on the new class (if any exists) and returns the new object.\n\nNote that it is normally better to declare an object with its type and use the abbreviated form to construct the object as follows:\n\nmy Mutex $m();\n\nThis provides type information to the parser which allows more errors to be caught at parse time (instead of at run time), and furthermore allows Qore improve performance by performing more work once at parse time rather than for every time the object is accessed at run time (for example, method and variant resolution).\n\nThe class_identifier must be an existing class name; if so, the operator instantiates an object of this class, executes the constructor for the class (if any exists, along with any base class constructors, if applicable) on the new object, and returns the object (for constructor execution order in an inherited class, see Class Inheritance). If an exception is thrown in the constructor, the object is deleted immediately.\n\nThe expression given as an argument will be executed in a new thread. The TID of the new thread will be returned as the return value of the operator.\n\nNote\n\nPlease note the following when using the background operator:\n\nexpressions that have no effect cannot be used with the background operator (a parse exception will be thrown)\n\nit is illegal to make changes to a local variable anywhere in a background expression (a parse exception will be thrown)\n\nlocal variables and find expressions are evaluated before the new thread is started and the result of the evaluation is used in the expression in the new thread.\n\nit is not possible to pass local variables by reference anywhere in a background expression (a parse exception will be thrown)\n\nTable 2.26. Exceptions Thrown by background\n\nerr\n\ndesc\n\nTHREAD-CREATION-FAILURE\n\nIf the thread table is full or if the operating system returns an error while starting the thread, this exception is thrown.\n\n2.15.11. Delete Operator (delete)\n\nSynopsis\n\nThe delete operator deletes the contents of an lvalue. If the delete operator is called on an object, the object will be destroyed unconditionally. The delete operator does not return any value.\n\nWhen called on a hash key, the key is removed from the hash entirely; when called on a list element, the element is assigned NOTHING (i.e. the list size does not change).\n\nThe delete operator will delete multiple keys from a hash (i.e. delete a slice from a hash) when called on a hash dereferenced by a list of strings, giving the keys to delete (see example below).\n\nIn the case the delete operator operates on an object, any exception can be thrown that is thrown by the class' destructor.\n\nFor a similar operator that returns the value that is removed from the data structure, and does not delete objects, see the remove operator.\n\nSyntax\n\ndeletelvalue_expression\n\nReturn Type\n\nDoes not return any value\n\nExample\n\n# delete a single key from a hash\ndelete $value;\n\n# delete multiple values from a hash\ndelete $h.(\"a\", \"b\", \"c\");\n\nThis operator does not throw any exceptions, however exceptions could be thrown in an object's destructor method when deleted by this operator.\n\n2.15.12. Remove Operator (remove)\n\nSynopsis\n\nThe remove operator removes a value from a data structure, or, in the case the operand of the remove operator is a simple value, the value itself is removed from the variable and returned. The remove operator returns the value removed from the lvalue.\n\nWhen called on a hash key, the key is removed from the hash entirely, and the value returned is the value of the key removed from the hash; when called on a list element, the element is assigned NOTHING. (i.e. the list size does not change).\n\nThe remove operator will remove and return a slice from a hash when called on a hash dereferenced by a list of strings, giving the keys to remove (see example below).\n\nThe remove operator does not call destructors when operating on objects, but if removing an object from an lvalue or from a data structure within the lvalue causes the object to go out of scope, it will be destroyed, and then its destructor could throw an exception.\n\nFor a similar operator that deletes the value that is removed from the data structure, see the delete operator.\n\n2.15.18. Pop Operator (pop)\n\nReturns the last element of the list, and the list is modified, having the last element removed from the list.\n\nThis operator does not throw any exceptions.\n\n2.15.19. Chomp Operator (chomp)\n\nSynopsis\n\nRemoves the end-of-line marker(s) ('\\n' or '\\r\\n') from a string, or each string element in a list, or each hash key value in a hash (if the value is a string) and returns the number of characters removed.\n\nRemoves any EOL characters from each hash key's value (where the value is a string) and returns the number of characters removed.\n\nThis operator does not throw any exceptions.\n\n2.15.20. Trim Operator (trim)\n\nSynopsis\n\nRemoves whitespace characters from the beginning and end of a string, or each string element in a list, or each hash key value in a hash (if the value is a string) and returns the value processed (string, list, or hash).\n\nTo perform this operation on a non-lvalue expression, see the trim() function.\n\nThe following whitespace characters are removed from the beginning and end of strings: ' ', '\\n', '\\r', '\\t', '\\v' (vertical tab, ASCII 11), and '\\0' (null character).\n\nAn optional expression than can be used to filter out elements of the list before the map expression is applied; if this expression evaluates to False on an element, then the element will be skipped and the map expression will not be applied on that element.\n\nThis operator does not throw any exceptions (however note that exceptions could be thrown by expressions executed by this operator).\n\n2.15.22. Fold Left Operator (foldl)\n\nSynopsis\n\nFolds an operation on a list from left to right and returns the result. The result of each individual operation is used as the first argument in the foldl expression for the next element in the list. The first operation of the fold is made by executing the fold expression on the first and second elements of the list, from this point onwards, the result of each successive operation is used as the first argument for the next operation, the second argument being the next element in the list first element in the list when beginning the fold), and $2 represents the next element of the list.\n\nThis operator does not throw any exceptions (however note that exceptions could be thrown by expressions executed by this operator).\n\n2.15.23. Fold Right Operator (foldr)\n\nSynopsis\n\nFolds an operation on a list from right to left and returns the result. The result of each individual operation is used as the first argument in the foldr expression for the next element in the list in reverse order. The first operation of the right fold is made by executing the fold expression on the last and penultimate elements of the list, from this point onwards, the result of each successive operation is used as the first argument for the next operation, the second argument being the next element in the list in reverse order last element in the list when beginning the fold), and $2 represents the next element of the list in reverse order.\n\nThis operator does not throw any exceptions (however note that exceptions could be thrown by expressions executed by this operator).\n\n2.15.24. Select From List Operator (select)\n\nSynopsis\n\nSelects elements from a list that meet the given criteria and returns the new list.\n\nIf the list expression does not evaluate to a list, then the select expression is evaluated using the value of the list expression as an argument, if it evalutes to true, then the value is returned, otherwise, no value is returned.\n\nThe expression will be evaluated on each element of the list, the implicit argument $1 represents current element of the list; only if the expression evaluates to True will the element appear in the result list.\n\nThis operator does not throw any exceptions (however note that exceptions could be thrown by the expression executed by this operator).\n\n2.15.25. Elements Operator (elements)\n\nSynopsis\n\nReturns the number of elements in a list, the number of keys in a hash, the number of characters (not bytes) in a string, or the number of bytes in a binary object.\n\nGives the result of concatenating/merging its arguments. Any common keys will be overwritten by the values in the second hash (expression2)\n\nThis operator does not throw any exceptions.\n\n2.15.31. Minus Operator (-)\n\nSynopsis\n\nWith float or integer arguments, subtracts one number from another.\n\nWith date arguments, subtracts one date from another; if both date arguments are absolute dates, the result is a relative date (duration) giving the time between them; if the first date argument is an absolute date and the second is a relative date (duration), then the result is an absolute date. If both date arguments are relative dates, then the result is a relative date. If the first argument is a relative date and the second date is an absolute date, the result is an absolute date as if the operands were reversed.\n\nHowever, if the left-hand side is a hash, and the right-hand side is a string, then the hash key represented by the string will be removed from the hash. If the left-hand side is a hash and the right-hand side is a list, then each element in the list will be converted to a string and any hash key with that name will be deleted from the hash.\n\nIf expression is an instance of the named class, then the operator returns True, otherwise returns False. The operator will return True if the class is a base class, also even if it is privately inherited.\n\nIf expression1 is after expression2, returns True, otherwise returns False\n\nThis operator does not throw any exceptions.\n\n2.15.38. Equals Operator (==)\n\nSynopsis\n\nTests if a value is equal to another; types are converted if necessary (ex: (\"1\" == 1) is True). For absolute equals, where types must also be equal to return true, see the Absolute Equals Operator (===).\n\n2.15.44. Absolute Not Equals Operator (!==)\n\nif ($x !== $y)\nprintf(\"%n is not equal to %n and may not have the data type as well\\n\", $x, $y);\n\nTable 2.59. Arguments Processed By !==\n\nArgument\n\nProcessing\n\nAll\n\nThis operator returns True if either the types or the values of the arguments are different, otherwise it retuns False. No type conversions are done.\n\nThis operator does not throw any exceptions.\n\n2.15.45. Regular Expression Match Operator (=~)\n\nSynopsis\n\nChecks for a regular expression match; returns True if the expression matches the string, False if not. See Regular Expression Options for the meaning of the i, s, x, and m options after the regular expression.\n\nThis operator returns True if the regular expression in regex matches the string in expression.\n\nThis operator does not throw any exceptions.\n\n2.15.46. Regular Expression No Match Operator (!~)\n\nSynopsis\n\nChecks for a regular expression non match; returns True if the expression does not match the string, False if it does. See Regular Expression Options for the meaning of the i, s, x, and m options after the regular expression.\n\nThis operator returns True if the regular expression in regex does not match the string in expression.\n\nThis operator does not throw any exceptions.\n\n2.15.47. Regular Expression Substitution Operator\n\nSynopsis\n\nLooks for a regular expression match in a string, and, if found, substitutes the matched string with a new string. Subpattern backreferences are supported in the target string, $1=first subpattern, $2=second subpattern, etc... See Regular Expression Options for the meaning of the i, s, x, and m options after the regular expression.\n\nThis operator substitutes text in the lvalue string if the regular expression matches. Subpattern backreferences are supported in the target string, $1=first subpattern, $2=second subpattern, etc..\n\nThis operator does not throw any exceptions.\n\n2.15.48. Regular Expression Pattern Extraction Operator\n\nSynopsis\n\nMatches regular expression patterns (enclosed in parentheses) in a string and returns a list giving the text matched for each pattern. If the regular expression does not match, then no value (NOTHING) is returned. See Regular Expression Options for the meaning of the i, s, x, and m options after the regular expression.\n\nThis operator substitutes characters in the lvalue string. Note that if there are more characters in the source string than in the target string, then the last character in the target string will be used for any source matches where the source character position is greater than the target string.\n\nReturns True if either or both expressions evaluate to True, False if otherwise. Logical short-circuiting is implemented; if expression1 is True, then expression2 is not evaluated, and the operator returns True.\n\nThis operator does not throw any exceptions.\n\n2.15.55. Conditional Operator (? :)\n\nSynopsis\n\nEvaluates and returns the value of one of two expressions depending on the value of a conditional expression.\n\nAppends the value of the expression as the last element in the list given by lvalue. If expression evaluates to a list, this list will be appended as the last element of lvalue. To concatenate lists, use the Plus Operator.\n\n2.15.59. Splice Operator (splice)\n\nSynopsis\n\nRemoves and optionally inserts elements in lists and strings. For a similar operator that returns the values removed, see the extract operator.\n\nWorks on either strings or lists in a similar way; removes elements from a list or characters from a string and optionally inserts new ones. If no length_expression is given, spliceNote that string spliceitution_expression\n\nFor list splice splice, an optional string to substitute for the removed characters.\n\n2.15.60. Extract Operator (extract)\n\nSynopsis\n\nRemoves and optionally inserts elements in lists and strings. For a similar operator that only removes values and does not return any value, see the splice operator.\n\nWorks on either strings or lists in a similar way; removes elements from a list or characters from a string and optionally inserts new ones. If no length_expression is given, extractWhen operating on lists, a list is returned of any elements extracted (if no elements are extracted, then an empty list is returned); when operating on strings, a string is extracted of all characters extracted from the string (if no characters are extracted, then an empty string is returned).\n\nNote that string extractitution_expression\n\nFor list extract extract, an optional string to substitute for the removed characters.\n\n2.15.62. Plus Equals Operator (+=)\n\nSynopsis\n\nIncrements and concatentates an lvalue with the value of an expression depending on the data type of the lvalue, unless the lvalue is NOTHING, in which case this operator acts like the assignment operator (simply assigns the value of the right hand side to the lvalue).\n\nthe expression will be evaluated and concatenated to the lvalue. If expression is a list, the lists will be concatenated, to ensure adding a single element to a list, use the push operator (see Push Operator).\n\nthe lvalue's type will be converted to an integer, and the expression will be evaluated and converted to an integer if necessary, and then the result will be added to the lvalue.\n\n2.15.63. Minus Equals Operator (-=)\n\nSynopsis\n\nFor a float or integer argument, decrements the value of an lvalue by the value of an expression. However if the lvalue is a hash and the expression is a string, removes the key represented by the string from the hash.\n\nthe lvalue's type will be converted to an integer (if necessary), and the expression will be evaluated and converted to an integer (if necessary), and then the result will be subtracted from the lvalue\n\n2.15.64. And Equals Operator (&=)\n\nSynopsis\n\nPerforms a bitwise (binary) AND and'ed to the lvalue\n\n2.15.65. Or Equals Operator (|=)\n\nSynopsis\n\nPerforms a bitwise (binary) OR or'ed to the lvalue\n\n2.15.66. Modula Equals Operator (%=)\n\nSynopsis\n\nPerforms a modula calculation used to divide the lvalue's value and the remainder will be saved to the lvalue\n\n2.15.67. Multiply Equals Operator (*=)\n\nSynopsis\n\nPerforms a multiplication multiplied by the lvalue, and the result will be saved to the lvalue.\n\n2.15.68. Divide Equals Operator (/=)\n\nSynopsis\n\nPerforms a division used to divide the lvalue, and the result will be saved to the lvalue.\n\nTable 2.84. Exceptions Thrown by /*\n\nerr\n\ndesc\n\nDIVISION-BY-ZERO\n\nIf the divisor expression evaluates to zero, this exception is thrown.\n\n2.15.69. Xor Equals Operator (^=)\n\nSynopsis\n\nPerforms an exclusive-or operation on an lvalue using the value of an expression.\n\nReturns a list of substrings in a string based on matching patterns defined by a regular expression.\n\n2.17. Date/Time Arithmetic\n\nDate/time arithmetic is relatively straightforward and should normally produce the expected results. However with leap years, months with different lengths, and daylights savings time the situation can be confusing; this section will clarify how Qore does date arithmetic considering these special cases.\n\n2.17.1. Adding and Subtracting Years and Months\n\nAdding or subtracting years and months (ex: $date += 2Y + 3M) will give you the same day on the desired month in the desired year. If the target month has fewer days than the source month, then you will get the last day of the month in that year. For example:\n\nprompt% qore -X '2004-02-29Z - 1Y'\n2003-02-28 00:00:00 Fri Z (UTC)\n\n2.17.2. Adding and Subtracting Days\n\nAdding or subtracting days means adding or subtracting 24h periods; i.e. you will get the same time in the result of subtracting days, for example:\n\n2.17.3. Finding the Difference Between Two Dates\n\nSubtracting one absolute date from another will result in a relative date, normalized to the hour (that is, microseconds over 999,999 are converted to seconds, seconds over 59 to minutes, and minutes over 59 to hours; days, months, and years will not appear in the result as they do not indicate a fixed period of time but rather can vary in length depending on the absolute date/time starting point. For example:\n\n2.17.5. Leap Years and the Gregorian Calendar\n\nQore is capable of representing and performing calculations on dates before the adoption of the Gregorian calendar (proposed in 1582 and adopted at various times in Europe after this point). However all calculations are made as if the Gregorian calendar were always in effect (Qore implements a proleptic Gregorian calendar).\n\n2.18. Statements\n\nNon-block statements in Qore are always terminated by a semi-colon \";\" as in Perl, C, or Java. Statements can be grouped into blocks, which are delimited by curly brackets \"{\" and \"}\" containing zero or more semi-colon delimited statements, as in C or Java. Like C, C++, and Java, but unlike perl, any Qore statement taking a statement modifier will accept a single statement or a statement block.\n\nA statement can be any of the following (note that statements are also recursively defined):\n\n2.18.1. if and else Statements\n\nSynopsis\n\nThe if statement allows for conditional logic in a Qore program's flow; the syntax is similar to that of C, C++, or Java.\n\nSyntax\n\nif ( expression )\nstatement\n[elsestatement]\n\nDescription\n\nQore if statements work like if statements in C or Java. If the result of evaluating the expression converted to a Boolean value is True, then the first statement (which can also be a block) is executed. If the result is False, and there is an else keyword after the first statement, the following statement is executed.\n\nNote\n\nAny expression that evaluates to a non-zero integer value will be converted to a Boolean True. Any expression that evaluates to zero value is interpreted as False. This is more like C and Java's behavior and not like Perl's (where any non-null string except \"0\" is True).\n\n2.18.2. for Statements\n\nSynopsis\n\nThe Qore for statement is most similar to the for statement in C and Java, or the non array iterator for statement in Perl. This statement is ideal for loops that should execute a given number of times, then complete. Each of the three expressions in the for statement is optional and may be omitted. To iterate through a list without directly referencing list index values, see the foreach statement.\n\nThe initial_expression is executed only once at the start of each for loop. It is typically used to initialize a loop variable.\n\n[test_expression]\n\nThe test_expression is executed at the start of each for loop iteration. If this expression evaluates to Boolean False, the loop will terminate.\n\n[iterator_expression]\n\nThe iterator_expression is executed at the end of each for loop iteration. It is typically used to increment or decrement a loop variable that will be used in the test_expression.\n\nExample\n\nHere is an example of a for loop using a local variable:\n\nfor (my $i = 0; $i < 10; $i++)\nprint(\"%d\\n\", $i);\n\n2.18.3. foreach Statements\n\nSynopsis\n\nThe Qore foreach statement is most similar to the for or foreach array iterator statement in Perl. To iterate an action until a condition is true, use the for statement instead.\n\nSyntax\n\nforeach [my] $variablein (expression)\nstatement\n\nDescription\n\nIf the expression does not evaluate to a list, then the variable will be assigned the value of the expression evaluation and the statement will only execute one time. Otherwise the variable will be assigned to each value of the list and the statement will be called once for each value.\n\nExample\n\nHere is an example of a foreach loop using a local variable:\n\n# if $str_list is a list of strings, this will remove all whitespace from the\n# strings; the reference in the list expression ensures that changes\n# to the iterator variable are written back to the list\nforeachmy $string in (\\$str_list)\ntrim $string;\n\nNote\n\nNote that if a reference (\\$lvalue_expression) is used as the list expression, any changes made to the foreach iterator variable will be written back to the list.\n\n2.18.4. switch Statements\n\nSynopsis\n\nThe Qore switch statement is similar to the switch statement in C and C++, except that the case values can be any expression that does not need run-time evaluation and can also be expressions with simple relational operators or regular expressions using the switch value as an implied operand.\n\nThe first expression is evaluated and then compared to the value of each case expression in declaration order until one of the case expressions matches or is evaluated to True. In this case all code up to a break statement is executed, at which time execution flow exits the switch statement. Unless relational operators are used, the comparisons are \"hard\" comparisons; no type conversions are done, so in order for a match to be made, both the value and types of the expressions must match exactly. When relational operators are used, the operators are executed exactly as they are in the rest of qore, so type conversions may be performed if nesessary.\n\nTo use soft comparisons, you must explicitly specify the soft equals operator as follows:\n\nswitch (1) {\ncase == \"1\": print(\"true\\n\"); break;\n}\n\nIf no match is found and a default label has been given, then any statements after the default label will be executed. If a match is made, then the statements following that case label are executed.\n\n2.18.5. while Statements\n\nwhile statements in Qore are similar to while statements in Perl, C and Java. They are used to loop while a given condition is True.\n\nSyntax\n\nwhile ( expression )\nstatement\n\nDescription\n\nFirst the expression will be evaluated; if it evaluates to True, then statement will be executed. If it evaluates to False, the loop terminates.\n\nExample\n\n$a = 1;\nwhile ($a < 10)\n$a++;\n\n2.18.6. do while Statements\n\nSynopsis\n\ndowhile statements in Qore are similar to dowhile statements in C. They are used to guarantee at least one iteration and loop until a given expression evaluates to False.\n\nSyntax\n\ndostatementwhile ( expression );\n\nDescription\n\nFirst, statement will be executed, then expression will be evaluated; if it evaluates to True, then the loop iterates again. If it evaluates to False, the loop terminates. The difference between dowhile statements and while statements is that the dowhile statement evaluates its loop expression at the end of the loop, and therefore guarantees at least one iteration of the loop.\n\nExample\n\n$a = 1;\ndo\n$a++;\nwhile ($a < 10);\n\n2.18.7. continue Statements\n\nSynopsis\n\nSkips the rest of a loop and jumps right to the evaluation of the iteration expression.\n\nSyntax\n\ncontinue;\n\nDescription\n\nThe continue statement affects loop processing; that is; it has an affect on for, foreach, while, dowhile, context, summarize, and subcontext loop processing. When this statement is encountered while executing a loop, execution control jumps immediately to the evaluation of the iteration expression, skipping any other statements that might otherwise be executed.\n\n2.18.8. break Statements\n\nSynopsis\n\nExits immediately from a loop statement or switch block.\n\nSyntax\n\nbreak;\n\nDescription\n\nThe break statement affects loop processing; that is; it has an affect on for, while, dowhile, context, summarize, and subcontext loop processing. When this statement is encountered while executing a loop, the loop is immediately exited, and execution control passes to the next statement outside the loop.\n\n2.18.9. throw Statements\n\nSynopsis\n\nIn order to throw an exception explicitly, the throw statement must be used.\n\nSyntax\n\nthrowexpression;\n\nDescription\n\nThe expression will be passed to the catch block of a try/catch statement, if the throw is executed in a try block. Otherwise the default system exception handler will be run and the currently running thread will terminate.\n\nQore convention dictates that a direct list is thrown with at least two string elements, the error code and a description. All system exceptions have this format. See try and catch statements for information on how to handle exceptions, and see Exception Handling for information about how throw arguments are mapped to the exception hash.\n\n2.18.10. try and catch Statements\n\nSynopsis\n\nSome error conditions can only be detected and handled using exception handlers. To catch exceptions, try and catch statements can to be used. When an exception occurs while executing the try block, execution control will immediately be passed to the catch block, which can capture information about the exception.\n\nSyntax\n\ntrystatementcatch ([$exception_hash_variable])\nstatement\n\nDescription\n\nA single variable can be specified in the catch block to be instantiated with the exception hash, giving information about the exception that has occurred. For detailed information about the exception hash, see Exception Handling.\n\nIf no variable is given in the catch declaration, it will not be possible to access any information about the exception in the catch block. However, the rethrow statement can be used to rethrow exceptions at any time in a catch block.\n\n2.18.11. rethrow Statements\n\nSynopsis\n\nA rethrow statement can be used to rethrow an exception in a catch block. In this case a entry tagged as a rethrow entry will be placed on the exception call stack. This statement can be used to maintain coherent call stacks even when exceptions are handled by more than one catch block (for detailed information about the exception hash and the format of call stacks, see Exception Handling).\n\nSyntax\n\nrethrow;\n\nDescription\n\nThe rethrown exception will be either passed to the next higher-level catch block, or to the system default exception handler, as with a throw statement. Note that it is an error to call rethrow outside of a catch block.\n\n2.18.12. thread_exit Statements\n\nSynopsis\n\nthread_exit statements cause the current thread to exit immediately. Use this statement instead of the exit() function when only the current thread should exit.\n\nSyntax\n\nthread_exit;\n\nDescription\n\nThis statement will cause the current thread to stop executing immediately.\n\n2.18.13. context Statements\n\nSynopsis\n\nTo easily iterate through multiple rows in a hash of arrays (such as a query result set returned by the Datasource::select() or SQLStatement::fetchColumns() methods), the context statement can be used. Column names can be referred to directly in expressions in the scope of the context statement by preceding the name with a '%\" character.\n\nThis must evaluate to a hash of arrays in order for the context statement to execute.\n\n[ where ( expression ) ]\n\nAn optional where expression may be given, in which case for each row in the hash,\nthe expression will be executed, and if the where expression evaluates to True,\nthe row will be iterated in the context loop. If this expression evaluates\nto False, then the row will not be iterated. This option is given so the\nprogrammer can create multiple views of a single data structure (such as a query\nresult set) in memory rather than build different data structures by\nhand.\n\n[ sortBy ( expression ) ]\n\nAn optional sort_by expression may also be given. In this case, the expression will be evaluated for each row of the query given, and then the result set will be sorted in ascending order by the results of the expressions according to the resulting type of the evaluated expression (i.e. if the result of the evaluation of the expression gives a string, then string order is used to sort, if the result of the evaluation is an integer, then integer order is used, etc).\n\n[ sortDescendingBy ( expression ) ]\n\nAnother optional modifier to the context statement that behaves the same as above except that the results are sorted in descending order.\n\n2.18.14. summarize Statements\n\nSynopsis\n\nsummarize statements are like context statements with one important difference: results sets are grouped by a by expression, and the statement is executed only once per discrete by expression result. This statement is designed to be used with the subcontext statement.\n\nsummarize statements modifiers have the same effect as those for the context statement, except for the following:\n\nby ( expression )\n\nThe by expression is executed for each row in the data structure indicated.\nThe set of unique results defines groups of result rows. For each group of\nresult rows, each row having an identical result of the evaluation of the\nby expression, the statement is executed only once.\n\n2.18.15. subcontext Statements\n\nThe subcontext statement is used in conjunction with summarize statements. When result rows of a query should be grouped, and then each row in the result set should be individually processed, the Qore programmer should first use a summarize statement, and then a subcontext statement. The summarize statement will group rows, and then the nested subcontext statement will iterate through each row in the current summary group.\n\n2.18.16. return Statements\n\nSynopsis\n\nreturn statements causes the flow of execution of the function, method or program to stop immediately and return to the caller. This statement can take an optional expression to return a value to the caller as well.\n\nSyntax\n\nreturn [expression];\n\nDescription\n\nThis statement causes execution of the current function, method, or program to cease and optionalls returns a value to the caller.\n\n2.18.17. on_exit Statements\n\nSynopsis\n\nQueues a statement or statement block for unconditional execution when the block is exited, even in the case of exceptions or return statements. For similar statement that queue code for execution depending on the exception status when the block exits, see on_success statements and on_error statements.\n\nSyntax\n\non_exitstatement\n\nDescription\n\nThe on_exit statement provides a clean way to do exception-safe cleanup within Qore code. Any single statment (or statement block) after the on_exit keyword will be executed when the current block exits (as long as the statement itself is reached when executing - on_exit statements that are never reached when executing will have no effect). The the position of the on_exit statement in the block is important, as the immediate effect of this statement is to queue its code for execution when the block is exited. Even if an exception is raised or a return statement is executed, any on_exit code that is queued will be executed. Therefore it's ideal for putting cleanup code right next to the code that requires the cleanup.\n\nNote that if this statement is reached when executing in a loop, the on_exit code will be executed for each iteration of the loop.\n\nBy using this statement, programmers ensure that necessary cleanup will be performed regardless of the exit status of the block (exception, return, etc).\n\nExample\n\n{\n$mutex.lock();\n# here we queue the unlock of the mutex when the block exits, even if an exception is thrown below\non_exit $mutex.unlock();\nif ($error)\nthrow \"ERROR\", \"Scary error happened\";\nprint(\"everything's OK!\\n\");\nreturn \"OK\";\n}\n# when the block exits for any reason, the mutex will be unlocked\n\n2.18.18. on_success Statements\n\nSynopsis\n\nQueues a statement or statement block for execution when the block is exited in the case that no exception is active. Used often in conjunction with the on_error statement and related to the on_exit statement.\n\nSyntax\n\non_successstatement\n\nDescription\n\nThe on_success statement provides a clean way to do block-level cleanup within Qore code in the case that no exception is thrown in the block. Any single statment (or statement block) after the on_success keyword will be executed when the current block exits as long as no unhandled exception has been thrown (and as long as the statement itself is reached when executing - on_success statements that are never reached when executing will have no effect). The the position of the on_success statement in the block is important, as the immediate effect of this statement is to queue its code for conditional execution when the block is exited. Even if a return statement is executed later in the block, any on_success code that is queued will be executed as long as there is no active (unhandled) exception. Therefore it's ideal for putting cleanup code right next to the code that requires the cleanup, along with on_error statements, which are executed in a manner similar to on_success statements, except on_error statements are only executed when there is an active exception when the block is exited.\n\nNote that if this statement is reached when executing in a loop, the on_success code will be executed for each iteration of the loop (as long as there is no active exception18.19. on_error Statements\n\nSynopsis\n\nQueues a statement or statement block for execution when the block is exited in the case that no exception is active. Used often in conjunction with the on_success statement and related to the on_exit statement.\n\nSyntax\n\non_errorstatement\n\nDescription\n\nThe on_error statement provides a clean way to do block-level cleanup within Qore code in the case that an exception is thrown in the block. Any single statment (or statement block) after the on_error keyword will be executed when the current block exits as long as an unhandled exception has been thrown (and as long as the statement itself is reached when executing - on_error statements that are never reached when executing will have no effect). The the position of the on_error statement in the block is important, as the immediate effect of this statement is to queue its code for conditional execution when the block is exited. Even if a return statement is executed later in the block, any on_error code that is queued will be executed as long as there is an active (unhandled) exception. Therefore it's ideal for putting cleanup code right next to the code that requires the cleanup, along with on_success statements, which are executed in a manner similar to on_error statements, except on_success statements are only executed when there is no active exception when the block is exited.\n\nNote that the code in this statement can only be executed once in any block, as a block (even a block within a loop) can only exit the loop once with an active exception (in contrast to on_success and on_exit statements, which are executed for every iteration of a loop19. Functions\n\nA function is declared in Qore by using the key word sub (for subroutine) as follows:\n\nVariables listed in parentheses after the function name are the parameters to the function and automatically get local lexical scoping. In order to process a variable number of arguments to a function, the $argv variable (local variable) is instantiated as a list with the remaining arguments passed to the function. Type declarations optionally precede the parameter variable and will restrict any arguments passed to the type declared. The same function can be declared multiple times if each declaration has different parameter types; this is called overloading the function.\n\nFunctions use the return statement to provide a return value. Function names must be valid Qore identifiers.\n\nThe return type of the function can be given by placing a type declaration before the sub keyword (the older syntax with the returns keyword after the parameter list is still accepted as well).\n\nNote\n\nVariables passed as function arguments are passed by value by default, unless the caller places a \"\\\" character before an lvalue in the argument list. In this case the function must have a parameter defined to accept the variable passed by reference. Any changes to the local variable will be reflected in the original variable for variables passed by reference. Also note that it is illegal to pass an argument by reference in a background expression.\n\nFunctions can return values to the calling expression by using the return statement, with the following syntax:\n\nNote\n\nFunction names are resolved during the second parse pass; therefore functions do not need to be declared before being referenced. This allows an easy definition of 2 or more self-referencing functions.\n\n2.20. Namespaces\n\nNamespaces allow constants, classes, and even other namespaces with the same name to co-exist in the same program by defining them in separate namespaces. Constants, classes, and sub-namespaces can be declared to belong to a particular namespace either by defining them in-line within a namespace declaration, or by including the namespace name/path prepended to the constant, class, or namespace declaration separated by two colons \"::\".\n\nIf the user does not specify the parent namespace with a namespace path in constant, class, or namespace declarations, the declaration will be by default in the unnamed default root namespace.\n\n2.20.2. Namespace Resolution\n\nNamespaces can either be resolved by giving a path to the constant, class, or namespace desired, or by leaving out the namespace path and allowing the system to search for the constant, class, or namespace. In either case, a depth-first search of the namespace tree is made for a match. If a namespace path is included, then the tree is searched for the first namespace match. and, if the rest of the declaration cannot be matched, the search continues in the entire namespace tree until a complete match is found.\n\nNamespace paths look like the following:\n\nstarting_namespace::[sub-namespaces::]constant|class|namespace\n\n2.20.3. System Namespaces\n\nAll Qore-language constants and classes are defined in the Qore namespace or in a subnamespace of the Qore namespace. The Qore namespace is a direct child of the unnamed default root namespace (::).\n\n2.21. Constants\n\nConstant definitions allow programmers to refer to values with Qore identifiers rather than using the value or the expression that generates the value. Constants are defined with the following syntax:\n\nconst [namespace_path::]constant_identifier = expr;\n\nNote\n\nAs of Qore 0.8.1 and onwards, the expression used to initialize a constant can be any valid Qore expression as long as no variables are referenced. Note that the order that constants are initialized and assigned does not necessarily correspond to the declaration order, and it is bad programming practice to assign a constant with an expression that has side effects. Furthermore if an expression used to initialize a constant throws an exception, that exception cannot be caught.\n\nClasses can also declare constants; see class constants for more information.\n\n2.22. Classes\n\nObjects are instantiations of a Qore class. Classes can define private members and methods, which are functions that operate only on the objects of that class.\n\nNote that when parse option %allow-bare-refs is enabled, no \"$\" or \"$.\" prefixes can be used with variable or method or member names as in the specifications above.\n\nClass members, class constants, and static class variables can only be declared in an in-line class definition (the first example above). IfIn a class hierarchy, base class constructor methods can be explicitly specified using a special syntax unique to subclass constructor methods. Please see Class Inheritance for more information.\n\nNote\n\nIt's possible to write purely object-oriented scripts/programs in Qore by defining an application class and using the -x or --exec-class command-line arguments to tell Qore to instantiate the class instead of doing normal top-level execution (in fact, the --exec-class arguments disallow the use of top-level statements entirely). For more information, please see Command-Line Parsing and Parse Directives.\n\n2.22.1. Class Methods\n\n2.22.1.1. Private and Synchronized Methods\n\nMethods declared with the private keyword can only be called by other member functions of the same class. Any attempt to call these methods from outside the class will result in a run-time exception.\n\nMethods declared with the synchronized keyword will only run in one thread at a time.\n\n2.22.1.2. Static Methods\n\nMethods declared with the static keyword are like regular functions that are attached to the class. These methods are not associated with a particular object's state and therefore are not allowed to refer to object members or call non-static methods. Also, no reference to the special $self variable is allowed within static methods.\n\nStatic methods may be declared private or public like non-static methods.\n\n2.22.1.3. Constructors, Destructors, and Other Special Methods\n\nAll class methods are optional, but some methods have a special meaning.\n\nTable 2.93. Special Methods\n\nName\n\nDescription\n\nconstructor()\n\nCalled when objects are created when instantiated by a variable declaration with a class type and constructor arguments or explicitly with the new operator. User code may not explicitly call constructor() methods directly. In a class tree, constructor() methods are called for base classes first in left-to-right, depth-first declaration order.\n\nconstructor() methods may be overloaded and also private constructors may be defined. Private constructors can only be called from within the class.\n\ncopy()\n\nWhen a user explicitly calls a copy method, Qore will generate a new object with references to the same members as the source object. Then, if there are any base classes, base class copy() methods are called in the same order as the constructor() methods. If a copy() method is defined, it will be run in the new object with a reference to the old object passed as the first argument. Any other arguments passed to the copy() method are ignored.\n\ncopy() methods cannot be overloaded and cannot be private.\n\ndestructor()\n\nCalled when objects go out of scope or are explicitly deleted. User code may not explicitly call destructor() methods. In a class tree, destructor() methods are called for base classes in the opposite order in which the constructors are called.\n\nIf this method is implemented in the class, it is called when read access is attempted to private member or members that do not exist in the current object; the return value of this method is returned as the value of the member.\n\nmemberGate() methods cannot be overloaded and are not inherited by subclasses.\n\nIf this method is implemented in the class, it is called when methods are called on the object that do not exist in the current object and the return value of this method is returned as the value of the method call.\n\nmethodGate() methods cannot be overloaded and are not inherited by subclasses.\n\nIf this method is implemented in the class, it is called when an object member is updated outside the class with the member name as the argument. Note that this method is called after the member has been updated and without locking; the call is not atomic respective to other threads that also may update the same member simultaneously.\n\nmemberNotification() methods cannot be overloaded and are not inherited by subclasses.\n\n2.22.2. Class Constants\n\nClass constants, like non-class constants, allow programmers to refer to values with Qore identifiers rather than using the value or the expression that generates the value.\n\nNote\n\n2.22.4. Class Members\n\nWhen defining a class, members of instantiated objects are referred to with a special syntax as follows:\n\n$.member_name_identifier\n\nFurthermore, the automatic variable $self is instantiated which represents the current object (similar to the this in C++ or Java). Therefore if you need to access hash members which are not valid Qore identifiers, then enclose the member name in double quotes after the dot operator as follows:\n\n$self.\"&member-name\"\n\nThe automatic $argv local variable is instantiated as usual in all class methods where there are more arguments than variables declared in the method declaration.\n\nIf the class implements a memberGate() method, then whenever a non-existant member of the class is accessed (read), this method will be called with the name of the member as the sole argument, so that the class can create the member (or react in some other way) on demand. This method is also called when methods of the same class try to access (read) non-existant methods, but is not called from within the memberGate() method itself.\n\nTo monitor writes to the object, the class can implement a memberNotification() method, which is called whenever an object member is modified from outside class member code. In this case, the memberNotification() method is called with the name of the member that was updated so that an object can automatically react to changes to its members (writes to members) from outside the class. This method is not called when members are updated from within class member code.\n\nIf2.22.5. Object Method Calls\n\nWithin a class method definition, calls to methods in the same class hierarchy (of the current class or a base class) can be made as follows:\n\nCalls to object methods can be made outside the class by using the above syntax as well. If the object's class is not known at parse time, then the call is resolved at run-time, and if a call is attempted to a private function outside the defining class, then a run-time METHOD-IS-PRIVATE (if the method is private) or BASE-CLASS-IS-PRIVATE (if the method resolves to a privately-inherited base class) exception is raised.\n\n2.22.6. Class Inheritance\n\nClass inheritance is a powerful concept for easily extending and resuing object-oriented code, but is also subject to some limitations. This section will explain how class inheritance works in Qore.\n\nClasses inherit the methods of a parent class by using the inherits as specified above. Multiple inheritance is supported; a single Qore class can inherit one or more classes. When a class is inherited by another class, it is called a base class. Private inheritance is speficied by including the keyword private before the inherited class name. When a class is privately inherited, it means that the inherited class' public members are treated as private members in the context of accesses outside the class.\n\nInheritance is public by default, to inherit a class privately, use the private keyword before the class name or class path to inherit.\n\nIt is not legal to directly inherit the same class more than once; that is; it is not legal to list the same class more than once after the inherits keyword. However, it is possible that a base class could appear more than once in the inheritance tree if that class is inherited separately by two or more classes in the tree. In this case, the base class will actually only be inherited once in the subclass, even though it appears in the inheritance tree more than once. This must be taken into consideration when designing class hierarchies, particularly if base class constructor parameters for that class are explicitly provided in a different way by the inheriting classes.\n\nNote\n\nClass members only exist once for each object; therefore if classes in an inheritance tree have different uses for members with the same name, then a class hierarchy built of such classes will probably not function properly.\n\nSubclasses can give explicit arguments to their base class constructors using a special syntax (only available to subclass constructors) similar to the C++ syntax for the same purpose as follows:\n\nBecause base class constructors are executed before subclass constructors, the only local variables in the constructor that can be referenced are those declared in the subclass constructor declaration (if any). What this means is that if you declare local variables in the expressions giving base class arguments, these local variables are not accessible from the constructor body.\n\nNote\n\nBase classes that give explicit arguments to their base class constructors can be overridden by subclasses by simply listing the base class in the base class constructor list and providing new arguments.\n\n2.22.7. Object References\n\nIn Qore objects are treated differently from all other data types in that they are by default passed as arguments to functions and methods by passing a copy of a reference to the object (similar to Java's handling of objects). That means that passing an object to a function that modifies the object will by default modify the original object and not a copy, however reassigning a local parameter variable assigned an object passed as an argument (that is only assigned to a local variable in the calling function) will not result in deleting the object, but rather decrement its scope reference count (note that if the object were created as a part of the call and reassigning the variable would cause the object's scope reference count to reach zero, then the object would be deleted in this case).\n\nAssigning an object to a variable has the same effect; a copy of a reference to the object is assigned to the variable. This results in prolonging the object's scope (by owning a new copy of a reference to the object).\n\nAn example:\n\nsub test2(any $x) {\n# we can modify the original object like so:\n$x.member = \"tree\";\n# here we re-assign $x, but since the object is also assigned\n# to $o in the calling function, the object's scope is still\n# valid, and therefore nothing happens so the object\n$x = 1;\n}\nsub test() {\nmy TestObject $o();\n# here we pass a copy of a reference to the object in $o\ntest2($o);\n# this will print out \"ok\\n\", because the object is still\n# valid and the member has been set by test2()\nif ($o.member == \"tree\")\nprint(\"ok\\n\");\n}\n# when test() exits, the object in $o will go out of scope\n# and be deleted\n\nIf, however, an object is passed by reference, then the local variable of the called function that accepts the object owns the scope reference of the calling functions's variable.\n\nAn example:\n\nsub test2(any $x) {\n# we can modify the original object like so:\n$x.member = \"tree\";\n# here we re-assign $x, and since we own the only scope\n# reference to the object, the object will go out of\n# scope here and be deleted\n$x = 1;\n}\nsub test() {\nmy TestObject $o();\n# here we pass a reference to the object in $o\ntest2(\\$o);\n# the object has already been deleted in test2() and\n# therefore nothing will be printed out\nif ($o.member == \"tree\")\nprint(\"ok\\n\");\n}\n\nNote that when parse option %allow-bare-refs is set, then variable references as in the above examples are made without the \"$\" character.\n\n2.22.8. Object Scope\n\nObjects are automatically deleted when their scope-relevant reference count reaches zero (note that objects can be deleted manually at any time by using the delete operator). Whenever an object is deleted, the object's class' destructor method is run on the object.\n\nThe following affect objects' scope:\n\nVariable Assignments\n\nAn object's automatic scope is prolonged as long as the object is assigned to a local variable.\n\nAny closures created from within the object encapsulate the object's state (along with any local variables referenced within the closure) and also prolong the object's automatic scope as long as the closure exists.\n\nObject Method Thread Launched Within the Object\n\nIf a member function thread was launched from within the object using the background operator, the object's automatic scope is prolonged to the life of the new thread. Object threads started externally to the object (i.e. not directly from an expression with the background operator within a method) will not prolong the scope of the object.\n\nIf an object with running threads is explicitly deleted, and this case is not handled in the object's destructor() method (by ensuring that all other running threads terminate gracefully), exceptions will be thrown in other threads at any attempt to access the already-deleted object.\n\nFor more information about threading, please see the following section Threading\n\nNote\n\nThe fact that object threads and closures can prolong object scope means, for example, that objects assigned to local variables can exist for longer than the scope of their host variable if they have one or more methods running in other threads or if closures created from within the object still exist at the time the local variable goes out of scope.\n\n2.22.9. Copying Objects\n\nTo explicitly generate a copy of an object, the copy() constructor must be called. This is a special method that exists implicitly for every class even if it is not explicitly defined (like constructor() and destructor() methods). The implicit behavior of the copy() constructor is to create a new object with new members that are copies of the original members (except objects are once again referenced). Then, if any copy() method exists, it will be executed in the new object, passing a reference to the old object as the first paramter.\n\nNote\n\nIn a class hierarchy copy() methods are called in the same order as constructor() methods.\n\nNote\n\nNot all built-in classes can be copied. Classes not supporting copying will throw an exception when the copy() methods are called. See the documentation for each class for more information.\n\n2.23. Threading\n\nA thread is an independent sequence of execution of Qore code within a Qore program or script. Each thread has a thread ID or TID.\n\nThe first thread of execution in a Qore program has TID 1. TID 0 is always reserved for the special signal handler thread.\n\nThe Qore language is designed to be thread-safe and Qore programs should not crash the Qore executable due to threading errors. Threading errors should only cause exceptions to be thrown or application errors to occur.\n\nThreading functionality in Qore is provided by the operating system's POSIX threads library.\n\n2.23.1. Creating and Terminating Threads\n\nNew threads are created with the background operator. This operator executes the expression given as an argument in a new thread and returns the TID of the new thread to the calling thread. This is most useful for calling user functions or object methods designed to run in a separate thread.\n\n2.23.2. Threading and Variables\n\nAll global variables are shared in Qore programs, while local variables (declared with my) are generally local to each thread (and thus accessed without any mutual-exclusion locking), regardless of location. This means that if a variable is declared with my at the top level, it will actually have global scope, but also each thread will have its own copy of the variable. In effect, declaring a top-level local variable with my actually creates a global thread-local variable.\n\nThe following code gives an example of declaring a global thread-local variable by using my at the top-level:\n\nNote that the second time the local variable is accessed in the background thread, it has no value.\n\nDue to the way Qore's local variables work, it is illegal to declare a top-level local variable after first block is parsed in the program; that is; if any call to parse() or Program::parse() is made in an existing program (where a top-level block already exists), and an attempt to declare a new top-level local variable is made, then a ILLEGAL-TOP-LEVEL-LOCAL-VARIABLE parse exception will be raised.\n\nAccess to global variables in qore is wrapped in mutual-exclusion locks to guarantee safe access to global variable data in a multithreaded context. Local variables are thread-local and therefore not locked, except when referenced in a closure expression, in which case the local variable's scope is extended to that of the closure's, and all accesses to the bound local variable are made within mutual-exclusion locks as these variables may be used in multithreaded contexts.\n\n2.23.3. Thread Synchronization and Inter-Thread Communication\n\nThe synchronized keyword can be used before function or class method definitions in order to guarantee that the function or method call will only be executed in one thread at a time. As in Java, this keyword can also be used safely with recursive functions and methods (internally a Gate-like object is used to guarantee thread-exclusivity and allow recursion).\n\nThe following classes are useful when developing multi-threaded Qore programs:\n\n2.23.4. Deadlocks\n\nQore supports deadlock detection in complex locking scenarios and will throw a THREAD-DEADLOCK exception rather than allow an operation to be performed that would cause a deadlock. Deadlock detection is implemented for internal locking (global variable and object access), synchronized methods and functions, etc, as well as for all Qore threading classes.\n\nQore can only detect deadlocks when a lock resource acquired by one thread is required by another who holds a lock that the first thread also needs. Other errors such as forgetting to unlock a global lock and trying to acquire that lock in another thread cannot be differentiated from valid use of threading primitives and will result in a process that never terminates. However, common threading errors such as trying to lock the same Mutex twice in the same thread without unlocking it between the two Mutex::lock() calls are caught in Qore and exceptions are thrown. Additionally, locks are tracked as thread resources, so if a thread terminates while holding a lock, an exception will be thrown and the lock will be automatically released.\n\n2.24. Exception Handling\n\nExceptions are errors that can only be handled using a try catch block. Any exception that is thrown in a try block will immediately cause execution of that thread to begin with the first statement of the catch block, regardless of the position of the program pointer of the running thread, even if nested function or object method calls have been made.\n\nExceptions can be thrown by the Qore system for a number of reasons, see the documentation for each function and object method for details.\n\nProgrammers can also throw exceptions explicitly by using the throw and rethrow statements.\n\nInformation about the exception, including the context in which the exception occurred, is saved in the exception hash, which can be retrieved by using a parameter variable in the catch block (for more information about try catch blocks, see try and catch statements).\n\nThe exception hash contains the following members:\n\nTable 2.96. Exception Hash Keys\n\nName\n\nType\n\nDescription\n\ntype\n\nstring\n\n\"System\" or \"User\" depending on exception type\n\nfile\n\nstring\n\nFile name of file where exception occurred\n\nline\n\ninteger\n\nLine number where exception occurred\n\ncallStack\n\nlist of hashes\n\nBacktrace information\n\nerr\n\nany\n\nThis key is populated with the value of the first expression of the throw statement. For system exceptions, this is a string giving the exception code.\n\ndesc\n\nany\n\nThis key is populated with the value of the second expression of the throw statement (if a list was thrown). For system exceptions, this is a string giving a text description of the error.\n\narg\n\nany\n\nThis key is populated with the value of the third expression of the throw statement (if a list was thrown). For system exceptions, this is populated for some exceptions where additional information is provided.\n\nSystem exceptions always throw 2 values, populating the \"err\" and \"desc\" keys of the exception hash, giving the exception string code and the exception description string, respectively, and occassionally, depending on the function, the \"arg\" key may be populated with supporting information. User exceptions have no restrictions, any values given in the throw statement will be mapped to exception keys as per the table above.\n\nSee the on_exit, on_success statement, and on_error statement for statements that allow for exception-safe and exception-dependent cleanup in Qore code.\n\n2.25. Signal Handling\n\nQore implements safe signal handling. Signals do not interrupt Qore threads, rather Qore uses a special signal handling thread with TID 0, dedicated to handling signals. The signal handling thread uses very few resources; it stays blocked (using no processor time and very little memory) until a signal with a Qore signal handler is raised; it then executes the handler and resumes waiting for signals.\n\nBecause the signal Qore's signal handling thread is not a normal thread, it does not affect num_threads() and does not appear in the list returned by thread_list().\n\nInternally, Qore masks (blocks) all signals in every thread except the signal handling thread. In the signal handling thread, all signals are unmasked, except those with Qore-language handlers, then an internal call to sigwait() is made to receive and process signals raised one at a time.\n\nSee Signal Constants for a list of signal constants and Signal Mapping Hash Constants for two hash constants that can be used to map signal names to numbers and vice-versa. Note that signal constants are system-dependent; not all signals will be available in all systems; in case of doubt, see your system documentation for information on which signals are available.\n\nThe above functions are atomic, meaning that when they return to the caller, the signal handling thread has already acknowledged the changes.\n\nIt is not possible to set signal masks per thread; all signals are delivered to the signal handling thread. Signals not handled with a Qore signal handler are handled with their default action. It is not possible to catch SIGPIPE. SIGPIPE is always ignored in Qore.\n\nSome issues to be aware of in signal handlers:\n\nThread-local storage is not persistent in signal handlers; it is deleted after every signal handler is run.\n\nA signal handler that does not terminate will block the execution of further signal handlers and will block signal handling changes (such as updating the signal mask), resulting in a Qore process that must be killed manually. Because all Qore signal handling code is executed serially in a single thread, Qore signal handlers should execute and return quickly to give time to execute other handlers.\n\nSignal handlers cannot call fork(); any attempt to call fork() in a signal handler will result in an an exception.\n\nfork() (called externally to a signal handler) is handled as follows: the signal handling thread is terminated, fork() is executed, all signals are masked in the primary thread in the new process, then the signal handling thread is resumed in both processes. No signals can be received or handled while the signal handling thread is terminated. After the fork(), the new process will have exactly the same signal handlers and signal masks as the parent process.\n\nUnhandled exceptions in signal handlers will simply be displayed on stderr as an unhandled exception and will have no other effect on Qore or Qore code (in particular, unhandled exceptions will not cause the signal handling thread to terminate).\n\nIf a signal handler executes the thread_exit statement, execution of the signal handler will terminate immediately, but the signal handling thread will not be stopped. Execution of further signal handlers (including that for the same signal being handled when thread_exit is executed) will not be affected.\n\n2.26. Event Handling\n\nQore supports a simple event-handling mechanism to provide notification and details of socket and network events in higher-level classes. Classes currently supporting events are the Socket, HTTPClient, FtpClient, and File classes.\n\nSee Event Constants for a list\nof all event constants; details about each event are documented in the\nfollowing sections.\n\nEvent information is placed on the event queue (which must be a Queue object) in the form of a hash. Each event has at least the following keys:\n\nTable 2.99. Event Hash Common Keys\n\nKey\n\nValue\n\nevent\n\nThis key holds the event code; see information for individual events in the following sections\n\nA hash of all headers received in the message, plus the following headers giving additional information about the message: http_version giving the HTTP protocol version in the message, status_code giving the HTTP status code if the message is a response, status_message giving any HTTP status message if the message is a response, method giving the HTTP method if the message is a request, path providing the path in request messages.\n\n2.26.15. EVENT_HTTP_FOOTERS_RECEIVED\n\nEvent\n\nEVENT_HTTP_FOOTERS_RECEIVED\n\nSource\n\nSOURCE_HTTPCLIENT\n\nDescription\n\nThis event is raised immediately after HTTP footers are received after receiving chunked data. The event hash contains the following keys:\n\nChapter 3. Function Library\n\nThis section describes the built-in subroutines in the Qore language making up the system function library. Following is a list of function categories, and below there is an alphabetically-ordered list of all Qore built-in functions.\n\nEach builtin function or method has flags that describe its properties. The following table provides the key to the flags as given in the function and method lists.\n\nTable 3.2. Code Flags\n\nAbbr\n\nDescription\n\n).\n\nRT_), unless PO_REQUIRE_TYPES or PO_STRICT_ARGS is set. If PO_REQUIRE_TYPES or PO_STRICT_ARGS is set, then these variants are inaccessible; resolving to a variant with this flag set at parse time or run time causes an exception to be thrown. These variants are included for backwards-compatibility with qore prior to version 0.8.0 for functions that would ignore type errors in arguments.\n\nCONST\n\nThis flag indicates that the function or method has no side effects and does not throw any exceptions (see also RET_VALUE_ONLY).\n\nRET_VALUE_ONLY\n\nThis flag indicates that the function or method has no side effects but could throw an exception (see also CONST).\n\nDEPRECATED\n\nCode with this flag is deprecated and may be removed in a future version of Qore; if a variant with this flag is resolved at parse time, a deprecated warning is raised (assuming this warning is enabled).\n\nReturns an integer giving the duration in microseconds as described by the argument; if the argument is a relative date, then it is converted to microseconds, if it is absolute, then a number of microseconds between the current time and the time given is returned.\n\nReturns an integer giving the duration in milliseconds as described by the argument; if the argument is a relative date, then it is converted to milliseconds, if it is absolute, then a number of milliseconds between the current time and the time given is returned.\n\nReturns an integer giving the duration in seconds as described by the argument; if the argument is a relative date, then it is converted to seconds, if it is absolute, then a number of seconds between the current time and the time given is returned.\n\nReturns True if the given key exists in the hash or object (does not necessarily have to have a value assigned); exceptions are only raised if string encoding errors are encountered or in case of object access errors.\n\nReturns a hash of information about the file corresponding to the pathname argument; does not follow symbolic links (returns information about symbolic links). Returns NOTHING if the stat() call fails.\n\nReturns a date value in localtime; if an argument is passed, then the date is created based on the value of the argument passed, for an integer, it is the number of seconds after Jan 1, 1970, 00:00:00Z (UTC).\n\n3.1.13. format_number()\n\nThe format_string has the following format: <thousands_separator>[<decimal_separator><decimals>], where thousands_separator and decimal_separator are single ASCII characters defining the thousands and decimal separator characters respectively, and decimals is a single digit defining how may decimals should appear after the decimal point.\n\n3.2. Output Functions\n\nThe functions in this section operate only on stdout. For generic file I/O please see the File class.\n\n3.2.1. f_printf()\n\nSynopsis\n\nOutputs a formatted string to standard output, respecting field widths in the formatting string. See String Formatting for information on the formatting string, and see printf() for a similar function that does not enforce field widths.\n\nReturns the string output (see String Formatting for information on the format string)\n\nThis function does not throw any exceptions.\n\n3.2.2. f_sprintf()\n\nSynopsis\n\nReturns a formatted string without doing any output, respecting field widths. See String Formatting for information on the formatting string, and see sprintf() for a similar function that does not enforce field widths.\n\n3.2.5. printf()\n\nSynopsis\n\nOutputs the string passed to standard output, using the first argument as a formatting string. See f_printf() for a similar function that enforces field widths, and print for an simple output function that does not accept a formatting string. See String Formatting for information on the formatting string.\n\nSee String Formatting for information on the format string. This is the \"normal\" (non-field) printf() version, so any field widths are considered as soft limits, and6. sprintf()\n\nSynopsis\n\nReturns a formatted string without enforcing hard field limits. See f_sprintf() for a similar function that enforces field widths, and see String Formatting for information on the formatting string.\n\nSee String Formatting for information on the format string. Field widths are considered soft limits (arguments are allowed to exceed their field widths). Only when an argument is less than the field width will it be padded to the field width specified.\n\nThis function does not throw any exceptions.\n\n3.2.7. vprintf()\n\nSynopsis\n\nOutputs a formatted string based on a variable number of arguments given in a list after the format string and returns the string printed. See String Formatting for information on the formatting string.\n\nSee String Formatting for information on the format string. Arguments to the formatting string are supplied in the optional second argument as a list. Field widths are considered as soft limits;8. vsprintf()\n\nSynopsis\n\nFormats a string based on two arguments: a format string and a list. Does not enforce hard field widths. Returns this formatted string. See String Formatting for information on the formatting string.\n\nSee String Formatting for information on the format string. Arguments to the formatting string are supplied in the optional second argument as a list. Field widths are considered soft limits (arguments are allowed to exceed their field widths). Only when an argument is less than the field width will it be padded to the field width specified. Returns the formatted string.\n\nThis function does not throw any exceptions.\n\n3.3. Date and Time Functions\n\n3.3.1. clock_getmicros()\n\nSynopsis\n\nReturns an integer representing the system time in microseconds (1/1000000 second intervals) since Jan 1, 1970 00:00:00Z.\n\nThe name of the time zone for the given time (ex: \"CEST\" for Central European Summer Time for a time during summer time or \"CET\" for Central European Time for the same time zone while daylight savings time is not active).\n\n3.3.5. date_ms()\n\nSynopsis\n\nConverts an integer argument representing the offset in milliseconds from January 1, 1970 in the local time zone to a date in the local time zone.\n\nReturns an integer value representing the days value of the date passed (can be either a relative or absolute date).\n\n3.3.10. get_duration_microseconds()\n\nSynopsis\n\nReturns an integer value representing the the number of microseconds microseconds11. get_duration_milliseconds()\n\nSynopsis\n\nReturns an integer value representing the the number of milliseconds milliseconds12. get_duration_seconds()\n\nSynopsis\n\nReturns an integer value representing the the number of seconds seconds13. get_epoch_seconds()\n\nSynopsis\n\nReturns the number of seconds of the date and time in local time passed since Jan 1, 1970, 00:00:00 Z (UTC). Negative values are returned for dates before the epoch.\n\nReturns an integer value representing the years value of the date passed (can be either a relative or absolute date).\n\n3.3.22. getDateFromISOWeek()\n\nSynopsis\n\nRetuns an absolute date value for the ISO-8601 calendar week information passed (year, week number, optional: weekday, where 1=Monday, 7=Sunday) in the current time zone. If the weekday is omitted, Monday (1) is assumed; throws an exception if the arguments are invalid.\n\nRetuns an absolute date value in the local time zone for the ISO-8601 calendar week information passed (year, week number, optional: week day). If the week day is passed, it must be in the range 1 (Monday) - 7 (Sunday) inclusive.\n\nTable 3.63. Exceptions Thrown by getDateFromISOWeek()\n\nerr\n\ndesc\n\nISO-8601-INVALID-WEEK\n\nThe week number is not valid for the given year.\n\nISO-8601-INVALID-DAY\n\nThe day number is not between 1 (Monday) and 7 (Sunday) inclusive.\n\n3.3.23. getDayOfWeek()\n\nSynopsis\n\nReturns an integer representing the day of the week for the absolute date passed (0=Sunday, 6=Saturday)\n\nReturns an integer representing the ISO-8601 day of the week for the absolute date passed (1=Monday, 7=Sunday)\n\n3.3.26. getISOWeekHash()\n\nSynopsis\n\nReturns a hash representing the ISO-8601 calendar week information for the absolute date passed (hash keys: year, week, day). Note that the ISO-8601 year does not always correspond with the calendar year at the end and the begin\nning of every year (for example 2006-01-01 is ISO-8601 calendar week format is: year=2005, week=52, day=7)\n\n3.3.27. getISOWeekString()\n\nSynopsis\n\nReturns a string representing the ISO-8601 calendar week information for the absolute date passed (ex: 2006-01-01 = \"2005-W52-7\"). Note that the ISO-8601 year does not always correspond with the calendar year at the end and the beginning of every year (for example 2006-01-01 is ISO-8601 calendar week format is: year=2005, week=52, day=7)\n\n3.3.28. gmtime()\n\nSynopsis\n\nReturns the date and time in GMT; if no argument is passed, then the current UTC time with a resolution of a second is returned. Otherwise the single argument must be an integer giving the number of seconds since Jan 1, 1970, 00:00:00, or an absolute date/time value that will be returned as the sme time in UTC (GMT). GMT is returned. See now_utc() for a similar function that returns the current UTC time with resolution to the microsecond.\n\n3.3.32. localtime()\n\nSynopsis\n\nReturns the date and time in local time corresponding to the integer argument passed, which must be the number of seconds since Jan 1, 1970, 00:00:00 Z (UTC). If no argument is passed, then the current local date and time are returned. the local time zone is returned. See now_us() for a similar function that returns the current local time with resolution to the microsecond.\n\nReturns a relative date/time value corresponding to the number of months passed as an argument, to be used in date arithmetic.\n\nThis function does not throw any exceptions.\n\n3.3.38. now()\n\nSynopsis\n\nReturns the current date and time in the local time zone with resolution to the second.\n\nFor similar functions returning the current date and time in the local time zone with millisecond and microsecond resolution, see now_ms() and now_us(). Note that there is no performance penalty for using now_ms() and now_us() versus this function, this function and now_ms() are kept for backwards-compatibility.\n\nReturns the current date and time in the local time zone with resolution to the second.\n\nThis function does not throw any exceptions.\n\n3.3.39. now_ms()\n\nSynopsis\n\nReturns the current date and time in the local time zone with resolution to the millisecond.\n\nFor a similar function returning the current date and time in the local time zone with coarser granularity, when resolution only to the second is needed, see now(); for a similar function returning the current date and time with a resolution to the microsecond, see now_us(). Note that there is no performance penalty for using now_ms() and now_us() versus now(), now() and now_ms() are kept for backwards-compatibility.\n\nReturns the current date and time in the local time zone with resolution to the millisecond.\n\nThis function does not throw any exceptions.\n\n3.3.40. now_us()\n\nSynopsis\n\nReturns the current date and time in the local time zone with resolution to the microsecond.\n\nFor similar functions returning the current date and time with coarser granularity, see now() and now_ms(). Note that there is no performance impact for using now_us() versus now() and now_ms(); now() and now_ms() are kept for backwards-compatibility.\n\nReturns a relative date/time value corresponding to the number of years passed as an argument, to be used in date arithmetic.\n\nThis function does not throw any exceptions.\n\n3.4. Qore Type Functions\n\n3.4.1. binary()\n\nSynopsis\n\nReturns a binary data type of the string passed; data types other than string will first be converted to a string and then returned as binary data.\n\nThis function is useful if, for some reason, a string type actually contains binary data; using this function will ensure that all data in the string (even if it contains embedded nulls) is maintained in the binary object (Qore strings must normally be terminated by a single null, so some Qore string operations do not work on binary data with embedded nulls).\n\n3.4.2. binary_to_string()\n\nSynopsis\n\nReturns a string created from the binary data passed, taking an optional second argument giving the string encoding. If no second argument is passed then the default encoding is assumed.\n\nNo checking is performed for embedded null characters or for character encoding violations; the data is simply copied from the binary value to the string (with any embedded nulls, if present), and the string is tagged with the given encoding or with the default encoding if no second argument is passed. See also string() and binary().\n\nAs of Qore 0.8.0, converting a date from a string is much more flexible; formats such as the following are now accepted (note that in the following examples, if the time zone/UTC offset is not explicitly specified, the local time zone is assumed):\n\n3.4.6. hash()\n\nSynopsis\n\nConverts an object or a list to a hash; for any other argument, returns an empty hash (ignores any other arguments passed).\n\nFor an object argument, the hash returned is equal to the object members (excluding private members if called outside the class); a list is converted to a hash by taking even numbered list elements (starting with 0) and converting them to strings for the hash keys, and the odd numbered elements following the keys as the key value.\n\nReturns a hash by taking the first list as a list of keys, and the second list as a list of values. If the two lists are of unequal sizes, then the keys list takes precedence (if the values list is longer, excess values are ignored).\n\nIf the substring is found, returns the byte position of the substring within the string (starting at 0). If not found, returns -1. If an offset position is given, the search starts at the offset position. All values are byte positions, not character positions, which may differ for multi-byte character encodings.\n\nThis function does not throw any exceptions.\n\n3.6.2. brindex()\n\nSynopsis\n\nReturns the starting byte position of a string in another, starting from the end of the string (-1 if not found) and takes an optional starting position.\n\nReturns the starting byte position of a string in another, starting from the end of the string, or from position if given. If $offset is given, then the reverse search starts at that character position (searches always go from the end of the string toward the beginning). Returns -1 if the substring cannot be found. All values are byte positions, not character positions, which may differ for multi-byte character encodings.\n\nThis function does not throw any exceptions.\n\n3.6.3. chomp()\n\nSynopsis\n\nRemoves the trailing end-of-line indicator ('\\n' or '\\r\\n') from a string and returns the new string (also see the chomp operator). If no EOL indicator is present in the string, this function simply returns the original string unmodified. This function accepts variable references, in which case it will modify the string in place and also return the modified string.\n\nIf the first argument is a variable reference and points to a string, then the string is modified in place and the new string is also returned. Otherwise if the reference is any other type, no action is taken and no value is returned.\n\nThis function does not throw any exceptions.\n\n3.6.4. chr()\n\nSynopsis\n\nReturns a string containing a single ASCII character represented by the numeric value passed.\n\n3.6.7. force_encoding()\n\nSynopsis\n\nReturns the first string argument tagged with the character encoding given as the second argument; does not actually change the string data; use only in the case that a string is tagged with the wrong encoding, for example, if a string from a File object has a different encoding than the File object.\n\nIf the substring is found, returns the position of the substring within the string (starting at 0). If not found, returns -1. If an offset position is given, the search starts at the offset position. All values are character positions, not byte positions, which may differ for multi-byte character encodings.\n\nReturns any patterns in parentheses in the second argument when applied tot he first argument as a list. If no matches are found, then NOTHING is returned. The third argument can be used to set regex options; for valid options, see Regex Constants\n\nReturns the result of applying the second argument as a pattern to the first argument, with the 3rd argument as the replacement string. The fourth argument can be used to set regex options; for valid options, see Regex Constants\n\nReturns the starting character position of a string in another, starting from the end of the string, or from the third argument giving the character (not byte) position if given (negative values are offsets from the end of the string, -1 gives the last character of the string). If the thirs argument is given, then the reverse search starts at that character position (searches always go from the end of the string toward the beginning). Returns -1 if the substring cannot be found. All values are character positions, not byte positions, which may differ for multi-byte character encodings.\n\nThis function does not throw any exceptions.\n\n3.6.18. split()\n\nSynopsis\n\nSplits a string into a list of components based on a separator string. If the separator string is not found in the string to split, then a list with only one element containing the entire string argument is returned.\n\nOnly the version that takes the third argument as a quote string can throw exceptions.\n\nReturns a list of each component of a string separated by a separator string, with the separator removed; the separator pattern will not be included in the elements of the list returned unless the third argument is True.\n\nReturns a list of each component of a string separated by a separator string, with the separator removed; the quote character can appear as the first part of a field, in which case it is assumed to designate the entire field. If instances of the quote character are found in the field preceded by a backquote character (\\), then these quote characters are ignored. Note that this variant of the function can throw exceptions if the quote character is found and not terminated, or if text other than the separator string follows an end quote. This is the only variant of split() that can throw exceptions.\n\nReturns a list of each component of thebinary object separated by the bytes identified by $separator, with the separator removed.\n\nTable 3.124. Exceptions Thrown by split()\n\nerr\n\ndesc\n\nSPLIT-ERROR\n\nEnd quote character not found or excess text found following separator string.\n\n3.6.19. strlen()\n\nSynopsis\n\nReturns the length in bytes of the string argument. Note that the byte length may differ from the character length with multi-byte character encodings. For the character length of a string, see length().\n\nReturns the $multiplicator times copied $original.\nIf there $offset given the offset length is removed from end of the new string.\n\nTable 3.127. Exceptions Thrown by strmul()\n\nerr\n\ndesc\n\nSTRMUL-ERROR\n\nOffset argument has to be 0 or greater than 0.\n\nSTRMUL-ERROR\n\nMultiple argument has to be greater than 0.\n\n3.6.21. substr()\n\nSynopsis\n\nReturns a portion of a string starting from an integer offset, with an optional length. Arguments can be negative, giving offsets from the end of the string. All offsets are character positions, not byte positions.\n\nReturns the substring according to the arguments. If $offset is negative, it designates an offset from the end of the string. If $len is not present, all characters from the offset will be copied to the substring. If it is negative, the rest of the string without the trailing number characters given by the negative argument will be copied to the substring.\n\n3.6.24. trim()\n\nSynopsis\n\nRemoves characters from the start and end of a string and returns the new string (also see the trim operator). This function accepts variable references, in which case it will modify the string in place and also return the modified string.\n\nBy default (if the second argument is omitted or passed as an empty string) the following whitespace characters are removed: ' ', '\\n', '\\r', '\\t', '\\v' (vertical tab, ASCII 11), and '\\0' (null character). To trim other characters, pass a string as the second argument specifying the characters to be removed.\n\nIf the reference points to a string, the string is trimmed in place and the result is also returned; if the second argument is given then it defines the characters to be removed, otherwise whitespace is removed. If the reference is not a string then no value is returned."}
{"text": "C# Books\n\n20 C# Tutorial Lessons ( 2032 ) C# (pronounced \"c sharp\") is a computer language used to create applications that allow a person to interact with the machine. This site provides lessons and topics on how to use that language.\n\nHow C Programming Works by Marshall Brain ( 1740 ) This article,is a walk through the entire C language and show how to become a C programmer, starting at the beginning. Complete, thoroughly-illustrated C programming language tutorial with many examples to assist in becoming a C programmer.\n\n6 Free E-Books on C and C++ ( 1101 ) This week Microsoft announced that it's working on making C++ better suited for massive parallelism. This follows Google's recent benchmarks that showed that C++ is still faster than most programming languages (at least if you know how to optimize it correctly). Also, Google has been working on incorporating C and C++ support into Chrome.\nIn other words, C++ is a strong and important language, and will continue to be even in a browser dominated landscape. Here are a few resources for leaning C++, and its predecessor C.\n\nLearn C/C++ Today - list of tutorials and books ( 957 ) This is a list of a few C and C++ language tutorials available to a user. This list will include interactive tutorials, public-domain code collections, books etc. I've developed this FAQ purely as a volunteer effort as a service to the Internet community. Although every effort has been made to insure that all the information here is as accurate as possible, no guarantee is implied or intended\n\nC Programming Notes by Steve Summit ( 954 ) These notes are part of the UW Experimental College course on Introductory C Programming. They are based on notes prepared (beginning in Spring, 1995) to supplement the book The C Programming Language, by Brian Kernighan and Dennis Ritchie, or K&R as the book and its authors are affectionately known. (The second edition was published in 1988 by Prentice-Hall, ISBN 0-13-110362-8.) These notes are now (as of Winter, 1995-6) intended to be stand-alone, although the sections are still cross-referenced to those of K&R, for the reader who wants to pursue a more in-depth exposition.\n\nThe Standard Template Library Tutorial (C++) ( 954 ) \"The Standard Template Library (STL) is a C++ programming library that has been developed by Alexander Stepanov and Meng Lee at the Hewlett Packard laboratories in Palo Alto, California. It was designed to enable a C++ programmer to do generic programming and is based on the extensive use of templates - also called parametrized types. This paper tries to give a comprehensive and complete survey on the STL programming paradigm and shall serve as step-by-step tutorial for the STL newcomer, who has fundamental knowledge in C++ and the object-oriented paradigm.\"\n\nTutorials from Allsyntax.com - C Tutorial ( 892 ) C is an extremely powerful programming language. C is a language written by programmers for programmers, it became the most popular programming language ever in 1978."}
{"text": "First time i heard about this Squirrel-Host.com and about its service. I think it is one of good web hosting service provider company. I am also interested to use this web host so i will contact you when i need it.\n\nAs the worlds increasing use of computer technology in the digital era continues apace, it becomes ever more vital for engineers and developers to have a better understanding of the technical processes at work in this ubiquitous and dynamic state of affairs. This is especially true for programmers who?ll be building the future software we?ll be using in our devices and machines in years to come which we?ve already taken advantage of so much and come to rely on in recent years. Though C++ has only been around for about half the time that computer programming itself has been in existence (25 years compared to 50), in this time, it?s arguably become the most important programming language for half a century. Its complexity is both to its advantage and disadvantage. On the one hand, virtually no other language is better placed to deal with the challenges and demands created by the need for ever more sophisticated software. On the other, it has an extremely rich feature set that can seem intimidating to some at first glance. In this series of tutorials, we?ll be looking at the language from the ground up and forming a better understanding of programming along the way. For readers who?ve never written a program before, I?ll state here and now that there?s nothing to fear. The tiger you?ve been afraid of all this time is nothing more than a pussy cat. You can get all the code for this tutorial from the ebizdynamix.com site Although C++ is an extremely powerful language (it?s capable of building just about any type of computer program) it?s also intuitive to use and once insight into it is gained will become a great ally in projects and challenges that come your way. Gaining such understanding isn?t difficult and I?ll guide you every step of the way to the conclusion where you?ll be building complex programs to be proud of. So let?s begin. What is a computer program anyway? Nothing more than a series of instructions supplied to a computer to perform a given task ? that?s what. When examined under the surface in greater detail, this statement encompasses a whole number of things. The first thing is the concept of an algorithm. What is an algorithm? More or less the same thing (a series of instructions etc) described in actual programming terms. To be absolutely accurate, an algorithm is a series of steps followed by a computer program ? and each step is an instruction ? which the program gives to the hardware (the machinery) that comprises the computer. Here?s an example of an algorithm. It works out how old someone is. 1.Get the current year 2.Get the person?s birth year 3.Subtract the number of years in the birth year from the current year 4.Output the result (the persons age) A very simple example, I think you?ll agree. But in this simple document lies in essence what an algorithm ?and a computer program are all about ? clear, detailed steps (sometimes dizzying in their complexity for large programs) providing instructions to a computer via a piece of software. Basically, a computer program is the expression of an algorithm. The algorithm is manifested in the program. Another useful point to bear in mind is that virtually any algorithm (especially [url=/]coach outlet store osage beach missouri[/url] if it?s a complicated one) can be written in almost any number of ways. But I digress, so let?s move on. As ever in life, things are simple ? but not that simple. If a programmer literally fed those instructions into her PC, at worst she?d get a rude message (something and something or other is undefined ? in other words I don?t know what you?re talking about) or at best (more likely) nothing would happen at all. You see, computers don?t (yet) understand human languages. In fact, they don?t understand very much at all (except one thing ? more about it later). Computer programming languages come in two varieties ? high level languages and low level languages. Most modern languages (like C++) are high level. High level languages are alpha numeric ? that is, they are made up of alphabetical and numerical characters (or letters and numbers to you non-geeks) in their syntax (or language structure) which makes them easier to read and understand. As mentioned earlier however, computers find what we intuitively understand completely perplexing. So we have to translate ? or rather a particular type of software does this for us. This software is called a compiler. When a computer program is written in a high level language like C++ before the computer can understand the programmer?s instructions, the instructions (or code) need to be compiled. The compilation of a program is a process which occurs in between the writing of it and its execution (when it runs as software in front of you on the screen). Compilers are computer programs, sometimes used separately but often built within the programmer?s IDE (Integrated Development Environment ? a computer program for writing computer programs) that perform this task. When a program is compiled it turns into something called machine code. The content of this code is simply a series of ones and zeroes and if it sounds familiar, you?re absolutely right because another name for machine code is binary code. Since the dawn of the age of modern computing, computers have understood instructions in this form that we all learned at school where a sequence of ones and zeroes indicates a value built from multiples of two increasing by the power of two with each digit to the left. The reason computers use this system is simplicity (computers are pretty simple at heart, bless) where each zero symbolises an ?off? and each 1 symbolises an ?on?. Taken as a whole, a complete sequence in binary code made from a succession of on-off switches form a set of instructions that equate to ?yes? or ?no? or ?do? or ?don?t?. Should I make the tea? Yes. Shall I jump off this cliff? No. Can I give you a massage? Do. Do I crash the car? Don?t! And so on? So basically that?s the language of computers (plus all the electronic machines and devices you use every day) and it?s pretty dull (see how long you can stare at a long stream of binary code before falling asleep ? or getting dizzy). But the binary system has informed everything in computing from circuit design to the construction of the multi-core processor to the distribution of global networks ? [url=/]coach outlet smithfield nc[/url] so it?s pretty important. As mentioned, there are high level languages and low level languages. Use of low level languages isn?t as common any more as the use of high level ones. One famous low level language is Assembly. It and other development systems like it are called low level languages because they communicate more directly with hardware. Assembly resembles machine code in its structure and because it?s understandable and more native to the machinery of a PC it works faster. This is useful for operations where speed is critical ? such as the execution of instructions by a Graphical Processing Unit (GPU) or code in a game that computes a lot of information very fast. Going into further detail on the alpha numeric nature of high level languages ? the content of C++ is actually made up of familiar key words in English ? which translate to instructions that will become recognisable to the machine when the code is compiled. These key words define entities with generic names like function, variable and expression. In many languages (C++ included) for clarity, the unique names of examples of these entities are preceded by their generic names ? e.g. function: Get Coffee. Such key words are known as reserved words, meaning they can?t be used in user defined examples because they?re already built into the language itself. User defined basically means an example of an entity or object created by the programmer. So for example, a programmer couldn?t create a function called Function. They would receive an error message telling them that the word ?function? is a reserved coach outlet stores online word. Let?s examine what these objects actually are, starting with variables. A variable is essentially a container for information that changes ? hence the name, variable ? derived from variation ? a change. Variables are categorized into different types called data types. Data type is simply a programming term for ?different type of information?. There are a considerable number of data types in C++ (which we?ll encounter in future tutorials) but the ones most commonly used are integer (for numeric information) and string (for text based information). As it happens, C++ is particularly good with numbers and as one might expect, there are many variations for integer variables so to speak. Here are some examples. This is a C++ string variable: char Name = Theodore; The ?char? word is a keyword in C++ for the ?Character? data type. ?Character? is used for strings or pieces of text data. In C++ every variable must be defined first with a data type. The word ?Name? is simply a string variable I?ve created and its value is my name. The semi-colon on the end of the line is a character you need to include at the end of each line of code ?or statement - in C++ (and other languages). It indicates that the particular instruction is complete and the computer can move to the next line. This is an integer variable: int currentage = 44; The ?int? keyword is short for ?integer?. Integers are used for numeric data. I?ve named this example of an integer ?currentage? and it?s value is my age which is 44.<br handbags and wallets coach outlet handbags /> We?ll be looking at variables in greater detail in tutorial 3 in this series. Next up are expressions. Expressions are statements which return a value. Here?s an example of an expression. currentyear ? birthyear = currentage; currentyear and birthyear are both integers containing number values providing information on the number of years in the current year and the number of years in someone?s birth year. When birthyear uses the mathematical operator (the minus) between it and currentyear to subtract from currentyear, the result is placed in another integer, the currentage integer. All expressions behave in the same way. An expression is basically a calculation and once performed generates a result or in programmer speak, ?returns a value?. We?ll be looking at expressions and statements (tutorial 4) and mathematical operators (tutorial 17) in greater detail shortly. The next step from writing statements is to write a function. A function is simply a collection of related statements that focus on a particular task. Here?s an example: #include \"stdafx.h\" #include using namespace std; int FindTime (int distance, int speed) { int time; time = distance/speed; return (time); } int main () { int distance = 0; int speed = 0; int time = 0; cout > distance; cout > speed; cout using namespace std; int main(void) { int birthyear = 0; int currentyear = 0; int currentage = 0; //Get the person?s birth year cout > birthyear; //Get the current year cout > currentyear; //Subtract the number of years in the person?s birth year from the number of //years in the current year currentage = currentyear - birthyear; cout << \"you are currently: \" << currentage << \"years old\"; return 0; } And there we are. As you?ve seen from the code above, programming isn?t rocket science (though it?s a very useful tool for the maths and physics involved in rocket science). All the examples here (and future tutorials) have been written using Microsoft Visual C++ Express Edition which you can download free from Microsoft and all are console based programs ? that is, they concentrate purely on input and output and run on the command line in MS DOS. Don?t forget when it comes to running these apps, the way to ensure you don?t get that effect when the DOS window disappears suddenly is to first build the program using the menu option then this keyboard shortcut ? CTRL+F5. Also remember, anything which is still hazy will be explained in more detail as we go along. In the next set of tutorials, we?ll be looking in more detail coach diaper bag outlet store online at statements, data types, variables and expressions. Hope to see you there and please coach outlet el paso tx visit ebizdynamix.com for other information on web and software programming.\n\nBuffalo who? That's right. After going to, and losing, four straight Super Bowls, the Bills have been like a light bulb that keeps flickering as its dying off. Finally, that light went off in Bills camp. In 2001, they won three games. In 2002, they looked like they turned the corner when they won 8. In 2003, it was back to the same old struggling Bills as they won 6. In 2004, coach pink bag they again looked interesting when they went 9-7. Last season, they struggled to win 5 games. Anyone else see a pattern here? If the pattern holds up, the Bills are going to win many games this season. Could they be 10-6? History watchers will not be so quick as to write off the Buffalo Bills this season. Their schedule, however, says we should probably brace for a 5-6 win season out of the Bills. During the offseason, they lost some key players, perhaps. The potentially key losses were Justin Bannan to Baltimore, Lawyer Milloy to Atlanta, coach bag purse Mike Williams to Jacksonville, Sam Adams to the Bengals, Mark Campbell to the Saints, Eric Moulds to Houston and Trey Teague to the rival Jets. However, it wasn't all losses. They picked up many players coach signature steen brooke handbag this offseason as well. Among the new Buffalo Bills players were Craig Nall, Andre Davis, Robert Royal, Larry Tripplett, Matt Bowen, Melvin Fowler, Matt Morgan, Kiwaukee Thomas, James Bethea, Aaron Gibson, Peerless Price, Tutan Reyes and Anthony Thomas. Let's take a look at their moderate schedule this season. Week 1: @ New England Patriots Week 2: @ Miami Dolphins Week 3: New York Jets Week 4: Minnesota Vikings Week 5: @ Chicago Bears Week 6: @ Detroit Lions Week 7: New England Patriots Week 8: Bye Week 9: Green Bay Packers Week 10: @ Indianapolis Colts Week 11: @ Houston replica coach white handbag Texans Week coach file crossbody bag 12: Jacksonville Jaguars Week 13: San Diego Chargers Week 14: @ New York Jets Week 15: Miami Dolphins Week 16: Tennessee Titans Week 17: @ Baltimore Ravens That's a pretty tough schedule for a team that was 5-11 last season. You can pick out about 5-6 games on their schedule that are against teams right on par with the Bills. The carly coach bag other 10-11 are against teams that should be at least slightly above their level. Four of their eight road games are against teams that should be good to very good this season?Bears, Dolphins, Patriots and Colts."}
{"text": "Descriptions du produitQuatri\u00e8me de couverture3.0 \u00e9toiles sur 5The 4th edition is better, this one will soon be forgotten.26 f\u00e9vrier 2011\n\nPar Zenja Solaja - Publi\u00e9 sur Amazon.com\n\nFormat:Broch\u00e9|Achat authentifi\u00e9 par Amazon\n\nI've learned OpenGL thanks to Richards books (the 2nd and 4th editions of the SuperBible), and today work as a professional 3D game engine programmer. Those books are very educational, and allow a newcomer to learn OpenGL faster than any other OpenGL programming book I've found. The 5th edition focuses on the new \"core\" OpenGL profile, which has deprecated the legacy \"fixed function\" API. The authors admit that they had a difficult task when rewriting the SuperBible - how do they lower the barrier of entry to a new API which is not beginner friendly? Their solution was to create a new OpenGL toolkit which simplifies access to core OpenGL. And this is the biggest issue with the 5th edition of the SuperBible - the book explains their custom toolkit, and not OpenGL itself. What a disappointment for someone wanting to learn modern OpenGL.\n\nMy recommendation for new comers to OpenGL and 3D programming: get the 4th edition of the SuperBible, and then grab the OpenGL ES 2.0 Programming Guide to learn about the \"core\" OpenGL profile. With OpenGL ES 2.0 (embedded systems), the Khronnos group have removed all the legacy accessors from OpenGL, and left only the bare minimal needed to create 3D applications using programmable shaders. The Khronnos group did such a good job with ES 2.0, that they decided to remove all legacy code from core OpenGL as well, and today (with the exception of geometry shaders), OpenGL ES2.0 and OpenGL 4.1 are essentially the same API. The ES2.0 programming guide also explains modern 3D graphics hardware design better than any other book I've discovered, and more importantly, it not only explains how to access the hardware using the new API, it explains WHY the API evolved to what it is today. Why is there a limit to number of attributes? What are the benefits of packing attributes? How to pack them? etc. All of this is covered in the ES 2.0 book. Richard Wright's SuperBible ignores them. The WHY is more important than the HOW.\n\nHopefully, Richard will correct his mistake with the 5th edition, and a rewritten 6th edition will be something magnificant.\n\n69 internautes sur 74 ont trouv\u00e9 ce commentaire utile\n\n5.0 \u00e9toiles sur 5Excellent tutorial and reference7 septembre 2010\n\nPar Firas Assaad - Publi\u00e9 sur Amazon.com\n\nFormat:Broch\u00e9|Achat authentifi\u00e9 par Amazon\n\nFor years, books in the OpenGL SuperBible series were recommended for anyone looking for an excellent tutorial and thorough coverage of OpenGL features. But up to OpenGL 2.0, programming in OpenGL was done through the fixed function pipeline, and the OpenGL SuperBible books were the best place to start learning that. With GLSL introduced in OpenGL 2.0, OpenGL supported both the traditional fixed function pipeline and a new programmable pipeline where you can write your own shader programs and have much more control over the graphic card. OpenGL 2.0 tried to have the best of both worlds: if you liked the old OpenGL then you can use it, and if you wanted to experiment with modern OpenGL you can use that as well. That resulted in a huge API with conflicting design goals. This conflict can be seen in the OpenGL(R) SuperBible: Comprehensive Tutorial and Reference (4th Edition), reflecting the version of OpenGL it covered. The tutorial part focused exclusively on fixed-function OpenGL. That part was excellent and I still use it as a reference when I'm programming for old mobile devices that supported only OpenGL ES 1.0. The book also introduced shaders among other advanced topics in the second part. This introduction didn't really follow from what you learned in the tutorial part. It was a group of separate articles that were written in a different style and tone. I don't doubt you can easily pick it up and learn writing shaders from these chapters, but they didn't really go about teaching you how to write shaders, instead focusing more on showing you cool examples of stuff you can do with shaders. Given that a lot of what you do with shaders requires a mathematical background -- which the 4th edition got around by introducing only what's necessary, someone learning OpenGL without such a background would get confused when suddenly the later chapters are talking about cosines and other concepts.\n\nEventually, the OpenGL API evolved and the fixed function commands were all deprecated and later moved to a different profile. The new OpenGL was much leaner and only revolves about creating shaders and writing to buffers. The problem is that it's easy to teach the old OpenGL, you don't need to know the underlying details of how light is calculated or how transformations are performed to write a program in fixed function OpenGL. You can get away without teaching anything but basic mathematics, and you could still come up with strong examples. With modern OpenGL, things are different. There is no built in lighting equation, no matrix stack, no functions to rotate an object or set a camera. You have to write all of that yourself. A book teaching modern OpenGL, or the core profile of OpenGL 3.3, needs to teach you not only OpenGL, but also the fundamentals of 3D graphics. Such a book would be quite big, advanced for many users, and wouldn't be able to cover all the features of OpenGL. How can you create a simple and thorough book about modern OpenGL? If you can assume that the reader knows the fixed function pipeline, then it's easier to teach them the new features. But what if you can't assume that?\n\nThe authors of OpenGL SuperBible 5 found a way around, and it works quite well. The authors built a library that allows people to start writing impressive programs right away. They don't have to worry about setting up vertex buffer objects, writing shaders, or any of that. This way you can start teaching by giving practical examples, and you slowly teach OpenGL by introducing the concepts behind that library. Make no mistake, this book doesn't teach you to use that specific library, it teaches you OpenGL. Anything you do with the library you will learn to do yourself in OpenGL in later chapters. Shaders are introduced early and follow wonderfully from previous discussion. Many advanced features are covered in detail and you learn how to write shaders, and not just how to copy and paste example code. The result is fantastic; the tutorial part is by far the best introduction to modern OpenGL you'll find. You still don't need a mathematical background, and the 3D math chapter does a good job of introducing all the ingredients you will need to write programs.\n\nThe book is divided into 3 parts. The first part is an introduction and tutorial, the second part is about advanced topics such as buffers and dealing with geometry, and the final part is about platform specific issues including a coverage of OpenGL ES for mobile devices. The tutorial part is great and if the book constituted only of this part, it'd definitely be worth buying. The advanced topic coverage is really variable. Some topics are covered in great detail and with useful examples (I really liked the introduction to the geometry shader for example), other topics are introduced in a hurry and just throw examples at you without even explaining what the example is supposed to do or teach. I'm not sure if this is really a bad thing. You need to realize that some of these advanced topics are actually quite advanced, and the book doesn't assume much from the reader. Including them in the book is a benefit because once you've learned more from other sources or from your own experiments you can go back to these chapters and understand them better. None of these chapters is bad, they just don't follow from what you learned from the tutorial part. For example, the basic idea of multisampling is introduced early, which is good for an example where you just enable multisampling and see the result. Later chapters go into the fine details of how multisampling is implemented, based on the basic introduction. If you already understand multisampling then it'd all make sense, but if your only source is the book then it can be hard to follow. Another example is the chapter which introduces buffers, the sample program tries to 'look cool' where a simpler (and uglier) sample would have been more appropriate.\n\nSpeaking of the sample programs, the code is generally well written and properly commented. Going through the source code for the book library is a great way to learn. Most of the samples compiled fine on Linux (using the binary Nvidia driver), but some gave me black screens or wrong results. I also had to make some changes to the code to make certain samples work. A few samples don't even come with makefiles for Linux. I sent an email about it to the author and it'll hopefully get fixed eventually. The google code repository where the samples are hosted does get updated so I wouldn't worry much about that.\n\nSummary: if you want to learn modern OpenGL (post 3.0), then get the book. Even if you already have the 4th edition and know a bit about shaders and buffers, you will still benefit from the book because it covers many more advanced topics and I'm sure there will be a thing or two you didn't know about. While I spent some time talking about perceived problems like complex advanced chapters or few samples that don't work, I assure you that it's not as bad as I make it sound. I just thought it was fair to note these minor issues in case there was a 6th edition for OpenGL 5.0! I was worried about two things when I considered getting the 5th edition: (1) I already have the 4th edition so is this an incremental update or something completely new? And (2) if the book uses a library to hide some of the advanced features then does it spend a lot of time on that as opposed to teaching real OpenGL? The answer to the first question is that it's a completely new book that is exclusively about OpenGL 3.3. The answer to the second question is, like I said earlier, that the book library is there for a purpose, which is ultimately teaching you how to do things with nothing but OpenGL. I apologize for writing so much, I never wrote a book review before. :)\n\nThe superbible lays out the OpenGL 3 core profile in a brief but thorough enough manner. This is currently the only book on the market that doesn't resort to the now deprecated immediate mode for OpenGL. It gives good coverage of all the basic and more advanced techniques of rendering, and successfully walks the fine line of keeping you motivated (through rewarding examples) and giving you a thorough enough education such that you aren't going to be completely stumped when you step off the beaten path.\n\nThe examples bundled with the book are however quite patchy, many fail to run successfully on Vista with a Nvidia GTX 280 (an OpenGL 3 capable card).\n\nI'd change my review to a 5 once the issues with the samples get sorted out, as this book is a delight to read and Wright's teaching experience rings through in the pacing of the book."}
{"text": "2.2. Miscellaneous Basics\n\nSome basic topics don't require a section devoted to their discussion, but should still be mentioned due to their use throughout the book. For example:\n\nCase sensitivity\n\nActionScript 3.0 is a case-sensitive language, so you have to be careful with capitalization. For example, the keyword true is all lowercase. If you type TRUE or True, in the same context, you will get an error.\n\nUse of the semicolon (;)\n\nThe official use of the semicolon in ActionScript is to execute more than one statement on a single line. This is rare in the average script, but we will look at this technique when discussing loops. The semicolon is also used to indicate the end of a line. This is not typically required, but it is recommended for clarity and to ease any possible transition into learning other languages in which the semicolon at the end of a line is required.\n\nUse oftrace()\n\nAs a means of getting quick feedback in an example, or as a testing and debugging technique when writing scripts, trace() can be very helpful. This instruction places text into the Output panel of the Flash Professional interface. As such, this is an option that is available only when creating your file, and has no use in your distributed SWF. ActionScript 3.0's version of trace() supports tracing multiple items at once by separating them with commas. These items are then traced with a space separating the content. Typing the following into a script, for example, will display \"Learning ActionScript 3.0 Shupe Rosser\" in Flash Professional's Output panel:"}
{"text": "Learn You Some Erlang for Great Good!: A Beginner's Guide by Fred H\u00e9bert\n\nItem# 1593274351\n\nList price: $49.95\n\nSoftpro Price: $39.96\n\nErlang is the language of choice for programmers who want to write robust, concurrent applications, but its strange syntax and functional design can intimidate the uninitiated. Luckily, there's a new weapon in the battle against Erlang-phobia: Learn You Some Erlang for Great Good!\n\nErlang maestro Fred Hebert starts slow and eases you into the basics: You'll learn about Erlang's unorthodox syntax, its data structures, its type system (or lack thereof!), and basic functional programming techniques. Once you've wrapped your head around the simple stuff, you'll tackle the real meat-and-potatoes of the language: concurrency, distributed computing, hot code loading, and all the other dark magic that makes Erlang such a hot topic among today's savvy developers.\n\nPacked with lighthearted illustrations and just the right mix of offbeat and practical example programs, Learn You Some Erlang for Great Good! is the perfect entry point into the sometimes-crazy, always-thrilling world of Erlang"}
{"text": "hi all.\ni have sent before a message about this subject but i didnt really had real replies that helped me.\ni am searching of tutorials of programming (delphi, linux, perl, python, c#, java ......)\ni have search in google, altavista, westciv, whatis, w3school,...\nSo if anyone now how to get pdf files for free please contact me.\nthx.\n\nFor linux try \nFor Python \nfor java \nfor delphi  is in spanish but if you are a programmer will be easy to understand\n\nDelphi/Linux is usually written in a C dialect (C or C++). Java is java.. Perl is Perl.. What I'd suggest is pick 1 language and get familiar with it.. Once you get your mind into programming mode (thinking logically and breaking a project into extremely small parts) and then mastering each small part.. i.e. start with a console hello world program then work on adding the gui to it.. learning the difference between sdi and mdi (single/multiple document interface) .. go to a site i.e. gototnet / channel9/msdn.com or sourceforge get the source code for a project and go line by line through the source and understand and work through each line of code until you know what the programmer is trying to do.. and what each line of code does. Perhaps subscribing to a specific language newsgroup and going through the quesitons and answers presented there might help..\n\nYou have to learn what the reserved words in each language do and what comes packaged with each compiler..\n\nWork through example code there is lots out there. Once you are proficient with 1 language learning another is easier..\n\nThe hardest part is breaking down a large project into tiny manageable bits and pieces and then putting it all together.. Perhaps the 'dummies guide to ???' (replace the ??? with C or Java or Perl) might be a starting place..\n\nYou may never master a single language or master them all but the very first language will have the steepest (hardest) learning curve after that it's just ok how does this language do that item..\n\nUsually your intial programs will not work and it will be up to you to figure out why they don't work.. and fixing your own mistakes is the most valuable part of the learning experience.."}
{"text": "provides learners with an overview of the most frequently used features of Photoshop CS. It teaches learners about navigation, selection, layers, layer styles, adjustment layers, layer masks, filters, color, as well as a variety of painting, drawing, and text tools. Learners will also become familiar with using Photoshop CS for image output and Web design teaches learners to create dynamic Web sites. Learners will be able to apply their knowledge to the creation of dynamic Web applications such as content management, user registration, and e-commerceThe Visual C# 2005 series covers how to develop command line and graphical applications using the Visual C# 2005 programming language and the Visual Studio integrated development environment (IDE). ...\n\nThis series provides instruction in the basics of the Java 1.2 programming language. An explanation of how Java programs work and creating a basic program is provided. Programming topics covered include using variables and strings, conditional tests, and loops. Advanced topics covered include arrays, objects, methods, inheritance, use of graphics and animation, and building a user interface. An explanation of Java applets and how to create, manage, and use them is covered. The series concludes with the opportunity to apply the skills learned in a sample applicationThis....\n\nThis series provides a comprehensive and practical guide for designing enterprise systems with the Java 2 Platform, Enterprise Edition (JEE). Enterprise systems encompass those distributed, scalable, multi-user, and business-critical systems that are related to enhancing the productivity of a corporate or organizational enterprise via information technology. High-level topics include enterprise software development and the JEE model, data enabling and JDBC, enterprise communication and services, systems assurance, Web enabling, and application enabling. The target audience includes software developers, designers, and architects with a background in object-oriented programming and Java....\n\nThis series provides an overview of the Java programming language. It prepares the experienced Java programmer for the Java 2 Programmer Certification Exam 310-035. Topics include object orientation, the statements used to control program flow and exception handling, the classes and interfaces of the java.lang package and the java.util package, the development of Java-based GUI, and the methods and tools for performing sophisticated input and output operations....\n\nThis series teaches users how to install and set up a ColdFusion development environment, including connecting to a database, and also teaches how to build ColdFusion applications that integrate such features as e-mail, FTP, Flash, Java, and XML...."}
{"text": "Using Set Theory\n\nfiled under: clojure, coding, math, and python\n\nposted on 2012-02-01\n\nIn the last post, we took a look at the\nbasics of set theory. Now, I'd like to take a look at how to actually make use\nof it in your code.\n\nOne of the issues with practically using the code in the last post is that the\ninitial subsets were defined arbitrarily and not derived from the superset. In\nthis post, all the examples are derived from the superset. We'll use a couple\ntechniques for doing this illustrate some of the various ways to do it.\n\nIn Python, we'll use an object-oriented approach, creating a few classes and\nworking on Book objects. In Clojure, we'll use records. Though we'll approach\nlanguage a little differently, I hope they still bring clarity to the subject.\n\nFoundation: A Collection of Books\n\nThe first thing we need to do in a useful system is determine what we mean by\nbook. The last post represented each book as a string denoting the title; while\nthat worked for a brief introduction, in practise it gives us very limited\noptions for building subsets. What we need to do is identify more information,\ncalled attributes or fields, that give us the information we need to build our\nsubsets.\n\nPython\n\nIn Python, we'll approach this using a class. I've saved them in library.py\nin the Python example code\n\n# used to validate the list of formats passed to a bookSUPPORTED_FORMATS=['epub','mobi','pdf']classBook:\"\"\" Represents a book, with title, author, and summary text fields. A book should be given a list of formats supported as a dictionary in the form {fmt: True}, and optionally a list of tags. \"\"\"title=Noneauthor=Nonesummary=Noneformats=Nonetags=Nonedef__init__(self,title,author,summary,formats):\"\"\"Initalise a new book. The format shoud be a dictiontary in the form { 'epub': True } where each key is a format that we have the book in.\"\"\"self.title=titleself.author=authorself.summary=summaryassert(notFalsein[fmtinSUPPORTED_FORMATSforfmtinformats])self.formats=formatsdef__str__(self):\"\"\" Return string representation of a book. \"\"\"out=\"%s\\n\\tby %s\\n\\t%s\\n\\tformats: %s\"out=out%(self.title,', '.join(self.author),self.summary,', '.join(self.formats))returnout\n\nWe'll also want a BookCollection class to store a set of books and provide\nsome utility methods for dealing with the collection:\n\nclassBookCollection:\"\"\"Representation of a collection of books. Internally, they are stored as a set. It's main utility is in its helper methods that make accessing the books easier.\"\"\"def__init__(self,books,book_filter=None):\"\"\"Instantiate a collection of books. It expects a collection of books, e.g. a list or set, and optionally takes a filter to only put some of the books into the collection.\"\"\"ifbook_filter:self.books=set([bookforbookinbooksifbook_filter(book)])else:self.books=set(books)def__len__(self):returnlen(self.books)defshow_titles(self,description=None):\"\"\"Print a list of titles in the collection. If the description argument is supplied, it is printed first and all the books are printed with a preceding tab.\"\"\"ifdescription:printdescriptionfmt='\\t%s'else:fmt='%s'forbookinself.books:printfmt%(book.title,)defget_titles(self):\"\"\"Return a list of titles in the collection.\"\"\"return[book.titleforbookinself.books]\n\nThese two classes are very short (and we'll extend them later to make them\nmore useful) but provide a solid foundation to begin building on. You'll want\nto load the books in the class.\n\nTo load an example book, you would do use code similar to this:\n\nbooks=set([Book(\"Natural Language Processing with Python\",['Steven Bird','Ewan Klein','Edward Loper'],'A highly accessible introduction to natural language processing.',['mobi',]),Book('Learning OpenCV',['Gary Bradski','Adrian Kaehler'],'Puts you in the middle of the rapidly expanding field of '+'computer vision.',['pdf',])])\n\nManually entering all these details is tedious. Fortunately for you, I put up\nwith the tedium to create a sample dataset in sample_library.py. You use the\nfunction get_library() from the file to use it.\n\nClojure\n\nIn Clojure, we'll use a record to define a book:\n\n;; define a book record(defrecord Book#^{:doc\"Representation of a book. title is a string, authors a vector, summary is text, and formats is a vector.\"}[titleauthorssummaryformats])\n\nWe're not using objects, so we don't need a record to store a collection.\n(If we wanted to validate formats, we could do it using a Ref and a\n:validator argument - that's left as an exercise for the reader). I have,\nhowever, defined a few helper functions.\n\n(defn in?\"Check whether val is in coll.\"[collval](if (map? coll)(val coll)(not= -1(.indexOfcollval))));; format validation(def valid-format?\"Check a record or object with a :formats key to ensure it fits the listof valid formats.\"#(or (in?(:formats%):epub)(in?(:formats%):mobi)(in?(:formats%):pdf)))(defn list-titles\"Print a list of titles of a book.\"[books&description](let [titles(map :titlebooks)](if description(do(println description)(doseq [titletitles](println \"\\t\"title)))(doseq [titletitles](println title)))))(defn get-titles\"Get a list of titles of a book collection.\"[books](map :titlebooks))(defn book-str\"Return a book as a string.\"[book](format\"%s\\n(by %s\\n\\t%s\\n\\tformats: %s\\n\"(str (:titlebook))(join \", \"(:authorsbook))(str (:summarybook))(join \", \"(map #'name(:formatbook)))))\n\nI've loaded a sample dataset into the sample_library.clj source file, available\nfrom the Clojure example code.\n\nBuilding Subsets\n\nNow that we have a way to represent a book (with more useful information than\nsimply the title), we can start to build some subsets. Let's start by\nlooking at set notation (aka how to write a set both mathematically and\nin code), and then continue on to recreate the two subsets in the previous\narticle, epub and mobi.\n\nSet Notation\n\nwhich means the set of numbers that are members of (\u2208 means 'element of')\nthe set of positive integers and are less than 10. You might generalise this\nas such:\n\ngiven the universal set S, which defines all the elements under\nconsideration, and some predicate P which is a function that returns either\ntrue if the element satisfies the predicate (and thus should be included\nin the set):\n{ x | x \u2208 S, P(x) }\n\nIf you recall the definition of BookCollection, the filter method is\ncalled as filter(predicate, collection). In the case of the mobi\nsubset, it filters out anything that fails the test\n'mobi' in book.formats. We might write this as\n\n{ book | book \u2208 my_library, is_mobi(book) }\n\nin set notation. I've predefined some filters in the file formats.py\nwhich is again in the example code.\n\nClojure\n\nLikewise, Clojure has a built-in filter function, in the form\n(filter pred coll). We'll use two\nanonymous functions\nto do our filtering:\n\nusing_set_theory.core=>(list-titlesepub\"list of books in epub format:\")(list ofbooksinepubformat:)TheJoyofClojureMiningtheSocialWebCodeCompletenilusing_set_theory.core=>(list-titlesmobi\"list of books in mobi format:\")(list ofbooksinmobiformat:)IntroductiontoInformationRetrievalNaturalLanguageProcessingwithPythonCodeCompletenilusing_set_theory.core=>\n\nI've put these filters in the filters.clj source file, along with definitions\nfor epub-books and mobi-books:\n\n(ns using_set_theory.filters(:use[using_set_theory.library][using_set_theory.sample_library]))(def epub?#^{:doc\"Filter a collection of books by those supporting the epub format.\"}(fn [book](in?(:formatsbook):epub)))(def mobi?#^{:doc\"Filter a collection of books by those supporting the mobi format.\"}(fn [book](in?(:formatsbook):mobi)))(defn- get-epub\"Takes a collection of books and returns the list of books in epub format.\"[books](filter epub?books))(defn- get-mobi\"Takes a collection of books and returns the list of book in mobi format.\"[books](filter mobi?books))(def epub-books(set (get-epub(get-library))))(def mobi-books(set (get-mobi(get-library))))\n\nParallels with SQL\n\nThis introduction of filters might remind you of SQL, and for good reason.\nEdgar Codd designed SQL with\nset theory in mind. You can think of tables as sets (provided, of course,\nproper data preparation is done to ensure there are no duplicates in the\ndatabase), and operations like SELECT return subsets. For example, if we\nwere storing the books in a library, we would write something like\n\nSELECT*FROMbooksWHEREhas_epub=TRUE;\n\nMoving On\n\nNow that we have a programmatic way to build subsets, we can automate the entire\nset of sequences in the last post:\n\nPython\n\nimportformatsimportlibraryeither_format=set.union(formats.EPUB.books,formats.MOBI.books)either_format=library.BookCollection(either_format)either_format.show_titles(\"books in either format:\")both_formats=set.intersection(formats.EPUB.books,formats.MOBI.books)both_formats=library.BookCollection(both_formats)both_formats.show_titles(\"books in both formats:\")\n\nwhich gives me the results:\n\nIn[31]:either_format.show_titles(\"books in either format:\")Out[31]:booksineitherformat:CodeCompleteMiningtheSocialWebNaturalLanguageProcessingwithPythonIntroductiontoInformationRetrievalTheJoyofClojureIn[32]:both_formats.show_titles(\"books in both formats:\")Out[32]:booksinbothformats:CodeComplete\n\nClojure\n\n(require'clojure.set)(use'using_set_theory.filters)(use'using_set_theory.library)(def either-format(clojure.set/unionepub-booksmobi-books))(def both-formats(clojure.set/intersectionepub-booksmobi-books))(show-titleseither-format\"books in either format:\")(show-titlesboth-formats\"books in both formats:\")\n\nIn the Clojure REPL, I get the following output:\n\nusing_set_theory.core=>(show-titleseither-format\"books in either format:\")(booksineitherformat:)IntroductiontoInformationRetrievalTheJoyofClojureNaturalLanguageProcessingwithPythonCodeCompleteMiningtheSocialWebnilusing_set_theory.core=>(show-titlesboth-formats\"books in both formats:\")(booksinbothformats:)CodeCompletenilusing_set_theory.core=>\n\nSets v. Lists\n\nRemember that one of the key attributes of a set is that each member is distinct.\nLet's compare a set with a list; we'll do this with an intersection.\n\nPython\n\nimportlibraryimportformatsfromsample_libraryimportget_libraryepub_list=[bookforbookinget_library().booksif'epub'inbook.formats]mobi_list=[bookforbookinget_library().booksif'mobi'inbook.formats]both_formats=[]both_formats.extend(list(epub_list))both_formats.extend(list(mobi_list))print'books in both formats:'forbookinboth_formats:print'\\t%s'%book.title\n\nThe result:\n\nbooks in both formats:\nMining the Social Web\nCode Complete\nThe Joy of Clojure\nCode Complete\nNatural Language Processing with Python\nIntroduction to Information Retrieval\n\nClojure\n\nIn Clojure, we'll use the vector type, which is like a list but the first\nelement isn't evaluated:\n\nSo what?\n\nYou'll notice \"Code Complete\" shows up twice in the list. The advantage of sets\nhere is that only unique items are returned. A union is actually the list of\nelements in both sets, minus the list of items that are in both\nsets.\n\nApplications\n\nThis has been just a quick introduction to the topic, but hopefully you\ncan see the relevance to areas like data mining. Coincidentally, datasets\ntend to conform to the mathematical idea of sets, and typically with some\ndata massaging (i.e. to filter out duplicates), those that don't can\nbe made more like mathemtical sets. Once appropriately represented in the\ncomputer, they can be acted upon with the basic set operations.\n\nI've created an additional example: a web service providing a rest API to\nthe book collection. As with the code in this post, there is an example in\nPython\nand in\nClojure. The\nREADME in either example explains what dependencies are required. You can also\nview the Bitbucket repo for the\nPython example, or the GitHub repo\nfor the Clojure example.\n\nAcknowledgements\n\nStephen Olsen reviewed many iterations of this\narticle and helped me to properly articulate the important points (like illustrating\nthat unions require the subtraction of the intersection). I originally wrote\nthe bulk of this article on the 25th, but it took me until the 28th to finish\nwriting the API example code, until the 31st to add in the additional union\nexplanation, and until the 1st to polish it up."}
{"text": "Sample C++ programs\n\nLecture summaries\n\n[5/21/02] We began reviewing the basics of C++. We talked about\nvariables, types, assignment statements and expressions. We\nbriefly covered input and output using cin and cout. This\nmaterial is covered in Sections 2.1 to 2.3 of the text.\n\n[5/22/02] We went over Boolean expressions, if-statements and\nwhile-statements. We began looking at how to design loops.\n\n[5/23/02] We looked briefly at nested loops and then turned to\ndesigning loops using action-oriented designs and data-oriented\ndesigns. We did examples of computing the sum of the first n positive\nintegers and computing powers, where the power is a positive integer.\n\n[5/24/02] We began looking at functions. We looked briefly at\nthe mechanism used to invoke a function. The computation is done on\nthe side, and then the caller is resumed.\n\nEach function can be\nlooked at in two ways. The external view tells WHAT the function does,\nand is the view used when you want to use the function. The internal\nview tells HOW the function works, and is the view used when writing\nthe function. Every function should have a contract, which describes\nthe external view of the function.\n\n[5/27/02] Holiday.\n\n[5/28/02] We did more examples of functions. We also looked\nat procedures (functions that do not return a value) and call-by-reference.\nThis material is in chapter 4 of the text, and you should read that\nchapter.\n\n[5/29/02] We discussed recursion, and did some examples of\nrecursion. This material is in chapter 12 of the text.\n\n[5/30/02] We looked at some more examples of recursion. Then\nwe turned to chapter 5 of the text, which is on elementary object-oriented\nprogramming and on input and output. We discussed how to make use of\nthe cin object.\n\n[5/31/02] We looked at using the iostream library to read\nand write files using objects.\n\n[6/3/02] We began looking at creating classes. A class is\na type of object. An object is a collection of variables and\nmethods. We started with structures, which objects that contain\nonly variables, not methods. Then we saw how to bring methods into\nthe structure, creating a genuine object.\n\n[6/4/02] We looked at examples of classes that describe\nobjects with methods inside them. We looked at a class to store\nand manipulate dates, and another to store and manipulate rational\nnumbers.\n\n[6/5/02] We looked at copy constructors in classes. Then\nwe turned to arrays, and covered how to create an array and how\nto index into an array.\n\n[6/6/02] Exam 1.\n\n[6/7/02] We began talking about arrays, and did some examples.\nTypically, each array has a physical size that tells the total amount\nof available space, and a logical size that tells how much of the\navailable space is actually in use.\nWe defined a null-terminated string, which is an array of characters\nthat contains a null character to mark its end. You can tell the\nlogical size of a null-terminated string by counting how many\ncharacters occur before the null character.\n\nArrays are discussed in chapters 9 and 10 of the text.\n\n[6/10/02] We talked about some general issues on contracts,\nwriting functions and testing. Regression tests are tests that can\nbe run automatically by a script. Then we continued with arrays.\nWe did another example, a function to copy a null-terminated string.\nWe introduced do-loops and for-loops. For-loops are especially\nuseful for dealing with arrays.\n\n[6/11/02] We did more examples using arrays, including linear\nsearch and binary search.\n\n[6/12/02] We started talking about sorting, and wrote two functions\nto sort an array. The first used the Exchange Sort algorithm, and the\nsecond used the Insertion Sort algorithm. Both algorithms take time\nproportional to n2 to sort an array of size n.\n\n[6/13/02] We derived and wrote the quicksort algorithm. It\nbreaks the array up into to two large parts and one small part. It\nuses itself recursively to sort the two large parts. On the average\ncase, quicksort takes time proportional to n log2(n).\n\nWe noted that, if you start at n and successively halve the number that\nyou have, it takes about log2(n) steps to reach 1.\n\n[6/14/02] We discussed two dimensional arrays and arrays of\nstructures. We discussed using named constants for array sizes.\n\n[6/17/02] We went over solutions to the practice questions\nfor the second exam.\n\n[6/18/02] Exam 2\n\n[6/19/02] We began discussing pointers and memory management.\nSee chapter 11 of the text.\n\n[6/20/02] We continued discussing pointers. We discussed\nthe relationship between pointers and arrays, and did an example\nusing dynamic arrays."}
{"text": "University of British Columbia News\nCPSC 111, Intro to Computation\nJan-Apr 2006 Assignment 0 due\nTamara Munzner Labs and tutorials start this week\nLabs\nProgramming Languages\nLab 0 this week\nIdentifiers, Variables Access code after hours:\n\nLecture 2, Tue Jan 10 2006\nbased on slides by Kurt Eiselt, Paul Carter\n\nRecap: Me Recap: Prereqs\nclarifications/corrections/new in green boxes! Prerequisites: Mathematics 12\nTamara Munzner or any other UBC mathematics course\ntmm@cs.ubc.ca\n\nelse you will be dropped from this course\nICICS X661 see CS advisors if you need prerequisite\noffice hours Wed 11-12, or by appointment waived for equivalent work.\n\n\n\nRecap: Book Recap: Intro\nBig Java (second edition) by Cay Horstmann what's computer science\nsame book used for CPSC 211 what's an algorithm\nwhat's happening with hardware\nif you want to use old edition\nyour responsibility to map from old to new\nmaterial on Java 1.5 missing\nread material before class\nweekly question: turn in Thursdays, start of class\n1\nProgramming Languages Programming Languages\nObjectives Objectives\nexamine a simple program written in Java\nunderstand difference between languages\nunderstand use of comments, white space and\ntypes identifiers\nmachine vs. assembly vs. high level understand difference between a compiler and an\nunderstand difference between languages interpreter\ntranslation approaches understand how Java programs are compiled and\nexecuted\ncompilers vs. interpreters understand difference between syntax and\nsemantics\nunderstand the difference between syntax errors and\nlogic errors\nReading This Week Programs and Programming Languages\nCh 1.1 - 1.2: Computer Anatomy First programming languages: machine languages\nfrom last time most primitive kind\nSample machine language instruction\nCh 1.3 \u2013 1.8: Programming Languages\nCh 2.1-2.2, 2.5: Types/Variables, Assignment, 00000000001000100011000000100000\nNumbers\nCh 4.1-4.2: Numbers, Constants What do you suppose it means?\nPrograms and Programming Languages Programs and Programming Languages\nFirst programming languages: machine languages First programming languages: machine languages\nmost primitive kind most primitive kind\nSample machine language instruction Sample machine language instructionDifficult to write programs this way\nPeople created languages that were more readable\n2\nPrograms and Programming Languages Programs and Programming Languages\nNext: assembly languages Assembly language program converted into\nDirect mappings of machine language corresponding machine language instructions\ninstructions into helpful mnemonics, by another program called an assembler\nabbreviations\nSample assembly language instruction assembly language machine language\nassembler\nCorresponds to machine language instr\nadd r1,r2,r6 add r1,r2,r6Programs and Programming Languages Programs and Programming Languages\nBoth machine and assembly languages pose big Next step: development of high-level languages\nchallenges for programmers\nDifficult to read and write You may have heard of some\nDifficult to remember Fortran, COBOL, Lisp, BASIC, C, C++, C#, Ada,\nPerl, Java, Python\nEach instruction does very little\nTakes lots of instructions just to get something High-level languages intended to be easier to use\nsimple done still a long way from English.\nEvery machine or assembly language good for only A single high-level instruction gets more work done\none type of computer than a machine or assembly language instruction.\nDifferent to program IBM than Honeywell than\nBurroughs...\nMost high-level languages can be used on different\ncomputers\nPrograms and Programming Languages Programs and Programming Languages\nExample of a high-level instruction Program written in high-level language converted to\nA=B+C machine language instructions by another program\ncalled a compiler (well, not always)\nTells computer to high-level language machine language\ncompiler\ngo to main memory and find value stored in\nlocation called B\ngo to main memory and find value stored in High-level instruction: A=B+C\nlocation called C becomes at least four machine language instructions!\nadd those two values together 00010000001000000000000000000010 load B\nstore result in memory in location called A 00010000010000000000000000000011 load C\n00000000001000100011000000100000 add them\n00010100110000000000000000000001 store in A\n3\nYour High-Level Language Is Java Your High-Level Language Is Java\nJava developed by Sun Microsystems in early 90s \"Hmmm...\nwe have a language that's been designed to be used\nIntended as computer-independent (or \"platform on different computer platforms in big networks\nindependent\") programming language for set-top the World Wide Web is a big network of lots of\nboxes in cable TV networks different computer platforms\nBut Sun decided not to go into set-top box business let's make Java the programming language of the\nInternet!\"\nWorld Wide Web became the next big thing\nAnd for some good reasons that we can talk about\nSun saw opportunity, already being heavily into\nlater, that's exactly what happened\nnetworked computer systems\nSample Java Application Program Sample Java Application Program\nComments ignored by Java compiler\n//******************************************************* //*******************************************************\n// Oreo.java Author: Kurt Eiselt // Oreo.java Author: Kurt Eiselt\n// //\n// Demonstrating simple Java programming concepts while // Demonstrating simple Java programming concepts while\n// revealing one of Kurt's many weaknesses // revealing one of Kurt's many weaknesses\n//******************************************************* //*******************************************************\npublic class Oreo public class Oreo\n{ {\n//***************************************************** //*****************************************************\n// demand Oreos // demand Oreos\n//***************************************************** //*****************************************************Sample Java Application Program Sample Java Application Program\nComments could also look like this public class Oreo\n{\npublic static void main (String[] args)\n/* {\nOreo.java Author: Kurt Eiselt System.out.println (\"Feed me more Oreos!\");\n}\nDemonstrating simple Java programming concepts while }\nrevealing one of Kurt's many weaknesses\n*/\npublic class Oreo Comments are important to people\n{\n/* demand Oreos */ But not to the compiler\npublic static void main (String[] args)\n{ Compiler only cares about\nSystem.out.println (\"Feed me more Oreos!\");\n}\n}\n4Instructions inside class definition grouped\nWhole thing is the definition of a class\ninto one or more procedures called methods\nPackage of instructions that specify\ngroup of Java statements (instructions) that\nwhat kinds of data will be operated on\nhas name, performs some task\nwhat kinds of operations there will be\nAll Java programs you create will have main\nJava programs will have one or more classes\nmethod where program execution begins\nFor now, just worry about one class at a time\nSample Java Application Program Sample Java Application Program\npublic class Oreo public class Oreo\n{ {\npublic static void main (String[] args) public static void main (String[] args)\n{ {\nSystem.out.println (\"Feed me more Oreos!\"); System.out.println (\"Feed me more Oreos!\");\n} }\n} }\nThese class and method definitions are Words we use when writing programs are\nincomplete at best called identifiers\ngood enough for now except those inside the quotes\nexpand on these definitions as class continuesKurt made up identifier Oreo Other programmers chose identifier\nSystem.out.println\nthey wrote printing program\npart of huge library of useful programs that\ncomes with Java\n5\nSample Java Application Program Reserved Words\npublic class Oreo\n{ Get familiar with these\npublic static void main (String[] args)\n{ But you don't need to memorize all 52 for exam\nSystem.out.println (\"Feed me more Oreos!\");\n}\n}\nabstract do if private throw\nSpecial identifiers in Java called boolean\nbreak\ndouble\nelse\nimplements\nimport\nprotected\npublic\nthrows\ntransient\nreserved words byte\ncase\nenum\nextends\ninstanceof\nint\nreturn\nshort\ntrue\ntry\ndon't use them in other ways catch\nchar\nfalse\nfinal\ninterface\nlong\nstatic\nstrictfp\nvoid\nvolatile\nclass finally native super while\nconst float new switch\ncontinue for null synchronized\ndefault goto package this\nIdentifiers Identifiers\nIdentifier must Identifier must\nStart with a letter and be followed by Start with a letter and be followed by\nZero or more letters and/or digits Zero or more letters and/or digits\nDigits are 0 through 9. Digits are 0 through 9.\nLetters are the 26 characters in English Letters are the 26 characters in English\nalphabet alphabet\nboth uppercase and lowercase both uppercase and lowercase\nplus the $ and _ plus the $ and _\nalso alphabetic characters from other languages also alphabetic characters from other languages\nWhich of the following are not valid identifiers?\nuserName user_name $cash 2ndName\nfirst name user.age _note_ note2\nIdentifiers Identifiers\nIdentifier must Java is case sensitive\nStart with a letter and be followed by Oreo oreo OREO 0reo\nZero or more letters and/or digits are all different identifiers, so be careful\nDigits are 0 through 9.\ncommon source of errors in programming\nLetters are the 26 characters in English\nalphabet\nboth uppercase and lowercase\nplus the $ and _\nalso alphabetic characters from other languages\nWhich of the following are not valid identifiers?\nuserName user_name $cash 2ndName\nfirst name user.age _note_ note2\n6\nIdentifiers Identifiers\nJava is case sensitive Creating identifiers in your Java programs\nOreo oreo OREO 0reo Remember other people read what you create\nare all different identifiers, so be careful Make identifiers meaningful and descriptive\ncommon source of errors in programming for both you and them\nNo limit to how many characters you can put\nare these all valid identifiers? in your identifiers\nbut don't get carried away\npublic class ReallyLongNamesWillDriveYouCrazyIfYouGoOverboard\n{\npublic static void main (String[] args)\n{\nSystem.out.println (\"Enough already!\");\n}\n}\nWhite Space White Space\n//******************************************************* //*******************************************************\n// Oreo.java Author: Kurt Eiselt // Oreo1.java Author: Kurt Eiselt\n// //\n// Demonstrating good use of white space // Demonstrating mediocre use of white space\n//******************************************************* //*******************************************************\npublic class Oreo public class Oreo1White Space White Space\n//******************************************************* //*******************************************************\n// Oreo2.java Author: Kurt Eiselt // Oreo3.java Author: Kurt Eiselt\n// //\n// Demonstrating bad use of white space // Demonstrating totally bizarre use of white space\n//******************************************************* //*******************************************************\npublic class Oreo2 { public static void main (String[] public\nargs) { System.out.println (\"Feed me more Oreos!\"); } } class Oreo3\n{\npublic static\nvoid main (String[] args)\n{\nSystem.out.println (\"Feed me more Oreos!\")\n;\n}\n}\n7\n//*******************************************************\n// Oreo4.java Author: Kurt Eiselt White Space\n//\n// Demonstrating deep psychological issues with whitespace\n//******************************************************* White space\npublic Blanks between identifiers and other symbols\nclass Tabs and newline characters are included\nOreo4\n{\npublic\nstatic White Space White space does not affect how program runs\nvoid\nmain\n(\nString[] Use white space to format programs we create so\nargs\n)\nthey're easier for people to understand\n{\nSystem.out.println\n(\"Feed me more Oreos!\")\n;\n}\n}\nProgram Development Compiling and Running\nUse an editor to create your Java program Let's try it!\noften called source code command line for now\ncode used interchangeably with program or\nlater we'll use Eclipse\ninstructions in the computer world\nintegrated development environment (IDE)\nAnother program, a compiler or an interpreter,\ntranslates source code into target language or\nobject code, which is often machine language\nFinally, your computer can execute object code\ninsight source object results\nediting translating executing\ncode code\nSyntax Semantics\nRules to dictate how statements are constructed. What will happen when statement is executed\nExample: open bracket needs matching close bracket Programming languages have well-defined\nIf program is not syntactically correct, cannot be semantics, no ambiguity\ntranslated by compiler Different than natural languages like English.\nDifferent than humans dealing with natural Consider statement:\nlanguages like English. Consider statement with Mary counted on her computer.\nincorrect syntax (grammar) How could we interpret this?\nfor weeks. rained in Vancouver it hasn't\nProgramming languages cannot allow for such\nwe still have pretty good shot at figuring out meaning ambiguities or computer would not know which\ninterpretation to execute\n8\nErrors Errors\nComputers follows our instructions exactly\ncompile-time error\nIf program produces the wrong result it's the\nprogrammer's fault insight source object results\nediting translating executing\nunless the user inputs incorrect data code code\nthen cannot expect program to output correct\nresults: \"Garbage in, garbage out\" (GIGO) Error at compile time (during translation)\nDebugging: process of finding and correcting you did not follow syntax rules that say how\nerrors Java elements must be combined to form\nUnfortunately can be very time consuming! valid Java statements\nErrors Errors logical error\nrun-time error run-time error\ncompile-time error compile-time error\ninsight source object results insight source object results\nediting translating executing editing translating executing\ncode code code code\nError at run time (during execution) Logical error\nSource code compiles Source code compiles\nSyntactically (structurally) correct Object code runs\nBut program tried something computers cannot do But program may still produce incorrect results\nlike divide a number by zero. because logic of your program is incorrect\nTypically program will crash: halt prematurely Typically hardest problems to find\nErrors Memory and Identifiers\nLet's try it! Example of a high-level instruction\nA=B+C\nusually errors happen by mistake, not on\nTells computer to\npurpose...\ngo to main memory and find value stored in location\ncalled B\ngo to main memory and find value stored in location\ncalled C\nadd those two values together\nstore result in memory in location called A\nGreat! But... in reality, locations in memory are not\nactually called things like a, b, and c.\n9\nMemory Recap Memory and Identifiers\nMemory: series of locations, each having a unique So what's with the a, b, and c?\naddress, used to store programs and data Machine language uses actual addresses for\nWhen data is stored in a memory location, previously memory locations\nstored data is overwritten and destroyed High-level languages easier\nEach memory location stores one byte (8 bits) of Avoid having to remember actual addresses\ndata\nInvent meaningful identifiers giving names to memory\nData values are locations where important information is stored\n5802 stored in memory\n5803 10110101\n10110101 locations \u2013 more pay_rate and hours_worked vs. 5802 and 5806\n5804 than one location\n5805 Easier to remember and a whole lot less confusing!\nmay be used if the\n5806\ndata is large.\n5807\nAddress*\n*For total accuracy, these addresses should be binary numbers, but you get the idea, no?\nMemory and Identifiers: Variables Programming With Variables\nVariable: name for location in memory where data is stored\n//*****************************************\nlike variables in algebra class // Test.java Author: Kurt\n//\n// Our first use of variables!\npay_rate, hours_worked, a, b, and c are all variables //*****************************************\npublic class Test\nVariable names begin with lower case letters {\nJava convention, not compiler/syntax requirement public static void main (String[] args)\n{\na = b + c;\nVariable may be name of single byte in memory or may refer System.out.println (\"The answer is \" + a);\nto a group of contiguous bytes }\nMore about that next time }\nLet's give it a try...\nProgramming With Variables Programming With Variables: Take 2\n//***************************************** //*****************************************\n// Test.java Author: Kurt // Test2.java Author: Kurt\n// //\n// Our first use of variables! // Our second use of variables!\n//***************************************** //*****************************************\npublic class Test public class Test2\n{ {\npublic static void main (String[] args) public static void main (String[] args)\n{ {\na = b + c; b = 3;\nSystem.out.println (\"The answer is \" + a); c = 5;\n} a = b + c;\n} System.out.println (\"The answer is \" + a);\nLet's give it a try... }\n}\nb and c cannot be found!\nneed to assign values\n10\nProgramming With Variables: Take 2 Now What?\n:\n//*****************************************\n// Test2.java Author: Kurt\n//\nb 00000011 memory\n// Our second use of variables!\n//***************************************** c 00000101\npublic class Test2\n{\npublic static void main (String[] args)\n{ :\nJava doesn't know how to interpret the\nb = 3;\nc = 5;\na = b + c; contents of the memory location\n}\nSystem.out.println (\"The answer is \" + a);\nare they integers? characters from the\n} keyboard? shades of gray? or....\nNow what?\nsuch a lazy computer, still can't find symbols...\nData Types Programming With Variables: Take 3\nJava requires that we tell it what kind of data it is working with\n//*****************************************\n// Test3.java Author: Kurt\nFor every variable, we have to declare a data type //\n// Our third use of variables!\n//*****************************************\nJava language provides eight primitive data types\ni.e. simple, fundamental public class Test3\n{\npublic static void main (String[] args)\nFor more complicated things, can use data types\n{\ncreated by others provided to us through the Java libraries int a; //these\nthat we invent int b; //are\nMore soon - for now, let's stay with the primitives int c; //variable declarations\nb = 3;\nWe want a, b, and c to be integers. Here's how we do it...\nc = 5;\na = b + c;\nSystem.out.println (\"The answer is \" + a);\n}\n}\nPrimitive Data Types: Numbers Primitive Data Types: Non-numeric\nType Size Min Max Character Type\nbyte 1 byte -128 127 named char\nshort 2 bytes -32,768 32,767 Java uses the Unicode character set so each char\nint 4 bytes -2,147,483,648 2,147,483,647 occupies 2 bytes of memory.\nlong 8 bytes -9,223,372,036,854,775,808 9,223,372,036,854,775,807\nBoolean Type\nfloat 4 bytes approx -3.4E38 (7 sig.digits) approx 3.4E38 (7 sig.digits) named boolean\ndouble 8 bytes approx -1.7E308 (15 sig. digits) approx 1.7E308 (15 sig. digits)\nVariables of type boolean have only two valid values\ntrue and false\nSix primitives for numbers Often represents whether particular condition is true\ninteger vs. floating point More generally represents any data that has two\nfixed size, so finite capacity states\nyes/no, on/off\n11\nPrimitive Data Types: Numbers Questions?\nType Size Min Max\nbyte 1 byte -128 127\nshort 2 bytes -32,768 32,767\nint 4 bytes -2,147,483,648 2,147,483,647\nlong 8 bytes -9,223,372,036,854,775,808 9,223,372,036,854,775,807\nfloat 4 bytes approx -3.4E38 (7 sig.digits) approx 3.4E38 (7 sig.digits)\ndouble 8 bytes approx -1.7E308 (15 sig. digits) approx 1.7E308 (15 sig. digits)\nPrimary primitives are int and double\nJust worry about those for now\n12"}
{"text": "University of British Columbia News\nCPSC 111, Intro to Computation\nJan-Apr 2006 Assignment 0 due\nTamara Munzner Labs and tutorials start this week\nLabs\nProgramming Languages\nLab 0 this week\nIdentifiers, Variables Access code after hours:\n\nLecture 2, Tue Jan 10 2006\nbased on slides by Kurt Eiselt, Paul Carter\n\nRecap: Me Recap: Prereqs\nclarifications/corrections/new in green boxes! Prerequisites: Mathematics 12\nTamara Munzner or any other UBC mathematics course\ntmm@cs.ubc.ca\n\nelse you will be dropped from this course\nICICS X661 see CS advisors if you need prerequisite\noffice hours Wed 11-12, or by appointment waived for equivalent work.\n\n\n\nRecap: Book Recap: Intro\nBig Java (second edition) by Cay Horstmann what's computer science\nsame book used for CPSC 211 what's an algorithm\nwhat's happening with hardware\nif you want to use old edition\nyour responsibility to map from old to new\nmaterial on Java 1.5 missing\nread material before class\nweekly question: turn in Thursdays, start of class\n1\nProgramming Languages Programming Languages\nObjectives Objectives\nexamine a simple program written in Java\nunderstand difference between languages\nunderstand use of comments, white space and\ntypes identifiers\nmachine vs. assembly vs. high level understand difference between a compiler and an\nunderstand difference between languages interpreter\ntranslation approaches understand how Java programs are compiled and\nexecuted\ncompilers vs. interpreters understand difference between syntax and\nsemantics\nunderstand the difference between syntax errors and\nlogic errors\nReading This Week Programs and Programming Languages\nCh 1.1 - 1.2: Computer Anatomy First programming languages: machine languages\nfrom last time most primitive kind\nSample machine language instruction\nCh 1.3 \u2013 1.8: Programming Languages\nCh 2.1-2.2, 2.5: Types/Variables, Assignment, 00000000001000100011000000100000\nNumbers\nCh 4.1-4.2: Numbers, Constants What do you suppose it means?\nPrograms and Programming Languages Programs and Programming Languages\nFirst programming languages: machine languages First programming languages: machine languages\nmost primitive kind most primitive kind\nSample machine language instruction Sample machine language instructionDifficult to write programs this way\nPeople created languages that were more readable\n2\nPrograms and Programming Languages Programs and Programming Languages\nNext: assembly languages Assembly language program converted into\nDirect mappings of machine language corresponding machine language instructions\ninstructions into helpful mnemonics, by another program called an assembler\nabbreviations\nSample assembly language instruction assembly language machine language\nassembler\nCorresponds to machine language instr\nadd r1,r2,r6 add r1,r2,r6Programs and Programming Languages Programs and Programming Languages\nBoth machine and assembly languages pose big Next step: development of high-level languages\nchallenges for programmers\nDifficult to read and write You may have heard of some\nDifficult to remember Fortran, COBOL, Lisp, BASIC, C, C++, C#, Ada,\nPerl, Java, Python\nEach instruction does very little\nTakes lots of instructions just to get something High-level languages intended to be easier to use\nsimple done still a long way from English.\nEvery machine or assembly language good for only A single high-level instruction gets more work done\none type of computer than a machine or assembly language instruction.\nDifferent to program IBM than Honeywell than\nBurroughs...\nMost high-level languages can be used on different\ncomputers\nPrograms and Programming Languages Programs and Programming Languages\nExample of a high-level instruction Program written in high-level language converted to\nA=B+C machine language instructions by another program\ncalled a compiler (well, not always)\nTells computer to high-level language machine language\ncompiler\ngo to main memory and find value stored in\nlocation called B\ngo to main memory and find value stored in High-level instruction: A=B+C\nlocation called C becomes at least four machine language instructions!\nadd those two values together 00010000001000000000000000000010 load B\nstore result in memory in location called A 00010000010000000000000000000011 load C\n00000000001000100011000000100000 add them\n00010100110000000000000000000001 store in A\n3\nYour High-Level Language Is Java Your High-Level Language Is Java\nJava developed by Sun Microsystems in early 90s \"Hmmm...\nwe have a language that's been designed to be used\nIntended as computer-independent (or \"platform on different computer platforms in big networks\nindependent\") programming language for set-top the World Wide Web is a big network of lots of\nboxes in cable TV networks different computer platforms\nBut Sun decided not to go into set-top box business let's make Java the programming language of the\nInternet!\"\nWorld Wide Web became the next big thing\nAnd for some good reasons that we can talk about\nSun saw opportunity, already being heavily into\nlater, that's exactly what happened\nnetworked computer systems\nSample Java Application Program Sample Java Application Program\nComments ignored by Java compiler\n//******************************************************* //*******************************************************\n// Oreo.java Author: Kurt Eiselt // Oreo.java Author: Kurt Eiselt\n// //\n// Demonstrating simple Java programming concepts while // Demonstrating simple Java programming concepts while\n// revealing one of Kurt's many weaknesses // revealing one of Kurt's many weaknesses\n//******************************************************* //*******************************************************\npublic class Oreo public class Oreo\n{ {\n//***************************************************** //*****************************************************\n// demand Oreos // demand Oreos\n//***************************************************** //*****************************************************Sample Java Application Program Sample Java Application Program\nComments could also look like this public class Oreo\n{\npublic static void main (String[] args)\n/* {\nOreo.java Author: Kurt Eiselt System.out.println (\"Feed me more Oreos!\");\n}\nDemonstrating simple Java programming concepts while }\nrevealing one of Kurt's many weaknesses\n*/\npublic class Oreo Comments are important to people\n{\n/* demand Oreos */ But not to the compiler\npublic static void main (String[] args)\n{ Compiler only cares about\nSystem.out.println (\"Feed me more Oreos!\");\n}\n}\n4Instructions inside class definition grouped\nWhole thing is the definition of a class\ninto one or more procedures called methods\nPackage of instructions that specify\ngroup of Java statements (instructions) that\nwhat kinds of data will be operated on\nhas name, performs some task\nwhat kinds of operations there will be\nAll Java programs you create will have main\nJava programs will have one or more classes\nmethod where program execution begins\nFor now, just worry about one class at a time\nSample Java Application Program Sample Java Application Program\npublic class Oreo public class Oreo\n{ {\npublic static void main (String[] args) public static void main (String[] args)\n{ {\nSystem.out.println (\"Feed me more Oreos!\"); System.out.println (\"Feed me more Oreos!\");\n} }\n} }\nThese class and method definitions are Words we use when writing programs are\nincomplete at best called identifiers\ngood enough for now except those inside the quotes\nexpand on these definitions as class continuesKurt made up identifier Oreo Other programmers chose identifier\nSystem.out.println\nthey wrote printing program\npart of huge library of useful programs that\ncomes with Java\n5\nSample Java Application Program Reserved Words\npublic class Oreo\n{ Get familiar with these\npublic static void main (String[] args)\n{ But you don't need to memorize all 52 for exam\nSystem.out.println (\"Feed me more Oreos!\");\n}\n}\nabstract do if private throw\nSpecial identifiers in Java called boolean\nbreak\ndouble\nelse\nimplements\nimport\nprotected\npublic\nthrows\ntransient\nreserved words byte\ncase\nenum\nextends\ninstanceof\nint\nreturn\nshort\ntrue\ntry\ndon't use them in other ways catch\nchar\nfalse\nfinal\ninterface\nlong\nstatic\nstrictfp\nvoid\nvolatile\nclass finally native super while\nconst float new switch\ncontinue for null synchronized\ndefault goto package this\nIdentifiers Identifiers\nIdentifier must Identifier must\nStart with a letter and be followed by Start with a letter and be followed by\nZero or more letters and/or digits Zero or more letters and/or digits\nDigits are 0 through 9. Digits are 0 through 9.\nLetters are the 26 characters in English Letters are the 26 characters in English\nalphabet alphabet\nboth uppercase and lowercase both uppercase and lowercase\nplus the $ and _ plus the $ and _\nalso alphabetic characters from other languages also alphabetic characters from other languages\nWhich of the following are not valid identifiers?\nuserName user_name $cash 2ndName\nfirst name user.age _note_ note2\nIdentifiers Identifiers\nIdentifier must Java is case sensitive\nStart with a letter and be followed by Oreo oreo OREO 0reo\nZero or more letters and/or digits are all different identifiers, so be careful\nDigits are 0 through 9.\ncommon source of errors in programming\nLetters are the 26 characters in English\nalphabet\nboth uppercase and lowercase\nplus the $ and _\nalso alphabetic characters from other languages\nWhich of the following are not valid identifiers?\nuserName user_name $cash 2ndName\nfirst name user.age _note_ note2\n6\nIdentifiers Identifiers\nJava is case sensitive Creating identifiers in your Java programs\nOreo oreo OREO 0reo Remember other people read what you create\nare all different identifiers, so be careful Make identifiers meaningful and descriptive\ncommon source of errors in programming for both you and them\nNo limit to how many characters you can put\nare these all valid identifiers? in your identifiers\nbut don't get carried away\npublic class ReallyLongNamesWillDriveYouCrazyIfYouGoOverboard\n{\npublic static void main (String[] args)\n{\nSystem.out.println (\"Enough already!\");\n}\n}\nWhite Space White Space\n//******************************************************* //*******************************************************\n// Oreo.java Author: Kurt Eiselt // Oreo1.java Author: Kurt Eiselt\n// //\n// Demonstrating good use of white space // Demonstrating mediocre use of white space\n//******************************************************* //*******************************************************\npublic class Oreo public class Oreo1White Space White Space\n//******************************************************* //*******************************************************\n// Oreo2.java Author: Kurt Eiselt // Oreo3.java Author: Kurt Eiselt\n// //\n// Demonstrating bad use of white space // Demonstrating totally bizarre use of white space\n//******************************************************* //*******************************************************\npublic class Oreo2 { public static void main (String[] public\nargs) { System.out.println (\"Feed me more Oreos!\"); } } class Oreo3\n{\npublic static\nvoid main (String[] args)\n{\nSystem.out.println (\"Feed me more Oreos!\")\n;\n}\n}\n7\n//*******************************************************\n// Oreo4.java Author: Kurt Eiselt White Space\n//\n// Demonstrating deep psychological issues with whitespace\n//******************************************************* White space\npublic Blanks between identifiers and other symbols\nclass Tabs and newline characters are included\nOreo4\n{\npublic\nstatic White Space White space does not affect how program runs\nvoid\nmain\n(\nString[] Use white space to format programs we create so\nargs\n)\nthey're easier for people to understand\n{\nSystem.out.println\n(\"Feed me more Oreos!\")\n;\n}\n}\nProgram Development Compiling and Running\nUse an editor to create your Java program Let's try it!\noften called source code command line for now\ncode used interchangeably with program or\nlater we'll use Eclipse\ninstructions in the computer world\nintegrated development environment (IDE)\nAnother program, a compiler or an interpreter,\ntranslates source code into target language or\nobject code, which is often machine language\nFinally, your computer can execute object code\ninsight source object results\nediting translating executing\ncode code\nSyntax Semantics\nRules to dictate how statements are constructed. What will happen when statement is executed\nExample: open bracket needs matching close bracket Programming languages have well-defined\nIf program is not syntactically correct, cannot be semantics, no ambiguity\ntranslated by compiler Different than natural languages like English.\nDifferent than humans dealing with natural Consider statement:\nlanguages like English. Consider statement with Mary counted on her computer.\nincorrect syntax (grammar) How could we interpret this?\nfor weeks. rained in Vancouver it hasn't\nProgramming languages cannot allow for such\nwe still have pretty good shot at figuring out meaning ambiguities or computer would not know which\ninterpretation to execute\n8\nErrors Errors\nComputers follows our instructions exactly\ncompile-time error\nIf program produces the wrong result it's the\nprogrammer's fault insight source object results\nediting translating executing\nunless the user inputs incorrect data code code\nthen cannot expect program to output correct\nresults: \"Garbage in, garbage out\" (GIGO) Error at compile time (during translation)\nDebugging: process of finding and correcting you did not follow syntax rules that say how\nerrors Java elements must be combined to form\nUnfortunately can be very time consuming! valid Java statements\nErrors Errors logical error\nrun-time error run-time error\ncompile-time error compile-time error\ninsight source object results insight source object results\nediting translating executing editing translating executing\ncode code code code\nError at run time (during execution) Logical error\nSource code compiles Source code compiles\nSyntactically (structurally) correct Object code runs\nBut program tried something computers cannot do But program may still produce incorrect results\nlike divide a number by zero. because logic of your program is incorrect\nTypically program will crash: halt prematurely Typically hardest problems to find\nErrors Memory and Identifiers\nLet's try it! Example of a high-level instruction\nA=B+C\nusually errors happen by mistake, not on\nTells computer to\npurpose...\ngo to main memory and find value stored in location\ncalled B\ngo to main memory and find value stored in location\ncalled C\nadd those two values together\nstore result in memory in location called A\nGreat! But... in reality, locations in memory are not\nactually called things like a, b, and c.\n9\nMemory Recap Memory and Identifiers\nMemory: series of locations, each having a unique So what's with the a, b, and c?\naddress, used to store programs and data Machine language uses actual addresses for\nWhen data is stored in a memory location, previously memory locations\nstored data is overwritten and destroyed High-level languages easier\nEach memory location stores one byte (8 bits) of Avoid having to remember actual addresses\ndata\nInvent meaningful identifiers giving names to memory\nData values are locations where important information is stored\n5802 stored in memory\n5803 10110101\n10110101 locations \u2013 more pay_rate and hours_worked vs. 5802 and 5806\n5804 than one location\n5805 Easier to remember and a whole lot less confusing!\nmay be used if the\n5806\ndata is large.\n5807\nAddress*\n*For total accuracy, these addresses should be binary numbers, but you get the idea, no?\nMemory and Identifiers: Variables Programming With Variables\nVariable: name for location in memory where data is stored\n//*****************************************\nlike variables in algebra class // Test.java Author: Kurt\n//\n// Our first use of variables!\npay_rate, hours_worked, a, b, and c are all variables //*****************************************\npublic class Test\nVariable names begin with lower case letters {\nJava convention, not compiler/syntax requirement public static void main (String[] args)\n{\na = b + c;\nVariable may be name of single byte in memory or may refer System.out.println (\"The answer is \" + a);\nto a group of contiguous bytes }\nMore about that next time }\nLet's give it a try...\nProgramming With Variables Programming With Variables: Take 2\n//***************************************** //*****************************************\n// Test.java Author: Kurt // Test2.java Author: Kurt\n// //\n// Our first use of variables! // Our second use of variables!\n//***************************************** //*****************************************\npublic class Test public class Test2\n{ {\npublic static void main (String[] args) public static void main (String[] args)\n{ {\na = b + c; b = 3;\nSystem.out.println (\"The answer is \" + a); c = 5;\n} a = b + c;\n} System.out.println (\"The answer is \" + a);\nLet's give it a try... }\n}\nb and c cannot be found!\nneed to assign values\n10\nProgramming With Variables: Take 2 Now What?\n:\n//*****************************************\n// Test2.java Author: Kurt\n//\nb 00000011 memory\n// Our second use of variables!\n//***************************************** c 00000101\npublic class Test2\n{\npublic static void main (String[] args)\n{ :\nJava doesn't know how to interpret the\nb = 3;\nc = 5;\na = b + c; contents of the memory location\n}\nSystem.out.println (\"The answer is \" + a);\nare they integers? characters from the\n} keyboard? shades of gray? or....\nNow what?\nsuch a lazy computer, still can't find symbols...\nData Types Programming With Variables: Take 3\nJava requires that we tell it what kind of data it is working with\n//*****************************************\n// Test3.java Author: Kurt\nFor every variable, we have to declare a data type //\n// Our third use of variables!\n//*****************************************\nJava language provides eight primitive data types\ni.e. simple, fundamental public class Test3\n{\npublic static void main (String[] args)\nFor more complicated things, can use data types\n{\ncreated by others provided to us through the Java libraries int a; //these\nthat we invent int b; //are\nMore soon - for now, let's stay with the primitives int c; //variable declarations\nb = 3;\nWe want a, b, and c to be integers. Here's how we do it...\nc = 5;\na = b + c;\nSystem.out.println (\"The answer is \" + a);\n}\n}\nPrimitive Data Types: Numbers Primitive Data Types: Non-numeric\nType Size Min Max Character Type\nbyte 1 byte -128 127 named char\nshort 2 bytes -32,768 32,767 Java uses the Unicode character set so each char\nint 4 bytes -2,147,483,648 2,147,483,647 occupies 2 bytes of memory.\nlong 8 bytes -9,223,372,036,854,775,808 9,223,372,036,854,775,807\nBoolean Type\nfloat 4 bytes approx -3.4E38 (7 sig.digits) approx 3.4E38 (7 sig.digits) named boolean\ndouble 8 bytes approx -1.7E308 (15 sig. digits) approx 1.7E308 (15 sig. digits)\nVariables of type boolean have only two valid values\ntrue and false\nSix primitives for numbers Often represents whether particular condition is true\ninteger vs. floating point More generally represents any data that has two\nfixed size, so finite capacity states\nyes/no, on/off\n11\nPrimitive Data Types: Numbers Questions?\nType Size Min Max\nbyte 1 byte -128 127\nshort 2 bytes -32,768 32,767\nint 4 bytes -2,147,483,648 2,147,483,647\nlong 8 bytes -9,223,372,036,854,775,808 9,223,372,036,854,775,807\nfloat 4 bytes approx -3.4E38 (7 sig.digits) approx 3.4E38 (7 sig.digits)\ndouble 8 bytes approx -1.7E308 (15 sig. digits) approx 1.7E308 (15 sig. digits)\nPrimary primitives are int and double\nJust worry about those for now\n12"}
{"text": "Learning outcomes\n\npractice in solving construction problems and in working in small groups as well as individually\n\nso that they will\n\nconsider computers and programming to be natural tools in the engineering work\n\nsee the similarities between program construction and other types of construction work, and\n\nbe able to do some programming.\n\nCourse main content\n\nFundamental computer concepts. Programming in a modern programming language (Python). Data structures. Simple graphics. Problem solving by dividing the problem into sub-problems. Program structuring. Several small programming exercises and one larger, individual programming exercise with emphasis on structuring and specification of the modules being used.\n\nEligibility\n\nPrerequisites\n\nSome computer experience (the concepts of operating system and file and experience from one computer application, e.g. word processing).\n\nEither SF1658 and SF1624 or SF1623 and SF1613. But these courses can be done in parallel with Programming Techniques with PBL.\n\nLiterature\n\nCourse literature will be announced at least 4 weeks before course start at course web page."}
{"text": "Expert Python Programming by Tarek Ziade Review by James Stockford\n\nThis book could as aptly be titled \"Expert Python Development\" with a subtitle along the lines of \"Stakes in the Ground\". The book's subtitle is \"Best practices for designing, coding, and distributing your Python software.\" The stakes in the ground are the most widely accepted tools and techniques, with discussions backed up with references to related PEPs.\n\nThe author, Tarek Ziade, has assembled techniques and wisdom that lets the diligent reader become a Python developer, from coding to building to testing to optimizing, all with preferred tools (Tarek's stakes in the ground) and plenty of code examples.\n\nIt seems that until now (late 2008), all books on Python introduce the Python language at the level of keywords and operators and essential data management. This book assumes all that. The reader should be an experienced programmer who knows at least the basics of the Python language and libraries and wants to improve coding skills as well as the skills needed to be an effective Python developer.\n\nThe book has a little over 350 pages, a ten-page index, and fourteen chapters. Chapter one begins with installation and tools, chapters two, three, and four present coding concerns, subsequent chapters show how to write packages and applications, manage software, document and test, and optimize. The final chapter reviews important design patterns. There is an open source bias. The content is solidly up to Python 2.5, touches on Python 2.6 at times, and hints at Python 2.7. Each chapter is divided into sub-sections and ends with a summary of most important points. The chapter sequence, each with its rigorous format, makes for a highly navigable book.\n\nThe balance of this review tries to bring to light a sense of the information and style that makes this book so distinctively valuable.\n\nThe first sentence in the first chapter begins \"Python is good for developers.\" Along with installation instructions for Linux, Mac, and Windows, Chapter One has information about how to customize the interpreter's interactive prompt (PYTHONSTARTUP=~/.pythonstartup with example directives in the file) followed by sections for iPython, the improved interpreter, and for setuptools and EasyInstall, with instructions and advice. The chapter ends with a section on editors. Chapter One gives you a complete setup for an expert Python developer.\n\nChapters Two through Four present strategic rather than tactical issues of Python coding.\n\nChapter Two, titled Syntax Best Practices--Below the Class Level, treats list comprehensions, iterators and generators, coroutines, decorators, and the with keyword and contextlib. The discussion is in terms of techniques and patterns, not at all on the rudiments of the language. As an example, the Decorators section presents general techniques for writing a decorator and follows with four common patterns for decorators: argument checking, caching, proxy, and context provider.\n\nThere are URLs that point to the python.org documentation, including PEPs, and other internet sources of pertinent information.\n\nThe accompanying code examples are progressively elegant.\n\nSome quotes include \"Pythonic syntax is a syntax that uses the most efficient idioms....\" \"[For every loop]..., try to replace it with a list comprehension.\" Consider generators \"every time you deal with a function that returns a sequence or works in a loop.\" \"Generators can also help in breaking the complexity and raising the efficiency of some data transformation algorithms....\" \"A decorator should focus on arguments that the wrapped function or method receives and returns, and...limit its introspection work as much as possible.\" My personal favorite is \"Keep the code simple, not the data....\"\n\nChapter Three, titled Syntax Best Practices--Above the Class Level, treats subclassing the built-ins and sub-classing in general, with a great discussion of Method Resolution Order as it affects multiple inheritance and a Best Practices sub-section that includes the recommendation that \"multiple inheritance should be avoided\".\n\nThe chapter discusses descriptors and properties in light of Python's lack of the \"private\" keyword found in C++ and Java, an introspection and a meta descriptor, and a good warning discussion about Python's idiosyncratic approach to not using methods overridden in derived classes.\n\nThere is a rare, if brief, discussion of using the __slots__ attribute to sidestep the creation of a class __dict__ list.\n\nThe chapter ends with a section on meta-programming with the __new__ and the __metaclass__ methods. \"__new__ is the answer to the need for implicit initialization of object states...[you can]...define an initialization at a lower lefel than __init__, which is always called.\"\n\nChapter Four, titled Choosing Good Names, opens by refering to PEP 8 and follows with recommendations for variables, functions and methods, arguments, classes, and more. It is a complement to PEP 8 that adds not only some practical wisdom but advice regarding API considerations such as the namespace tree, splitting code, and using eggs. The chapter ends with a discussion of tools such as PyLint and CloneDigger.\n\nChapter Five, Writing a Package, Chapter Six, Writing an Application, and Chapter Seven, Working with zc.buildout, focus on the tools for creating egg-based packages for distribution.\n\nChapter Five assumes that you're designing an eggs-based project using distutils and setuptools to organize, release, and distribute your software in a namespaced package directory tree. It introduces the setup.py script and then progressively exercises the commands to build modules, libraries, C extensions, and scripts to create a binary tree that can be installed and uninstalled in Python's site-packages/ directory.\n\nAdditional tools let you hook in Nose for testing and integrate your package with PyPi (or your choice of some other Python application server). The chapter ends with an extensive look at using Python Paste to create and use a package template.\n\nChapter Six revisits the process to flesh out an application, using Tarek's Atomisator application as fodder.\n\nHe discusses how to use the easy_install tool to set up the environment and add Nose as a test runner, then how to divide out the package structure with a notable discussion of \"leaky wrappers\" (per the Facade pattern) vis a vis full wrappers for API considerations.\n\nThe package testing involves doctest, mock objects, and for the database portion of the app using SQLAlchemy to manage object-relational mappings. The result is a package structure that is \"ready to be distributed by pushing eggs to PyPI.\"\n\nChapter Seven uses the zc.buildout tool to put together a more complex application that, when installed, can span directories, locating log files in /var/log/ and configuration files in /etc/ and so on. Packages are egg-based. There is extensive exercise of the buildout tool's recipe feature, which automates the build process.\n\nAfter discussion, he advises you pick a distributed rather than a centralized version control system. Mercurial is Tarek's pick. He discusses setting it up and integrating it with Apache and buildbot for automating testing through releases.\n\nTrac is his choice for a life cycle management tool, and discussion bears on installation and subsequent integration with Apache.\n\nThe Documenting chapter, which focuses on design docs, presents a set of common sense rule that, like playing the blues, is conceptually easy but requires constant practice to do well.\n\nAs with his other chapters, the test chapter begins with general discussion, in this case with some emphasis on regression and how to contain it. The tools include unittest, doctest, Nose, and py.test. The chapter ends with discussion of fake behavior and mock objects and finally document-driven development.\n\nThe first optimization chapter begins with common-sense reminders first to make code work and keep it readable then address issues of scale and speed followed by an extensive section on profiling.\n\nThe second optimization chapter begins with reducing complexity and measuring cyclomatic complexity as well as Big-O notation, followed by an investigation of optimizing list searches (with a suggestion to consider sets, as members are accessed through a hash rather than walking indexes, which lowers the big-O factor), and more. The threading section is likewise extensive, including discussion of GIL limitations on multiprocessing and the use of pyprocessing for forking, where that is an acceptable approach. The chapter ends with discussion of caching (use the memcached tool).\n\nThe patterns chapter covers creational patterns (the Singleton), structural patterns (the Adapter, the java-style Interface, the Proxy, and the Facade), and behavioral patterns (the Observer, the Visitor, and the Template), with Python code examples and discussions.\n\nWhen I proudly showed my copy of Expert Python Programming to my friend Daniel, he gasped with admiring respect and said \"I bought this book,\" which I think is the ultimate recommendation."}
{"text": "One of the main advantages of OO programming is its ease of modification; objects can easily be modified and added to a system there by reducing maintenance costs. OO programming is also considered to be better at modeling the real world than is procedural programming. It allows for more complicated and flexible interactions. OO systems are also easier for non-technical personnel to understand and easier for them to participate in the maintenance and enhancement of a system because it appeals to natural human cognition patterns. For some systems, an OO approach can speed development time since many objects are standard across systems and can be reused. Components that manage dates, shipping, shopping carts, etc. can be purchased and easily modified for a specific system."}
{"text": "One of the main advantages of OO programming is its ease of modification; objects can easily be modified and added to a system there by reducing maintenance costs. OO programming is also considered to be better at modeling the real world than is procedural programming. It allows for more complicated and flexible interactions. OO systems are also easier for non-technical personnel to understand and easier for them to participate in the maintenance and enhancement of a system because it appeals to natural human cognition patterns. For some systems, an OO approach can speed development time since many objects are standard across systems and can be reused. Components that manage dates, shipping, shopping carts, etc. can be purchased and easily modified for a specific system."}
{"text": "of programming patterns that have proven over time\nto be successful. Though developers use these programming patterns in creating game behavior, the scripting\nlanguages usually do not support them explicitly. One of\nthe reasons object-oriented programming languages have\nbeen so successful is that object-oriented programming\npatterns existed long before the languages that supported\nthem. Similarly, by examining existing programming\npractices in game development, we can design scripting\nlanguages that require very little retraining of developers. The challenge in developing a scripting language is\nidentifying those patterns and creating language features\nto support them most effectively.\n\nTHE S TA TE-EFFEC T PA T TERN\n\nOne popular pattern in game development is the\nstate-effect pattern. Every game consists of a long-running\nsimulation loop. The responsiveness of the game to\nplayer input depends entirely on the speed at which the\n\nsimulation loop can be processed. In the state-effect pattern, each iteration of the simulation loop consists of two\nphases: effect and update. In the effect phase, each game\nobject selects an action and determines individually the\neffects of this action. In the update phase, all the effects\nare combined and update the current state of the game to\ncreate the new state for the next iteration of the simulation loop.\n\nBecause of these two phases, we can separate the\nattributes of game objects into states and effects. State\nattributes represent the snapshot of the world after the\nlast iteration of the simulation loop. They are altered only\nin the update phase and are read-only in the effect phase.\nEffect attributes, on the other hand, contain the new\nactions of the game objects, and the state of the game is\nupdated with effects during the update phase. Because\ninteractions between game objects are logically simultaneous, effect values are never read until the update phase.\nHence, effect values are, in some sense, write-only during\nthe effect phase.\n\nGame physics provides many examples of this pattern. At the beginning of the simulation loop, each game\nobject has a current position and velocity recorded as\nstate attributes. To compute the new velocity, each object\ncomputes the vector sum of all of the forces acting upon\nit, such as collisions, gravity, or friction. In other\nwords, the force attribute\nmay be written to multiple\ntimes during the simulation loop, but it is never\nread until all of the force\nvalues have been summed\ntogether at the end of the\nloop. The example in figure\n2 illustrates the use of the\nstate-effect pattern to simulate objects moving about\nin a potential field. The\nvariable force is an effect\nin this calculation. During\nthe effect phase we only\nincrement its value and\nnever read it to determine\ncontrol flow. Whereas most\nimplementations would\nread the old value of force\nto perform this increment,\nthis is not necessary; we\ncould also gather all of"}
{"text": "This unique book uses multimedia applications to motivate introductory computer science majors or non-majors. The book's hands-on approach shows how programs can be used to build multimedia computer science applications that include sound, graphics, music, pictures, and movies. The students lea...\n\nFor CS1 courses in Python Programming (including majors and non-majors). \u00bf A problem-solving approach to programming with Python. \u00bf The Practice of Computing Using Python introduces CS1 students (majors and non-majors) to computational thinking using Python.\u00bf With data-manipulation as a theme, stud... p..."}
{"text": "C++ Syntax:\nA good C++ programming environment can enhance productivity.\nA bad C++ programming environment can result in endless memory leaks\nand segmentation faults. In this tutorial, we describe the subset of\nC++ that we stress in our software development.\n\nC++ Standards:\nAt the core of our software engineering philosophy are a set of\nstandards for how we develop C++ code. These include many conventions\nfor the cosmetics of the code as well as structural issues such as variable\nnaming conventions. The general goal of these standards is to enhance the\nreadability of the code.\n\nHTML Standards:\nThis tutorial will help identify the HTML standards that are necessary in\norder to create uniform, easily understandable, and error free web pages.\n\nJava Standards:\nJava code is very similar to C++. Hence, many of the standards described here\nfollow our C++ standards. However, Java supports a documentation generation\ntool known as Javadoc. This tutorial teaches you how to format and document\ncode so that Javadoc will produce high-quality documentation.\n\nMicrosoft Word Standards:\nConsistency in the formatting of Microsoft Word documents is very important,\nespecially where it concerns published documents and conference papers.\nHere we describe in detail the standard template to be used on all IES\ndocuments.\n\nProgramming Language Standards:\nWe have collected a number of useful links that point to\ndefinitions of various programming language standards.\nSuch documents are an important tool for tracking conformance\nto a particular language standard and guaranteeing compatability\nwith future versions of compilers (particularly gcc).\n\nReference Formats:\nWe use a standard format for citations. This document provides example\ncitations for all types of documents we reference in our software\nand publications, including electronic documents such as URLs.\nThese recommended formats are based on the IEEE standards.\n\nISIP Foundation Classes (IFCs):\nThe ISIP Foundation Classes (IFCs) represent a comprehensive\nhierarchical set of C++ classes that support advanced research in\nsignal processing. The IFCs include modular implementations of a\nspeech recognizer, generic pattern recognition and signal processing\nalgorithms, template-based data structures, matrics, vectors, and even\nan abstract file I/O interface.\n\nMonthly Tutorials:\nThis section contains tutorials created by members of IES in order to\nguide you through parts of our speech recognition software.\nVisit the guided tutorial archive\nhere."}
{"text": "Java Development Environments\n\nby Steve Sheets\n\nA look at Metrowerks CodeWarrior using Java and Symantec Visual\nCafe for Java\n\nState of the Mac\n\nUntil now, there has probably been a larger industry in writing about Java programming than actually programming in this new computer language. This may finally be a thing of the past. There are significant reasons (Web usage, cross platform ability, Internet tools and others) for Macintosh programmers to learn and use the Java environments.\n\nThis article is not intended to sing the praise of or explain how to program in Java, but to quickly educate the Macintosh programmer about the Java tools that he can use. We will examine the two most common Java IDEs (Integrated Development Environments): Metrowerks CodeWarrior using Java and Symantec Visual Cafe for Java. Each tool offers a different approach to developing Java and has different strengths. In this article we will discuss the current release of both IDEs, CodeWarrior Pro 2 and Visual Cafe 2.0. The next revision of both products may be out soon after this article is printed. We will also explain some of the promised new features.\n\nMetrowerks Java: One More Language Target\n\nIt is fair to say that the premier tool for Macintosh programming is Metrowerks' CodeWarrior. It is by far the most popular programming environment. Even the developers who use other IDEs recognize CodeWarrior's advantages. Programmers can develop Macintosh and PC programs in C, C++ and Pascal, and now in Java.\n\nFigure 1. CodeWarrior Appearance.\n\nMetrowerks accomplished this by adding Java features to existing tools, rather than building all new ones. Java developers use the same IDE that Mac developers have been working with for years. Programmers create CodeWarrior project files to manipulate sets of targets and source files. The same refined and powerful editor is used to manipulate Java source files. In fact, if BBEdit users wish, they can continue to use BBEdit (from Bare Bones) as a replacement editor. Programmers also will not be surprised to find the Metrowerks' source level debugger (MWDebug) has been updated to handle Java code. The Class Browser, Constructor and Profiler tools also have been updated to run with Java code.\n\nFigure 2. CodeWarrior Editor.\n\nMetrowerks has added Java support by adding a Java Compiler and a Java Linker (both IDE plug-ins), along with a few other tools (JavaDoc, Class Wrangler, Java Constructor), including several Virtual Machines (VMs). Remember, Java is both a language and a target platform. You must understand this or the rest of this article will not make sense. When a Java developer compiles a source file, it is converted into bytecodes, not into 68000 or PowerPC assembler. These bytecodes are designed to run on a Java Virtual Machine (VM). The VM will interpret the bytecodes (or compile them, using just-in-time technology) into whatever native code runs on a specific platform.\n\nAfter the Java compiler converts the Java text source into standard Metrowerks object files, and after the Java Linker has converted the object files into some executable target, some VM must be used to execute the code. When a developer uses the Metrowerks CodeWarrior for Java, he has three versions of the VM available. Metrowerks decided to ship two separate versions of their VM: one with JITc (just-in-time compiler), and one without it. They recommend using the non-JITc version for debugging, and using the faster JITc version in the finished product. Both versions support the JDK 1.1 API. They also included a pre-release version of MRJ 2.0 from Apple (which also was supports the JDK 1.1 API). The final MRJ 2.0 (shipped with 8.1) works flawlessly with Metrowerks Java.\n\nFor those familiar with Metrowerks' array of options for C++ Compiler, the Java compilers options are few and easy to understand. You can use the Profiler Information option to generate timing information. You then use the MWProfiler tool to examine this information. The compiler also can generate Dependency Maps. These maps list all the class dependencies for each class in the target. Other compiler options include inlining of small methods, using strict source and package hierarchy paths, using strict Java filenames, giving warning messages about depreciated methods, creating headers for any native methods (using JNI style headers or Sun VM style headers) and using semicolon delimited list of names that will not show up in the class browser.\n\nJava Outputs\n\nThere are three types of executable targets that the Java Linker produces; Applets (intended to be run inside of Web Browser such as Internet Explorer or Navigator), Applications (stand alone code to be run under a VM) and Java Libraries. All three types of output are available as template projects, which quickly automate the process of creating a project. All three outputs can be generated three ways: as class files (JDK 1.x method to distribute executable files), as JAR files (JDK 2.0 method that uses compression similar to ZIP) and as Macintosh executables (not true 68000 or PowerPC executable, more about this in bit). JAR files are quickly becoming the best method of output. They come in compressed and uncompressed versions, and can have manifest files (a JavaBean feature) generated for them. Unfortunately, there is no direct control of the content of the manifest files, thought this may be changed in future versions.\nWhen an Applet is generated, the developer can specify the browser that will be used to display the Applet. While this can be any browser (Apple's Applet Runner, Netscape's Communicator/Navigator, Microsoft's Internet Explorer), Metrowerks supplies it's own default tool, \"Metrowerks Java\". They could have been a little less confusing with that name! This application contains several utilities, including simple and command-line interfaces for executing Applets and Applications, a bytecode disassembler, the Sun version of the Java Compiler, and a Native Code Generator (to create C interface files). Experienced Sun Java users would consider this the \"Java\" tool for the Macintosh. Metrowerks Java is the only way Java code can be debugged by the Metrowerks' source level debugger. When either of Metrowerks' VMs are selected and the Java files are compiled with debug information, MWDebug can be used to step through the code being executed by the Metrowerks Java application.\n\nFigure 3. CodeWarrior Debugger.\n\nMWDebug has been updated for several Java specific features. The developer can view a disassembly of the Java VM instructions and registers, view and debug several threads at the same time (each in it's separate process window), and set break points on lines of source code or Java exceptions. So far, JAR compressed files can not be debugged, though this may change in the future. Metrowerks will be updating CodeWarrior to allow debugging while running other browsers (Applet Runner, Internet Explorer) in the near future. Debugging applets while running under Netscape products may take a little longer, because they use only their own VM.\n\nRather than creating a Java Class file or JAR file, a developer can output a Java application as a Macintosh application. There are two flavors of such an output; one without VM embedded and one with VM embedded. Both flavors have the advantage of being double-clickable like any Mac application, and being able to have their own custom icons. The non-VM version still runs either Metrowerks or Apple's VM in order to execute. There are specific rules about where the VM must reside in relation to the application the programmer has developed. The VM version has the bytecodes as well as an entire copy of a Virtual Machine inside the application as resources. Java does not have to be installed on the target computer for this type of application to run. The main disadvantage of the VM version is size. The embedded VM takes over 5 Meg of hard disk space per application.\n\nFor now, this is the only way to use Java CodeWarrior to create true stand alone, Macintosh applications. Metrowerks has promised a true Java to native code product in the near future. This would create true Macintosh applications from Java source. The CodeWarrior Pro 3 release may have a prototype of such a feature, though it will probably support x86 native code first, followed by 68000 code, then PowerPC native. When the Mac and Windows versions are completed, we will see some of the promise of commercial cross platform usage of Java.\n\nOther CodeWarrior Tools\n\nOne other useful Java tool is the JavaDoc compiler/linker. This tool processes Java source code files to generate HTML based documentation for the code. It uses the comments preceding classes and methods for it's content. This tool is often used on the Sun workstations to produce the manuals. Since Metrowerks uses Javasoft's Compiler, the tool is implemented as a compiler/linker. To use it, you must add another target to the project file, setting the JavaDoc target option. CodeWarrior's various project templates include the JavaDoc target. The options for this tool include deciding which comments are ignored, the scope of the documentation, and whether to generate indexes or hierarchies.\n\nClass Wrangler is a utility for viewing and modifying JAR files that contain Java classes. These Java Classes can be added, removed or copied to other JAR files. Information like source files, super classes, interfaces, methods and fields also can be viewed. You can add or remove manifest files, but there is no direct support for modifying them.\n\nOne last feature worth mentioning is Metrowerks' Java Constructor. The original Constructor was a RAD tool for designing user interfaces for PowerPlant. The Java Constructor application is a visual interface builder for the Java Abstract Windowing Toolkit, or AWT. Layouts, Windows, Components, Containers, Menus and Menubars all can be created and used inside applets and applications. The Constructor uses a project file similar to the CodeWarrior IDE. The output of the visually constructed project is a Java source file which can be used directly by a Java project. The Java project need make only a couple of simple calls and include the generated Java file and a Reanimator.Zip file to invoke the user interface. Unfortunately, this tool has not been updated to support the new JDK 1.1 Event Model and JavaBeans.\n\nAs always, Metrowerks ships all of their documentation on CD. The hard copy book \"Inside CodeWarrior Professional Release #\" containing some of the manuals (including the \"Targeting Java\" section) usually can be purchased soon after that revision of the product ships (for around $40 dollars). Metrowerks makes up for not shipping the printed version of the manual by including many additional manuals and books on a second CD. This includes most of the Sun documentation and examples, as well as some very good Metrowerks examples. In addition, Dave Mark's book \"Learn Java on the Macintosh\" is included on the CD for free.\n\nSystem Requirements\n\nMetrowerks minimum requirement for running CodeWarrior, regardless of target language, is an 68020 Mac (or better), 8 Meg of RAM, System 7.1, CD ROM drive, and a very large hard drive. (Installing all the features, called Metrowerks Heaven in the installer, can take over 400 Meg without all the documents and examples!) Even Metrowerks recommends at least 68030 Mac with 16 Meg of RAM (a PowerPC would be best). While the IDE is a fat Mac application, realistic developers would consider a PowerPC Macintosh a truer requirement. The more RAM, the better! Installing only the Java portion of the Metrowerks IDE requires a little over 100 Meg of disk space, not including examples and documentation, which are separate.\n\nMetrowerks CodeWarrior is sold for $449 and includes the Mac and the Windows version of the product. Purchasing the product provides one free upgrade (they come out regularly) and one year of tech support. Tech support answers feature questions more readily than programming questions.\n\nVisual Cafe: RAD For Mac Java\n\nSymantec took a different approach when creating Visual Cafe 2.0. They wanted to create a Macintosh Java Rapid Application Development tool. They have succeeded beyond the greatest expectations of Macintosh developers. In the Mac package, there is no C/C++/Pascal support, no Windows support, and there is no custom VM. The Windows version of Visual Cafe is a separate product. Visual Cafe ships with a pre-release version of Apple's MRJ 2.0. Java applications run from the desktop, and the default setting has Applets executed from Apple's Applet Runner.\n\nVisual Cafe is built around components, forms and project files. A component is a user interface element (called a visual component) or a logical entity (called an invisible component) that can be attached to the Java program. For example, buttons are visual components, while timers are an invisible one. The first thing a programmer notices when starting Visual Cafe is the floating tools palette across the top of the window. A configurable list of components is displayed on the palette using a tab interface. These and other components also are in the Component Library Window. All components have properties which include their icon and position.\n\nFigure 4. Visual Cafe Appearance.\n\nForms are containers for other components, like windows, dialog boxes and applets. When opened, they appear like a drawing program, with any components attached to them visible on the form. Components can be moved around, added to and deleted from the form, just like drawing primitives are modified on a drawing document. Forms are themselves components, and as such can be added to the Component Library.\n\nProject files keep track of the files that Visual Cafe is currently working with. The project window can be set to show the files, the objects (components) or the packages (targets to be created). Selecting an item from the project file invokes the appropriate editor.\n\nTo create a Java applet or application, the user selects a New Project template. Since such templates are themselves components, they can be added and removed from the IDE by the developer. Usually the project has some preset files, forms and components. Components on the form are linked to the source code files. The user opens the forms using the Forms Editor, and modifies the components on it, which causes changes to the source code. Similarly, changes to the code using the Source Editor can change the forms layout. Both editors function the way developers would expect with Find/Replace/Grep features, Layout Menu Items and Insert Menu Items.\n\nBesides moving components on the form, the developer can edit components in other ways. Each component has properties associated with it. When the Property window is open and a component is selected, the Property window displays the editable properties for the programmer to change. This is similar to using ResEdit to open and change a resource. Changes to the property of a component will be reflected in the code.\n\nWhich type of component you modify is unimportant. Adding a component to a form might create simple Java AWT drawing commands, or it might generate code to create a AWT object like a Bbutton, or it might generate code to instantiate a JavaBean. To help generate code, Visual Cafe has a set of powerful tools called the Interactive Assistants. These tools may also be referred to as Wizards (the common name for such utilities in the Windows world). Double-click a component, and the Add Event Assistant appears with a list of all events for that component. Selecting an event will automatically generate source code to handle that event. This usually generates some empty method source, which the user can modify.\n\nSome component actions can be linked to already defined methods on other objects, thus creating programming logic without the developer typing a single line of code. Menu Editor is used in similar way to handle Menu Events inside the Java code. Similar Assistants exist to link two components together, to create dependency. The Insert Class Assistant quickly creates custom classes in the Java project. The Java Bean Assistant automates the formerly difficult process of JavaBean creation.\n\nThe ease of Visual Cafe development can not be understated. You can create entire Java applets graphically without any code being entered. When new routine need to be added, Visual Cafe handles the insertion of empty methods with a simple few clicks. You do not have to look up the call, or the correct parameter list or format. Adding additional code to existing programs is that simple!\n\nJava Outputs\n\nOnce the source is created, the developer outputs the code in the three standard formats; applet, application and library. Each output is compiled in a debug version (with debugging information) or a final version (without debugging information, thus smaller). The three outputs are in the form of class files, a zip file or the newer JAR file format, either compressed JAR or uncompressed JAR. If the output is an application, there is an additional option of creating a MRJ Application.\n\nFigure 5. Visual Cafe Project Options.\n\nA MRJ application is a stand alone Mac application, thus it has custom icons and is double-clickable. Since this application still uses bytecodes, it requires Apple's MRJ on the computer. You do not need a separate tool to invoke the application, but there is no command line interface. The command line for the application is set as part of the compiler options. MRJ applications are the only way to run Visual Cafe created applications on the Macintosh. If the developer wants to generate a JAR file, and the MRJ Application option is turned off, but the he still wants to run or debug the application, the MRJ application is still created and invoked.\n\nSymantec hopes to have a Java to Mac Native code compiler before long. The Windows versions of Visual Cafe already has an early release of this feature. Windows Visual Cafe can compile a Java application directly into x86 code. Such an application can be executed on any PC even if Java is not installed.\nAs long as the MRJ VM is being used to execute the applet or application, Visual Cafe can use it's built in source level debugger. Any browsers that support MRJ can run the Applet, while Visual Cafe steps through the actual code. This includes Apple's Applet Runner, Symantec's Visual Page, and depending on the release, Microsoft's Internet Explorer. The debugger tools are what one expects with Watch, Call Stack and Breakpoints windows. The code can have a breakpoint at a source line or it can break due to a Java exception. The debugger easily steps through the various defined class libraries, which is a good way to learn about the framework.\n\nFigure 6. Visual Cafe Editor/Debugger.\n\nOther Visual Cafe Tools\n\nJavaDoc, the utility to convert Java source code files into HTML based documentation, is built into Visual Cafe as a project option. The developer can set where the document is created, whether the Author or Version information should be included, whether a index of all the classes should be created and whether a hierarchy tree of all the classes should be created.\n\nOther compiler options include creating optimized code, using Finder memory, updating imported files when needed, selecting the error reporting and selecting the Unicode support used. Optimized code runs faster, but is larger due to inlining of methods. Project command include setting search paths, disassembling the source, bundling the external classes into the project, and removing the class files. The majority of these commands are similar to most other project based IDE. Visual Cafe has all the project commands you would expect if you had used CodeWarrior, just in different locations.\n\nVisual Pages, an excellent WYSIWYG web authoring tool is included on the CD by Symantec. This product will do almost everything a web designer needs to do, without forcing the designer to learn HTML. The graphic design portion of the program will look familiar to anyone with experience in any draw or paint program. For those who like the power of directly editing the HTML source, there is a mode to do that. One can switch editing between either mode (graphic or HTML) without losing changes or features. Since Visual Cafe is an editor and browser, applets running under it can be debugged by Visual Cafe.\n\nFigure 7. Visual Page.\n\nWhile there is additional documentation on the CD, the product ships with 4 printed manuals. There are Getting Started manuals for both Visual Cafe and Visual Page, as well as the User Guides for both products. The application comes with built in help documentation including the Java API Document in hyper-linked format. Symantec seems to know their developers will have a learning curve, and tries to ease them over it.\n\nSystem Requirements\n\nSymantec's minimum requirement for Visual Cafe is an PowerPC Mac, 32 Meg of RAM, System 7.6 with QuickTime, CD ROM drive, and 80 Meg of disk space. There are two versions of the software package. The Professional Development Version has all the features mentioned above. The Database Development Version includes everything from the Development Version, plus features designed for Java database applications. Database components include dbAware Project Assistant which quickly sets up database-aware applets and applications. Copies of the Windows application dbANYWHERE Workgroup Server and the Mac applications Lasso and FileMaker Pro are also included on the CD. There are also three comparable Windows versions of the product (Web Developer, Professional and Database). The Web version has all the features of the Professional, without the incremental debugger and the Java to Native x86 compiler.\n\nThe Development version of the product for the Mac is sold for $299.95 while the Database version is priced at $499.95. Prices for the Windows versions of the product are identical, while the Windows Web version is a low $99.95. The upgrades have been steady, but are not on any regular schedule, nor is the policy for upgrade cost always set. Symantec has Standard Care support, which mostly includes installation questions, for 90 days, starting with the first phone call. Various other paid support packages are available, such as per minute, per call and per year.\n\nWhich is for You?\n\nCodeWarrior has many advantages. For instance, most developers already have it. It will probably be their first taste of Java development; they probably used Metrowerks VM before they ever installed the one from Apple. CodeWarrior has a huge installed base of developers and users. Most are already familiar with the IDE and the Metrowerks Debugger. Metrowerks tools have been refined over time, and it shows. Developers will feel comfortable with the editor and debugger, and will have little learning curve required for using the tools. Learning Java is another thing!\n\nAs most cross platform developers know, using two development systems (C++ and Java, Mac and Windows) at the same time can drive one to distraction. A programmer is always hitting the wrong keys on the wrong software program. A cross platform system like CodeWarrior can solve this problem.\n\nIf a developer is creating some Java application while at the same time creating a Macintosh application (ex. client/server), then the ability to have projects with both Java and Mac targets is priceless. Similarly, developers who are creating Mac code that calls Java code (or visa versa using JManager), would want to use CodeWarrior. Since both the Macintosh and Windows versions of the IDE ship with the package, cost effective cross platform developers may prefer CodeWarrior.\n\nAnother advantage is that the performance of CodeWarrior is superior. This is especially noticeable when running an applet and switching to the Metrowerks Java application. The compilers and linkers are quick and smooth, while invoking an applet takes almost no time at all.\n\nOn the negative side, CodeWarrior is not a Java Rapid Application Development (RAD) tool. Once a project template has been created, the user is on his own when programming Java. The Class Browser and Constructor provide some user interface support, but not the capability of visually linking actions and events to code. There is no built in Java class creator, nor any built in visual tool to link events to methods. The Constructor needs to be updated to handle JavaBeans, which are quickly becoming the component of choice for Java programmers.\n\nCodeWarrior's weaknesses and strengths are reversed in Visual Cafe. What Visual Cafe does, it does well. It uses JavaBeans, and to lesser extent all of it's components, the way component software was designed to work. It is a breeze to add third party beans or components the programmer makes himself. Visual Cafe support for creating JavaBeans is hard to beat. For developers creating applets with web pages, Visual Page with Visual Cafe is an excellent bundle.\n\nThe Interactive Assistants are a joy to use. Using a traditional editor under C++, a good portion of the programmer's time is spent creating or editing interfaces of functions. Under Visual Cafe, the outline of the method is constructed for the programmer, all he does is enter the important code. Nor does the program need to spend time tweaking the layout of the form from the source code. He can graphically lay out the form or come back later to change it.\n\nAll of the helpful features of Visual Cafe seem to be at a price of performance. Moving from one function to another can be slow. Like all applications, this is less noticeable with more powerful machines, so the users will have to judge this themselves. Learning all the commands and components, while not endless (after all, this is RAD), will take time. Symantec seems to be aware of this, and tries to offset the problem with Online Help, Tours and Examples. One last problem is the definite \"new software\" feel of the product. Features are hidden, or implemented in ways other than expected. For example, there is no debugger command window and too many Command-Shift keys. The \"software polishing\" of Visual Cafe is something that will just have to take time.\n\nStill, Visual Cafe is a RAD tool. Any slow down in switching between sections is more than compensated by the speed of development of the project. Once learned, Visual Cafe can make a major difference in total project time. As JavaBeans become more dominant and more available from third parties, the time saving in using visual tools will increase.\n\nWhich one will you use? It would not be surprising to see both products on a developer's hard drive. Many developers use CodeWarrior and MPW at the same time for projects. If Metrowerks provide better RAD features, or if Symantec \"polishes\" the product more, one could edge out the other. Until then, the best tool for a developer may be the one he is most comfortable with. Isn't that always the case?\n\nWeb Surfing for More Information\n\nHere are some useful sites for Java developers. As always, let the developer beware when using Alpha or Beta software. There is a reason they call it \"bleeding edge\" technology!\n\nSteve Sheets, MageSteve@AOL.Com, and 2 daughters), Society for Creative Anachronism (Medieval Reenactment) and Martial Arts (Fencing, Tai Chi). He is currently an independent developer, taking on any and all projects and"}
{"text": "Editorial Reviews\n\nA Fully Revised Edition Featuring New Material on Coroutines, Debugging, Testing, Parsing, String Formatting, and More\n\nPython 3 is the best version of the language yet: It is more powerful, convenient, consistent, and expressive than ever before. Now, leading Python programmer Mark Summerfield demonstrates how to write code that takes full advantage of Python 3's features and idioms. Programming in Python 3, Second Edition, brings together all the knowledge you need to write any program, use any standard or third-party Python 3 library, and create new library modules of your own.\n\nSummerfield draws on his many years of Python experience to share deep insights into Python 3 development you won't find anywhere else. He begins by illuminating Python's \"beautiful heart\": the eight key elements of Python you need to write robust, high-performance programs. Building on these core elements, he introduces new topics designed to strengthen your practical expertise\u2014one concept and hands-on example at a time. Coverage includes\n\nDeveloping in Python using procedural, objectoriented, and functional programming paradigms\n\nProgramming in Python 3, Second Edition, serves as both tutorial and language reference. It assumes some prior programming experience, and it is accompanied by extensive downloadable example code\u2013all of it tested with Python 3 on Windows, Linux, and Mac OS X.\n\nRelated Reviews\n\nThis is a great book that covers Python 3 in a very orderly and concise manner. Readers are quickly introduced to the power of the language in the first 2 chapters, then each of the topics are covered in a more in depth way later in the book. This, however, is why I gave it only 4 stars. These beginning chapters may feel intimidating to some as the may feel as though they have been dropped in the deep end of the pool. More complex concepts like short-circuit logic are given but a few lines of explanation where a more detailed analysis may be warranted. All that said, it is the book I chose as the text for the python course I teach at the college level. I have limited time to get the students up and running, and this book surely does that. It also is a good stand alone reference that many of my students have chosen to keep on their bookshelves rather than return to the bookstore at the end of the semester. In short, it is concise, fast-paced, and in depth - covering enough of the language that the reader can come out the end feeling like they have a fairly good grasp of the language, concepts, and \"pythonic thinking.\"\n\nMark Summerfield's text: \"Programming in Python 3\" is a very good introduction to the Python programming language for people with prior programming experiance in another language. I came to Python from MatLab and prior to that, C and Fortan. So I'm pleased with the book and find myself refering back to it quite often. Having said that, this is not a \"For Dummies\" type book. Familiarity with with directory structure, file handling, and command prompt (console) operation is assumed.\n\nThe book covers all of the built in types and programming constructs of the Python language. It also introduces some of the useful (batteries included) standard library functinality along with details for working with modules and packages.\n\nFinally, as I'm working my way into the middle of the book, I'm finding that it's a good introduction to object-oriented (OO) programming concepts and techniques in the clean syntax of the Python language. The OO concepts are not obfuscated by a language that is too criptic or too messy. Since this is about where I'm at on my own learning curve, the book is proving quite useful.\n\nAs others have noted, this is a fast paced book which covers Python 3 very well. The only reason I give it 4 stars instead of 5 is that the exercises are not very useful. They almost all consist of minor modifications to a program which has been discussed in the text. This is not enough to learn the language. One must also write programs from scratch, or at least make major changes to existing programs.\n\nThe second edition of Mark Summerfield's PROGRAMMING IN PYTHON 3 has been fully revised to include new material on debugging, testing, string formatting and more, and is a 'must' for any programmer's library strong in Python programming. From creating custom packages to writing and reading binary, text and XML files, this comes packed with keys to successful Python programming.\n\nI bought the 1st edition of this book about one year ago, and would give it 3 to 4 stars (it is too verbose for my taste). According to the review, this 2nd edition, which became available as soon as 1 year after the first one (and Python 3 specs haven't change in this period of time) is \"A Fully Revised Edition Featuring New Material on Coroutines, Debugging, Testing, Parsing, String Formatting, and More\". So, certainly the 1st edition I bought was the \"draft\" of the book which was probably thrown out to the shops due to marketing pressure. I feel cheated.\n\nI'm NOT buying this 2nd edition (certainly the 3rd will arrive in a few months...). Instead I'll buy David Beazley's Python Essential Reference (4th Edition), whose 1st and 2nd editions I own have served me very well, and each edition lasts for 3 or 4 years."}
{"text": "Synopsis\n\nMake the most out of the world's first truly compact computer\n set it up to run robots, multimedia centers, and more.\n\nGets you up and running on Raspberry Pi, a high-tech computer the size of a credit card\n\nHelps educators teach students how to program\n\nCovers connecting Raspberry Pi to other hardware, such as monitors and keyboards, how to install software, and how to configure Raspberry Pi\n\nShows you how to set up Raspberry Pi as a simple productivity computer, write basic programs in Python, connect to servos and sensors, and drive a robot or multimedia center\n\nAdults, kids, and devoted hardware hackers, now that you've got a Raspberry Pi, get the very most out of it with Raspberry Pi User Guide"}
{"text": "In a surprisingly lively textbook-style treatment, Data Structures and Program Design in C++ delivers expertise and plenty of sample programs for the working C++ programmer or computer science student.\n\nWhile some books on data structures stress theory and mathematical concepts over real-world sample code, this guide illustrates its tour of data structures--such as stacks, lists, queues, trees, and graphs--with clear, engaging samples. Throughout, the authors make use of built-in C++ features (such as the Standard Template Library [STL] and templates) where appropriate.\n\nEarly chapters use such interesting examples as Conway's Game of Life, chess and game programming, a simple calculator, and an airport simulation. Along the way, the reader will learn about lists, stacks, and queues.\n\nIn later chapters, covering thornier topics such as sorting algorithms, trees, and graphs, the authors do not skimp on the mathematical underpinnings for measuring efficiency. Instead, they take extreme care to introduce everything required to understand such conventions as the \"Big O\" notation and principles of logarithms.\n\nThe book closes with a case study that combines several data structures and strategies. (The example, a Polish notation expression parser, is a difficult and common real-world sample.) -- Richard Dragan[via]"}
{"text": "Click on the Google Preview image above to read some pages of this book!\n\nSERIES TAGLINE: The Interactive Computing Series is the Visual, Interactive way to develop and apply software skills. This Skills based approach coupled with its highly illustrated, 2 page-spread design is ideal for the intro CIS course, the self-paced course or students in non-traditional education settings.\n\nIntroduction to Windows 2000 Managing Files with Windows Explorer Working with Internet Explorer"}
{"text": "Section 3.8\n\nIntroduction to GUI Programming\n\nFor the past two chapters, you've been learning the\nsort of programming that is done inside a single subroutine. In the rest of the\ntext, we'll be more concerned with the larger scale structure of programs, but\nthe material that you've already learned will be an important foundation for\neverything to come.\n\nIn this section, before moving on to programming-in-the-large, we'll take a\nlook at how programming-in-the-small can be used in other contexts besides\ntext-based, command-line-style programs. We'll do this by taking a short,\nintroductory look at applets and graphical programming. The point here is\nnot so much to understand GUI programming as it is to illustrate that\na knowledge of programming-in-the-small applies to writing the guts of\nany subroutine, not just main().\n\nAn applet is a Java program that runs on a Web\npage. An applet is not a stand-alone application, and it does not have a\nmain() routine. In fact, an applet is an object\nrather than a class. When Java first appeared on the scene, applets\nwere one of its major appeals. Since then, they have become much less important,\nalthough they can still be very useful. When we study GUI programming\nin Chapter 6, we will concentrate on stand-alone GUI programs\nrather than on applets, but applets are a good place to start for our\nfirst look at the subject.\n\nWhen an applet is placed on a Web page,\nit is assigned a rectangular area on the page. It is the job of the applet to\ndraw the contents of that rectangle. When the region needs to be drawn, the Web\npage calls a subroutine in the applet to do so. This is not so different from\nwhat happens with stand-alone programs. When such a program needs to be run, the\nsystem calls the main() routine of the program. Similarly, when an\napplet needs to be drawn, the Web page calls a subroutine in\nthe applet. The programmer specifies what happens when this routine is\ncalled by filling in the body of the routine. Programming in the small!\nApplets can do other things besides draw themselves, such as responding when\nthe user clicks the mouse on the applet. Each of the applet's behaviors is\ndefined by a subroutine. The programmer specifies how the\napplet behaves by filling in the bodies of the appropriate subroutines.\n\nTo define an applet, you need a class that is a subclass of the built-in\nclass named Applet. To avoid some technicalities in\nthis section as well as to make things a little more interesting, we will\nnot work with the Applet class\ndirectly. Instead, we will work with a class that I wrote named\nAnimationBase, which is itself a\nsubclass of Applet. AnimationBase\nmakes it easy to write simple animations. A computer animation is\nreally just a sequence of still images, which are called the frames\nof the animation. The computer displays the images one after the other. Each\nimage differs a bit from the preceding image in the sequence. If the\ndifferences are not too big and if the sequence is displayed quickly enough,\nthe eye is tricked into perceiving continuous motion. To create the\nanimation, you just have to say how to draw each individual frame.\nWhen using AnimationBase, you do that by filling\nin the inside of a subroutine named drawFrame().\nMore specifically, to create an animation using AnimationBase,\nyou have write a class of the form:\n\nwhere name-of-class is an identifier that\nnames the class, and the statements are the\ncode that actually draws the content of one of the frames of the animation.\nThis looks similar to the definition of a\nstand-alone program, but there are a few things here that need to be explained,\nstarting with the first line.\n\nWhen you write a program, there are certain built-in classes that are\navailable for you to use. These built-in classes include System and\nMath. If you want to use one of these classes, you don't have to do\nanything special. You just go ahead and use it. But Java also has a large\nnumber of standard classes that are there if you want them but that are not\nautomatically available to your program. (There are just too many of them.) If\nyou want to use these classes in your program, you have to ask for them first.\nThe standard classes are grouped into so-called \"packages.\" One of these\npackages is called \"java.awt\". The directive \"import\njava.awt.*;\" makes all the classes from the package java.awt available for use\nin your program. The java.awt package contains classes related to graphical\nuser interface programming, including a class called Graphics. The\nGraphics class is referred to in the drawFrame() routine above\nand will be used for drawing the frame.\n\nThe definition of the class above says that the class \"extends\nAnimationBase.\" The AnimationBase class\nincludes all the basic properties and behaviors of applet objects (since it is a subclass\nof Applet). It also defines the basic properties and behaviors\nof animations -- it \"extends\" class Applet by adding in\nthis extra stuff. When you extend AnimationBase,\nyou inherit all these properties and behaviors, and you can add even more stuff,\nin particular the drawing commands that you want to use to create your animation.\n\n(One more thing needs to be mentioned -- and this is a point where Java's\nsyntax gets unfortunately confusing. You can skip this explanation until\nChapter 5 if you want. Applets are objects, not classes. Instead\nof being static members of a class, the subroutines that define the applet's\nbehavior are part of the applet object. We say that they are \"non-static\"\nsubroutines. Of course, objects are related to classes because every object is\ndescribed by a class. Now here is the part that can get confusing: Even though\na non-static subroutine is not actually part of a class (in the sense of being\npart of the behavior of the class itself), it is nevertheless defined in a class (in\nthe sense that the Java code that defines the subroutine is part of the Java\ncode that defines the class). Many objects can be described by the same class.\nEach object has its own non-static subroutine. But the common definition of\nthose subroutines -- the actual Java source code -- is physically part of the\nclass that describes all the objects. To put it briefly: static subroutines in\na class definition say what the class does; non-static subroutines say what all\nthe objects described by the class do. The drawFrame() routine is\nan example of a non-static subroutine. A stand-alone program's main()\nroutine is an example of a static subroutine. The distinction doesn't really\nmatter too much at this point: When working with stand-alone programs, mark\neverything with the reserved word, \"static\"; leave it out when working\nwith applets. However, the distinction between static and non-static will\nbecome more important later in the course.)\n\nLet's write an applet based on AnimationBase. In order to\ndraw the content, we'll need to know some basic subroutines that are already available for drawing,\njust as in writing text-oriented programs we need to know what subroutines are\navailable for reading and writing text. In Java, the built-in drawing\nsubroutines are found in objects of the class Graphics, one of the\nclasses in the java.awt package. In our applet's drawFrame() routine, we\ncan use the Graphics object g for drawing. (This object is\nprovided as a parameter to the drawFrame() routine when that routine is\ncalled.) Graphics objects contain many subroutines. I'll mention just\nthree of them here. You'll encounter more of them in Chapter 6.\n\ng.setColor(c), is called to set the\ncolor that is used for drawing. The parameter, c is an object\nbelonging to a class named Color, another one of the classes in the\njava.awt package. About a dozen standard colors are available as static member\nvariables in the Color class. These standard colors include\nColor.BLACK, Color.WHITE, Color.RED,\nColor.GREEN, and Color.BLUE. For example, if you want to draw\nin red, you would say \"g.setColor(Color.RED);\". The specified color is\nused for all subsequent drawing operations up until the next time setColor() is\ncalled.\n\ng.drawRect(x,y,w,h) draws the outline\nof a rectangle. The parameters x, y, w, and\nh must be integers or integer-valued expressions. This subroutine draws the outline of the rectangle whose\ntop-left corner is x pixels from the left edge of the applet and\ny pixels down from the top of the applet. The width of the rectangle\nis w pixels, and the height is h pixels. The color that\nis used is black, unless a different color has been set by calling setColor().\n\ng.fillRect(x,y,w,h) is similar to\ndrawRect except that it fills in the inside of the rectangle instead\nof just drawing an outline.\n\nThis is enough information to write the applet shown here:\n\nAlthough the applet is defined as an animation, you don't see any movement\nbecause all the frames that are drawn are identical! This is rather silly, and\nwe will fix it in the next example. But for now, we are just interested in seeing\nhow to use drawing routines to draw a picture.\n\nThe applet first fills its entire rectangular area with red. Then it\nchanges the drawing color to black and draws a sequence of rectangles, where\neach rectangle is nested inside the previous one. The rectangles can be drawn\nwith a while loop, which draws the rectangles starting from the outside\nand moving in. Each time through the loop, the rectangle that is drawn is smaller\nthan the previous one and is moved down and over a bit. We'll need variables to hold the\nwidth and height of the rectangle and a variable to record how far the top-left\ncorner of the rectangle is inset from the edges of the applet. The while loop\nends when the rectangle shrinks to nothing. In general outline, the algorithm\nfor drawing the applet is\n\nSet the drawing color to red (using the g.setColor subroutine)\nFill in the entire applet (using the g.fillRect subroutine)\nSet the drawing color to black\nSet the top-left corner inset to be 0\nSet the rectangle width and height to be as big as the applet\nwhile the width and height are greater than zero:\ndraw a rectangle (using the g.drawRect subroutine)\nincrease the inset\ndecrease the width and the height\n\nIn my applet, each rectangle is 15 pixels away from the rectangle that\nsurrounds it, so the inset is increased by 15 each time through the\nwhile loop. The rectangle shrinks by 15 pixels on the left\nand by 15 pixels on the right, so the width of the rectangle\nshrinks by 30 each time through the loop. The height also shrinks by 30 pixels\neach time through the loop.\n\nIt is not hard to code this algorithm into Java and use it to define the\ndrawFrame() method of the applet. I've assumed that the applet has a height\nof 160 pixels and a width of 300 pixels. The size is actually set in the source\ncode of the Web page where the applet appears. In order for an applet to appear\non a page, the source code for the page must include a command that specifies\nwhich applet to run and how big it should be. (We'll see how to do that later;\nsee Exercise 3.6 and Section 6.2.) It's not\na great idea to assume that we know how big the applet is going to be, as\nI do here; I'll address that issue before the end of this\nsection. But for now, here is the source code for the applet:\n\nimport java.awt.*;\npublic class StaticRects extends AnimationBase {\npublic void drawFrame(Graphics g) {\n// Draw set of nested black rectangles on a red background.\n// Each nested rectangle is separated by 15 pixels on all sides\n// from the rectangle that encloses it. The applet is\n// assumed to be 300 pixels wide and 160 pixels high.\nint inset; // Gap between borders of applet and one of the rectangles.\nint rectWidth, rectHeight; // The size of one of the rectangles.\ng.setColor(Color.red);\ng.fillRect(0,0,300,160); // Fill the entire applet with red.\ng.setColor(Color.black); // Draw the rectangles in black.\ninset = 0;\nrectWidth = 299; // Set size of the first rect to size of applet\nrectHeight = 159;\nwhile (rectWidth >= 0 && rectHeight >= 0) {\ng.drawRect(inset, inset, rectWidth, rect paint()\n} // end class StaticRects\n\n(You might wonder why the initial rectWidth is set to 299, instead\nof to 300, since the width of the applet is 300 pixels. It's because rectangles\nare drawn as if with a pen whose nib hangs below and to the right of the point\nwhere the pen is placed. If you run the pen exactly along the right edge of the\napplet, the line it draws is actually outside the applet and therefore is not\nseen. So instead, we run the pen along a line one pixel to the left of the edge\nof the applet. The same reasoning applies to rectHeight. Careful\ngraphics programming demands attention to details like these.)\n\nWhen you write an animation applet, you get to build on AnimationBase\nwhich in turn builds on the work of the people who\nwrote the Applet class. The AnimationBase\nclass provides a framework\non which you can hang your own work. Any programmer can create additional\nframeworks that can be used by other programmers as a basis for writing\nspecific types of applets or stand-alone programs. This makes it possible\nfor other programmers to build on their work even without understanding\nin detail what goes on \"inside\" the code that they wrote. This type of\nthing is the key to building complex systems!\n\nLet's continue our example by animating the rectangles in our applet.\nThe animated version is shown at the bottom of this page.\n\nIn the animation, rectangles shrink continually towards the center of the\napplet, while new rectangles appear at the edge. The perpetual motion is, of\ncourse, an illusion. If you think about it, you'll see that the animation loops\nthrough the same set of images over and over. In each image, there is a gap\nbetween the borders of the applet and the outermost rectangle. This gap gets\nwider and wider until a new rectangle appears at the border. Only it's not a\nnew rectangle. You are seeing a picture that is identical to the first picture\nthat was drawn. What has really happened is that the animation has started over\nagain with the first image in the sequence.\n\nIn order to create motion in the animation, drawFrame() will\nhave to draw a different picture each time it is called. How can it do that?\nThe picture that should be drawn will depend on the frame number,\nthat is, how many frames have been drawn so far. To find out the current frame\nnumber, we can use a function that is built into the AnimationBase\nclass. This class provides the function\nnamed getFrameNumber() that you can call to find out the\ncurrent frame number. This function returns the current frame number as an integer value.\nIf the value returned is 0, you are supposed to draw the first frame; if the\nvalue is 1, you are supposed to draw the second frame, and so on. Depending on\nthe frame number, the drawFrame() method will draw different pictures.\n\nIn the animation that we are writing, the thing that differs from one frame to another is\nthe distance between the edges of the applet and the outermost rectangle. Since\nthe rectangles are 15 pixels apart, this distance increases from 0 to 14 and\nthen jumps back to 0 when a \"new\" rectangle appears. The appropriate value can\nbe computed very simply from the frame number, with the statement\n\"inset = getFrameNumber() % 15;\".\nThe value of the expression getFrameNumber() % 15\nis always between 0 and 14. When the frame number reaches 15 or any multiple of 15, the value of\ngetFrameNumber() % 15 jumps back to 0.\n\nDrawing one frame in the sample animated applet is very similar to drawing\nthe single image of the original StaticRects applet.\nWe only have to make a few changes to the drawFrame() method.\nI've chosen to make one additional improvement: The StaticRects\napplet assumes that the applet is exactly 300 by 160 pixels. The new version,\nMovingRects, will work for any applet size. To implement this, the\ndrawFrame() routine has to know how big the applet is. There are two\nfunctions that can be called to get this information. The function\ngetWidth() returns an integer value representing the width of the\napplet, and the function getHeight() returns the height. These functions\nare inherited from the Applet class.\nThe width and height, together with the frame number, are used to compute the size of the\nfirst rectangle that is drawn. Here is the complete source code:\n\nimport java.awt.*;\npublic class MovingRects extends AnimationBase {\npublic void init() {\n// The init() method is called when the applet is first\n// created and can be used to initialize the applet.\n// Here, it is used to change the number of milliseconds\n// per frame from the default 100 to 30. The faster\n// animation looks better.\nsetMillisecondsPerFrame(30);\n}\npublic void drawFrame(Graphics g) {\n// Draw one frame in the animation by filling in the background\n// with a solid red and then drawing a set of nested black\n// rectangles. The frame number tells how much the first\n// rectangle is to be inset from the borders of the applet.\nint width; // Width of the applet, in pixels.\nint height; // Height of the applet, in pixels.\nint inset; // Gap between borders of applet and a rectangle.\n// The inset for the outermost rectangle goes from 0 to\n// 14 then back to 0, and so on, as the frameNumber varies.\nint rectWidth, rectHeight; // the size of one of the rectangles\nwidth = getWidth(); // find out the size of the drawing area\nheight = getHeight();\ng.setColor(Color.red); // fill the frame with red\ng.fillRect(0,0,width,height);\ng.setColor(Color.black); // switch color to black\ninset = getFrameNumber() % 15; // get the inset for the outermost rect\nrectWidth = width - 2*inset - 1; // set size of the outermost rect\nrectHeight = height - 2*inset - 1;\nwhile (rectWidth >= 0 && rectHeight >= 0) {\ng.drawRect(inset,inset,rectWidth,rect drawFrame()\n} // end class MovingRects\n\nThe main point here is that by building on an existing framework, you can do\ninteresting things using the type of local, inside-a-subroutine programming\nthat was covered in Chapter 2 and Chapter 3.\nAs you learn more about programming and\nmore about Java, you'll be able to do more on your own -- but no matter how\nmuch you learn, you'll always be dependent on other people's work to some\nextent."}
{"text": "MIT's Processing \u2013 what is it ?\n\nMIT's Processing is a method to interface your embedded project to your computer in a graphical manner.\n\nIt is an open source programming language and environment to interface a computer with various peripherals (either user interfaces or embedded). Developed by Ben Fry and Casey Reas in 2001 began in MIT's Media lab. Initially it was developed as a software sketchbook to teach the fundamentals of computer programming using a visual method. However, with time and developments Processing has become an interface into Embedded Processing.\n\nA Java based language; Processing is compatible with GNU/Linux, Mac OSX and Windows operating systems. Processing is also able to interface with other languages such as JavaScript, ActionScript, Ruby, Python and Scala (with other platforms like OpenMoko =, IpHone and OLPCXO-1, in development).\n\nThe key feature with interfacing with Processing to embedded processing platforms (such as the TI Launchpad) is the bi-directional communication. This creates the ability to transfer data from your embedded processing platform to the computer (such as HyperTerminal) and then to be able to use the computer to transfer data back to the embedded processing platform.\n\nExample Use: Using the embedded processing platform as a user interface tool, but offloading complex processing over to the computer (to run Applications, data analytics or a user interface).\n\nSo, where have you seen this Processing in action? The Capacitive Touch Boosterpack- Graphical User Interface (GUI) is based off of Processing. Below is a video that speaks about the use of the GUI.\n\nIn this: the driver file FindAppUART.exe, interfaces over the USB (via emulator) to the Launchpad and the Capacitive Touch Boosterpack. The Capacitive Touch Boosterpack is collecting data on, where it is being pushed, transmitting the data to the microcontroller which sends it over the USB-Emulator interface to the computer. Instead of displaying static values through the traditional: HyperTerminal interface usually used with embedded processing\u2014 the data is displayed on a GUI that is modeled after the hardware. Processing was used to create that GUI, the data linkage\u2026 and with some code modification could be used to show the reverse effect\u2014clicking the graphic and causing the appropriate LED to light up.\n\nWhere does Processing fit into your embedded processing curriculum?\n\nHere are a list of potential topics that the combination of Processing + a TI Embedded Platform can facilitate: -Interacting and Creation/Modification of Graphical User Interfaces -JAVA based programming application -Hardware driver modification or creation -Programming language bridging (e.g. between a C++ based language environment to JAVA) -Creation of Human-Machine-Interfaces -Data interpretation and display Additional Topics can be found on the Processing Web Site : \n\nWhat TI Platforms to look at: Any MSP430 TI-Board with a PC interface can download the driver: FindAppUART.exe to begin interface.\n\nProcessing runs natively on the BeagleBoard (TI OMAP3530-based), BeagleBoard-xM (TI DM3730-based) and BeagleBone (TI AM3358-based). It can be used on those platforms to execute Processing code locally or to target other processors via the USB host or serial"}
{"text": "Over\n\nOver 300 highly interactive computer science"}
{"text": "Chapter 54:\nCNC and CAD/CAM\n\nBy Peter Smid\n\nFrom CNC Programming Handbook: A Comprehensive Guide to Practical CNC Programming, Third Edition\n\nOVERVIEW\n\nUp to this point, all topics related to manual programming of CNC machines - all fifty-three chapters. In the last chapter, we look briefly at an area where manual programming is replaced by a computer, a suitable software and some additional skills. Note the word additional. Studying the handbook has certainly not been a waste of time. On the contrary - the handbook covers subjects that every CNC programmer should know, regardless of the programming method used. Programming with a computer is always desirable but to know the basic skills is the most important prerequisite. All basic skills are in understanding the manual process. All subjects and methods learned do not have to be applied by a pencil and paper. They could be applied by a CAD/CAM - or just CAM - programming. A simple statement may summarize it all:\n\nPROGRAMMING MANUALLY ?\n\nIn the area of CNC programming application techniques, computers at all levels, from a personal computer to work-stations are capable to produce most CNC machine programs in a time much shorter than any manual programming method. So, why is the high importance of manual programming methods so emphasized? Is the manual programming still alive, and if so, how healthy is it?\n\nThere are at least two important reasons why manual programming for CNC machines it is not dead yet and will not disappear anytime soonOVERVIEW\nWriting a CNC program is the final result of manual programming. This last step requires a sheet of paper, or many sheets of paper, that contain the part program. Program itself is composed..."}
{"text": "Scale your team with Python fundamentals training.\n\nWhether you are a start-up building up your technical team or\nan established organization looking at training more software developers skilled in the Python programming language, a 2-day Python fundamentals\ntraining course will help you speed up your skills-and-know-how acquisition plans.\n\nPython for science and engineering domains.\n\nArcGIS, Matlab, SPSS and R languages are the usual tools used by scientists for GIS, mapping purposes, hypothesis modeling, simulation and statistical analysis.\n\nPython, in recent years, has matured and is a formidable toolset in its own right and with the advantage of being open source and a generic tool that helps scientists and engineers create live, production ready software applications. If your research and engineering team has not yet acquired Python as part of your institutional memory, it's time to seriously consider.\n\nFinancial analysis with Python.\n\nAs a rapid prototyping and numerical modelling and data manipulation tool, Python fits in perfectly with the rapid pace expected of financial traders and financial professionals dealing with fast changing datasets from various stock exchange. Fast prototyping without sacrificing compatibility with existing C and C++ toolsets.\n\nTestimonials\n\nI think what I took away from the class the most was that I could actually try my hand at coding \u2013 this is important to stress to those who have never touched a code of programming in their life. It looks daunting at first, but because Calvin and crew broke it down into simpler terms, the learning barrier became that much narrower."}
{"text": "A very minimalist programming language, having a total of eight instructions. Brainfuck is turning complete. Programs written in BF are necessarily obfuscated, as the entire set of commands are as follows: + - < > , ."}
{"text": "Readability\n\nHumans must be able to read the programs\n\nSource code is read by both the compiler, which doesn't care about\nyour writing style, and people, who care enormously about your\nwriting style.\n\nALL programmers insist that certain rules be followed. Some of the\nmost important are:\n\nIndentation. Statements which are contained within something\nelse (a class, a method, a loop, etc) must be indented on indentation\namount to the right. There are several styles for this; use one of them.\n\nMeaningful names. Variables, methods, classes, etc must be given\nnames that mean something to the reader. Use names like a, b,\nand c only when there is no inherent meaning in a variable -- it's\njust an abstract number.\nSee Names for a more detailed discussion.\n\nConventions are important to follow. There are standard naming,\nformatting, documentation, and usage conventions for Java.\nthe organization you work for may have additional conventions.\nUse of these conventions makes program source code much easier\nfor others to read.\n\nWho's going to read your code?\n\nInstructor. If you're taking a programming course your instructor\nwill care a lot about the indentation and meaningful names.\nSome instructors have a specific class standard for formatting\nyour program. Others allow a range of standards.\nNone allow chaotic code formatting.\n\nOther programmers. If you work on a project that will ever\ninvolve other programmers, eg, for maintenance, you must write in\na conventional style. Multi-programmer projects often establish\na set of standards for all programmers on the project.\n\nYourself. Surprisingly many student programs\nuse meaningless, deceptive, or multiple-use variable names.\nWhen asked what value is in that variable, they are often unable to tell me.\nVariable names should mean something clear to to the reader.\n\nTabs (no) or spaces (yes) for indentation\n\nThe problem with tabs is that there is no single definition of how\nmuch horizontal space a tab takes, so what you see in your program may be\n(and often is) very different from what I see when I look at your program.\nThe indentation may be consistent, which isn't so bad, but if you tab to the\ncomments then it usually doesn't work so well when I look at it.\nAnd the worst is mixing tabs and spaces because a change in the tab size\nguarantees things will not be correctly aligned.\nThe programming convention for Java is to use 4 spaces."}
{"text": "facts\n\nCourse: LIB 113, Fall 2009 School: Harvard Rating:\n\nWord Count: 714\n\nDocument Preview how to write computer programs. In particular, we assume you have written programs in a structured language, that you know about editors, understand the ideas of variables, loops, arrays, functions, and some data structures. If you have not written complicated programs that use these ideas in some language, you will be overtaxed by the course. Administative Details Lectures Wednesdays, 7:35-9:35, short break. Covers ideas, sample programs. Be prepared to take notes. All sample programs used in class will be stored on line, so you can retrieve them and examine and/or print them later. Several assignments, due on Saturday evenings at midnight. See course outline. Must hand in listing and sample run. Must run on the machine at Harvard. Can be developed on any machine. One midterm, one final. Homework 50%, Midterm 20%, Final 30% One hour each week, times to be arranged In the terminal room, times to be arranged Send email with any questions about the course, your homework, or reading, and we shall answer as soon as possible. See our web page for details. Questions of general interest, along with their answers, will be posted on our web site. Need name, address, phone, and section requests The required texts are C Programming, A Modern Approach by King (1st or 2nd edition), Your Unix: The Ultimate Guide, 2nd ed. by Das. A useful supplement is CGI Internet Programming with C++ and C by Felton. The Coop has them. They are for reference and additional examples. The suggested reading does not exactly follow lecture, but is pretty close. The C Programming book explains the language, the Unix book explains how to use Unix. The CGI book gives examples and explains CGI programming in more detail than the course does. The computer facilities at the Science Center are open 24 hours a day. The computers can be used via telnet/ssh over the Internet. Connect to ice.harvard.edu You will obtain a computer account by going to the website:  . You need a PIN. See your registration materials.  Homework Exams Grading Sections Office Hours On-Line Help Info Sheets Texts Facilities Accounts Web Site What is the Point of this Course? This is a course in Unix/Linux programming. Unix is an operating system, but it is more than just a control program for computers; it is a complete programming environment based on the idea of software tools. The Unix programming model is one of building complex, powerful solutions by combining simple, special-purpose tools. These tools are data manipulation programs. Every Unix system comes with a wealth of these tools. Tools are usually written in C. Combinations of tools are often written in a scripting language, such as the Unix shell, sh . Unix programming, then, consists of (a) designing and writing tools in C and (b) combining them using sh. Csci-e113 teaches C programming and sh programming. Where does CGI fit into this? To make your nAssignment 0Not to be Turned InCSCI-E113This assignment is just a suggestion for you to follow to get comfortable using the Unix system. Do not turn in this work, but do report any questions or problems you have as you work through it. 1. Get y\n\nCOURSE DESCRIPTIONFall 2008CSCI-E113What is this course? This is a course in C and Unix/Linux programming with a focus on using C and Unix to create interactive pages for the World Wide Web. It covers in detail almost of the the C language, it\n\nC Coding Style E113 Style Requirements Homework submitted to csci-e113 will be graded on function, design, and readability. An program that implements an excellent algorithm but is unreadable is like an excellent paper on Hamlet scrawled illegibly in\n\nGRADING STANDARDSCSCI-E113ACADEMIC HONESTY The work you submit must be your own work. You may build your code on samples from class or examples from texts, and we encourage students to discuss problems and techniques. Your homework should be all\n\nCSCI-E113 Student Information Sheet Please complete and hand in at lecture Name: Email address: Phone: Programming Background/Courses: Have You Registered?YES I PLAN TO I PROBABLY WILL I PROBABLY WONTOfce Hours and Additional Section Scheduling In\n\nCSCI-E113Lecture 4OutlineTopic:Strings, CGI, and StructsApproach:Explore Basics, Improve Website Overview and Intro: We have seen four levels of code: form, script, tools, connector Today focus on C data structures and form improvements War\n\nCSCI-E113: Class 3 Strings, Arrays, Functions0. IntroductionLast week we discussed the idea of programming with softwaretools,demonstrated some standard Unix tools, and wrote afew software tools using C. This week, we co\n\nUnix: A Programming Language Part 1: Train Schedules1. IntroductionUnix is more than a system for running applications andservers. It is a programming language. What does that termmean? Consider popular programming languag 2 Starting C0. IntroductionLast week we saw that Unix programming is based on combiningtools into scripts and pipelines. HTML forms and connectorprograms allows people to use these Unix programs over the\n\nGRADING STANDARDSCSCI-E113_ACADEMIC HONESTY The work you submit must be your own work. You may build your code on samples from class or examples from texts, and we encourage students to discuss problems and techniques.\n\nCSCI-E113: Class 4 Strings, CGI, Structs0. IntroductionLast week we continued to extend our HTML and shell skillsas we improved our train schedule web site. On the C end ofthe course, we looked at arrays in general and\n\nCSCI-E113: Class 2 Starting C1m0. Introduction0mLast week we saw that Unix programming is based on combiningtools into scripts and pipelines. HTML forms and connectorprograms allows people to use these Unix programs over t\n\nC Coding StyleE113 Style Requirements Homework submitted to csci-e113 will be graded on func- tion, design, and readability. An program that imple- ments an excellent algorithm but is unreadable islike an ex\n\nAssignment 0 Not to be Turned InCSCI-E113_This assignment is just a suggestion for you to follow to getcomfortable using the Unix system. Do not turn in this work, butdo report any questions or problems you have as you work thro\n\nCOURSE DESCRIPTIONFall 2003CSCI-E113DATELECTUREREADINGSECTIONHOMEWORKSep 17Overview Unix/C and the web Sample Program The structure of C programs Functions and filters Arrays and Strings Arrays and Strings More Loops Generating HTML\n\nGRADING STANDARDSFall 2000CSCI-E113GRADING Homework assignments are graded on a 100 point scale. The 100 points are divided between Function (70 points) and Design (30 points). In software engineering, getting a program that works is only part\n\nAssignment 2: An HTML Table Generator Introduction Our train schedule page produces html reports with nice colors and fonts, but the columns do not line up, and the spacing is too dense. We need a new tool to present schedule data in clear, attractiv\n\nAssignment 2: Extra Credit Introduction The <attributes> section of input to tt2ht allows the user to specify attributes to include in <td> tags for different columns in the output. That way, one column could be right justified, another column could\n\nAn Introduction to the UNIX ShellS. R. BourneABSTRACT The shell is a command programming language that provides an interface to the UNIX operating system. Its features include control-flow primitives, parameter passing, variables and string substi\n\nAssignment 4: Symbol Table1. IntroductionIn this assignment you will write a sixth implementation ofthe storage system used by the word frequency program shownin lecture. The main part of the program and shell scriptsto feed\n\nWELCOME TO vi - NOTE: SET YOUR SCREEN to 80 COLUMNS and 25 ROWSPLEASE NOTE: If at any time it looks as though something terriblehas happened, just type the sequence of characters: q !That is a colon, the letter q, and an exclamati An HTML Table GeneratorIntroductionOur train schedule page produces html reports withnicecolorsand fonts, but the columns do not line up, and thespacing is toodense. We need a new tool to presentschedu\n\n/ NumberGuesser.java/* * This program plays a number guessing game. The program will select a * random number, and ask the user to guess it. Upon success, the total * number of guesses will be displayed. A graphical user interface has\n\n/ NumGuessGUI.java/* * This program plays a number guessing game. The program will select a * random number, and ask the user to guess it. Upon success, the total * number of guesses will be displayed. A graphical user interface has *"}
{"text": "Synopses & Reviews\n\nPublisher Comments:Learn to expand your program's power with inheritance and polymorphism\n\nMaster the features of C++ by learning from programming experts\n\nLearn C++11 features that allow you to program compact and high-performance C++ applications\n\nTABLE OF CONTENTS\n\nPART I: THE BASICS\n\nLESSON 1: Getting Started with C++11\n\nA Brief History of C++\n\nProgramming a C++ Application\n\nWhat's New in C++11\n\nLESSON 2: The Anatomy of a C++ Program\n\nPart of the Hello World Program\n\nThe Concept of Namespaces\n\nComments in C++ Code\n\nFunctions in C++\n\nBasic Input Using std::cin and Output Using std::cout\n\nLESSON 3: Using Variables, Declaring Constants\n\nWhat Is a Variable?\n\nCommon Compiler-Supported C++ Variable Types\n\nDetermining the Size of a Variable Using sizeof\n\nUsing typedef to Substitute a Variable's Type\n\nWhat Is a Constant?\n\nNaming Variables and Constants\n\nKeywords You Cannot Use as Variable or Constant Names\n\nLESSON 4: Managing Arrays and Strings\n\nWhat Is an Array?\n\nMultidimensional Arrays\n\nDynamic Arrays\n\nC-style Strings\n\nC++ Strings: Using std::string\n\nLESSON 5: Working with Expressions, Statements, and Operators\n\nStatements\n\nCompound Statements or Blocks\n\nUsing Operators\n\nLESSON 6: Controlling Program Flow\n\nConditional Execution Using if \u2026 else\n\nGetting Code to Execute in Loops\n\nModifying Loop Behavior Using continue and break\n\nProgramming Nested Loops\n\nLESSON 7: Organizing Code with Functions\n\nThe Need for Functions\n\nUsing Functions to Work with Different Forms of Data\n\nHow Function Calls Are Handled by the Microprocessor\n\nLESSON 8: Pointers and References Explained\n\nWhat Is a Pointer?\n\nDynamic Memory Allocation\n\nCommon Programming Mistakes When Using Pointers\n\nPointer Programming Best-Practices\n\nWhat Is a Reference?\n\nPART II: FUNDAMENTALS OF OBJECT-ORIENTED C++ PROGRAMMING\n\nLESSON 9: Classes and Objects\n\nThe Concept of Classes and Objects\n\nKeywords public and private\n\nConstructors\n\nDestructor\n\nCopy Constructor\n\nDifferent Uses of Constructors and Destructor\n\nthis Pointer\n\nsizeof() a Class\n\nHow struct Differs from class\n\nDeclaring a friend of a class\n\nLESSON 10: Implementing Inheritance\n\nBasics of Inheritance\n\nPrivate Inheritance\n\nProtected Inheritance\n\nThe Problem of Slicing\n\nMultiple Inheritance\n\nLESSON 11: Polymorphism\n\nBasics of Polymorphism\n\nUsing virtual Inheritance to Solve the Diamond Problem\n\nVirtual Copy Constructors?\n\nLESSON 12: Operator Types and Operator Overloading\n\nWhat Are Operators in C++?\n\nUnary Operators\n\nBinary Operators\n\nFunction Operator ()\n\nOperators That Cannot Be Overloaded\n\nLESSON 13: Casting Operators\n\nThe Need for Casting\n\nWhy C-Style Casts Are Not Popular with Some C++ Programmers\n\nThe C++ Casting Operators\n\nProblems with the C++ Casting Operators\n\nLESSON 14: An Introduction to Macros and Templates\n\nThe Preprocessor and the Compiler\n\nUsing #define Macros to Define Constants\n\nUsing #define To Write Macro Functions\n\nAn Introduction to Templates\n\nPART III: LEARNING THE STANDARD TEMPLATE LIBRARY (STL)\n\nLESSON 15: An Introduction to the Standard Template Library\n\nSTL Containers\n\nSTL Iterators\n\nSTL Algorithms\n\nThe Interaction Between Containers and Algorithms Using Iterators\n\nSTL String Classes\n\nLESSON 16: The STL String Class\n\nThe Need for String Manipulation Classes\n\nWorking with the STL String Class\n\nLESSON 17: STL Dynamic Array Classes\n\nThe Characteristics of std::vector\n\nTypical Vector Operations\n\nUnderstanding the Concepts of Size and Capacity\n\nThe STL deque Class\n\nLESSON 18: STL list and forward_list\n\nThe Characteristics of a std::list\n\nBasic list Operations\n\nReversing and Sorting Elements in a List\n\nLESSON 19: STL Set Classes\n\nAn Introduction to STL Set Classes\n\nBasic STL set and multiset Operations\n\nPros and Cons of Using STL set and multiset\n\nLESSON 20: STL Map Classes\n\nAn Introduction to STL Map Classes\n\nBasic std::map and std::multimap Operations\n\nSupplying a Custom Sort Predicate\n\nPART IV: MORE STL\n\nLESSON 21: Understanding Function Objects\n\nThe Concept of Function Objects and Predicates\n\nTypical Applications of Function Objects\n\nLESSON 22: C++11 Lambda Expressions\n\nWhat Is a Lambda Expression?\n\nHow to Define a Lambda Expression\n\nLambda Expression for a Unary Function\n\nLambda Expression for a Unary Predicate\n\nLambda Expression with State via Capture Lists\n\nThe Generic Syntax of Lambda Expressions\n\nLambda Expression for a Binary Function\n\nLambda Expression for a Binary Predicate\n\nLESSON 23: STL Algorithms\n\nWhat Are STL Algorithms?\n\nClassification of STL Algorithms\n\nUsage of STL Algorithms\n\nLESSON 24: Adaptive Containers: Stack and Queue\n\nThe Behavioral Characteristics of Stacks and Queues\n\nUsing the STL stack Class\n\nUsing the STL queue Class\n\nUsing the STL Priority Queue\n\nLESSON 25: Working with Bit Flags Using STL\n\nThe bitset Class\n\nUsing std::bitset and Its Members\n\nThe vector\n\nPART V: ADVANCED C++ CONCEPTS\n\nLESSON 26: Understanding Smart Pointers\n\nWhat Are Smart Pointers?\n\nHow Are Smart Pointers Implemented?\n\nTypes of Smart Pointers\n\nPopular Smart Pointer Libraries\n\nLESSON 27: Using Streams for Input and Output\n\nConcept of Streams\n\nImportant C++ Stream Classes and Objects\n\nUsing std::cout for Writing Formatted Data to Console\n\nUsing std::cin for Input\n\nUsing std::fstream for File Handling\n\nUsing std::stringstream for String Conversions\n\nLESSON 28: Exception Handling\n\nWhat Is an Exception?\n\nWhat Causes Exceptions?\n\nImplementing Exception Safety via try and catch\n\nHow Exception Handling Works\n\nLESSON 29: Going Forward\n\nWhat's Different in Today's Processors?\n\nHow to Better Use Multiple Cores\n\nWriting Great C++ Code\n\nLearning C++ Doesn't Stop Here!\n\nAPPENDIXES\n\nA: Working with Numbers: Binary and Hexadecimal\n\nB: C++ Keywords\n\nC: Operator Precedence\n\nD: Answers\n\nE: ASCII Codes\n\nSynopsis:\n\nLearn C++ in Just One Hour a DaySynopsis:\n\nLearn C++ in Just One Hour a Day!About the Author\n\nSiddhartha Rao is a technologist at SAP AG, the world's leading supplier of enterprise software. As the head of SAP Product Security India, his primary responsibilities include hiring expert talent in the area of product security as well as defining development best practices that keeps SAP software globally competitive. Awarded Most Valuable Professional by Microsoft for Visual Studio\u2013Visual C++, he is convinced that C++11 will help you program faster, simpler, and more efficient C++ applications.\n\nSiddhartha also loves traveling and discovering new cultures given an opportunity to. For instance, parts of this book have been composed facing the Atlantic Ocean at a quaint village called Plogoff in Brittany, France\u2014one of the four countries this book was authored in. He looks forward to your feedback on this global effort!"}
{"text": "A Sample Chapter from \"Professional XSL\". This chapter will provide you with enough information to start building useful XSLT stylesheets. I will introduce a number of the elements that make up the language, providing examples of their use. We will also look at a few of the functions built into the language and see how XSLT manages namespaces, whitespace and some other important issues.\n\nA Sample Chapter 5 from \"Professional VB.NET 2nd Edition\". Visual Basic has had powerful object-oriented capabilities since the introduction of version 4.0. VB.NET carries that tradition forward. VB.NET simplifies some of the syntax and greatly enhances these capabilities, and now supports the four major defining concepts required for a language to be fully object-oriented. In this chapter we'll explore the creation and use of classes and objects in VB.NET.\n\nThe type is the basic building block of any C# program. Every piece of data in a C# program has a strongly-defined type (there is no variant type or direct equivalent). This is rue not just of the primitive types such as bytes and integers, but also of objects, structs, and enumerations. A variable's type identifies its nature, both to the developer, and to the compiler and runtime. The C# language and .NET Framework define an efficient system for categorizing, accessing, and manipulating different types.\n\nA Sample Chapter from ASP.NET Website Programming. In this chapter we'll explain why it's useful to have an online site management system, and we'll design and build one that allows us to easily maintain the site's files and directories. Any real website is generally made up of a lot of pages, images, XML/XSL files, stylesheets, databases, and other types of document.\n\nA Sample Chapter from Professional ASP.NET. Microsoft's .NET technology has attracted a great deal of press since Beta 1 was first released to the world. Since then, mailing lists, newsgroups, and web sites have sprung up containing a mixture of code samples, applications, and articles of various forms. Even if you're not a programmer using existing ASP technology, it's a good bet that you've at least heard of .NET, even if you aren't quite sure what it involves.\n\nA Sample Chapter from HTML 4.01 Programmer's Reference. HTML is the language of the web. If you need to build a web page, then you'll have to start with HTML. The most recent specification: HTML 4.01 defines several new features including expanded support for multimedia, style sheets (including aural style sheets, and the new CSS specifications), scripting, and new accessibility and internationalization standards.\n\nA Sample Chapter from Early Adopter VoiceXML. This chapter examines the use of the Extensible Stylesheet Language for Transformations (XSLT) as a tool for the generation of VoiceXML. I intend to illustrate a complete, end-to-end example of implementing a voice interface for a client-server database via XML and XSL\n\nA Sample Chapter from \"Beginning ASP.NET using VB.NET\".\nASP.NET is a new and powerful technology for writing dynamic web pages. It's a convergence of two major Microsoft technologie's, Active Server Pages (ASP) and .NET. ASP is a relative old-timer on the web computing circuit and has provided a sturdy, fast, and effective way of creative dynamic web pages for more than five years now.\n\nA Sample Chapter from Professional XML Databases. In this book, we look at how to integrate XML into your current relational data source strategies. With the increasing amount of data stored in relational databases, and the importance of XML as a format for marking up data - whether it be for storage, display, interchange, or processing."}
{"text": "To summarize this article tells about what Microsoft Visual Studio LightSwitch is and what are the major requirements to start developing our first LightSwitch application from the core. In our upcoming tutorial we will see our first LightSwitch applica...\n\nThis section introduces the course, and goes over what readers can expect to learn over the proceeding 7 chapters. It introduces some fundamental concepts in JavaScript, such as adding it to an HTML page and some high-level use cases....\n\nesProc is a brand new script to simplify the complex database computation with step-by-step mode. It can deal with tentative and occasional problems without data-modeling beforehand, releasing you from heavy data process work. esProc can also integrate ..."}
{"text": "Forum Actions:\n\nC and C++ are both robust and hugely popular programming languages that are used in multiple facets of programming, ranging from games to operating systems to simple text editors. To discuss and seek advice, ask around here.\n\nForum Actions:\n\nA puzzle is a problem or enigma that tests the ingenuity of the solver. In a basic puzzle one is intended to piece together objects (puzzle pieces) in a logical way in order to come up with the desired shape, picture or solution."}
{"text": "Lab 1\n\nIn this lab, you will learn the basics of using the Eclipse Integrated Development\nEnvironment (IDE). Eclipse is a GUI based program that allows you to edit, compile,\nand debug your Java code. You will be using Eclipse to complete projects and labs in\nthis course. Eclipse is available on all OIT workstations booted into Linux, or can be downloaded\nto your laptop or PC. See the course resources page for\nlinks to download sites.\n\nIn this lab you will\n\ndefine a workspace\n\nnavigate the Java perspective\n\nsee the feature of Eclipse that make it easier for you to develop projects"}
{"text": "MODERATORS\n\nTo make a long story short, I am a self taught computer programmer. I was just made aware that there is an entire field of algorithms that are taught in computer science courses that i never even knew existed. I looked on amazon and found tons of books on this subject. Can anyone recommend any good books on algorithms. I have been programming on my own for a few years I've just never used any official algorithms.\n\nedit: Wow, thanks guys. A ton of great suggestions. I just ordered a few of the books recommended and signed up for one of the courses. If I have more questions, and I'm sure that I will, I'll be sure to come back here. Thanks a lot.\n\nI know you asked for a book, but let me suggest a few MOOCs. In case you haven't heard of the term before: Massive Open Online Courses are a new trend that started about a year ago. They are complete, interactive classes with lectures, homework assignments, projects, forums, study groups in many places around the globe, and grades. Most of them are free and are being offered by reputable universities, like MIT, Harvard, Stanford, Princeton etc. for free. So, since you are self-taught, I suggest you take such a course on Computer Science and Algorithms:\n\nAlgorithms, Part I and II is a practical class about various algorithms and their applications. Part I teaches essential algorithms and data structures that every programmer should know.\n\nWhat they mean by dragons; Knuth Vol. 1 starts out with a section on 'Mathematical Preliminaries'. Knuth and two other authors later wrote a 'tutorial' textbook for that section, Concrete Mathematics. It's 672 pages and isn't especially easy going either, though it's terrific stuff. If you're going to be a Computer Scientist, Knuth is mandatory... but unless you're a very special person at math, or you have the support of a university around you the books may be better appreciated at a library than bought.\n\nThere's a surprising amount on Wikipedia, since you're self-taught. Look up big O notation, and there's a list of algorithms page. I myself enjoy going through the list, writing implementations of each algorithm, just for fun.\n\nThere's a really insightful old algorithms book that can be had cheaply at Amazon, used: Compared To What?. It walks through the thinking behind both the algorithms and the math in a thoughtful, helpful way. It is far less dense (and shorter) than CLRS, and it's much cheaper than Skiena (though Skiena may be what you want when you can afford it).\n\nYou're welcome! If you especially want to express gratitude, I just put my copy up on Amazon used for $5.01. The cheapest copy is 44 cents, so I might be gouging here... but it's worth at least that to me. Get a copy, wherever you like!\n\nYou're right, I fumbled something. I do hope you enjoy the book and find it useful. I know I have. While I'm on a soapbox, do lots of problems on paper... math seems to enter the brain as the lead/ink leaves the pencil/pen. Here's a good resource:  I'd further recommend watching course videos (they're available for both CLRS and Skiena's book), and finding a like-minded person or two to compare notes, grade each other's exercises, work through difficult parts. Good luck!"}
{"text": "Chapter 12. Application Frameworks\n\nUp to this point we have seen only example\nscripts\u2014 Exciting examples, illuminating examples, promising\nexamples, but still just examples. Example scripts are far removed\nfrom the realities of a complex GUI application. For a complex\napplication you need a well thought-out modular structure, where\neach component can find its place. You need an architecture, and\nyou need a design.\n\nMost books on programming languages don't\nprogress much beyond basic examples; indeed, it is not really\npossible to discuss a complete, complex application. Still, in\nthis part of the book I want to show how BlackAdder and PyQt can\nhelp you achieve a well-written, maintainable application,\nstarting with the architecture, and then moving on to the outlines\nof an application. On the way, I'll show you one useful way of\nlaying out the project structure. In the next few chapters we'll\nbuild this framework into a real application.\n\nArchitecture: models, documents and views\n\nLet's start with the basics. Applications\nare, essentially, interfaces that manipulate data. Whether you\nare handling records from a database, an object tree from a\nparsed HTML page, a game world, or a stream from a network\nsocket, there is always a reality that is mediated to the user\nwith an interface.\n\nFrom this, it follows naturally that it\nwould be a good idea to separate bits of software that handle\nthe data from the interface. After all, you might want to\nmanipulate the same data with a different interface. In some\ndevelopment environments this is quite difficult to achieve.\nVisual Basic, for instance, almost mandates that you entangle\nyour data-mangling code with your GUI code. On the other side of\nthe scale, SmallTalk has explicit support for the most extended\nform of the celebrated Observer pattern\n\u2014 with the Model/View/Controller framework for the\nSmallTalk user interface (or, in later versions, the\nModel-View-Presenter architecture).\n\nThe component that represents the data is\nvariously termed model or\ndocument; the component that actually shows\nthe data on screen is the view. The\nmodel-view-controller framework adds a\ncontroller component, which represents the\nuser input.\n\nThe controller component receives mouse\nclicks, key press events and all other user input, and passes\nthose on to the model. The model determines its current state\nfrom that input, and notifies the view that its representation\nof the model should be changed. Sounds like PyQt signals and\nslots would come in handy, doesn't it?\n\nModel-view-controller architecture\n\nBe aware of the 'fractal' nature of\nthis architecture. You can envision your entire application\ndivided into two or three parts \u2014 one component for the\nmodel, one for the view, and perhaps one for the controller.\nHowever, the same tripartition can be designed for the lowliest\ncheckbox class. Here, the boolean value is the model, the\npicture of a box with a cross in it is the view, and the event\nhandler is the controller.\n\nSwing, the Java gui toolkit, does exactly\nthis, and gives you the opportunity to write specialized models\nand controllers for almost all its widgets (and specialized\nviews, too). PyQt doesn't go quite that far, and its widgets are\nbased on a simpler, more monolithic model. Like all good ideas\ncarried through to their extremes, writing models and\ncontrollers for every widget is a bit tiresome. That's why\nJava's Swing also presents capable default implementations for\nthe controller and model parts.\n\nThis chapter is about application\narchitecture, and when speaking of views and models, documents\nand controllers, I do so only at the application architecture\nlevel, not the widget level. However, a complex application\ncould consist of several models and views: for instance, in an\napplication based on a database, you could view every table as a\nmodel and every corresponding form as a view.\n\nA document-view framework\n\nThe most basic architecture in which\napplication model and interface are separated is the\ndocument-view paradigm. Here, you have\ntwo basic modules: one representing your data (the document),\nand one representing the interface that shows the data to the\nuser (the view). This architecture is prevalent in the Windows\nworld: the entire Microsoft MFC library is based on its\nprinciples, and it is also popular in the Unix world, where\nmany KDE applications are based on it.\n\nThe document-view architecture\n\nThere must be an interface between the\ndocument and the view. Changes made in the view must be passed\non to the document, and vice-versa. A simple document-view\nframework is readily constructed:\n\nThe basic application structure consists\nof three classes: an application class, a view class and a\ndocument class. In the next few chapters of this part, we'll\nwork with the framework to build a real application. We'll\nalso extend it to handle multiple document windows: the\nframework detailed below can only work with one document. The\ncomplete framework is in the file\ndocview.py.\n\nYou should always begin with designing\nthe application model - or so the theory goes. Your\npreferences might lie with first creating a mock-up of the\ninterface using generic widgets, in order to be able to have\nsomething concrete to talk about. That's fine with me. Anyway,\nthe DocviewDoc class represents the\ndocument or the application model. This\ncan be as complex as you want. This class merely remembers\nwhether it has been modified. The controlling application can\nquery the document using the isModified()\nfunction to determine whether the document has changed, and it\ncan hook a QAction to the\nslotModify() slot to signal user\ninteraction to the model. Separating all code that handles the\napplication data makes it easy to write automated tests using\nPyunit. This is the topic of the next chapter.\n\nDocviewView is\nthe view class in the framework. A view is a visual component;\nin PyQt it must somehow descend from\nQWidget \u2014 either directly, as it\nis done here, or via a more specialized class, such as\nQTable or\nQCanvas. A reference to the application\nmodel is passed to the view. This breaks encapsulation\nsomewhat, but it makes initially setting up the display a lot\neasier.\n\nWarning\n\nI mentioned earlier, in\nthe Section called QColor in Chapter 10, that the nice people at\nTrolltech changed the name of the function that is\nused to set background colors from\nsetBackgroundColor to\nsetEraseColor. This means of course\nthat you, if you want to run this example with PyQt 3,\nwill have to adapt the relevant calls.\n\nThe document has to notify the view of\nchanges. This means that the view has to have slots\ncorresponding to all the document signals the view is\ninterested in. A view can thus show changes to the document\nselectively, and you can create more than one view, each with\na specialized function.\n\nThe DocviewApp\nis the controller component. It controls both view and\ndocument.\n\nThe controller keeps a dictionary of\nactions, making it easier to refer to those actions when\npopulating the menu and toolbars. The dictionary can also be\nused to export functionality for a macro language, by calling\nthe\nQAction.activated()\nslot, which is connected to the relevant slots in the\ncontroller. The pixmap is in the form of an inline XPM image,\nwhich is not shown here.\n\nPopulating toolbars, menubars and\nstatusbars are always a bit tedious. When BlackAdder is\nintegrated with Qt 3.0, it will be possible to design not\nonly dialogs and widgets, but also menu's and toolbars using a\nvery comfortable action editor. I will discuss the various\naspects of creating toolbars and menubars later in Chapter 13.\n\nThis function is called in the\nslotFileQuit() slot when the document\nhas been modified. Note that we're using a class function,\ninformation, from\nQMessageBox. By passing an empty\nstring after the button labels for \"Ok\" and \"Cancel\", the\nmessagebox is created with only two buttons, instead of\nthree.\n\nThis is the stub that starts the\napplication. In contrast with the examples from Part I, such\nas hello5.py, this framework doesn't\ncheck if all windows are closed with:\n\napp.connect(app, SIGNAL(\"lastWindowClosed()\")\n, app, SLOT(\"quit()\"))\n\nThis is because the framework supports\nonly one window, and quitting the app is\nintegrated in the DocviewApp\nclass.\n\nNow the startup bit is done, we can see\nwhat docview.py produces when it is\nrun:\n\nA very simple document-view framework\napplication\n\nThis framework only supports one window\nwith one view and one document. Another omission is that there\nis no interaction between view and document. Usually, you will\nalso allow the view component to receive user actions, like\nmouse clicks. These mostly arrive in the form of events. You\ncan handle these in various ways. The first is to directly\ncall the relevant slot functions in the document. Try adding\nthe following method to the DocviewView\nclass:\n\ndef mouseDoubleClickEvent(self, ev):\nself.doc.slotModify()\n\nThis bypasses the controlling application\n(DocviewApp) and leads to an\nuncomfortably tight coupling between view and document.\nAnother way\nto notify the document of the double-click is to let the view\nemit a signal, which can be\ncaught by the application object and connected to the document\nslot. Replace the previous function with the following\nfunction in the DocviewView class\ninstead:\n\nAs you can see, you can either call the\ndocument directly from the view, or via the application\ncontroller. The approach you choose depends on the complexity\nof your application. In the rest of this part we will extend\nthis simple framework to include MDI (multiple document\ninterface) and MTI (multiple top-level windows interface)\napplications."}
{"text": "No report is needed for this ungraded warmup project. The directions assume you are using a computer in the MCS lab that is booted to Mac OS X. Log in using the same name and password as you use for Gustavus email. Here is a schedule for your work:\n\nTuesday, February 9: Part I and, to the extent you have time, Part II.\nThursday, February 11: Part III and, to the extent you have time, Part IV.\n\nI. Introduction to Python using TurtleWorld\n\nWe will start out our exploration of Python by using a nice\ngraphical \"playground\" for experimenting with basic Python commands.\nThe environment is called \"TurtleWorld.\" To work with\nTurtleWorld, first\nopen a terminal window. The Terminal application is the one that looks like this:\n\nNext, type the following command in the terminal window to start up\nTurtleWorld (hit \"Enter\" once the command is complete):\n\npython\n~mc28/www-docs/S2010/projects/warmup/TurtleWorld.py\n\nA window labeled \"TurtleWorld\" should open, though you will probably need to use your mouse to bring it to the front. In the lower right of\nthis window is a text area where we will be typing in Python code.\nRight now, it has two lines of code \"world.clear()\" and \"bob=\nTurtle(world).\" It is not so important at this point to\nunderstand the syntax of these lines, but to see what they do when\ninterpreted by Python, click the \"Run code\" button. A turtle\nshould appear in the large white space inside the window.\n\nIn Python, spaces and tabs are used to indicate lines of code that\nare to be treated as a unit. Here we want the last two\nlines to be executed inside the \"for\" loop, so we indent them.\nNote that the two commands fd(bob,i) and lt(bob,i) cause the turtle\nto move. How so?\n\nIn the previous example, bob moves i units and turns left i degrees, for each value of i in the range from 0 up to but not including 100.\n\nIf the turtle's pen is down, it will draw as it moves, otherwise no\ndrawing will occur. Try to create code that will do the following:\n\n1) Make bob draw a square.\n2) Have two turtles draw squares.\n3) Make bob draw a hexagon.\n\nNow, try the following code:\n\nfor i in range(4): print 'Hello!'\n\nWhen you run this, nothing happens in the turtle window. This\nis because Python interprets the print command to mean \"print to the\nterminal window.\" If you go to that window, you\nwill see the four lines of output. The point of this example is\nthat when we initially started Python by executing a shell command\n\npython\n~mc28/www-docs/S2010/projects/warmup/TurtleWorld.py\n\nthe command loaded in the Python file\nTurtleWorld.py and executed it. This file contains lots of Python code\nto create the Turtle Window, create turtles, handle drawing commands,\netc. However, the simple command \"print 'Hello!'\" is interpreted\ndirectly by Python and the result of the command is sent directly to\nthe terminal window.\n\nII. Playing in TurtleWorld some more\n\nChapter\n4 of Think Python contains lots of activities based on TurtleWorld. Choose some that look interesting and try them out. Actually, I'd also encourage you to do any other playing around\nwith python, for example based on earlier chapters. For now, just type your code into\nthe TurtleWorld window. We will look at how to create individual\nPython files (like TurtleWorld.py) in an editing environment in the\nnext part of this lab.\n\nNote: If you want to install TurtleWorld on your own computer, you can get it as part of a\npackage called \"Swampy\" that was created by the author of Think Python. Go to \nYou can use a terminal window to execute the wget, unzip, and cd commands\nthat are shown there. Once you have done the cd command, you can\nenter the python command and it will be running in the Swampy\ndirectory. If you login again on a future day, you can skip the wget\nand unzip parts and start with the cd command.\n\nIII. Editing and Running a Python Script to Find Combinations\n\nNow we\nwill leave the environment of TurtleWorld and look at how to create and\nedit programs (or \"scripts\") in Python. Python scripts can be\ncreated using any general text\neditor and then run in a terminal window. However, it can be useful to use\nan integrated development environment (IDE) that includes both an editor\nand a python interpreter. The editor will highlight\nPython syntax and automatically indent lines as you type. We will\nuse the IDE named \"Idle\" which is\nitself written in Python. To start Idle, type\n\npython -m idlelib.idle\n\nin a terminal window.\n\nA window titled\n\"Python Shell\" will open, though as with TurtleWorld, you may need to use your mouse to bring it to the front. To\nedit a separate script, choose File->New\nWindow. In the script window that opens (the one titled\n\"Untitled\"), you can type in code without having it immediately run.\n\nWe will create a Python script to compute the number\nof ways to choose k objects from a set of n objects. This number is\nsometimes called \"n choose k\" or the number of combinations of k\nthings from n things. It is also called a \"binomial\ncoefficient.\"\n\nGiven a non-negative integer n and an integer k, the\nnumber of combinations, C(n, k), is defined as\n\nand\n\nThe first formula shows that the numerator is a product of factors that range from n down to n\u2212k+1 and the denominator is a product of factors that range from k down to 1. It is tempting to compute these two products and then divide, or even use the second version, where we start by computing n! and then divide by two other\nfactorials. The problem with this simple approach\nis that the products can grow unnecessarily large. Python can handle\nintegers of arbitrary size, but calculations with such large values can\nbe quite slow.\n\nA better\nalgorithm for computing C(n, k) doesn't wait until it has multiplied all the numerator factors together before it starts dividing by the denominator factors. Instead, the algorithm goes through a loop, each time updating its answer to incorporate both one more factor from the numerator and one more factor from the denominator. The answer gets multiplied by the numerator factor and divided by the denominator factor. The divisions keep the answer from growing unnecessarily large.\n\nIf we process the factors in the order they are listed, we'd start with n in the numerator and k in the denominator. The only problem is that n may not be divisible by k, so we'd have to leave the nice clean world of integers. A better approach processes the denominator factors in the reverse order, from 1 up to k. That way, after one trip through the loop the answer is n/1, after a second trip through the loop the answer is n*(n\u22121)/(1*2), etc. Each of these answers is definitely an integer, because they are C(n, 1), C(n, 2), etc. Here is the code:\n\nIn this code, we are using some new constructs. We saw the for loop in the\nTurtleWorld example, but here we use a slightly different form of\nthe range expression.\nThe expression range(1, k+1)\nmeans that the loop will start at 1 and end just before reaching k+1.\nEach time through the loop, a numerator factor is calculated to go along with the denominator factor and then a new version of the answer is calculated by updating the old version.\n\nWe are also using if statements. This construction should be\nself-explanatory. It is also described in Chapter\n5.\n\nEnter the code into\nthe editor window in Idle. To evaluate the procedure, choose Run->Run Module\nfrom the menu bar or hit the F5 key. Whenever you evaluate code, Idle will\nask you\nto save it first. This can be a bit annoying, but that is the way Idle\nis set up.\n\nIn the Python Shell window, the prompt will switch to a new line,\nindicating that the code was evaluated successfully. To test the\ncode type c(11,4)\nat the last prompt (>>>) in the Python Shell window and hit\nreturn. You should get the same answer as for 11*10*9*8/(4*3*2*1).\n\nNotice that this procedure does not print anything out; instead, it returns a value. When you evaluate c(11,4) in the Python Shell, the value gets printed out, but that is just because the value of any expression you enter gets printed, not because the procedure itself is doing the printing. If you enter a different expression, such as 7+c(11,4), you will see a different value that does not come directly from the procedure.\n\nHaving the procedure return its value makes it useful as part of other computations. However, during debugging you might find some printing useful as a way of understanding what the procedure is doing. Try adding the following as a third line inside the for loop:\nprint denominatorFactor, numeratorFactor, answer\nRun the modified procedure and make sure you understand the printed values.\n\nThe correct value of c(11,0) is 1, because there is only one way to choose zero items. Can you explain how the procedure gets this case right?\n\nSuppose that k isn't so large that it is greater\nthan n, but is large enough that 2*k > n. In\nthis case, the computation can be made faster, without changing its\nresult, by using n-k in place of k. Add a third if statement to accomplish this optimization and check that it works.\n\nOnce you are done understanding and modifying the procedure, you can save it away as a tool that may be useful in the future. But first you should turn the print statement into a comment so that the output doesn't show up every time the procedure is used. You can do this by putting a # character at the beginning of the line.\n\nIV. Binomial Formula\n\nA nice formula for the sum of binomial coefficients is\n\nCreate a procedure, binom_sum(n) that sums up the combinations\nC(n, k) from k=0 to k=n and verify that you do indeed get 2n. (In Python, the power of two can be calculated as 2**n.)\n\nIf you have extra time, create a procedure to verify the following\nformula:"}
{"text": "MVC\n\nMVC is an architectural design pattern that encourages improved\napplication organization through a separation of concerns. It enforces the\nisolation of business data (models) from user interfaces (views), with a\nthird component (controllers) traditionally managing logic, user input,\nand coordination of models and views. The pattern was originally designed\nby Trygve\nReenskaug while he was working on Smalltalk-80 (1979), where it\nwas initially called Model-View-Controller-Editor. MVC was described in\ndepth in the Gang of Four's 1994 book Design Patterns: Elements of\nReusable Object-Oriented Software, which played a role\nin popularizing its use.\n\nSmalltalk-80 MVC\n\nIt's important to understand the issues that the original MVC\npattern was aiming to solve, as it\nhas changed quite heavily since the days of its origin. Back in the 70s,\ngraphical user interfaces were few and far between. An approach known as\nseparated\npresentation\nbegan to be used to make a clear division between domain objects, which\nmodeled concepts in the real world (such as a photo, a person), and the\npresentation objects that were rendered to the user's screen."}
{"text": "Recommendations for books covering new C++11/C++0x standard\n\nThis is a discussion on Recommendations for books covering new C++11/C++0x standard within the C++ Programming forums, part of the General Programming Boards category; Hello all. I've finally decided to stop being such a C zealot and really learn C++. I've been seeing a ...\n\nRecommendations for books covering new C++11/C++0x standardAs far as I know, there are no real books doing any reasonable coverage of C++11 features. There are a few \"for pay\" articles and self-released books from good developers, but they aren't great for teaching C++ as they focus exclusively on new features, how reliable those features are, and where those features are available.\n\nThat said, happily, you don't need a \"newer book covering these newer additions\". Virtually all of those features extend, rather than replace, existing C++ features, and most of the existing features are widely implemented correctly. You need \"Accelerated C++\"; it does a great job of building a foundation in C++ and the standard library that you would need to use those new features."}
{"text": "Beginning Cocoa\n\nIn 7 challenging days, Beginning Cocoa Bootcamp will take you from complete novice to being able to build your first Cocoa application. In addition, you'll become an active participant in the Cocoa programming community, allowing you to continue learning upon completion of the class.\n\nTwo days devoted to learning Objective-C are followed by the renowned Big Nerd Ranch 5-day Cocoa I Bootcamp. This developer training offers a condensed and information-rich, hands-on introduction to Objective-C programming. This is the perfect class for programmers interested in learning Cocoa who may lack a background in C or Object-Oriented Programming.\n\nUse Core Data to create more sophisticated object graphs using relationships.\n\nBlocks\n\nUse blocks to make your code more powerful and easier to maintain.\n\nConcurrency\n\nLearn the basics of multithreading in Cocoa.\n\nInstruments\n\nLearn how Instruments can help with analyzing performance and memory issues in your application.\n\nDebugging\n\nGet familiar with the Xcode's graphical debugger as well as the lldb console.\n\nApplication Architecture\n\nLearn how to use Model-View-Controller to structure a complex, maintainable Cocoa application.\n\nREQUIREMENTS\n\nWithout prior experience in either a procedural programming language (such as C, Pascal, VB, or PHP) or another object-oriented platform (such as Java or C#) this class may prove to be extremely challenging."}
{"text": "Synopsis C in 21 Days: Week 2Audience\nThis course is for the beginning programmer or for the experienced programmer who wants to learn ANSI C.\n\nTime\n11 hours\n\nProduct Code: CLGC02\n\nC in 21 Days: Week 2 covers the following topics:\n\nDay 8: Numeric Arrays\nExplains what an array is. Defines single and multidimensional arrays. Shows how to declare and initialize arrays.\n\nDay 9: Pointers\nDiscusses the uses of pointers. Demonstrates how to declare and initialize pointers. Shows how to use pointers with simple variables and arrays. Illustrates how to use pointers to pass arrays to functions.\n\nDay 10: Characters and Strings\nCovers how to use C's char data type to hold single characters. Examines how to create arrays of type char to hold multiple-character strings. Explains how to initialize characters and strings. Describes how to use pointers with strings. Shows how to print and input characters and strings.\n\nDay 11: Structures\nExplains what simple and complex structures are. Shows how to define and declare structures and access data in structures. Discusses how to create structures that contain arrays and arrays of structures. Examines how to declare pointers in structures and pointers to structures. Shows how to pass structures as arguments to functions. Demonstrates how to define declare and use unions. Describes how to use structures to create linked lists.\n\nDay 12: Variable Scope\nDiscusses scope and why it's important. Explains what external variables are and why programmers should usually avoid them. Describes local variables and blocks. Highlights the differences between static and automatic variables. Shows how to select a storage class.\n\nDay 13: More Program Control\nDemonstrates how to use break continue and switch statements. Explains why programmers might use infinite loops . Describes why the goto statement should be avoided. Illustrates how to control program exits. Describes how to execute functions automatically on program completion. Explains how to execute system commands in your program.\n\nDay 14: Working with the Screen Printer and Keyboard\nExplains how C uses streams for input and output. Describes various ways of accepting input from the keyboard. Presents methods of displaying text and numeric data on the screen. Shows how to send output to the printer. Demonstrates how to redirect program input and output.\n\nWeek 2 in Review\nPresents a program that uses the skills learned during the week."}
{"text": "Learn More\n\nThe C programming language is a popular and widely used programming language for creating computer programs. Programmers around the world embrace C because it gives maximum control and efficiency to the programmer.\n\nIf you are a programmer, or if you are interested in becoming a programmer, there are a couple of benefits you gain from learning C:\n\nYou will be able to read and write code for a large number of platforms -- everything from microcontrollers to the most advanced scientific systems can be written in C, and many modern operating systems are written in C.\n\nThe jump to the object oriented C++ language becomes much easier. C++ is an extension of C, and it is nearly impossible to learn C++ without learning C first.\n\nIn this article, we will walk through the entire language and show you how to become a C programmer, starting at the beginning. You will be amazed at all of the different things you can create once you know C!"}
{"text": "BASIC is a high-level programming language that is an extension of the Dartmouth BASIC (Beginners All-purpose Symbolic Instruction Code) language. It is the principal programming language bundled with the D3 system and was designed for the implementation of application requirements not inherent in standard D3 functionality.\n\nBASIC source can contain any number of statements in any order and can be stored as source programs or subroutines called by other programs, processing codes or VB modules. BASIC programs are created an editor of choice and reside as item within a data file.\n\nPrior to execution, the programs must be compiled to convert the source program into object code. Compiled object items are stored in the dictionary of the data file that contains the source code. Compiled programs can be cataloged as commands within the master dictionary. Subroutines must be cataloged as commands within the master dictionary.\n\nBASIC source code can be compiled in the traditional way, or it can be optimized or flashed."}
{"text": "AnnotationPTR Overview\n\nAs part of the Sams Teach Yourself in 24 Hours series, this book will present 24 hands-on, one-hour lessons that will guide the readerAudience\n\nThere is a consensus in the Python user community that a basic, introductory level book is needed; and in fact it is widely held that Python is an ideal choice for a first programming language. Specific types of users range from: Users adopting Linux and looking for an easy, powerful way to unleash the full potential of Linux, Web developers looking for a modern object-oriented scripting language for CGI applications, and Users or administrators of any operating system interested in creating portable utilities and applications.\n\nPTR Bullets\n\nPython is used extensively throughout the Linux community--it is included in every Linux distribution\n\nPython is an excellent language for learning programming, and this will be the only Python book on the market written expressly for the beginning Python programmer\n\nThe author is a well-known and respected member of the Python community who is uniquely suited to present this material\n\nUser Level\n\nEasy/Beginner\n\nProduct Author Bios\n\nIvan Van Laningham is a senior software engineer for Callware Technologies, Inc. where he provides Web server and Unix assistance and consultation as well as working on GUI design and programming using various languages, including Python. He was a presenter at the Seventh International Python Conference and at the O'Reilly Python Conference.Technology\n\nWhile it is often compared to Perl based on its power and flexibility, Python is in many ways superior to Perl. Python was designed from the beginning as an object-oriented language, unlike Perl where such features are a later (and poorly integrated) addition. Python is more portable, and it also runs on more platforms than Perl. Python is extremely powerful, has a clean and elegant syntax, and tends to enforce, or at least reward, a clear and understandable programming style. Because its syntax is simple, clear and powerful, it is an excellent first choice for a programming language. Red Hat Linux uses Python for its install procedure as well as many administration tools. Python is the primary programming language used by many large-scale Web sites like Infoseek and Four11. NASA's Johnson Space Center uses Python in its Integrated Planning System as the standard scripting language. Python has even been integrated into software products such as Caligari's TrueSpace.\n\nI bought this book hoping it would be a gentle yet thoroughintroduction to the Python language which I had hoped to use for webapplications. And the book started out along that track. Easy to read and lively and with lots of examples. The big problem I have with the book (and I only made it to hour 12 before I had to quit) is that there is no way for the reader to practice and learn the concepts in the book. There aren't any practice exercises or drills. There are screen dumps of code, but I didn't find the examples useful since I was looking for web-based applications rather than more mathematical types of examples. The examples also get very big and complex early on in the book. Experienced programmers will probably be able to follow along, but then they might not be buying this book in the first place. I'm still looking for a good, step-by-step way to learn Python.\n\nWhat I like: - Easy to understand. The author did a good job. - Casual writing style. (You learn a thing or two about Zen.) - Includes enough ref info on its topics, but not too detailed/technical.\n\nWhat I don't like: the editorial works. - Sample codes/output are presented as computer screen dumps. The color (gray scale) is hard to read, and characters are small. - The book description touts CGI as one of the book topics, but it's only covered lightly and briefly to add much value. - Chapter/hour 1 and 2 should be combined as 1. Too brief & too light.\n\n...this book is garbage, and that's exactly where the book is now. In the garbage. The author needs to go back to school and get educated in the english language. He is very knowledgable in programming, he lacks the ability to put his thoughts in english that others can understand. He stops his thought half way through sentences. He has run on sentences, typo's, combined with the fact that he NEVER explains a single piece of code in the book completely, he famous lines in the book are \"we'll discuss that later\" which never happens, and \"do you remember this?\" NO, BECAUSE YOU NEVER EXPLAINED IT!!! Very frustrating, and i'm an undergrad student that has been punching out code in Java for 3 years, and I'm totally lost, how is that possible? 2 simple words for this book, don't bother. Get this book, it's much better: ISBN# 0-13-026036-3 - Core Python Programming by Wesley J. Chun"}
{"text": "Course miscellany\n\nMore Extra Credit: Test play Clash Room for me! E-mail me to let me know you are interested. 10 points.\n\nExtra Credit Opportunity: Hangman in Prolog. This is due - both hard and soft copy, at the BEGINNING of the final exam, no exceptions. You will need to know the predicates assert, retract, and dynamic, so look at my slides on these. Successful completion can earn you 30 points (out of zero!!)\n\nprogramming language quotes\n\n\"A real programmer can program in any language.\" - Robert Dewar and Schonberg\n\n\"A language that doesn't affect the way you think about programming, is not worth knowing.\" - Alan Perlis\n\n\"There are only two kinds of programming languages: those people always bitch about and those nobody uses.\" -Bjarne Stroustrup\n\n\"Voodoo Programming: Things programmers do that they know shouldn't work but they try anyway, and which sometimes actually work, such as recompiling everything.\" -Karl Lehenbauer\n\n\"[The BLINK tag in HTML] was a joke, okay? If we thought it would actually be used, we wouldn't have written it!\" -Mark Andreessen\n\n\"I had a running compiler and nobody would touch it. They told me computers could only do arithmetic.\" -Rear Admiral Grace Hopper\n\n\"If you don't think carefully, you might think that programming is just typing statements in a programming language.\" -Ward Cunningham\n\n\"A language that doesn't have everything is actually easier to program in than some that do.\" -Dennis M Ritchie.\" -Larry O'Brien and Bruce Eckel\n\ncourse Description\n\nThis course provides an introduction to the theory and practice of formal languages. The topics of automata theory, grammar formalisms and Turing machines provide the theoretical foundation for practical issues such as data typing, control structures and parameter passing. Programming assignments involve the use of several languages. Prerequisites: CSC 230, MTH 206.\n\nMWF 10:50 - 12:00 in Alamance 315\n\ncourse units\n\nProgramming Languages\n\nObject-oriented (Java): A look at how Java works, the characteristics of object-oriented programming, and reflection"}
{"text": "Design Patterns : Elements of Reusable Object-Oriented Software\n\nCover\n\nDetails\n\nAuthor:\n\nErich Gamma, Richard Helm...\n\nYear Published:\n\n1995\n\nISBN:\n\n0201633612\n\nDescription\n\nDesign Patterns is based on the idea that there are only so many design problems in\ncomputer programming. This book identifies some common program-design\nproblems--such as adapting the interface of one object to that of another object or\nnotifying an object of a change in another object's state--and explains the best ways\n(not always the obvious ways) that the authors know to solve them. The idea is that\nyou can use the authors' sophisticated design ideas to solve problems that you often\nwaste time solving over and over again in your own programming."}
{"text": "Design Patterns : Elements of Reusable Object-Oriented Software\n\nCover\n\nDetails\n\nAuthor:\n\nErich Gamma, Richard Helm...\n\nYear Published:\n\n1995\n\nISBN:\n\n0201633612\n\nDescription\n\nDesign Patterns is based on the idea that there are only so many design problems in\ncomputer programming. This book identifies some common program-design\nproblems--such as adapting the interface of one object to that of another object or\nnotifying an object of a change in another object's state--and explains the best ways\n(not always the obvious ways) that the authors know to solve them. The idea is that\nyou can use the authors' sophisticated design ideas to solve problems that you often\nwaste time solving over and over again in your own programming."}
{"text": "All Android Titles\n\nBeginning Android 4 starts you on the path to developing innovative and salable applications for Android 4 mobile devices, using simple examples that are ready to run with your copy of the Software Development Kit (SDK) 4.0.\n\nBeginning Android 4 Games Development offers everything you need to join the ranks of successful Android game developers. You'll start with game design fundamentals and programming basics, and then progress toward creating your own basic game engine and playable game that works on Android 4.0 and earlier devices.\n\nBeginning Android C++ Game Development introduces general and Android game developers like you to Android's Native Development Kit (NDK). The Android NDK platform allows you to build the most sophisticated, complex and best performing game apps that leverage C++.\n\nBeginning Android Games offers everything you need to join the ranks of successful Android game developers. You'll start with game design fundamentals and programming basics, and then progress towards creating your own basic game engine and playable game.\n\nBeginning Android Games, Second Edition offers everything you need to join the ranks of successful Android game developers, including Android tablet game app development considerations. You'll start with game design fundamentals and Android programming basics, and then progress toward creating your own basic game engine and playable game appsLearn Android App Development is a hands-on tutorial and useful reference. You'll quickly get up to speed and master the Android SDK and the Java that you need for your Android Apps. You will find that Learn Android App Development is an all-in-one getting started guide to building your first Android smartphone or tablet apps!\n\nLearn Java for Android Development, Second Edition teaches programmers of any skill level the essential Java language and foundational Java API skills that must be learned to improve the programmer's chances of succeeding as an Android app developer."}
{"text": "Sessions at PyCon US 2012 with video\n\nWednesday 7th March 2012\n\nThis tutorial is an introduction to Bayesian statistics using Python. My goal is to help participants understand the concepts and solve real problems. We will use material from my book, Think Stats: Probability and Statistics for Programmers (O'Reilly Media).\n\nBayesian statistical methods are becoming more common and more important, but there are not many resources to help beginners get started. People who know Python can use their programming skills to get a head start.\n\nI will present simple programs that demonstrate the concepts of Bayesian statistics, and apply them to a range of example problems. Participants will work hands-on with example code and practice on example problems.\n\nStudents should have at least basic level Python and basic statistics. If you learned about Bayes's Theorem and probability distributions at some time, that's enough, even if you don't remember it! Students should be comfortable with logarithms and plotting data on a log scale.\n\nStudents should bring a laptop with Python 2.x and matplotlib. You can work in any environment; you just need to be able to download a Python program and run it.\n\nThis tutorial provides an overview of techniques to improve the performance of Python programs. The focus is on concepts such as profiling, difference of data structures and algorithms as well as a selection of tools and libraries that help to speed up Python.\n\nObjective\n\nThis tutorial provides an overview of techniques to improve the performance of Python programs. The focus is on concepts such as profiling, diffrence of data structures and algorithms as well as a selection of tools an libraries that help to speed up Python.\n\nIntended Audience\n\nPython programmers who would like concepts to improve performance.\n\nAudience Level\n\nProgrammers with good Python knowledge.\n\nPrerequisites\n\nPlease bring your laptop with the operating system of your choice (Linux, Mac OS X, Windows). In addition to Python 2.6 or 2.7, we need:Relational databases are often the bread-and-butter of large-scale data storage, yet they are often poorly understood by Python programmers. Organizations even split programmers into SQL and front-end teams, each of which jealously guards its turf. These tutorials will take what you already know about Python programming, and advance into a new realm: SQL programming and database design.\n\nThe class will consist of six 25-minute lessons, each of which features a 10-minute lecture, 10 minutes of interesting exercises, and a 5-minute wrap-up in which the instructor recaps the exercises by giving his own answers. The focus will be on keeping things simple so that each building block is grasped clearly. The six lessons will be laid out something like this:\n\n1. Tables, INSERT, and SELECT.\n\nCreate a simple sqlite3 table with the DB-API interface provided by the Python Standard Library.\n\nUse INSERT to fill the table with data.\n\nConcatenate INSERT statements to increase the speed and reduce the number of database round-trips required during a bulk data load.\n\nRead back table rows with SELECT.\n\nAdd dynamic expressions to the rows returned by SELECT.\n\nQuote values correct to avoid SQL injection attacks.\n\nAvoid \"gotchya\" differences between Python and SQL data types, with particular attention to Unicode, date-times, and the behavior of NULL verses None.\n\n2. WHERE and the importance of being indexed.\n\nRun quick performance checks that demonstrate that WHERE usually requires the entire table to be read into memory and scanned.\n\nAdd a simple index to shortcut specific WHERE clauses and return their results more quickly.\n\nCheck whether an index is being used, and learn several reasons why apparently useful indexes get ignored by the database.\n\nAdd aggregate indexes that yield performance increases for very specific WHERE clauses.\n\nInvestigate how our data distrubtion \u2014 for example, whether a particular column has thousands of different values, or merely thousands of instances of a handful of values \u2014 can impact the wisdom and performance of various query plans.\n\n3. FOREIGN KEY and JOIN\n\nUse a foreign key to relate rows in one table with rows in another.\n\nAdd JOIN clauses to a SELECT statement to assemble query-result rows that are built from pieces of several tables.\n\nDiagnose performance problems with JOIN by observing the cost of full N\u00d7M scans that compare every row from one table with every row from another.\n\nThink about the indexes that a query plan could take advantage of behind the scenes.\n\nCreate indexes that let the database take shortcuts when doing common JOINs.\n\n4. Post-processing.\n\nUse ORDER BY to control the rows which are returned first by a given query.\n\nCombine OFFSET and LIMIT to return \"paged\" results suitable for displaying on a limited display, like a web page or GUI window\n\nObserve how indexes affect the performance of ORDER BY / LIMIT.\n\nUse GROUP BY to support aggregate operations such as sums, averages, maxima, and minima.\n\nFilter aggregate results with the HAVING clause.\n\nThe exercises will present small Python scripts that post-process data, and ask students to write the equivalent GROUP BY / HAVING expressions to remove the need for the Python post-processing.\n\n5. Modifying tables.\n\nWrite WHERE clauses for UPDATE and DELETE using the same patterns already learned for SELECT.\n\nUse transactions in combinations with UPDATE and DELETE to prevent inconsistent database states from becoming visible to other clients.\n\n6. ORMs, Objects, and Tables.\n\nCreate tables of objects using the SQLAlchemy declarative schema in combination with classes.\n\nUnderstand the main differences between SQLAlchemy and the Django ORM, including the idea of explicit saves versus a unit-of-work pattern.\n\nSee how ORM query syntaxes mix down to SQL statements.\n\nDetermine when an ORM will be helpful, versus when straight SQL might be a better solution for a particular problem.\n\nOf course, mastery of these topics cannot be conveyed in a single three-hour course! The tutorial will have succeeded if students learn the main moving parts that are involved in a relationally-backed Python application, if they have gotten some practice with SQL and the kind of tasks that it seeks to simplify, and if they have a foundation upon which to build when they are next faced with writing or modifying Python code that interfaces with a SQL database This course will present Pyramid and lead you through the creation of a an application as the concepts from the framework are introduced\n\nThough it's in part inspired by Zope and uses concepts and software that may be familiar to Zope programmers, no prior Zope experience is required to use it. Also, unlike Zope, you don't need to understand many concepts and technologies fully before you can be truly productive.\n\nPyramid is also inspired by Django and Pylons. It tries to learn valuable lessons from things that have gone well with different web frameworks and give the user great flexibility in applying them.\n\nThis course will present Pyramid and lead you through the creation of a an application as the concepts from the framework are introduced. The extensive Pyramid documentation will be used as \"text book\".\n\nThe tutorial will give a hands-on introduction to manipulating and analyzing large and small structured data sets in Python using the pandas library. While the focus will be on learning the nuts and bolts of the library's features, I also aim to demonstrate a different way of thinking regarding structuring data in memory for manipulation and analysis.\n\nThe tutorial will teach the mechanics of the most important features of pandas. It will be focused on the nuts and bolts of the two main data structures, Series (1D) and DataFrame (2D), as they relate to a variety of common data handling problems in Python. The tutorial will be supplemented by a collection of scripts and example data sets for the users to run while following along with the material. As such a significant part of the tutorial will be spend doing interactive data exploration and working examples from within the IPython console.\n\nThe tutorial will also teach participants best practices for structuring data in memory and the do's and don'ts of high performance computing with large data sets in Python. For participants who have never used IPython, this will also provide a gentle introduction to interactive scientific computing with IPython\n\nFor many applications PyPy can provide performance benefits right out of the box. However, little details can push your application to perform much better. In this tutorial we'll give you insights on how to push pypy to it's limites. We'll focus on understanding the performance characteristics of PyPy, and learning the analysis tools in order to maximize your applications performance.\n\nWe aim to teach people how to use performance tools available for PyPy as well as to understand PyPy's performance characteristics. We'll explain how different parts of PyPy interact (JIT, the garbage collector, the virtual machine runtime) and how to measure which part is eating your time. We'll give you a tour with jitviewer which is a crucial tool for understanding how your Python got compiled to assembler and whether it's performing well. We also plan to show potential pitfalls and usage patterns in the Python language that perform better or worse in the case of PyPy.\n\nWe'll also briefly mention how to get your application running on PyPy and how to avoid common pitfalls there, like reference counting or relying on C modules.\n\nThis tutorial is intended for people familiar with Python who have performance problems, no previous experience with PyPy is needed. We ask people to come with their own problems and we'll provide some example ones. Attendees should have the latest version of PyPy preinstalled on their laptops.\n\nThis intermediate-level class will teach you techniques using the popular NoSQL database MongoDB, its driver PyMongo, and the object-document mapper Ming to write maintainable, high-performance, and scalable applications. We will cover everything you need to become an effective Ming/MongoDB developer from basic PyMongo queries to high-level object-document mapping setups in Ming.\n\nThe class will begin with a brief overview of MongoDB and its Python driver PyMongo. We will cover basic operations using PyMongo, including data manipulation, querying, and GridFS. Students will install MongoDB and PyMongo as part of this section.\n\nWe will then describe the design philosophy and setup of Ming, a SQLAlchemy-inspired object-document mapper (ODM) for MongoDB developed at SourceForge.\n\nNext we will cover the base-level implementation of Ming, including schema design, the session and datastore, lazy migrations, data polymorphism, and GridFS support. We will also cover effective MongoDB index design, querying, and updating techniques, and how to use these with Ming. Students will install Ming as a part of this section, and have exercises covering schema design, lazy migrations, and GridFS.\n\nThe final segment will cover the object-document mapper portion of Ming. We will cover the unit of work design pattern, object relations, ODM-level polymorphism, and how to drop down to the base layer (or even down to pymongo) when you really need to. This section will include exercises in designing your ODM model and effectively using the unit-of-work session.\n\nThis talk targets Python 2.6-2.7 and MongoDB 2.0. Students should have Python 2.6 or 2.7 installed on their machines prior to the class and should be comfortable using virtualenv and pip or easy_install to install packages.\n\nExciting information is trapped in web pages and behind HTML forms. In this tutorial, you'll learn how to parse those pages and when to apply advanced techniques that make scraping faster and more stable. We'll cover parallel downloading with Twisted, gevent, and others; analyzing sites behind SSL; driving JavaScript-y sites with Selenium; and evading common anti-scraping techniques.\n\nBasics of parsing\n\nThe website is the API\n\nHTML is a mess, but we can parse it anyway\n\nWhy regular expressions are a bad idea\n\nExtracting information, using XPath, CSS selectors, and the BeautifulSoup API\n\nThursday 8th March 2012\n\nPython projects can succeed or fail because of their documentation. Thanks to Sphinx, Python now has a \"documentation framework\" with indexing, syntax highlighting, and integration with your code. Students will be given a small undocumented Python package, and during the exercises they will give the package a tutorial and reference manual. Plus: deployment and theming!\n\nPython projects can succeed or fail based on their documentation. Thanks to Sphinx, Python now has a \"documentation framework\" that provides convenient indexing and automatic syntax highlighting, and can also integrate your documentation with your code (your documentation can be run as a test, and your class and function docstrings can become your reference documentation). Students will be given an undocumented sample Python package, and be lead through exercises that result, by the end of the tutorial, in their giving the package a full tutorial and reference manual. Deployment and theming will also be taught.\n\nBesides a 15-minute introduction and 15 minutes for questions and discussion at the end, the tutorial will be organized in six 25-minute sessions which each involve a short lecture and then an interactive exercise that asks the students to apply what they have just learned. Here are the major topics covered by each of the six sessions:\n\nThe reStructuredText markup language and its syntax; the standard doctools; and the two different conventions that Sphinx can support for laying projects out as directories and files.\n\nThe Sphinx documentation build process on both Unix and Windows; how to arrange your project documentation in a way that will make sense to novice, experienced, and expert users alike; and how Sphinx supports connections between different pages of documentation.\n\nRunning code examples in the documentation as doctests; the pros and cons of pulling docstrings from the code as API documentation (and how to do it if it proves necessary); and including non-doctest full code listings in the documentation.\n\nReferencing headings in the same document; cross-referencing between documents; making class and method names automatically link to their entry in the API documentation; and how to make code objects appear in the index.\n\nTheming with custom HTML and CSS, for students who happen to know web design; plugging in pre-made Sphinx themes; and how to integrate Sphinx into an entire web site for their product.\n\nShipping documentation with your package on PyPI; installing it readthedocs.org; making sure that documentation gets included with a binary install; using a version control source browser to view documentation directly in their project trunk; and deploying Sphinx to a web site.\n\nThe Sphinx approach will be linked to other successful documentation systems in our computing heritage, most notably in the practices it shares in common with the Unix Documenter's Workbench (DWB) of the 1970s.\n\nThis tutorial will walk the attendees from some introductory game development theory (what makes a good game) and through development of a simple game (how to make a good game) with time left over for some experimentation and exploration of different types of games.\n\nThe tutorial will start with Katie Cunningham giving an introduction to video games, covering the basic components of a game, and some general game genres. Some basic tropes in modern games will be explored, as well as pitfalls to avoid in making a game for a today's audience. Genres will be paired with inexpensive/free examples that can be explored by the tutorial attendees later.\n\nThe baton will then pass to Richard Jones who will walk through the practicalities of building a simple video game from scratch, starting with presenting one approach to structuring the game code to keep it sane. He will talk about what libraries are available and then focus on the facilities present in the library used in the tutorial.\n\nWe will then walk through the development of a simple game during which the attendees will code the game. Once the game is developed we will talk about potential further development that possibilities and use the remaining tutorial time to encourage and assist attendees in their efforts to do so.\n\nThe game developed will cover the key game-writing skills of controlling what appears on the screen (including animation), loading resources, handling user input and simulating the environment within the game.\n\nParticipants should be familiar with Python, and must have pygame installed. We will not have time to deal with installation and compatibility issues so participants must check their laptops can run pygame applications.\n\nFrom how the operating system handles your requests through design principles on how to use concurrency and parallelism to optimize your program's performance and scalability. We will cover processes, threads, generators, coroutines, non-blocking IO, and the gevent library.\n\nHow processes, threads, coroutines, and non-blocking IO work from the operating system through code implementation and design principles to optimize Python programs. The difference between parallelism and concurrency and when to use each.\n\nThe premise is that to make an informed decision you need to know what is happening under the hood. Once you understand the low level functionality, you can make the correct decision in the design phase.\n\nThe emphasis is on practical application to solve real world problems.\n\nWhen it comes to plotting with Python many people think about matplotlib. It is widely used and provides a simple interface for creating a wide variety of plots from very simple diagrams to sophisticated animations. This tutorial is a hands-on introduction that teaches the basics of matplotlib. Students will learn how to create publication-ready plots with just a few lines of Python.\n\nTarget Audience\n\nThis tutorial is for Python users who would like to create nice 2d plots with Python.\n\nAudience Level\n\nStudents should have a working knowledge of Python. NumPy knowledge is helpful but not required.Content\n\nThe library matplotlib provides many different types of diagrams from within Python with only few lines of code. Examples are used to exercise the use of this library. The tutorial provides an overview how to create plots with matplotlib. IPython in combination with pylab from matplotlib provides an interactive environment for fast testing of ideas. We will be using this for most of the tutorial.\n\nWith a simple plot we learn how to add axis labels, titles and a legend. The GUI offers zooming, panning, changing of plot sizes and other interactive ways to modify the plot. We will use Python to change properties of existing plots such as line colors, marker symbols, or line styles. There are several ways how to place text on plots. You will learn about the different coordinate systems relative to the plot, the canvas or the figure. Another topic are ticks, where to put them and how to format them to achieve publication-quality plots. The concepts of figures, subplots, and axes and how they relate to each other will be explained with examples.\n\nmatplotlib offers many different types of plots. The tutorial introduces several of them with an example. A more advanced topic will be creating your own plot types. We will build a stacked plot type. Finally, we will create a small animation to explore the possibilities to visualize changes.\n\nThis tutorial is for software developers who've been using Python with success for a while but are looking for a deeper understanding of the language. It demystifies a number of language features that are often misunderstood.\n\nIn many ways Python is very similar to other programming languages. However, in a few sometimes subtle ways it is quite different, and many software developers new to Python, after their initial successes, hit a plateau and can't figure out how to get past it. Others don't hit or perceive a plateau, but still find some of Python's features a little mysterious. This tutorial will help deconstruct your incorrect assumptions about Python and pull away the mists of confusion.\n\nIf in your use of Python you sometimes feel like an outsider, like you're missing the inside jokes, or like you have most of the puzzle pieces but they don't quite fit together yet, this may be a good tutorial for you.\n\nAfter completing this tutorial you'll have a deeper understanding of many Python features. Here are some of the topics we'll cover:\n\nHow namespaces really work, after which you'll understand:\n\nmost of the differences between variables in other languages and Python, including\n\nwhy Python has neither pass-by-value nor pass-by-reference function call semantics, or why sometimes variables passed to a function can be changed by it, and sometimes they cannot.\n\nIterables, iterators, and the iterator protocol, including how to add it to a class\n\nHow generators can make your code easier to read and understand\n\nCreating classes without a class statement in order to better understand how they work\n\nBound versus unbound methods and interesting uses of the former\n\nHow and why you might want to create or use a partial function\n\nOther use-cases of functions as first-class citizens\n\nUnpacking and packing arguments with * and ** on function call and definition\n\nAttendee Requirements\n\nBring a laptop computer with a recent version of Python 2.7 or Python 3 installed.\n\nPrerequisites\n\nIntermediate ability in Python and little or no fear of iterators, generators, classes, methods, and how to call a function that's stored in a data structure.\n\nSocial Network data permeates our world -- yet we often don't know what to do with it. In this tutorial, I will introduce both theory and practice of Social Network Analysis -- gathering, analyzing and visualizing data using Python and other open-source tools. I will walk the attendees through an entire project, from gathering and cleaning data to presenting results.\n\nSNA techniques are derived from sociological and social-psychological theories and take into account the whole network (or, in case of very large networks such as Twitter -- a large segment of the network). Thus, we may arrive at results that may seem counter-intuitive -- e.g. that Justin Bieber (7.5 mil. followers) and Lady Gaga (7.2 mil. followers) have relatively little actual influence despite their celebrity status -- while a middle-of-the-road blogger with 30K followers is able to generate tweets that \"go viral\" and result in millions of impressions.\n\nIn this tutorial, we will conduct social network analysis of a real dataset, from gathering and cleaning data to analysis and visualization of results. We will use Python and a set of open-source libraries, including NetworkX, NumPy and Matplotlib.\n\nOutline:\n\nIntroduction. Why should we do this? What is the data like? Why is this different from other techniques? What can we learn?\n\nThe world of infrastructure as code is becoming far more pervasive and many Python developers are trying to find a way to get started. This class will get you up and running with Chef and Fabric to manage your systems be they in the cloud or under your desk.\n\nStudents must have a laptop with the Chef gem and git installed. Install instructions will sent out before the class.\n\nIn this tutorial, I will cover how to write very fast Python code for data analysis. I will briefly introduce NumPy and illustrate how fast code for Python is written in SciPy using tools like Fwrap / F2py and Cython. I will also describe interesting new approaches to creating fast code that is leading changes to NumPy on a fundamental level.\n\nIn this tutorial, I will cover how to write very fast Python code for data analysis including making use of NumPy and using GPUs. I will largely focus on writing extensions to Python using hand-wrapping and Cython but will touch also on using tools like weave, Instant, ShedSkin and compare them to PyPy. I will also spend the last part of the tutorial on using GPUs with Python and discuss the performance trade-offs of the technology. This will be a high-level overview of the space with deep dives in Cython and GPUs\n\nThe goal of this tutorial is to give the attendee a first experience of machine learning tools applied to practical software engineering tasks such as language detection of tweets, topic classification of web pages, sentiment analysis of customer products reviews and facial recognition in pictures from the web or from your own webcam.\n\nThe demand for software engineers with Data Analytics and Machine Learning skills is rapidly growing and Python / Numpy is one of the best environments for quickly prototyping scalable data-centric applications or interactively exploring your data especially thanks to tools such as IPython and Matplotlib.\n\nscikit-learn is a very active open source project that implements a variety of state-of-the art machine learning algorithms. The goal of this project and tutorial is to take the algorithms out of the academic papers and make them work on a selection of real world tasks to unleash the value of your data.\n\nWe will focus on providing hints to perform the right data preprocessing steps and on how to select algorithms and parameters suitable for the task at hand. We will also introduce tools and methodologies to measure the performance of the trained models as objectively as possible.\n\nFriday 9th March 2012\n\nA developer talks about her lessons learned with setting up her first server, and offers advice to others about to tread that path.\n\nMy background (how did I get this far without mucking with servers?)\nLesson one: The first step is not to install the OS yourself\nGet a Rackspace account!\nRough cost analysis\nLesson two: Use Ubuntu\nThe CentOS saga\nWhy Ubuntu?\nLesson three: Automate everything\nWhat you need to know about fabric\nLesson four: Don't mess with production\nThe cost of a new slice\nThe cost of ruining everything forever\nThe magic of cloning\nLesson five: Your next steps\nSecurity!\nVirtualenv\n\nGraphs are everywhere - from your distributed source code control to Twitter analytics. This session presents a set of three problems and shows how they can be decomposed into operations on graphs, and then demonstrates solutions using the various graph libraries available for (or accessible to) Python.\n\nGraphs are a fundamental computer science datatype, and graphs show up in all sorts of models in all sorts of places. So when you have a graph, what can you do with it? Particularly if it is really big?\n\nThirty minutes isn't a lot of time to discuss graph processing as a topic, so there won't be a lot of discussion relative to graph theory generally or the terminology of graphs. Instead, this is inspired by Raymond Hettinger's \"mastering team play\" - a series of exercises showing the lowering of a problem into a graph representation, followed by a demonstration of how the problem can be solved through graph processing. There will also be a little bit of compare-and-contrast between the available graph libraries to show differences. Each problem will be given 8-10 minutes.\n\nProblem 1: Python's (legal) history\nPython has developed over time under a number of organizations - each with their own license. What portions of Python's codebase are under each license?\n\nThe CVS/SVN/HG trees as graphs modeling change in time\nIdentifying and labeling node types\nGraphing and reporting on results\nProblem 2: Development Cliques\nLinux is famously developed with \"lieutenants\" in charge of different subsystems of the kernel. Python doesn't have lieutenants... or does it? Put another way, if you have a patch, who should you submit it to?\n\nMailing list connections as a graph\nAnalysis of connections, cliques, and centrality\nGraphing and reporting on results\nProblem 3: Let's get social\nYour employer has decided that its website should be turned into a social network - you know, because there aren't enough of those.\n\nBootstrapping a graph by looking at pairwise analysis of products\nHow to suggest who people \"might know\"?\n\nPython's metaclasses grant the Python OOP ecosystem all the power of more complex object inheritance systems in other languages, while retaining for most uses the simplicity of the straightforward class structures most developers learn when being introduced to object-oriented programming. This talk is an explanation of metaclasses: first, what they are, and second, how to use them.\n\nMetaclasses\n\nIntroduction (2.5m)\n\nPython's metaclasses grant the Python OOP ecosystem all the power of more complex object inheritance systems in other languages, while retaining the simplicity of the straightforward class structure that traditional C++ and Java programmers learned, and is taught in programming courses.\n\nClasses are Objects, Too! (5m)\n\nClasses are first-class objects in Python, like functions/methods\n\nClasses, like other objects, can be assigned to variables and passed as arguments\n\n...and this ability is one of the tricks in the reusable code toolbox\n\nConcept: Metaclasses generate classes. (5m)\n\nThe hierarchy starts with \"type\"\n\nClasses are themselves instances of their metaclasses\n\nBy extension, classes provide code that runs when instances are created, while metaclasses provide code that runs when classes are created.\n\nRemember the \"analogies\" section on standardized tests in the United States (and many other countries)?\n\nBabylon 5 : J. Michael Strazynski :: Star Trek : ___\n\nInstances : Classes :: Classes : Metaclasses\n\nThink about a self-enclosed machine that creates, say, t-shirts. The machine is the class; the individual shirts are the instances. The guy who builds the t-shirt machines is the metaclass.\n\nConcrete Code Examples (10m)\n\nwill cover 3.0 and 2.7\n\n(stub: I haven't decided what my example will be yet)\n\nIs metaclassing wise? (2.5m)\n\nThere's nothing inherently wrong or bad about it. Furthermore, sometimes it's by far the best way to solve a problem.\n\nBeware, though: Some people find metaclassing confusing.\n\n\"Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.\" (Brian Kernighan)\n\nOur challenge was to create a login system for little people who might barely read, maybe no email, perhaps no home computer. And we had to watch out for privacy laws - especially tough for minors. But these kids want to play games, write stories, and create online avatars to share and compete against their buddies. Listen to how we developed the PBS KIDS login and moderation system in Django.\n\nProject Hosting at Google Code is a large, well-established system written mostly in Python. We'll share our battle-born convictions about creating tests for test-unfriendly code and the larger topic of testing.\n\nWhenIs your website accessible? Have you tested it? What does it even mean for a website to be accessible? In this talk we'll show some of the most common problems disabled users have and demonstrate how to fix them. I'll also introduce you to some tools that are written in Python to help you determine how accessible your site is.\n\nThere are several different types of Assistive Technology designed to help disabled users access the web. However a lot of websites don't work well with some Assistive Technologies and in this talk we'll show how to uncover the accessibility problems in a website and fix them. I'll provide a demonstration by using some common Assistive Technology on a few different example websites built with Python web frameworks that are problematic and then I'll show the modifications necessary to make each website accessible.\n\nThis talk covers scalability at YouTube. It's given by one of the original engineers at YouTube, Mike Solomon. It's a rare glimpse into the heart of YouTube which is one of the largest websites in the world, and one of the few extremely large websites to be written in Python.\nAbstract\n\nEvery day, people watch an average of 3 billion videos on YouTube. Every minute, people upload an average of 48 hours of video to YouTube. YouTube operates at a scale that few other websites will ever see, and it's written mostly in Python.\n\nMike Solomon is one of the original engineers at YouTube. In this informal, high-level talk, he'll give an overview of the lessons he's learned as he's brought YouTube to scale. He'll also point out ways in which his philosophy on scaling, testing, and writing Python fly in the face of accepted wisdom. Last of all, we'll also be giving a very short introduction to YouTube APIs and how you can integrate your application with YouTube."}
{"text": "Duration: 4 Day(s)\n\nTIME: 9am \u2013 4pm.\n\nCourse Overview\n\nThis Objective-C training class teaches the fundamentals of programming in Objective-C, the language used to develop iPhone and iPad applications. This course covers Xcode, the integrated development environment used to build Objective-C applications. Primitive and reference variables are covered as well as arithmetic operators, conditional processing, looping, and functions. The object-oriented nature of the language is presented as well as the Foundation framework. An introduction to the Cocoa framework and a discussion of a basic user interface for mobile devices are included. We will use Xcode built-in iPhone and iPad simulators for the exercises and demonstrations in the course. In this way, students get a feel for how iPhone and iPad application development works and will be ready to move on to our iOS Application Development with Xcode 4 Training class.\n\nCourse Goals\n\n\u00b7Learn how to use Xcode to develop Objective-C programs.\n\n\u00b7Learn how to define primitive and reference variables.\n\n\u00b7Understand the use of arithmetic operators.\n\n\u00b7Know how to write conditional and looping statements.\n\n\u00b7Learn how to write and call a function.\n\n\u00b7Understand the object-oriented features of Objective-C.\n\n\u00b7Learn how to create objects and methods.\n\n\u00b7Understand important classes in the Foundation framework.\n\n\u00b7Learn how to build a basic user interface using the Cocoa framework\n\nCourse Outline\n\n1.Objective-C Overview\n\nThe Xcode IDE\n\nI.Projects\n\nII.Hello World Application\n\nB.Objective-C\n\n.Brief History\n\nI.Role in Mobile Device Applications\n\n2.Variables\n\n.Numeric Variables\n\n.Numeric Representations\n\nI.Integers\n\nII.Unsigned Integers\n\nIII.Floating Point\n\nIV.Constants\n\nV.Comments\n\nA.Nonnumeric Variables\n\n.char\n\nI.boolean\n\nB.Variable Scope\n\n3.Arithmetic\n\n.Arithmetic Operators\n\n.Addition and Subtraction\n\nI.Multiplication, Division, and Modulus\n\nII.Shorthand Notation\n\nA.Typecasting\n\nB.Math Library Functions\n\n.pow\n\nI.arc4random\n\n4.Conditional Logic and Looping\n\n.Conditional Statements\n\n.Basic if Statement\n\nI.if else Statement\n\nII.if else if Statement\n\nIII.switch Statement\n\nIV.The Ternary Operator\n\nA.Looping Statements\n\n.while Statement\n\nI.dowhile Statement\n\nII.for Statement\n\n5.Functions\n\n.Purpose of a Function\n\nA.Declaration\n\n.Header\n\nI.Body\n\nB.Calling a Function\n\n.Passing Parameters by Value\n\nI.Passing Parameters by Reference\n\nC.Functions vs. Methods\n\n6.Object-oriented Programming According to Objective-C\n\n.Object-Oriented Programming (OOP)\n\nA.How Objective-C Implements OOP\n\nB.Encapsulation of Member Variables\n\n.The class definition: Interface\n\nI.The Class Interface and @property\n\nII.Method vs. Function Syntax\n\nIII.Static Variables and Class Methods\n\nIV.The Class Implementation and @synthesize\\\n\nC.Creating an Object from a Class\n\n.Sending Messages to Objects\n\nI.The Role of Methods\n\nD.Visibility of Variables\n\nE.The Constants nil and NULL\n\nF.Reference Variables\n\nG.The * and & Operators\n\n7.Inheritance\n\n.Purpose of Inheritance\n\nA.Implementing Inheritance\n\n.The Root Class\n\nI.Creating and Processing the Subclass\n\nB.NSObject Class\n\nC.Memory Acquisition\n\n.alloc\n\nI.init\n\nD.Method Override\n\nE.Where's Abstraction?\n\n8.Polymorphism\n\n.The Purpose of Polymorphism\n\nA.Polymorphism in Objective-C\n\nB.Placing Objects in Collections\n\n.Using NSMutableArray\n\nC.Runtime Identification of Objects\n\n9.Arrays\n\n.The \"Classic\" C Array\n\n.Defining the Array\n\nI.Processing the Array\n\nA.Foundation Framework Arrays\n\n.NSArray\n\nI.NSMutableArray\n\n10.Foundation Framework\n\n.The Foundation Framework\n\n.Strings\n\nI.Date/Time\n\nII.Numbers\n\nIII.Collections\n\nA.NSString\n\n.Replacing char*\n\nI.Initialization\n\nII.NSString Methods\n\nB.NSNumber and NSNumberFormatter\n\n.Replacing int, float, and more\n\nI.Initialization\n\nII.NSUInteger and NSInteger\n\nIII.Formatting\n\nC.NSDate and NSDateFormatter\n\n.NSDate\n\nI.NSDateFormatter\n\n11.Collections\n\n.Arrays\n\n.NSArray\n\nI.NSMutableArray\n\nA.Sets\n\n.NSSet\n\nI.NSMutableSet\n\nII.How Duplicate Elements Are Detected: isEqual and hash\n\nB.Dictionaries\n\n.NSDictionary\n\nI.NSMutableDictionary\n\n12.Memory Considerations\n\n.Memory Management in Objective-C\n\n.Manual Retain-Release\n\nI.Automatic Reference Counting\n\nII.Garbage Collection\n\nA.Strong and Weak\n\nB.Release and Retain\n\nC.Atomic and Nonatomic\n\nD.Automatic Reference Counting\n\n13.Cocoa Framework\n\n.The Purpose of Cocoa\n\nA.User Interfaces\n\n.What Is a User Interface?\n\nI.View Controllers\n\nB.Using Interface Builder to Create User Interfaces\n\n.The XIB File\n\nI.IBAction and IBOutlet\n\nII.Drag and Drop with the Connections Inspector\n\nC.Creating a Simple Mobile Application\n\n.Creating the Project\n\nI.Adding Properties and Synthesized Methods\n\nII.Building the User Interface\n\nIII.Testing the Application\n\nClass Prerequisites\n\nExperience in the following areas is required:\n\nBasic computer experience.\n\nExperience in the following areas would be beneficial:\n\n\u00b7Some programming experience in any language.\n\n\u00b7End-user experience with an iPod, iPhone, or iPad courses effort"}
{"text": "AI Application Programming - Book Review\n\nI'm spending a lot of my time lately reading about AI, both game related, business application related and academia related. Having recently completed \"AI Application Programming\" by M. Tim Jones (Charles River Media, 2003, First Edition), I have decided to review it in the context of my current situation.\n\nI am new to the field of AI, and my previous reading has been limited to sporadic Wikipedia research on concepts as I come across them. This book covers a lot of material that I haven't read about before, but it also covers some material I have. This allows me to evaluate the book as both someone with prior knowledge, and someone with no knowledge.\n\nFirstly, the book was a fairly broad overview on integrating aspects of artificial intelligence into application development. Therefore it was no surprise that a majority of the AI concepts discussed were optimization oriented. The book provided an overview of the history of AI, then it covered simulated annealing, adaptive resonance theory, ant algorithms/ant colony optimization, neural networks, genetic algorithms, a chapter on using some of the techniques described to run artificial life simulations, rules based systems, fuzzy logic, bigrams/Markov chains, agent based software and a wrap up the future of AI.\n\nEach chapter is fairly formulaic. It starts with an overview of the theory of the subject for that chapter, and the presentation of any relevant formula. Then a basic example is covered, without code, in order to show how the theory being covered can be applied. Then a specific example with C source is covered, with a detailed explanation of what's going on. I largely glossed over the source, as I don't really have much familiarity with C, so cannot comment on the quality of the source.\n\nOverall I have mixed feelings about the book. A lot of the topics have domain specific language, such as referring to parts of algorithms as genes and candidate algorithms as chromosomes in genetic algorithms, and I feel the author sticks to these to the detriment of comprehension of the topic. For example, the author was discussing \"energy\" and \"temperature\" with relation to simulated annealing, without outlining that it's goal was to narrow the search space for a solution to a given problem.\n\nAnother detracting factor was the numerous errors in diagrams, equations and the text. These errors can be attributed to a variety of sources, from poor copying jobs on some of the diagrams to bad editing. One particularly annoying error was the diagram showing how a NOT logic gate could be constructed using a single neuron neural network \u2013 the diagram showed an input bias of 1, with a weight of 1 on the input, claiming that the output will always be the inverse of the input, by the equation output = input * input weight + bias.\nAn input of 0 into this equation will indeed output a 1, however an input 1 will yield 2, which is incorrect. The correct diagram should have a input weight of -1, which will yield a correct answer with both the 0 and 1 inputs. These errors hindered the understanding of the topic.\n\nHowever, it's not all bad news. From my personal reading, I had always struggled with how the back propagation algorithm in neural networks worked, and this book managed to successfully explain it. A lot of the other topics, such as fuzzy logic and the rules based system were also well presented and relatively straight forward.\n\nFrom reading this book, I feel I have a solid enough understanding of the basics of the topics covered that I could successfully go out and perform my own, more in depth research and succeed fairly well, as well as integrate a few of the more rudimentary features of these approaches into an application."}
{"text": "Introduction\n\nHackWars encourages players to program to increase their skills and standing within the game. Although you don't need to program to play HackWars (because you can buy applications from Stores), you can fine-tune exactly what your computer does in any situation by creating your own scripts in Hackscript, the HackWars scripting language. Scripts are also the main source of trade revenue as players will pay greatly for scripts with overwhelming power. When you compile scripts, they're called applications or programs.\n\nHere you will find everything you need to know to get started programming in Hackscript.\n\nScript Editor\n\nTo create a new program in Hack Wars, the first step is to find the Script Editor under Applications. The Script Editor allows you to choose which type of script you'd like to create (Banking, Attack, etc.). Each type of script has various components, e.g., a Banking script has Deposit, Withdrawal, and Transfer components. These correspond with actual events that happen while playing the game. For instance, any code you write into the Deposit component will be run when a player attempts to perform a Deposit transaction with their Bank.\n\nHack Wars programming is event-driven. There are limitations as to what functions can be run at any given time, depending on the type of program you are making and the 'event': functions called in the 'Finalize' portion of an Attack script must be functions that can be called when finalizing an attack.\n\nTypes of Scripts\n\nBanking Scripts\n\nA banking script has three 'events':\n\nDeposit: called when a player attempts to make a deposit to his or her bank.\n\nWithdrawal: called when a player attempts to withdraw from his or her bank. Restriction: If you are writing a malicious withdraw script, you can only steal as much money as the player has requested to withdraw. This ensures that your bank is secure despite malicious scripts.\n\nTransfer: called when a player attempts to make a transfer to another player.\n\nAttack\n\nAn attack script has three 'events':\n\nInitialize: called before the attack actually begins. This allows you to preemptively cancel an attack based on certain parameters. This is also where malicious zombie codes are placed.\n\nContinue: called each time the attack is about to deal damage. Restriction: you can also place berserk in continue to deal extra damage. This can be called only once per continue.\n\nFinalize: called when an attack has been completed, and the opponent's port is in a weakened state. To perform a malicious operation, one of the 'finalize' methods listed in the Attack API can be called here. Restriction: Only one finalize method may be called in an attack.\n\nRedirect\n\nAlthough redirect scripts are similar to attack scripts they do not share the functions of the attack API. Thats why Continue and Finalize are often left unchanged.\n\nA redirect script has three 'events':\n\nInitialize: called before the attack actually begins. Here you set what to redirect.\n\nContinue: called each time the attack is about to deal damage. Usually unchanged.\n\nFinalize: called when an attack has been completed, and the opponent's port is in a weakened state. Usually unchanged.\n\nFTP Scripts\n\nPut: called when a player attempts to place a file from their home directory into either the Store or Public FTP directory.\n\nGet: called when a player attempts to retrieve a file from their Store or Public FTP directory and replace it on their home computer.\n\nWatch\n\nFire: called when one of the various events that can cause a Watch to fire has taken place, such as an attack, scan, or change in amount of Petty Cash.\n\nHTTP Scripts\n\nEnter: Called when a player first visits your website.\n\nSubmit: Called when a player submits a form on your website.\n\nExit: Called when a player leaves your website.\n\nA full list of functions that can be called is given in the Hackscript API section, listed by type of script.\n\nCompiling and Decompiling Programs\n\nCompiling scripts\n\nCompiling a script requires that a player has attained the level required to call the functions, as listed in the API, and also that the player pays the appropriate amount of money, determined by the functions called within the program and the number of occurrences.\n\nA program is compiled by clicking the appropriate button in the Script Editor. Prior to compiling, it is advisable to Test Compile: this gives the player the compiling cost and tests the code's validity. If the test compile finds invalid code, the event containing the faulty code is identified. The player's name is attached to the program upon compiling.\n\nCompiled programs can be installed on a player's ports in Port Management (see below, section on Installing Programs), sold in stores to other players or installed on an opponent's port after a successful attack.\n\nWhile compiling code is restricted based on level, a player of a lower level may still install a program he or she has bought or traded.\n\nDe-compiling programs\n\nA player is allowed to de-compile his own programs by selecting the binary in the File Browser (System\u2014Home) and clicking the De-compile button at the top of the window. This will return 90% of the compile cost to the player; also, 90% of the experienced gained from compiling the program will be deducted. An uncompiled version of the script will appear on the player's hard drive, which can now be edited. This can be useful to merchants who may have a large quantity of files to which they wish to make a change.\nNote that once a program has been installed, it cannot be removed, and therefore not de-compiled.\nOnly the player who compiled the binary can decompile it again.\n\nPlease note that the money returned is 90% of the compile cost, and NOT the price set by the user.\n\nSyntax\n\nProgramming in Hack Wars is close to a programming language called C. This is a very pervasive standard in computing. For those not familiar with this programming language, this section of the wiki will give a good overview. Even for experienced programmers, it is good to read through this section to see some of the limitations presented by the HackWars programming language.\n\nHello World\n\nCreate a new HTTP script and put in the following in Enter. Leave Submit and Leave unchanged.\n\nint main(){message(getVisitorIP(),\"Hello World\");}\n\nCompile and install that script as your default HTTP script. Now visit your own website via the website browser. Everytime you or anybody else visits your website \"Hello World\" will apear in the visitor's game messages.\nThis code works in all script types and all sections of a script but it will show the Hello World message for other events then.\n\nint main(){ is required in every script and marks the point the script will start to run.\n\ngetVisitorIP() this will give your own ip, which is used by message() in this example\n\n} in this example it marks the end of the main function\n\nData Types and Variables\n\nThese two topics are closely related: when you program, you have \"variables\" which store your information of a certain \"data type\". For example, if I wanted to store my age, I know that my age is always an integer value. I could create a variable called \"age\" of type \"int\":\n\nint age =28;\n\nThe other thing you'll notice here is that I assigned my age a value, in this case 28, using the '=' logical operator. After I've created a variable, I can then change its value:\n\nint age =28;\nage =234;\n\nThe last thing to note here is the semicolon (;) at the end of the statement. Almost all statements require semicolons at the end of them (with the exception of if statements and loops, which use curly braces {}).\n\nYou can use the following data types when declaring variables in Hackscript:\n\nint\n\nfloat\n\nstring\n\nboolean\n\nint is for integers (must not have a decimal place).\nfloat is for floating point numbers (can have decimal places).\nstring is for text, and assigned using quotations marks (see example below).\nboolean stores either true or false.\n\nFirst we declare our numerical variables (the int and the float). Then we create a string, and a boolean that is true. The we send a message only if the conditional statement is true: if myBool is true and either b > 5 OR a < 10. Since myBool is true and b >5, the message would be sent.\n\nNote that when we created the boolean myBool, we assigned it the value true. Then in the if statement, we didn't need to explicitly say if (myBool == true && ...). That's because when checking boolean values in if statements, unless we explicitly check myBool== false then it's assumed that we mean myBool==true\n\nIf you placed this script, for instance, in the deposit entry point of a banking application, it would always send you the message \"You are being sent a message.\" when you attempt to deposit \u2014 the deposit would not happen, mind you, since it contains no code to perform this operation.\n\nAssigning Values\n\nAbove, we assigned a variable a value using the '=' logical operator. You can also assign values using '++','--','*=', etc. So, for instance, if you had a counter in a loop you could increment it using the following code:\n\nint i=0;while(i<10){\ni=i+1;}\n\nor\n\nint i=0;while(i<10){\ni++;}\n\nLogical Operators\n\nLogical operators compare two different true or false values, and return a new true or false value.\n\nOperator\n\nName\n\nUsage\n\n==\n\nEqual\n\nA == B is true when A and B are equal.\n\n!=\n\nNot Equal\n\nA != B is true when A and B are not equal.\n\n<\n\nLess Than\n\nA < B is true when A is less than B.\n\n<=\n\nLess Than Or Equals\n\nA <= B is true when A is less than or equal to B.\n\n>\n\nGreater Than\n\nA > B is true when A is greater than B.\n\n>=\n\nGreater Than Or Equals\n\nA >= B is true when A is greater than or equal to B.\n\n&&\n\nAnd\n\nA && B is true when both A and B are true.\n\n||\n\nOr\n\nA || B is true when either A or B is true.\n\nModulus\n\nMany people get confused when the word modulus is mentioned. So what is it and how does it work? Well, it is like your old school long division except it returns the remainder of the division instead of the actual answer (how many times x goes into y, etc).\n\nHere is an example in HackScript:\n\nint myVariable =10%3;\n\nThat above line doesn't look like much, except for the fact that 'myVariable' is actually set to 1. It does this by testing 10, to see how many times 3 fits into 10 (i.e. three 3s are equal to 9), then subtracts the total value of those 3s from 10. So, 10 - 9 = 1 and thats your modulus result. It will always return a whole (integer) number with no decimal places after it.\n\nJust to make sure you understand, here is another example:\n\nint myVariable =22%5;\n\nThe above line will set myVariable to 2. This could also be done in your head by subtracting 5 from 22 each time until the remaining number is less than 5. So, subtract 5 from 22 leaves 17, subtract 5 from 17 leaves 12, subtract another 5 leaves 7, and subtracting another 5 will leave you with 2. Since subtracting 5 from 2 will produce a negative number, you cannot go any further and must stop at 2 which leaves you with your modulus answer. That is basically how modulus( % in hackscript) works.\n\nProgram Flow\n\nThere are two main ways to direct the logical flow of a program you are creating: conditional statements (aka \"if\" statements) and loops.\n\nIf Statements\n\nUsing an if statement allows you to execute code if a statement evaluates to true, using else allows you to specify code that runs otherwise:\n\nif(5>6){message(getSourceIP(),\"This should never happen!\");}else{message(getSourceIP(),\"This should always happen.\");}\n\nYou can also use 'else if' to extend your normal if statements so that they can have more than 2 outcomes:\n\nif(5>6){message(getSourceIP(),\"This should never happen!\");}elseif(getSourceIP()==\"123.456.7.890\"){message(getSourceIP(),\"This should only happen if getSourceIP() returns 123.456.7.890\");}else{message(getsourceIP(),\"This should happen if getSourceIP() is not equal to 123.456.7.890 and 5 is not greater 6\");}\n\nWhile Loops\n\nUsing a while statement allows you to specify a block of code (everything between the curly braces) that will always execute until a condition evaluates to false:\n\nFor Loops\n\nFirst we declared an integer variable i. Then in the for loop, we said \"i starts at 0 (i = 0), and as long as i is less than 3 (i < 3), run this code, and after each time the code is run, increment i (i++).\"\n\nThe Break Statement\n\nIf a break is executed in a loop, the loop will end. This can be used to stop loops when some condition is met, for instance:\n\nint i =0;while(true){if(i==7){break;}\ni++;}\n\nThe while loop will end when i equals 7.\n\nint i;for(i =0; i <10; i++){if(i ==4){break;}}\n\nThe for loop will end when i equals 4.\n\nFunctions\n\nFor creating complex programs, such as complicated HTTP programs, one can use functions. Functions are used to store code at one place to call it from other places in your script.\nFunction can be used to organise long code into short and easy to understand sections.\n\nA function consists of the header and a body.\n\nfloat areaOfSquare(float a)// function header{return a*a;// return the result as the return value of area()}\n\nThis function when called will give the size of the area of a Square with the length a.\nThe function header has the following syntax:\n\nreturntype functionname(vartype varname, vartype varname, ...)\n\nreturntype: the type the return value will be. Possible types are all variables types (int, float, string, boolean) and void. void means that the function will not return any value.\n\nfunctionname: name of the function\n\nvartype: the type of the parameter\n\nvarname: name of the parameter\n\nParameters are seperated with a comma.\n\nThe keyword return will jump back to the place from where the function was called, provide the return value and continue with the script.\n\nint countOccurence(string longString,string shortString){int count =0;//counts how often shortString is in longStringint lastFound =0;//remembers the position of the last find of shortString in longStringwhile(true)//endless loop{\nlastFound =indexOf( longString,shortString,lastFound );if(lastFound ==-1)return count;// done. stop function (and escape the \"endless loop\" ) and return count\ncount++;//if lastFound is not -1 then we found another one so the count is increased by one\nlastFound++;//lastFound is increased to avoid finding the same occurence again - which would result in a real endless loop}}\n\nYou can then use these functions in other parts of your code, when you need to do whatever each function does. You use functions all the time when you're programming. There are some really common functions that all Hackscript programmers need, so we have provided them by default and are defined in the different Hackscript APIs (application programmer's interface).\n\nGlobal Variables\n\nIn all your scripts you can set and maintain global variables, using the functions: setGlobal(int index,variable data), and getGlobal(int index). Where data can be a string, int, float, or boolean. There are twenty globals available to you (0-19).\n\nHere's an example of a poll created with Globals for your Hack Wars website:\n\nFirst I made a watch script for reseting the variables, I just installed it as a petty-cash watch and fire it when I want to reset the poll:\n\nAnd, finally, we have the actual HTML I throw up on my page on Hack Wars. These together give my site a working poll:\n\n<form><p> Who is the sexiest developer of Hack Wars? </p><inputtype=\"radio\"name=\"a\"value=\"0\"/>Johnny Heart<br/><inputtype=\"radio\"name=\"a\"value=\"1\"/>Sixteen Faces<br/><inputtype=\"radio\"name=\"a\"value=\"2\"/>Mecha Cephalon<br/><inputtype=\"radio\"name=\"a\"value=\"3\"/>Geckotoss<br/><inputtype=\"submit\"value=\"Vote\"/></form>\n\nArrays\n\nAn array is variable that is capable of storing several values seperately, while using the same variable name. Arrays can also be thought of as tables where each record or position in the array holds data or some form of information.\n\nDeclaring an array variable is done almost the same way as normal hackscript variables, except that you must have [] after the variable name. Here is an example of declaring a string array:\n\nstring myvariable[];\n\nTo read/write to that array you need to tell it what position/record to use. This is done by using [arrayposition] after the variable name of a array. Here is an example of declaring, writing/reading with an array then messeging you the results:\n\nYou may notice the array above only stored strings. Arrays can only store one type of data. You cannot store a mixture of different data types in one array. If you need an array for numbers you can declare an array with int instead of string. Same goes for any other datatype.\n\nSyntax Errors\n\nSyntax errors occur when the compiler doesn't understand your script. It means that you made a mistake when you were coding, and did something that Hackscript doesn't understand. There are common problems that cause syntax errors:\n\nyou forgot to add a ; when declaring variables\n\nyou forgot to add a ; when calling a function\n\nyou forgot to add a ; when doing things other than logic, starting a code block ({ ... }), or commenting.\n\nyou have missed a bracket somewhere (either a (, ), { or })\n\nyou have incorrectly declared a variable (for example,\n\nfloat hi =\"Hello\";\n\nwill not work - you declared a float and then assigned a string to it)\n\nyou forgot to put a string in quotes (string x = \"hello\";)\n\nyou forgot to put a decimal value when declaring a float, even if it's a 0 (float x = 10.0;)\n\nyou forgot to declare a variable type before you use it (ie/ you haven't declared i but say i=0;)"}
{"text": "Object-Oriented PHP for Beginners\n\nTutorial Details\n\nTwice a month, we revisit some of our readers' favorite posts from through out the history of Nettuts+. This tutorial was first published in July, 2010.\n\nFor many PHP programmers, object-oriented programming is a frightening concept, full of complicated syntax and other roadblocks. As detailed in my book, Pro PHP and jQuery, you'll learn the concepts behind object-oriented programming (OOP), a style of coding in which related actions are grouped into classes to aid in creating more-compact, effective code.\n\nUnderstanding Object-Oriented Programming\n\nObject-oriented programming is a style of coding that allows developers to group similar tasks into classes. This helps keep code following the tenet \"don't repeat yourself\" (DRY) and easy-to-maintain.\n\n\"Object-oriented programming is a style of coding that allows developers to group similar tasks into classes.\"\n\nOne of the major benefits of DRY programming is that, if a piece of information changes in your program, usually only one change is required to update the code. One of the biggest nightmares for developers is maintaining code where data is declared over and over again, meaning any changes to the program become an infinitely more frustrating game of Where's Waldo? as they hunt for duplicated data and functionality.\n\nOOP is intimidating to a lot of developers because it introduces new syntax and, at a glance, appears to be far more complex than simple procedural, or inline, code. However, upon closer inspection, OOP is actually a very straightforward and ultimately simpler approach to programming.\n\nUnderstanding Objects and Classes\n\nBefore you can get too deep into the finer points of OOP, a basic understanding of the differences between objects and classes is necessary. This section will go over the building blocks of classes, their different capabilities, and some of their uses.\n\nRecognizing the Differences Between Objects and Classes\n\n\"Developers start talking about objects and classes, and they appear to be interchangeable terms. This is not the case, however.\"\n\nRight off the bat, there's confusion in OOP: seasoned developers start talking about objects and classes, and they appear to be interchangeable terms. This is not the case, however, though the difference can be tough to wrap your head around at first.\n\nA class, for example, is like a blueprint for a house. It defines the shape of the house on paper, with relationships between the different parts of the house clearly defined and planned out, even though the house doesn't exist.\n\nAn object, then, is like the actual house built according to that blueprint. The data stored in the object is like the wood, wires, and concrete that compose the house: without being assembled according to the blueprint, it's just a pile of stuff. However, when it all comes together, it becomes an organized, useful house.\n\nClasses form the structure of data and actions and use that information to build objects. More than one object can be built from the same class at the same time, each one independent of the others. Continuing with our construction analogy, it's similar to the way an entire subdivision can be built from the same blueprint: 150 different houses that all look the same but have different families and decorations inside.\n\nStructuring Classes\n\nThe syntax to create a class is pretty straightforward: declare a class using the class keyword, followed by the name of the class and a set of curly braces ({}):\n\n<?php\nclass MyClass\n{\n// Class properties and methods go here\n}\n?>\n\nAfter creating the class, a new class can be instantiated and stored in a variable using the new keyword:\n\n$obj = new MyClass;\n\nTo see the contents of the class, use var_dump():\n\nvar_dump($obj);\n\nTry out this process by putting all the preceding code in a new file called test.php in [your local] testing folder:\n\nLoad the page in your browser at  and the following should display:\n\nobject(MyClass)#1 (0) { }\n\nIn its simplest form, you've just completed your first OOP script.\n\nDefining Class Properties\n\nTo add data to a class, properties, or class-specific variables, are used. These work exactly like regular variables, except they're bound to the object and therefore can only be accessed using the object.\n\nThe keyword public determines the visibility of the property, which you'll learn about a little later in this chapter. Next, the property is named using standard variable syntax, and a value is assigned (though class properties do not need an initial value).\n\nTo read this property and output it to the browser, reference the object from which to read and the property to be read:\n\necho $obj->prop1;\n\nBecause multiple instances of a class can exist, if the individual object is not referenced, the script would be unable to determine which object to read from. The use of the arrow (->) is an OOP construct that accesses the contained properties and methods of a given object.\n\nModify the script in test.php to read out the property rather than dumping the whole class by modifying the code as shown:\n\nNote \u2014 OOP allows objects to reference themselves using $this. When working within a method, use $this in the same way you would use the object name outside the class.\n\nTo use these methods, call them just like regular functions, but first, reference the object they belong to. Read the property from MyClass, change its value, and read it out again by making the modifications below:\n\n<?php\nclass MyClass\n{\npublic $prop1 = \"I'm a class property!\";\npublic function setProperty($newval)\n{\n$this->prop1 = $newval;\n}\npublic function getProperty()\n{\nreturn $this->prop1 . \"<br />\";\n}\n}\n$obj = new MyClass;\necho $obj->getProperty(); // Get the property value\n$obj->setProperty(\"I'm a new property value!\"); // Set a new one\necho $obj->getProperty(); // Read it out again to show the change\n?>\n\nReload your browser, and you'll see the following:\n\nI'm a class property!\nI'm a new property value!\n\n\"The power of OOP becomes apparent when using multiple instances of the same class.\"\n\nI'm a class property!\nI'm a class property!\nI'm a new property value!\nI belong to the second instance!\n\nAs you can see, OOP keeps objects as separate entities, which makes for easy separation of different pieces of code into small, related bundles.\n\nMagic Methods in OOP\n\nTo make the use of objects easier, PHP also provides a number of magic methods, or special methods that are called when certain common actions occur within objects. This allows developers to perform a number of useful tasks with relative ease.\n\nUsing Constructors and Destructors\n\nWhen an object is instantiated, it's often desirable to set a few things right off the bat. To handle this, PHP provides the magic method __construct(), which is called automatically whenever a new object is created.\n\nFor the purpose of illustrating the concept of constructors, add a constructor to MyClass that will output a message whenever a new instance of the class is created:\n\nNote \u2014 __CLASS__ returns the name of the class in which it is called; this is what is known as a magic constant. There are several available magic constants, which you can read more about in the PHP manual.\n\nReloading the file in your browser will produce the following result:\n\nThe class \"MyClass\" was initiated!\nI'm a class property!\nEnd of file.\n\nTo call a function when the object is destroyed, the __destruct() magic method is available. This is useful for class cleanup (closing a database connection, for instance).\n\nOutput a message when the object is destroyed by defining the magic method __destruct() in MyClass:\n\nIn this case, attempting to convert the object to a string results in a call to the getProperty() method. Load the test script in your browser to see the result:\n\nThe class \"MyClass\" was initiated!\nUsing the toString method: I'm a class property!\nThe class \"MyClass\" was destroyed.\nEnd of file.\n\nTip \u2014 In addition to the magic methods discussed in this section, several others are available. For a complete list of magic methods, see the PHP manual page.\n\nUsing Class Inheritance\n\nClasses can inherit the methods and properties of another class using the extends keyword. For instance, to create a second class that extends MyClass and adds a method, you would add the following to your test file:\n\nThis outputs the result of both the parent constructor and the new class's constructor:\n\nThe class \"MyClass\" was initiated!\nA new constructor in MyOtherClass.\nFrom a new method in MyOtherClass.\nI'm a class property!\nThe class \"MyClass\" was destroyed.\n\nAssigning the Visibility of Properties and Methods\n\nFor added control over objects, methods and properties are assigned visibility. This controls how and from where properties and methods can be accessed. There are three visibility keywords: public, protected, and private. In addition to its visibility, a method or property can be declared as static, which allows them to be accessed without an instantiation of the class.\n\n\"For added control over objects, methods and properties are assigned visibility.\"\n\nThe class \"MyClass\" was initiated!\nA new constructor in MyOtherClass.\nFatal error: Call to protected method MyClass::getProperty() from context '' in /Applications/XAMPP/xamppfiles/htdocs/testing/test.php on line 55\n\nNow, create a new method in MyOtherClass to call the getProperty() method:\n\nThe class \"MyClass\" was initiated!\nA new constructor in MyOtherClass.\nI'm a class property!\nThe class \"MyClass\" was destroyed.\n\nPrivate Properties and Methods\n\nA property or method declared private is accessible only from within the class that defines it. This means that even if a new class extends the class that defines a private property, that property or method will not be available at all within the child class.\n\nTo demonstrate this, declare getProperty() as private in MyClass, and attempt to call callProtected() from MyOtherClass:\n\nThe class \"MyClass\" was initiated!\nA new constructor in MyOtherClass.\nFatal error: Call to private method MyClass::getProperty() from context 'MyOtherClass' in /Applications/XAMPP/xamppfiles/htdocs/testing/test.php on line 49\n\nStatic Properties and Methods\n\nA method or property declared static can be accessed without first instantiating the class; you simply supply the class name, scope resolution operator, and the property or method name.\n\n\"One of the major benefits to using static properties is that they keep their stored values for the duration of the script.\"\n\nTo demonstrate this, add a static property called $count and a static method called plusOne() to MyClass. Then set up a do...while loop to output the incremented value of $count as long as the value is less than 10:\n\nCommenting with DocBlocks\n\nWhile not an official part of OOP, the DocBlock commenting style is a widely accepted method of documenting classes. Aside from providing a standard for developers to use when writing code, it has also been adopted by many of the most popular software development kits (SDKs), such as Eclipse and NetBeans, and will be used to generate code hints.\n\nA DocBlock is defined by using a block comment that starts with an additional asterisk:\n\n/**\n* This is a very basic DocBlock\n*/\n\nThe real power of DocBlocks comes with the ability to use tags, which start with an at symbol (@) immediately followed by the tag name and the value of the tag. DocBlock tags allow developers to define authors of a file, the license for a class, the property or method information, and other useful information.\n\nThe most common tags used follow:\n\n@author: The author of the current element (which might be a class, file, method, or any bit of code) are listed using this tag. Multiple author tags can be used in the same DocBlock if more than one author is credited. The format for the author name is John Doe <john.doe@email.com>.\n\n@copyright: This signifies the copyright year and name of the copyright holder for the current element. The format is 2010 Copyright Holder.\n\n@license: This links to the license for the current element. The format for the license information is  License Name.\n\n@var: This holds the type and description of a variable or class property. The format is type element description.\n\n@param: This tag shows the type and description of a function or method parameter. The format is type $element_name element description.\n\n@return: The type and description of the return value of a function or method are provided in this tag. The format is type return element description.\n\nA sample class commented with DocBlocks might look like this:\n\n<?php\n/**\n* A simple class\n*\n* This is the long description for this class,\n* which can span as many lines as needed. It is\n* not required, whereas the short description is\n* necessary.\n*\n* It can also span multiple paragraphs if the\n* description merits that much verbiage.\n*\n* @author Jason Lengstorf <jason.lengstorf@ennuidesign.com>\n* @copyright 2010 Ennui Design\n* @license  PHP License 3.01\n*/\nclass SimpleClass\n{\n/**\n* A public variable\n*\n* @var string stores data for the class\n*/\npublic $foo;\n/**\n* Sets $foo to a new value upon class instantiation\n*\n* @param string $val a value required for the class\n* @return void\n*/\npublic function __construct($val)\n{\n$this->foo = $val;\n}\n/**\n* Multiplies two integers\n*\n* Accepts a pair of integers and returns the\n* product of the two.\n*\n* @param int $bat a number to be multiplied\n* @param int $baz a number to be multiplied\n* @return int the product of the two parameters\n*/\npublic function bar($bat, $baz)\n{\nreturn $bat * $baz;\n}\n}\n?>\n\nOnce you scan the preceding class, the benefits of DocBlock are apparent: everything is clearly defined so that the next developer can pick up the code and never have to wonder what a snippet of code does or what it should contain.\n\nComparing Object-Oriented and Procedural Code\n\nThere's not really a right and wrong way to write code. That being said, this section outlines a strong argument for adopting an object-oriented approach in software development, especially in large applications.\n\nReason 1: Ease of Implementation\n\n\"While it may be daunting at first, OOP actually provides an easier approach to dealing with data.\"\n\nWhile it may be daunting at first, OOP actually provides an easier approach to dealing with data. Because an object can store data internally, variables don't need to be passed from function to function to work properly.\n\nAlso, because multiple instances of the same class can exist simultaneously, dealing with large data sets is infinitely easier. For instance, imagine you have two people's information being processed in a file. They need names, occupations, and ages.\n\nWhile this code isn't necessarily bad, there's a lot to keep in mind while coding. The array of the affected person's attributes must be passed and returned from each function call, which leaves margin for error.\n\nTo clean up this example, it would be desirable to leave as few things up to the developer as possible. Only absolutely essential information for the current operation should need to be passed to the functions.\n\nThere's a little bit more setup involved to make the approach object oriented, but after the class is defined, creating and modifying people is a breeze; a person's information does not need to be passed or returned from methods, and only absolutely essential information is passed to each method.\n\nOn the small scale, this difference may not seem like much, but as your applications grow in size, OOP will significantly reduce your workload if implemented properly.\n\nTip \u2014 Not everything needs to be object oriented. A quick function that handles something small in one place inside the application does not necessarily need to be wrapped in a class. Use your best judgment when deciding between object-oriented and procedural approaches.\n\nReason 2: Better Organization\n\nAnother benefit of OOP is how well it lends itself to being easily packaged and cataloged. Each class can generally be kept in its own separate file, and if a uniform naming convention is used, accessing the classes is extremely simple.\n\nAssume you've got an application with 150 classes that are called dynamically through a controller file at the root of your application filesystem. All 150 classes follow the naming convention class.classname.inc.php and reside in the inc folder of your application.\n\nThe controller can implement PHP's __autoload() function to dynamically pull in only the classes it needs as they are called, rather than including all 150 in the controller file just in case or coming up with some clever way of including the files in your own code:\n\nHaving each class in a separate file also makes code more portable and easier to reuse in new applications without a bunch of copying and pasting.\n\nReason 3: Easier Maintenance\n\nDue to the more compact nature of OOP when done correctly, changes in the code are usually much easier to spot and make than in a long spaghetti code procedural implementation.\n\nIf a particular array of information gains a new attribute, a procedural piece of software may require (in a worst-case scenario) that the new attribute be added to each function that uses the array.\n\nAn OOP application could potentially be updated as easily adding the new property and then adding the methods that deal with said property.\n\nA lot of the benefits covered in this section are the product of OOP in combination with DRY programming practices. It is definitely possible to create easy-to-maintain procedural code that doesn't cause nightmares, and it is equally possible to create awful object-oriented code. [Pro PHP and jQuery] will attempt to demonstrate a combination of good coding habits in conjunction with OOP to generate clean code that's easy to read and maintain.\n\nSummary\n\nAt this point, you should feel comfortable with the object-oriented programming style. Learning OOP is a great way to take your programming to that next level. When implemented properly, OOP will help you produce easy-to-read, easy-to-maintain, portable code that will save you (and the developers who work with you) hours of extra work. Are you stuck on something that wasn't covered in this article? Are you already using OOP and have some tips for beginners? Share them in the comments!\n\nReally easy to follow and nicely laid out article! Has given me the confidence to convert my existing procedural code to OOP :D\n\nrajib\n\nit is really awesome\u2026.thanks for giving such tutorial for new bees\u2026\u2026\u2026\u2026\n\nRam\n\nya its full description ! good work ! i learnt from it but the language is some what hard to understand ! Language needs to be used simple words rather than hard words\u2026 anyway thanks you have provided me full meals of OOP in PHP thanks a lot\u2026.\n\nAnurag\n\nyour tutorials are really awesome.At first i was so confused with manual given at php.net to learn PHP classes and objects but ,you made job easy.\n\nMarc Racho\n\nThis is awesome! Thank you!\n\n Adnan\n\nawesome article. a good point to start oop based programming for both experienced and non-experienced programmers. thank you mate\n\n phphunger\n\nsimply superb\u2026amazing and exceptional writing skills..even beginners can understand in a easy manner\u2026\n\n shaz3e\n\nthe easiest way to understand PHP Class all the major parts of PHP Class covered in this tutorial.\n\n Danny3\n\nThis is great. Thank you!\n\nbrunek990\n\nGreat!!!! :)\n\nashique mahamud\n\nvery nice tutorial. thank you very much.\n\nJohnny\n\nThanks! Been reading PHP books and browsed sloppy tutorials on the subject before. I never really GOT IT until now! Clear and logical writing, Ill be sure to check out your book as well. I connect with the way you express and explain things.\n\nThis is a really good article explaining about OOP PHP, and I'm fully understand about it.\n\nThanks a lot Jason!\n\nMohan\n\nVery Good Article!!!\n\nVadim\n\nFor beginning You must start use OOP PHP, the other good things comes with experience.\n\npallavi\n\nthx\u2026\n\nSasank\n\nReally liked it.\n\n Denise Bunn\n\nThank you for this excellent article. It was clearly presented and shows how OOP compares to procedural.\n\nMohamed Rafiq\n\nAwesome Tutorial\u2026 Very easy to understand\u2026 Thanks\n\nkishore\n\nnice\u2026\u2026\u2026\u2026.\n\nDileep Kumar\n\nvery nice tutorial\n\nsasi\n\nshort and sweet:) nice\u2026\u2026\u2026\u2026\n\n JD\n\nI know that you have already been thanked many times, but I just have to say that this was a really great article and explained this very well. I never understood this before, and it seemed too daunting a task to try to learn it. But it took less than half an hour to read this article, and I feel like I already have a good understanding of OOP, and I look forward to using OOP in my code!!\n\nThank you again so much!!\n\nSO\n\nVery nice! Thank you sir!\n\nAdi\n\nThanx for this nice effort. Well, i saw some different scripts, which is good.\n\nkailash\n\nVery helpful, Thanks :-)\n\nsumit\n\nReally nice..\n\nSara\n\nI've fallen in love with OOP programming since I first started my first java course in college, I love the logic and ease of OOP. Thank you for this article, I see that there's not much difference between the syntax of OOP in the different OO languages and this is a good thing. Thanks again :)\n\n Vishal Jaiswal\n\nhi sara u r right\n\nSagara\n\nGreat article \u2026\u2026\u2026\u2026\u2026.. got everything required.\n\nThanks.\n\nDileep Kumar\n\nreally interesting to learn.\n\n Mohamed\n\nI'm so grateful for this tutorial, It makes things easier and clearer. Thank you SO much! Peace! :)\n\n Phil Smeeton\n\nGreat article on OOP there is nothing like learning how to program properly. Once you have mastered building good quality classes the world is your oyster! Thanks again!\n\n Iqbal Malik\n\nThis is a great, very nice and really good article explaining about OOP PHP, and I'm fully understand about it. For beginning You must start use OOP PHP, the other good things comes with experience.\n\nThanks a lot.\n\nkumar\n\nits really nice tutorial. now i have confident on oops concept in php\n\nEdward Mwangile\n\nNice tutorial!!Thanks it has given me more confidence.\n\n Stefan Bols\n\nProbably one of the best articles I've ever read! I'm a 18 year old guy from Denmark. I've always programmed PHP in functions. Already now I can see alot of benefits with OOP! This article was written in the best way I could ever imagine! \u2013 Thanks you so much!\n\nbinil\n\nthank u very much such a wonderfullll\u2026.tutorial\u2026. its very much invaluable,,,,for me\n\nMatthew\n\nGreat tutorial! Thanks for the awesome information!\n\nShovra Das\n\nThanks! It was very helpful\n\nPuvanarajan\n\nThanks\u2026..\n\nnavin\n\nit's very nice and helpful for beginers\n\nsanket\n\namazing one !! keep up the good work. thanks\n\nBibhuti\n\nThanks\u2026\n\nAjay\n\nThanks\n\nshiv kumar singh\n\ngood explanation and i really clear my concept about php and oops. thankx."}
{"text": "NumPy 1.5 Beginner's Guide\n\nNumPy (from Numerical Python) is an open source Python library for scientific computing. NumPy lets you work with arrays and matrices in a natural way.\n\nI blogged about NumPy and SciPy for IronPython / #.Net. These libraries have be been optimized and provided custom .Net interfaces. This means that the full functionality is available to all .Net languages.\n\nThat means PowerShell, so I'm interested.\n\nNumPy contains a long list of useful mathematical functions including some for linear algebra, Fourier transformation, and random number generation routines. NumPy allows rapid interactive prototyping.\n\nHere is a sample chapter from the book. Python has been around since the early 90's and their open source libraries are very mature and can shortcut plenty of work. That coupled with IronPython for .Net means a potentially seamless integration with PowerShell. NymPy is used by scientists, engineers, quantitative data analysts and more.\n\nI am looking forward to learning more about how to use it and where it is applied."}
{"text": "In the midst of writing our first book, Angela and I argued over the stored process chapter content. After we wrote the chapter outline, we then wrote the outline for this book. The first title was the 25 Best Tips for Writing Stored Processes. Our idea for the tips, which later became keys, was simple: take a basic SAS program and show how that program can be modified into over 25 different stored processes. By following this process, you build on your knowledge from the previous chapter as you learn the new techniques. Here's some highlights from the book \u2013 which is available for purchase today!\n\nEnhanced Learning Path\n\nYou need a way to learn the code that is simple! So we developed a table method where the code you are writing is on the left and the explanation is on the right. [Double-click image to zoom in]\n\nWe used different fonts so you could easily understand how the code changed. For instance, code you need to delete uses a strike-through and inserted code is shown in blue. Any code that remains the same is shown with a gray background.\n\nIn some stored processes, you may only need to add a line and delete a line to have a completely new stored process. It's not that clear in other teaching methodologies.\n\nWhat are the Keys?\n\nEach chapter contains keys or tips to help you remember key concepts about the topic. Here's a few samples:\n\nWorking with Complex Prompts\n\nWe'll show you how to code simple and complex prompts! These prompts can help you turn three stored processes into one, which simplifies maintenance.\n\nComplex Layouts\n\nSometimes the stored process has to go beyond the out-of-box layouts. Learn how to create the layout and how to create output.\n\nAlso create code that can be used in mobile devices \u2013 such as an iPhone or iPad."}
{"text": "Hi, and welcome to the page everybody's been waiting for: Pascal for\nNot-So-Literate Programmers! (Okay, so it's not 'everybody', but we're assuming\nthat we're getting the majority of our target audience here...) This learning page\nfor Pascal is dedicated to getting you, the already accomplished (in a sense)\nprogrammer, into greater programming heights. From Delphi to the VCL, you'll get it\nall here at Pascal Programming for Not-So-Literate Programmers!\n\nWho's the target audience anyway?\n\nThis page is targeted at those people who know the bare-basics of programming,\nand are interested to learning more. This includes, but is not necessarily limited\nto, people who:\n\nhave previous programming experience (in any language),\n\nhave finished introductory books on Pascal,\n\nhave experimented with Pascal and learnt how to use its main features,\n\nhave been through our previous \"Pascal Programming for Programming Illiterates\",\n\nor have an interest on how dumb web pages really can be...\n\nIf you satisfy any of the scenarios above, this page is for you. Well, even if you\ndon't, stay on: this page might be of some help. (This is unless you're a complete\nprogramming illiterate, where Pascal\nProgramming for Programming Illiterates would serve you better.)\n\nOkay, so how do I use this page?\n\nWell, the system generally works like this:\n\nSelect a course in the 'Courses' section\n\nFollow the tutorial\n\nRefer to the 'Glossary' when necessary\n\nBut of course, you don't necessarily have to follow that procedure. Who knows? You\nmight find it more convenient to start from the glossary and do the courses later.\nIt's really all up to you. To find out more about each section, read the short\nintroduction at the beginning of each page. (But please finish this general\nintroduction first.)\n\nHow about your courses?\n\nOur courses are pretty simple, actually. They use the tried and true tutorial\nsystem and are categorised into three difficulty levels. These levels are:\n\nBeginner\n\nIntermediate\n\nAdvanced\n\nYou might notice that these three levels are colour coded for your easy\nidentification. 'Beginner' is yellow, 'Intermediate' is cyan, and 'Advanced'\nis magenta. Cute, aren't they?\n\nIn every course, there'll be one or more example programs for your compilation\npleasure, and each one is presented in a 'Type', 'Output', 'Analyse' system. Each\nsection is separated by three distinctive bars. A typical example program would go:\n\nOnce in a while, you'll also come across a message with a cryptic header. There\nare four such headers: Tips, Remember, Stop, and URL. These are explained below:\n\nTips give you useful information or programming tips for your convenience. Be\nsure to read them, for they just might come in handy!\n\nSometimes, things which had been mentioned previously might slip your\nmind. Therefore, we have taken the liberty to remind you of them. (Pretty helpful,\naren't we?)\n\nWhen things which are important go beyond the typical 'Tip' or 'Remember', we\nresort to 'Stop' - When you see this header, stop everything and read the message.\n(Whatever it is, don't panic yet. We normally give warnings before we give\ninstructions.)\n\nYou can't expect us to elaborate everything in this website, especially if these\ntopics are irrelevant or too complex. So, in times like these, we'll provide a link\nto other sites using the URL header.\n\nAlso, we occasionally use Macromedia ShockWave to demonstrate certain concepts.\nIf you do not have the ShockWave plug-in, you can download it from\n Below is a sample\nShockWave movie for you to ensure that your plug-in is installed correctly.\n\nIf you don't have a browser that supports plug-ins though, don't worry, for\nwe have provided back-up static graphics to replace them. All that you'll\nlose out on is a bit of interactivity. Whichever the case, you'll still be able\nto follow through the course without too many problems.\n\nWhere to go from here?\n\nNow that you've finished the introduction, you can happily go on to our Courses\nsection, where you can embark on any one of our tutorial courses. Or, you can head on\nto our Glossary section, where complex terms are defined. Whatever it is, enjoy!"}
{"text": "Programming Arduino Getting Started with Sket\n\nGulls Nest Books\nOR, USA\n\n$14.67\n\nFREE\n\nUsed Very Good(1 Copy):\nVery Good 0071784225 0071784271784225 Brand New. ! ! ! ! BEST PRICES WITH A SERVICE YOU CAN RELY! ! !\n\nUrbookstore1\nPA, USA\n\n$14.94\n\nFREE\n\nNew:\n100% Brand New!\n\nMore Books\nFL, USA\n\n$15.07\n\nFREE\n\nUsed Like New(29New:\nNew\n\nPowell's Books\nOR, USA\n\n$16.28\n\nFREE\n\nAbout the Book\n\nProgram Arduino with ease\n\nUsing clear, easy-to-follow examples, \"Programming Arduino: Getting Started with Sketches\" reveals the software side of Arduino and explains how to write well-crafted sketches using the modified C language of Arduino. No prior programming experience is required The downloadable sample programs featured in the book can be used as-is or modified to suit your purposes. Understand Arduino hardware fundamentals Install the software, power it up, and upload your first sketch Learn C language basics Write functions in Arduino sketches Structure data using arrays and strings Use Arduino's digital and analog inputs and outputs in your programs Work with the Standard Arduino Library Write sketches that can store data Program LCD displays Use an Ethernet shield to enable Arduino to function as a web server Write your own Arduino libraries\n\nIn December 2011, Arduino 1.0 was released. This changed a few things that have caused two of the sketches in this book to break. The change that has caused trouble is that the classes 'Server' and 'Client' have been renamed to 'EthernetServer' and 'EthernetClient' respectively. To fix this: Edit sketches 10-01 and 10-02 to replace all occurrences of the word 'Server' with 'EthernetServer' and all occurrences of 'Client' with 'EthernetClient'. Alternatively, you can download the modified sketches for 10-01 and 10-02 from here: http: //\n\nMake Great Stuff TAB, an imprint of McGraw-Hill Professional, is a leading publisher of DIY technology books for makers, hackers, and electronics hobbyists."}
{"text": "Buy now\n\nE-Books are also available on all known E-Book shops.\n\nDetailed description ActionScript 2.0, the scripting language for Macromedia Flash(r),\n\nAs you explore the dozens of examples included inside, you'll\n\nWhat you will learn from this book * A variety of simple coding conventions that will help you create projects that are easy to read and update * How to change the variables and content from one movie clip to another * Techniques for running and debugging code * How to use the drawing API, apply filters and blending modes, and work with the new Bitmap class * The intricacies of working with text and applying visual styles to text * Ways to integrate images, sound, video, and live camera feeds into your project\n\nWho this book is for\n\nThis book is for readers who are interested in writing their own code using ActionScript 2.0. No prior programming experience is assumed.\n\nWrox Beginning guides are crafted to make learning programming languages and technologies easier than you think, providing a structured, tutorial format that will guide you through all the techniques involved."}
{"text": "Previous PageNext Page\nPython is a general purpose interpreted, interactive, object-oriented and high-level programming language. Python was created by Guido van Rossum in the late eighties and early nineties. Like Perl, Python source code is also now available under the GNU General Public License (GPL).\nThis tutorial has been designed for software programmers with a need to understand the Python programming language starting from scratch. This tutorial will give you enough understanding on Python pr... (more)\n\nJobsPost a Job Now!\nOnly 29$ for 45 days!Why post here?Latest Jobs\nPython and mysql developer at Appszito\nSan Francisco, 29 Dec 2012\nPython Developer at Airbase\nNew York, NY, 24 Dec 2012Sponsored Ads\nWelcome to learnpython.org's interactive Python tutorial.\nWhether you are an experienced programmer or not, this website is intended for everyone who wishes to learn the Python programming language.\nYou are welcome to join our group on Facebook for questions, discussions and updates.\nJust click o... (more)\n\nSearch: DocumentationC++ Language TutorialFunctions (I)\nUsing functions we can structure our programs in a more modular way, accessing all the potential that structured programming can offer to us in C++.\nA function is a group of statements that is executed when it is called from some point of the program. The following is its format:\ntype name ( parameter1, parameter2, ...) { statements }\nwhere:\ntype is the data type specifier of the data returned by the function.name is the identifier by w... (more)\n\nYou are here : C FUNCTIONSPublished on: 12th Nov 2010 | Last Updated on: 24th Nov 2011\nContents :FunctionsTypes of Functions :Built In FunctionsUser Defined FunctionsFunction Call By Passing ValueFunction Call By Returning ValueFunction Call By Passing and Returning ValueAdvantagesRecursion (Recursive Function)\nThe function is a self contained block of statements which performs a coherent task of a same kind.\nC program does not execute the functions directly. It is required to invoke or call that... (more)"}
{"text": "Overview\n\nOther Titles in This Category\n\nEven if you're new to Perl, Sams Teach Yourself Perl in 24 Hours\nteaches you everything you need to know to begin producing useful\nCGI programs quickly. This book provides you with a solid\nfoundation in the basics of the Perl language, so you can easily\nmove on to more advanced books and techniques. Special attention is\npaid to those features that trouble new users. Building on that\nknowledge, you will begin to interact with your file system,\noperating system, and network environment. Then move on to creating\nuseful CGI programs, such as data collection, shopping cart, server\npush, and e-mail forms."}
{"text": "In this course, you'll gain fundamental understanding and refresher with Object-Oriented Programming Principles, including the UML. This course is excellent preparation for pursuit of any object-oriented programming curriculum study of language-specific tools (e.g. programming or managing development projects in C++, .NET technologies such as VB.NET, C#, Java, etc.). This course is ideal for software engineers, developers, designers and project managers who will be working on programming projects in an object-oriented development environment. Topics include describing the differences between procedural and object-oriented programming (OOP); defining classes, abstraction, objects, encapsulation, inheritance, and polymorphism; using the UML to model and develop a class diagram, identifying and working with class design guidelines, building objects using types of composition."}
{"text": "Weak typing\n\nIn computer science, weak typing (a.k.a. loose typing) is a property attributed to the type systems of some programming languages. It is the opposite of strong typing, and consequently the term weak typing has as many different meanings as strong typing does (see strong typing for a list and detailed discussion).\n\nOne of the more common definitions states that weakly-typed programming languages are those that support either implicit type conversion (nearly all languages support at least one implicit type conversion), ad-hoc polymorphism (also known as overloading) or both. These less restrictive usage rules can give the impression that strict adherence to typing rules is less important than in strongly-typed languages and hence that the type system is \"weaker\". However, such languages usually have restrictions on what programmers can do with values of a given type; thus it is possible for a weakly-typed language to be type safe. Moreover, weakly-typed languages may be statically typed, in which case overloading is resolved statically and type conversion operations are inserted by the compiler, or dynamically typed, in which case everything is resolved at run time.\n\nThe advantage claimed of weak typing is that it requires less effort on the part of the programmer than strong typing, because the compiler or interpreter implicitly performs certain kinds of conversions. However, one claimed disadvantage is that weakly typed programming systems catch fewer errors at compile time and some of these might still remain after testing has been completed. Two commonly used languages that support many kinds of implicit conversion are C and C++, and it is sometimes claimed that these are weakly typed languages. However, others argue that these languages place enough restrictions on how operands of different types can be mixed, that the two should be regarded as strongly typed languages.\n\nC++ places more restrictions on the handling of enumerated types than C:"}
{"text": "Hands-On Introduction to LabVIEW for Scientists and Engineersands-On Introduction to LabVIEW for Scientists and Engineers takes a \"learn-by-doing\" approach to acquiring the computer-based skills used in daily experimental work. Ideal as either a course textbook or a self-study supplement, the book explores practical programming solutions for carrying out interesting and relevant projects. Readers--who are assumed to have no prior computer programming or LabVIEW background--will begin writing meaningful programs in the first fewpages. Instructors using the text can easily choose the desired depth of cove... MORErage for their courses. \"Introduction to LabView programming for scientists and engineers\"--"}
{"text": "Both books are about the same size and many of the same topics. One\ndifference between the two books is choice of programming language: ML for Hackers uses R for its examples, ML in Action uses Python.\n\nML in Action doesn't lean heavily on Python libraries. It\nmostly implements its algorithms from scratch, with a little help from\nNumPy for linear algebra, but it does not use ML libraries such as scikit-learn.\nIt sometimes uses Matplotlib for plotting and uses Tkinter for building\na simple GUI in one chapter. The final chapter introduces Hadoop and\nAmazon Web Services.\n\nML for Hackers is a little more of a general introduction to machine learning. ML in Action contains a brief introduction to machine learning in general, but quickly moves on to specific algorithms. ML for Hackers spends a good number of pages discussing data cleaning. ML in Action starts with clean data in order to spend more time on algorithms.\n\nML in Action takes 8 of the top 10 algorithms in machine learning (as selected by this paper) and organizes around these algorithms. (The two algorithms out of the top 1o that didn't make it into ML for Hackers\nwere PageRank, because it has been covered well elsewhere, and EM,\nbecause its explanation requires too much mathematics.) The algorithms\ncome first in ML in Action, illustrations second. ML for Hackers puts more emphasis on its examples and reads a bit more like a story. ML in Action reads a little more like a reference book"}
{"text": "1.5 FORTRAN77 Standard\n\nFORTRAN is one of the oldest high-level languages that has been in use since\nthe 1950s. In 1966, the FORTRAN66 was set as its standard, and in 1978, a\nfull-scale renewal to FORTRAN77 was made.\n\nSince the FORTRAN has a long history, massive numbers of libraries written in\nFORTRAN exist. However, at the present when many new languages exist, such as\nthe C, FORTRAN may give the impression of a rigid (inflexible) language dragged\ndown by long history. But FORTRAN is the most suitable language for scientific\ncomputing, and is unrivaled by other languages. It is not only this\n\"massive wealth of libraries,\" but also this \"usability\"\nthat FORTRAN has gained support for over 30 years.\n\nIt is indeed difficult to fully take advantage of any language, including\nFORTRAN. Luckily, the FORTRAN specifications (grammar book) are relatively small\nin volume, and are therefore easier to learn. Even so, it is not easy to\n\"master\" FORTRAN. In DCL, including MATH1, many advanced techniques,\nnot presented in introductory manuals, are frequently used. Of course, the user\nis nor required to have knowledge in them to use the DCL. However, it is advised\nthat the user become acquainted with them to use the DCL to its maximum\ncapabilities. Since such knowledge has wide applicability, no doubt, it will\nassist the user in creating his own FORTRAN programs."}
{"text": "Having taken some time off, I am excited to start Tech Tuesdays back up. We will continue looking at programming and the next topic are more complex data types which are also referred to as data structures. If you have been following the programming series, you may recall that we already had threeseparateposts dealing with data types. These introduced the concept of data types and discussed why they matter and how they are implemented. But those posts dealt with simple types of data such as a single number or character. How do we go about representing something more complicated like a chess board or a person inside of a computer program?\n\nLet's take the example of a person. We might want to keep track of the person's name, age, and gender. Now with what we already know, we could write code as follows:\n\nWe simply create three separate variables, each using a basic data type, to keep track of the three pieces of data. But this seems unsatisfying as we don't have a way of referring to the person \"as a whole\" \u2014 so we can't write something like\n\nwinner = fight(cook, thief);\n\nwhere \"fight\" is a function that takes as its arguments two persons and returns a person as its result.\n\nWhat we need instead is a way of bringing the individual attributes together into a single unit that we can then use throughout our program. Different programming languages offer different ways of accomplishing this goal. These go by names such as structs, records and objects. We will have one or more posts on that in what will be a mini-series on data structure.\n\nThere is another expressive problem though that we need a way of addressing. Let's say we want to keep track of a group of persons, such as a class of students. If there are 25 students in the class then it would be very cumbersome to have to say something like\n\nvar student1 = ...;\nvar student2 = ...;var student3 = ...;\n...\n\nSo even once we can refer to a person as whole, we still don't have a way to refer to a collection of persons. The same problem exists even for simple data types \u2014 right now we don't have a way of referring to a collection of numbers. Again programming languages offer data structures to help with this. These go by names such as arrays, lists, and sets and will be the subject of another group of posts in this data structure mini series.\n\nWe could start by looking either at the first problem \u2014 grouping multiple attributes into a single whole \u2014 or the second problem \u2014 collections of multiple things. I haven't decided yet which makes more sense, so if anyone reading this has a suggestion as to where to start I welcome it."}
{"text": "Niklaus WirthDiscussion\n\nAsk a question about 'Niklaus Wirth'\n\nStart a new discussion about 'Niklaus Wirth'\n\nAnswer questions from other users\n\nFull Discussion Forum\n\nQuotations\n\nAs a matter of fact, the adaptability of a program to changes in its objectives (often called maintainability) and to challenges in its environment in terms of the degree to which it is neatly structured.\n\nBut active programming consists of the design of new programs, rather than contemplation of old programs.\n\nClearly, programming courses should teach methods of design and construction, and the selected examples should be such that a gradual development can be nicely demonstrated.\n\nDuring the process of stepwise refinement, a notation which is natural to the problem in hand should be used as long as possible.\n\nExperience shows that the success of a programming course critically depends on the choice of these examples.\n\nIn the practical world of computing, it is rather uncommon that a program, once it performs correctly and satisfactorily, remains unchanged foreverBiography\n\nWinterthur is a city in the canton of Zurich in northern Switzerland. It has the country's sixth largest population with an estimate of more than 100,000 people. In the local dialect and by its inhabitants, it is usually abbreviated to Winti in 1934. In 1959 he earned a degree in Electronics Engineering from the Swiss Federal Institute of Technology Z\u00fcrich (ETH Z\u00fcrich). In 1960 he earned an M.Sc. from Universit\u00e9 Laval\n\nUniversit\u00e9 Laval\n\nLaval University is the oldest centre of education in Canada and was the first institution in North America to offer higher education in FrenchHarry Douglas Huskey is an American computer designer pioneer.Huskey was born in the Smoky Mountains region of North Carolina and grew up in Idaho. He gained his Master's and then his PhD in 1943 from the Ohio State University on Contributions to the Problem of Geocze...\n\nComputer science or computing science is the study of the theoretical foundations of information and computation and of practical techniques for their implementation and application in computer systems...\n\nProgramming languages\n\nA programming language is an artificial language designed to communicate instructions to a machine, particularly a computer. Programming languages can be used to create programs that control the behavior of a machine and/or to express algorithms precisely....\n\nALGOL W is a programming language. It was based on a proposal for ALGOL X by Niklaus Wirth and C. A. R. Hoare as a successor to ALGOL 60 in IFIP Working Group 2.1. When the committee decided that the proposal was not a sufficient advance over ALGOL 60, the proposal was published as A contributionModula-2 is a computer programming language designed and developed between 1977 and 1980 by Niklaus Wirth at ETH Zurich as a revision of Pascal to serve as the sole programming language for the operating system and application software for the personal workstation Lilith...\n\nOberon-2 is an extension of the original Oberon programming language that adds limited reflection and object-oriented programming facilities, open arrays as pointer base types, read-only field export and reintroduces the FOR loop from Modula-2....\n\n, and Oberon-07 . He was also a major part of the design and implementation team for the Lilith\n\nLilith (computer)\n\nLilith is the name of custom built workstation using the AMD 2901 bit-slice processor by the group of Niklaus Wirth at ETH Z\u00fcrich. The project started in 1977 and by 1984 several hundred workstations were in use. It had a high resolution full page display, a mouse, a laser printer interface, and a...\n\nOberon is an operating system developed in the late 1980s at ETH Z\u00fcrich using the Oberon programming language. It has an innovative visual text-based user interface for activating commands.- History :...\n\nLola is designed to be a simple hardware description language for describing synchronous, digital circuits. Niklaus Wirth developed the language to teach digital design on field-programmable gate arrays to computer science students while a professor at ETH Z\u00fcrich.The purpose of Lola is to...\n\nThe Association for Computing Machinery is a learned society for computing. It was founded in 1947 as the world's first scientific and educational computing society. Its membership is more than 92,000 as of 2009 the development of these languages and in 1994 he was inducted as a Fellow of the ACM.\nHe designed the simple programming language PL/0\n\nPL/0\n\nAt least two programming languages are known as PL/0. One is a subset of IBM's general-purpose programming language PL/I.The other PL/0, covered here, is similar to but much simpler than the general-purpose programming language Pascal, intended as an educational programming language. It serves as...\n\nNotable publications\n\nSoftware Engineering is the application of a systematic, disciplined, quantifiable approach to the development, operation, and maintenance of software, and the study of these approaches; that is, the application of engineering to software...\n\nAlgorithms + Data Structures = Programsis a 1976 book written by Niklaus Wirth covering some of the fundamental topics of computer programming, particularly that algorithms and data structures are inherently related...\n\n\", which gained wide recognition and is still useful today.\n\nWirth's law\n\nWirth's law is a computing adage made popular by Niklaus Wirth in 1995:Wirth attributed the saying to Martin Reiser, who, in the preface to his book on the Oberon System, wrote: The hope is that the progress in hardware will cure all software illsbecomes faster.\" In his 1995 paper A Plea for Lean Software he attributes it to Martin Reiser.\n\nQuotes\n\nSee also\n\nIn computer science, Extended Backus\u2013Naur Form is a family of metasyntax notations used for expressing context-free grammars: that is, a formal way to describe computer programming languages and other formal languages. They are extensions of the basic Backus\u2013Naur Form metasyntax notation.The...\n\nWirth syntax notation is a metasyntax, that is, a formal way to describe formal languages. Originally proposed by Niklaus Wirth in 1977 as an alternative to Backus-Naur form , it has several advantages over BNF in that it can be defined using itself, it contains an explicit iteration construct,...\n\nIn computing, bucky bit in a binary representation of a character, is a bit that is set by pressing on a computer keyboard additional modifier key, other than ordinary shift key.-Overview:Setting a bucky bit changes the output character"}
{"text": "Computer Aided Design, Simulation and Manufacturing is rapidly becoming the norm in industry. The software complexity involved is best handled by pure object oriented programming languages and environments like Smalltalk for greater programming productivity and maintainability. Based on this conviction, the author used Smalltalk to create a motion simulator in 1992, which he later commercialized as part of Dynamic Designer Motion. Since then he has developed more simulators with more CAD capabilities like freeCAD and CADSM all in Smalltalk. His simulator is currently the basis of Alibre Motion which is a feature of a popular CAD called Alibre Design. Most engineering-scientific programs are developed with procedural or hybrid programming methods because of legacy issues. The author will show how Smalltalk had provided him the programming capability to develop the GUI, geometric domain, multibody dynamics, symbolic math, matrix algebra and solvers, Newton-Raphson root finder, DAE and ODE solvers, and interfaces to other CAD systems."}
{"text": "Programming 1\n\nIntroduction to programming\n\nSynopsis of Module\n\nThis module is designed to introduce students to the fundamental concepts of problem solving using the basic constructs of a programming language. The module will cover basic data types, control structures, arrays and methods.\nThe module is of an introductory nature and aims to provide the student with essential transferable skills.\n\nAims of Module\n\nTo provide students with the knowledge and skills necessary to enable them to design and test simple computer programs.\n\nTo provide students with an introduction to the fundamental concepts of programming.\n\nTo provide students with an understanding of basic data types, arrays, structured programming constructs: selection, iteration, sequence and functions/procedures (methods).\n\nTo provide students with an understanding of the principles of problem solving for program design and construction.\n\nLearning Outcomes\n\nOn completion of this module students will be able to\n\nDesign a program from a specification;\n\nFormulate solutions to a number of basic programming problems using an appropriate design notation;\n\nMake effective use of basic data types arrays and structured programming control constructs : sequence, selection and iteration."}
{"text": "The C Programming Language. Prentice-Hall, Englewood Cli s\n(1988)\n\nTools\n\n\"... C i ...\"\n\nC it has been called a ''system programming language'' because it is useful for writing compilers and operating systems, it has been used equally well to write major programs in many different\ndomains.\nMany of the important ideas of C stem from the language BCPL, developed by Martin Richards. The influence of BCPL on\nC proceeded indirectly through the language B, which was written by Ken Thompson in 1970 for the first UNIX system on\nthe DEC PDP-7.\nBCPL and B are ''typeless'' languages. By contrast, C provides a variety of data types. The fundamental types are characters, and integers and floating point numbers of several sizes. In addition, there is a hierarchy of derived data types created with pointers, arrays, structures and unions. Expressions are formed from operators and operands; any expression, including an assignment or a function call, can be a statement. Pointers provide for machine-independent address arithmetic.\nC provides the fundamental control-flow constructions required for well-structured programs: statement grouping, decision making (if-else), selecting one of a set of possible values (switch), looping with the termination test at the top (while, for) or at the bottom (do), and early loop exit (break).\nFunctions may return values of basic types, structures, unions, or pointers. Any function may be called recursively. Local variables are typically ''automatic'', or created anew with each invocation. Function definitions may not be nested but variables may be declared in a block-structured fashion. The functions of a C program may exist in separate source files that are compiled separately. Variables may be internal to a function, external but known only within a single source file, or visible to the entire program.\n\n\"... At c ...\"\n\nAt changes gives system administrators valuable data for protecting and maintaining their systems. However, in environments of many networked heterogeneous platforms with different policies and software, the task of monitoring changes becomes quite daunting. Tripwire is tool that aids UNIX system administrators and users in monitoring a designated set of files and directories for any changes. Used with system files on a regular (e.g., daily) basis, Tripwire can notify system administrators of corrupted or altered files, so corrective actions may be taken in a timely manner. Tripwire may also be used on user or group files or databases to signal changes. This paper describes the design and implementation of the Tripwire tool. It uses interchangeable \"signature\" routines to identify changes in files, and is highly configurable. Tripwire is no-cost software, available on the Internet, and is currently in use on thousands of machines around the world.by\nRaju Pandey, James C. Browne\n- In Workshop on Languages and Compilers for Parallel Computation, Lecture Notes in Computer Science 768, 1993\n\n\"... . composit ...\"\n\n. composition of programs specifies that all events (individual occurrences of named operations, called actions) of component programs can execute in parallel, except for a set of events that interact with each other. Interactions among such events can be specified by establishing execution orderings among them. This paper presents a mechanism, where such interactions are specified by constructing algebraic expressions from a set of primitive interaction expressions and interaction operators. The primitive expressions model interactions at the fundamental level of computations, namely, events. The interaction operators model nondeterministic interactions and interaction over sets of events. ...\n\n\"... We s ...\"\n\nWe suite of strongly typed module combination operators. Such programmability enables one to easily incorporate programmer-defined data format conversion stubs at link-time. In addition, our linkage facility is able to automatically generate safe coercion stubs for compatible encapsulated data.\n\n\"... If us ...\"\n\nIf usually a bug leading to nondeterministic behavior. In programs with critical sections, however, accesses in parallel critical sections are not considered bugs, as the programmer, in specifying the critical sections, presumably intends them to run in parallel. Thus, a race detector should find \"data races\"---races between accesses not contained in atomic critical sections."}
{"text": "This is a set of 4 sessions: Intro to OO Programming concepts and Java Turtles, Intro to Media Computation and image manipulation using objects, methods, arrays, and loops; Image Manipulation using 2d arrays and conditionals, Manipulating sound using ranges in iteration and methods that return values; also a look at inheeritance using Java Turtles. This is a nice introduction to a different approach to teaching beginning OO Java programming. Based on a book by Mark Guzdial and Barbara Ericson, Introduction to Computing and Programming in Java: A Multimedia ApproachACM TECSTeachers (Professional Development)Java"}
{"text": "Introduces one\nof the most fundamental capabilities of object-oriented programming languages.\nInheritance is a form of software reusability in which programmers create\nclasses that absorb an existing class's data and behaviors and enhance them\nwith new capabilities. The chapter discusses the notions of base classes and\nderived classes, protected\nmembers, public\ninheritance, protected\ninheritance, private\ninheritance, direct base classes, indirect base classes, constructors and\ndestructors in base classes and derived classes, and software engineering with\ninheritance. The chapter compares inheritance (\"is a\" relationships) with\ncomposition (\"has a\" relationships) and introduces \"uses-a\" and \"knows-a\"\nrelationships. A feature of the chapter is the example that implements a\npoint, circle, cylinder class hierarchy. Using this \"mechanical\" example, we\nexamine the relationship between base classes and derived classes, then show\nhow derived classes use inherited data members and member functions. In the\n\"Thinking About Objects\" section, we update the elevator simulation design and\nimplementation to incorporate inheritance. We also suggest further\nmodifications that the student may design and implement.\n\nChapter 10 Object-Oriented Programming: Polymorphism\n\nDeals with\nanother fundamental capability of object-oriented programming, namely\npolymorphic behavior. When many classes are related to a common base class\nthrough inheritance, each derived-class object may be treated as a base-class\nobject. This enables programs to be written in a general manner independent of\nthe specific types of the derived-class objects. New kinds of objects can be\nhandled by the same program, thus making systems more extensible. Polymorphism\nenables programs to eliminate complex\nswitch logic in favor of simpler \"straight-line\"\nlogic. A screen manager of a video game, for example, can send a draw message\nto every object in a linked list of objects to be drawn. Each object knows how\nto draw itself. An object of a new class can be added to the program without\nmodifying that program (as long as that new object also knows how to draw\nitself). This style of programming is typically used to implement today's\npopular graphical user interfaces (GUIs). The chapter discusses the mechanics\nof achieving polymorphic behavior via\nvirtual functions. It distinguishes between abstract\nclasses (from which objects cannot be instantiated) and concrete classes (from\nwhich objects can be instantiated). Abstract classes are useful for providing\nan inheritable interface to classes throughout the hierarchy. We demonstrate\nabstract classes and polymorphic behavior by revisiting the point, circle,\ncylinder hierarchy of Chapter . We introduce an abstract\nShape base class,\nfrom which class Point\ninherits directly and classes Circle\nand Cylinder\ninherit indirectly. In response to this hierarchy, our professional audiences\ninsisted that we provide a deeper explanation that shows precisely how\npolymorphism is implemented in C++, and hence, precisely what execution time\nand memory \"costs\" are incurred when programming with this powerful\ncapability. We responded by developing an illustration and a precision\nexplanation of the vtables (virtual\nfunction tables) that the C++ compiler builds automatically to support\npolymorphism. To conclude Chapter , we introduce run-time type\ninformation (RTTI) and dynamic casting, which enable a program to determine an\nobject's type at execution time, then act on that object accordingly. We show\nthis in the context of a more \"natural\" inheritance hierarchy\u2014several classes\nderived from an abstract Employee\nbase class, in which each employee has a common\nearnings function\nto calculate an employee's weekly pay. Using RTTI and dynamic casting, we give\na 10% pay increase to employees of a specific type, then calculate the\nearnings for such employees. For all other employee types, we calculate their\nearnings.\n\nChapter 11 Templates\n\nDiscusses one of the more recent additions to\nC++. Function templates were introduced in Chapter . Chapter\npresents an additional function template example. Class templates enable the\nprogrammer to capture the essence of an abstract data type (such as a stack,\nan array, or a queue) and create\u2014with minimal additional code\u2014versions of that\nADT for particular types (such as a queue of\nint, a queue of\nfloat, a\nqueue of strings, etc.) and to provide specific type information as a\nparameter when creating an instance of that ADT. For this reason, class\ntemplates often are called parameterized types. The chapter discusses using\ntype parameters and nontype parameters and considers the interaction among\ntemplates and other C++ concepts, such as inheritance,\nfriends and\nstatic members. The\nexercises challenge the student to write a variety of function templates and\nclass templates and to employ these in complete programs. We greatly enhance\nthe treatment of templates in our discussion of the Standard Template Library\n(STL) containers, iterators and algorithms in Chapter ."}
{"text": "11.7 Let s See It in Action\n\n11.7 Let's See It in Action!\n\nAlthough this chapter may have felt quite conceptual, it lays very important\ngroundwork\nfor OOP development and for many of the examples in the remainder of this book. In the\nnext\nchapter, we'll put some meat on the bones of our application framework by building a currency conversion application.\n\n< Day Day Up >\n\n< Day Day Up >\n\nChapter 12. Using Components with ActionScript 2.0\n\nIn Chapter 11, we learned how to structure a basic OOP application in ActionScript 2.0. In this chapter, we'll see how to create a GUI application based on that structure. As usual, you can download the sample files discussed in this chapter from http://\nmoock\n.org/eas2/examples.\n\n< Day Day Up >\n\n< Day Day Up >\n\n12.1 Currency Converter Application Overview\n\nOur example GUI application is a simple currency converter. Figure 12-1 shows the\ncomponents\nused in our currency converter interface (Button, ComboBox, Label, TextArea, and TextInput). The\nuser\nmust specify an amount in Canadian dollars, select a currency type from the drop-down list, and click the Convert button to determine the equivalent amount in the selected currency. The result is displayed on screen.\n\nFigure 12-1. The currency converter application\n\nWe'll place the assets for our application in the following directory structure, which mirrors the structure we used in Chapter 11. Note that the\ndeploy\nand\nsource\nfolders are both subdirectories of\nCurrencyConverter\nand that\norg/\nmoock\n/tools\nis a subdirectory of the\nsource\nfolder:\n\nCurrencyConverter/\ndeploy/\nsource/\norg/\nmoock/\ntools/\n\nOur application's main Flash document is named\nCurrencyConverter.fla\n. It resides in\nCurrencyConverter/source\n. To create the\nCurrencyConverter.fla\nfile, we'll copy the file\nAppName.fla\n(which we created in Chapter 11) to the\nCurrencyConverter/source\ndirectory, and rename the file to\nCurrencyConverter.fla\n. That gives\nCurrencyConverter.fla\nthe basic structure it needs, including a class preloader on\nframes\n2 and 3 and a frame labeled\nmain\n, on which we'll start the application.\n\nOur application's only class is\nCurrencyConverter\n. It is stored in an external\n.as\nclass file named\nCurrencyConverter.as\n, which resides in\nCurrencyConverter/source/org/moock/tools\n. Our exported application (a Flash movie) is named\nCurrencyConverter.swf\n. It resides in\nCurrencyConverter/deploy\n.\n\nNow let's take a closer look at each of these\nparts\nof our application.\n\n< Day Day Up >\n\n< Day Day Up >\n\n12.2 Preparing the Flash Document\n\nOur\nCurrencyConverter\nclass instantiates all the components needed for our application at runtime. Even though we create instances of components at runtime, Flash requires us to add the\ncomponents\nto the\nCurrencyConverter.fla\n's Library during authoring. Unfortunately, Flash does not allow us to simply drag the required components from the Flash Components panel to\nCurrencyConverter.fla\n's Library. Instead, to add a component to the Library, we must drag an instance of it to the Stage. Although component instances can be left on the Stage of a\n.fla\nfile, that development style is not our current focus. So we'll delete the instances from the Stage; however, Flash\nleaves\na copy of the underlying component in the Library (which was our original goal).\n\n12.2.1 Adding Components to the Document\n\nHere are the steps to follow to add the Button component to\nCurrencyConverter.fla\n's Library. To add the ComboBox, Label, TextArea, and TextInput components to the Library, follow the same steps, choosing the appropriate component instead of Button.\n\nWith\nCurrencyConverter.fla\nopen\nin the Flash authoring tool, select Window\nDevelopment Panels\n> Components.\n\nSelect and delete the Button instance from the Stage.\n\nIf we were working in a brand new\n.fla\nfile, our components would now be ready for runtime instantiation. However, recall that we're working with the basic Flash document we created in Chapter 11, which exports its classes at frame 10 and displays a preloading message while those classes load. Because of this preloading structure, our components would not currently work if we attempted to use them! We need to integrate the components into our preloading structure.\n\nWhen a document's ActionScript 2.0 classes are exported on a frame later than frame 1, components will not work in that document unless they are loaded\nafter\nthe class export frame!\n\nTo load our components after frame 10, we must set them to not export on frame 1, and then we must place a dummy instance of each component on stage after frame 10. The\ndummy\ninstance is not used; it merely forces the component to load.\n\nHere are the steps we follow to prevent the Button component from being exported on frame 1. To prevent the remaining components from being exported on frame 1, follow the same steps, choosing the appropriate component instead of Button.\n\nSelect the Button component in the Library.\n\nFrom the Library's pop-up Options menu in the top-right corner of the panel, select Linkage.\n\nIn the Linkage Properties dialog box, under Linkage, uncheck the Export in First Frame checkbox.\n\nClick OK.\n\nWhen a component's Export in First Frame option is unchecked, the component is not compiled with the movie unless an instance of the component is placed on the document's timeline. The component loads at the frame on which an instance of it is placed. But the component initialization process requires a movie's ActionScript 2.0 classes to be available\nbefore\nthe component is exported. Hence, in our\nCurrencyConverter.fla\ndocument, we'll place an instance of each of our components on frame 12, two\nframes\nafter our document's ActionScript 2.0 classes are exported. To store the dummy component instances, we'll create a new timeline layer and keyframe, as\nfollows\n:\n\nSelect Insert\nTimeline\nLayer.\n\nSelect frame 12 in the\nload components\nlayer.\n\nSelect Insert\nTimeline\nKeyframe.\n\nSelect Insert\nTimeline\nKeyframe. This second keyframe\nprevents\nthe dummy component instances from showing up in our application. We need them only for loading; the\nCurrencyConverter\nclass handles the actual creation of component instances in our application.\n\nWith our component-loading keyframe prepared, we can now place a dummy instance of each component on our document's timeline, as follows:\n\nSelect frame 12 in the\nload components\nlayer.\n\nFrom the Library, drag an instance of each component to the Stage.\n\nOptionally use the Component Inspector panel (Window\nDevelopment Panels\nComponent Inspector) to add dummy text to each component instance indicating that it is not used, as shown in Figure 12-2. Consult Flash's online help for instructions on setting component parameters via the Component Inspector.\n\nFigure 12-2. CurrencyConverter.fla's timeline and Stage\n\n12.2.2 Starting the Application\n\nIn Chapter 11, we saw how to start an OOP application by invoking the\nmain( )\nmethod of the application's primary class (i.e., the class and method that we design to be the program launch point). We'll start our currency converter by invoking\nmain( )\non our application's primary (indeed, only) class,\nCurrencyConverter\n. The\nmain( )\ncall comes on frame 15 of the\nscripts\nlayer in\nCurrencyConverter.fla\n's timeline, after our classes and components have been preloaded. Here's the code:\n\nNotice that the\nimport\nstatement allows us, in the future, to refer to the\nCurrencyConverter\nclass by its\nname\nwithout typing its fully qualified package\npath\n. As\nimplied\nby the\npreceding\ncode, our class's\nmain( )\nmethod expects four parameters: the movie clip to hold the currency converter (\nthis\n) and the depth, horizontal position, and vertical position \"0, 150 and 100, respectively \"at which to display the converter within the clip.\n\nOur\nCurrencyConverter.fla\nfile is now ready. We can now\nturn\nour attention to the class that creates and\nmanages\nthe currency converter application itself,\nCurrencyConverter\n."}
{"text": "Ok, i've been wanting to do this for a long time, and now that i'm on vacation I think I'm gonna start now. I'm thinking of starting to make my own plugins for ePSXe. The thing is that i haven't programed C++ before (wait!! don't start shouting and don't close the thread ;) )\n\nI now it's hard to learn C++ but don't worry! I'm used to programming languages and I know the basics of programming (First time i did it I was 10, with Qbasic) And I have several bases of programing. I know Pascal, Qbasic, C, a litle of php, also mIRC scripting but that's almost nothing. etc...\n\nAlso I'm a quick learner and I understand this stuff well! All I need is for you to help me find good C++ tutorials, with this kind of plugin programming style, also some site's with released codes and stuff like that (i can learn much things when I see stuff that are already made and I now what they do).\n\nHope you can help me.\n\nBTW, what are the major diferences between C and C++?\n\nM.I.K.e7\n\nJuly 12th, 2002, 10:12\n\nC++ tutorials:\n\n\nMain differences between C and C++?\nC++ is object-oriented and more complicated.\n\nMetalmurphy\n\nJuly 12th, 2002, 10:14\n\nYeah I know its more complicated :P What do you mean by object-oriented? Using shared files and stuff like that?\n\nThks for the tutorial\n\nNinjaa\n\nJuly 12th, 2002, 10:22\n\nC++ adds classes to the mix. Other than that, I don't believe there is much difference. (Although I am sure someone will correct me.)\n\nM.I.K.e7\n\nJuly 12th, 2002, 10:36\n\nObject-oriented means that you have special functions called \"methods\", which are associated with classes. When you manipulate an object of such a class that normally works by refering to one of the methods.\n\nExample:\n\nSay we have a complex number and you have a function/method to increase such a number.\n\nIn C you'd have a struct which you pass as an argument to the function:\ninc(complex_number);\n\nIn C++ you call the method of that specific object:\ncomplex_number.inc();\n\nSince the \"operand\" of the operation is already clear (it's the object) the method doesn't need a parameter.\nIf you take a look at the syntax it looks as if you were refering to a variable in a C struct, and C++ classes actually are derived from structs where you also define the methods in addition to the variables.\n\nThe whole thing looks a bit weird when you have operations with two operands:\n\nC:\ncompare(cn1,cn2);\n\nC++:\ncn1.compare(cn2);\n\nTake a look at some of the tutorials and try to get a book about it, because that topic is really a bit too large to be discussed here completely.\n\nM.I.K.e7\n\nJuly 12th, 2002, 10:40\n\nOriginally posted by Ninja\nC++ adds classes to the mix. Other than that, I don't believe there is much difference. (Although I am sure someone will correct me.)\n\nI'm not a C++ expert, but I think there is a little more difference, like operator overloading, templates, etc...\nBut the important thing are the classes and inheritance of course.\n\nMetalmurphy\n\nJuly 12th, 2002, 10:50\n\nMm... i think I getting the idea! Anyway! I'm already printing out the tutorials! Thks!\n\nIf any one know anything else please post! Like sorce codes of plugins for ePSXe! I already have some of project64 that might help but the more the better!\n\nOmniDistortion\n\nJuly 12th, 2002, 10:58\n\nowie my head.... I need to learn some programming ....\nI should shoot myself for admitting this but all I know is a small amount of HTML (to which I KNOW is small fry because its very familair to the human english language itself and is in actuality an advanced form of documentation) I tried learning VB but I guess I gave up?\n\nPlease could someone tell me what order I should learn everything in?... basically I wish to learn from an eazy programming language up to C++ (I dont care how long {well hopefully within 1/2 a decade maybe :p}... I may be smart but I seem to not be able to grip on something so...new as a programming language) thanks to all who can help me!\n\nedit: typoz... this is another reason I would be a terrible programmer lol\n\nMetalmurphy\n\nJuly 12th, 2002, 11:14\n\nOmniDistortion! Don't get me wrong but if you can't get a grip on any language and you give up easly i think you should try something else! If you just trying to program for fun then try something like 3D modeling or even Mapping like me!\n\nBut if you really want to learn how to program maybe you should start with something easy like Qbasic :P or Pascal just to get the basic!\n\nI will be glad to help you if you need!\n\nNinjaa\n\nJuly 12th, 2002, 11:28\n\nActually, C++ isn't that hard to learn. Just pick up a programming book and stick with it. Nothing beats a good textbook for teaching the stuff to you. The basics can be learned in a couple of days, and everything after that is just building on the knowledge.\n\nOmniDistortion\n\nJuly 12th, 2002, 11:38\n\nMetalMurphy: I tend to give up only because I find more things of interest... (emulation alone is so addicting and takes up much of a person's life) 3D modling has taken a place in my heart as well as level design (I *attempted* level design for UT and DeusEX [both on UnrealScript] yet I have only succeeded in creating SC levels :cries: ) I really think that if I learned something more advanced it would help the emulation community a little more... and I was hoping to occupy in creation of something that isn't helped out in much such as sound CD-ROM plugins and the sort for starting out... sound good?\n\nNinja: I have... Murachs.. I need C++ for dummies or something to get me started then probably move onto Murachs... I'll probably need an E-book or something so everything will be on-screen lol! I don't like looking back and forth...\n\nYes I am 16 so I dont know if it has to do with a psychological mental developement or just my pathetic will power...\n\nEdit: added last comments (forgot to add, silly me)\n\nM.I.K.e7\n\nJuly 12th, 2002, 12:09\n\n@Metalmurphy:\nBTW, why has it to be C++? I think most plugins are written in C, or am I wrong?\nC++ has its advantages for big projects, but for smaller things C is not only sufficient but often better, because the binary is smaller and there is less overhead, which means more speed, and speed is an important factor in emulation.\n\n@OmniDistortion:\nI started programming when I was about 11 or 12 years old, so there is no real minimum age. But when you have problems trying to understand some of the concepts you should get a language that is good to understand, certainly not BASIC (I started with it as well, but it teaches you bad programming techniques) and probably not C (it allows too many tricks and has lots of pitfalls), more something like Pascal. When you understand the basics of one language it's much easier to learn another one.\n\nSometimes I wonder if there is a gift for programming or not, but I'm not sure...\n\nOmniDistortion\n\nJuly 12th, 2002, 12:14\n\nI think I just might have that gift... I've gotten everywhere on ePSXe and 78% of anything just by reading up what I need to if I ever got stuck or (most the time) by messing around with everything until I get a reaction from the product (I really think this is due to negative/positive reasoning), and how many guests or random people do we see who come in here asking 1 bajillion million questions on how to \"get a BIOS\" eh? :lol:\n\nOriginally posted by M.I.K.e7\n@Metalmurphy:\nBTW, why has it to be C++? I think most plugins are written in C, or am I wrong?\n\nJust wanted to ask the same question...\n\nBadaro\n\nJuly 12th, 2002, 20:53\n\nOriginally posted by Metalmurphy\nYeah I know its more complicated :P What do you mean by object-oriented? Using shared files and stuff like that?\n\nWhy nobody pointed to this thread yet? :)\n\n\n\n[]s Badaro\n\nDemigod\n\nJuly 13th, 2002, 04:59\n\nAs M.I.K.e7 mentioned, the main difference between C and C++ is object-orientation. There are 3 key features to an object-oriented language and these are Data encapsulation, Inheritance, and Polymorphism.\n\nC++ uses classes, which are kind of like a blue print or a prototype. You use the class to create what are known as objects. For example, you can make a class called \"Human\" and define certain functions such as walking(), talking(), and breathing() and data such as weight, height, and birthdate. You then use that class to create objects called Bob, Tom, and Shelley. These objects have the same basic functions defined in the class (walking, talking, breathing) but each holds their own data and differ slightly (e.g. Bob might be a bit taller than Tom). The data for the objects are not shared by the anything else and can only be manipulated by functions in the class. This is known as Data Encapsulation, keeping the object data seperate from the rest of the program. This makes managing data easier, especially for really big programs.\n\nYou can also define a new class based on an existing class. For example, let's say we make a new class called \"Spiderman\" and we base it on the \"Human\" class. The new class will have all the features of the base class but will also have its own functions as well. So let's say we make an object called Peter_Parker from the \"Spiderman\" class (based on \"Human\" class). Peter_Parker has all the functions of the \"Human\" class (walking, talking, breathing) but also has its own special functions (wall_crawl(), web_shoot(), spider_sense() ). We can say that the \"Spiderman\" class is inherited from the \"Human\" class. This is known as Inheritance, inheriting features from another class to make a new class.\n\nWe can also define a function to do different things. For example, let's say John is a graphics artist and his boss tells him to draw a circle. He uses a pencil and draws a circle. Then his boss tells him to draw a rectangle. He takes the same pencil and uses the same techniques (drag the pencil over the canvas) but draws a rectangle this time. Then the boss tells him to draw a triangle and he does the same. With C++ you can do a similar thing. You can call a general function (e.g. Draw() )which can work with other specialized functions to do different things. This is called Polymorphism, using one function to do many different things.\n\nI hope this is helpful to get a grasp of some of the concepts of object-oriented languages. There are lots of other capabilities of C++ (such as inline functions, operator overload, etc.) but the above 3 concepts are the key features of OOP.\n\nDemigod\n\nJuly 13th, 2002, 05:06\n\nOriginally posted by M.I.K.e7\n@Metalmurphy:\nBTW, why has it to be C++? I think most plugins are written in C, or am I wrong?I think epsxe itself is written in C. You don't really need to know C++ for small programs. It's only useful for really big projects (e.g. Windows 2000).\n\nmikeshoup\n\nJuly 13th, 2002, 06:32 Uh\nAs for my personal choice, I tend to do a C/C++ mix. In mJoy, the joystick reading functions are written in a C++ module (with C LINKAGE for compatibility), and the main pad functions are written in a C module. I only use C++ when I feel it would make it easier to program.\n\nBesides, C still has some object oriented properties. Take structs for example. A variable of type struct could be considered an object. Still though, in order to be object oriented a language must have polymorphism of which C does not.\n\nammoQ\n\nJuly 13th, 2002, 07:05\n\npolymorphism in C? it\u012bs called the void pointer.\n\nDemigod\n\nJuly 13th, 2002, 19:47\n\nOriginally posted by mike9010\nUhI'm saying that OOP doesn't make sense for small programs. You can just do it in C and it'd be more simple and efficient. When you have very large programs there are a lot of data to manage and it gets difficult with structured programming. C++ is also easier when developing programs in teams, since the code is independent of the main code (just work on your own part, no data overlap).\n\nMetalmurphy\n\nJuly 15th, 2002, 09:51\n\nThks a lot for the info dudes! I thought that it would have to be in C++, but if C works fine that cool for me! Thks a lot!\n\nKillerShots\n\nJuly 26th, 2002, 19:46\n\nOriginally posted by M.I.K.e7\n\nIn C++ you call the method of that specific object:\ncomplex_number.inc();\n\nI'd just use the \"operator++()\" function and it would come out as:\n\ncomplex_number++;\n\nOriginally posted by M.I.K.e7\n\nC:\ncompare(cn1,cn2);\n\nC++:\ncn1.compare(cn2);\n\nor...use \"object operator|(object x)\"\nso you end up with cn1 | cn2;\n\n...Then again, I expect I would also be corrected. That's what I find so interesting here, there's just so many ways to do the same thing. The above way just lets me visualize things a lot easier, but it does the same thing :) :fart: :)\n\nDragonSoull\n\nJuly 26th, 2002, 21:08\n\n\n\n\"Thinking in C++\"\nIt's the best C++l book i hever found (trying to learn two :)) and it's free :P\n\nAtomicFeline\n\nJuly 26th, 2002, 22:11\n\nOriginally posted by Metalmurphy\nAlso I'm a quick learner and I understand this stuff well! All I need is for you to help me find good C++ tutorials...\n\nLearning your first programming language takes time and patience. Learning a second one is considerably easier. I took Visual Basic two years ago and last summer I taught myself C++ in two months. To be honest, the book that taught me it all was C++ For Dummies. When I took the course the following year, I knew more than the teacher. Two months......\n\npaulsy\n\nJuly 31st, 2002, 04:44\n\ni am using the tutorials at \n\nalso trying to learn c++\n\ndragonsoull wich book r u using from the website u posted\n\nOmniDistortion\n\nAugust 2nd, 2002, 03:51\n\nhey guys its been about a month but I just picked up \"C for dummies\" and I am gonna start with that...\n\nBTW I dont hear much about ASM but I noticed that its especially used for emulation...why is that? And why only that?\n\nZero MH\n\nAugust 2nd, 2002, 03:52\n\nIs ASM short for assembly? If it is then assembly is used to speed up emulation since it is faster than C++.\n\nOmniDistortion\n\nAugust 2nd, 2002, 03:55\n\nso it's just for speed? easier compilation?\n\nM.I.K.e7\n\nAugust 2nd, 2002, 15:16\n\nOriginally posted by OmniDistortion\n{assembly}\nso it's just for speed? easier compilation?\n\nAssembly isn't compiled, it's run through an assembler.\n\nAssembly isn't a high-level language like C or Pascal, but a human-readable for of the machine language that the processor understands, and which is also the end result of a compiler run.\n\nAssembly uses so-called mnemonics (short names) to make the instructions readable, otherwise machine language would be just a bunch of numbers.\n\nHere is an example of a short assembly sequence with the corresponding machine code following behind the semicolon:\n\nmov eax, [esp+4] ; $8B442404\ninc eax ; $40\nret ; $C3\n\nWhat this code does is to take a value from the stack (actually a function acrgument), copy it into the register EAX, where it is increased, and the routine returns that result because EAX is the result register by convention.\nSo basically it's just a simply function that adds 1 to a value you hand it, but it serves well as an example in that case.\n\nThe reason why it is often used in emulation is that you have to deal with processor emulation, and one of the fastest ways is to transform the original operations into instructions your current processor understands.\n\nThe most extreme way of doing this is to actually translate the old code into code for your current processor, a technique I did a few postings about:\n\n\nI guess I caused more disturbance then help now...\n\nZeRo[PmD]\n\nAugust 3rd, 2002, 01:06\n\nit's very hard c++\n\njegHegy\n\nAugust 3rd, 2002, 02:27\n\nalso, really experienced linux programmers say c is much better than c++ (faster, as they say), and they proved it too! ( they left avifile with speed far behind, and avifile was written in c++)\n\nnyaaa\n\nOmniDistortion\n\nAugust 3rd, 2002, 09:19\n\nI read all about Assembly...\n\nBasically its like this: A scale (I included popular microsoft programming languages along with ASM)\nBinary(hard)<------ASM------C++----C#------C----VB----->(easy)English\n\nThe closer you are to binary the more abilities ye shall obtain as well\nMore speed as well as reliability take the cake as well (all in a neat package)\nProblem is, well, the closer you are to machine language or binary the longer and more frustrating programming can be and that is why proggrammers choose to do others (simply for ease and to not lose their minds over stress)\n\nSee? Omni can learn basic programming knowledge and teach it to others! (trust me murphy I am NOT going below C [I found out its easy enough just have to understand very few things and the rest is reference...])\n\nedit: I just installed those 30.2 nvidia drivers so my res. was 640X480 while typing this lol! (it's pissing the bloody hell oughtta me!)\n\nammoQ\n\nAugust 3rd, 2002, 09:39\n\nI think you misplaced C. It's actually faster than anything but assembler; and althought it might be a bit easier to learn than C++, Java or C#, it can be difficult to make programs that are well suited for object-oriented programing, something that hardly exists in C.\n\nOmniDistortion\n\nAugust 3rd, 2002, 09:43\n\n:doh: I just realised how correct you are - some things can be variable making my scale absoslutly incorrect in some ways (mostly on how fast each one is) oh yeah and I would like to mention VB now has OOP which I find very odd (VB.net that is....I dont know what the .net series is though... can someone enlighten me?)\n\nM.I.K.e7\n\nAugust 5th, 2002, 07:53\n\nOriginally posted by OmniDistortion\noh yeah and I would like to mention VB now has OOP which I find very odd (VB.net that is....I dont know what the .net series is though... can someone enlighten me?)\n\n.NET is Microsofts strategy to kill off Java and take over even more parts of the internet.\nPart of the .NET package is a machine independent code (similar to the bytecode for a JVM), which all .NET compilers produce, which at the moment are C#, VC++, and VB.\n\nInterestingly enough, Microsoft actually put up C# and the CLI (Common Language Infrastructure) for standardization ( and  which Sun failed to do with Java/JVM twice.\n\nOmniDistortion\n\nAugust 5th, 2002, 07:58\n\n1: how did they standardize it?\n2: interesting fact: Java was going to be named oak but the dude who created woulda had some trouble with oak soft or something\n:D I dont know why I even bothered adding that in... (I guess I just like adding random facts in)\n\nM.I.K.e7\n\nAugust 5th, 2002, 08:41\n\n1: how did they standardize it?\n\nWhat do you mean by \"how\"?\nIf they have an open documentation at ECMA they should stick to it. Let's see if they do...\nBut it's quite funny that they have open documentation for it, because they certainly don't do that for every stuff.\n\nSun on the other hand don't seem to want to loose control over Java, which is most likely the reason why tried to make it ISO twice but didn't pull it through.\n\n2: interesting\n\nOmniDistortion\n\nAugust 5th, 2002, 09:29\n\nOriginally posted by M.I.K.e7\ninteresting [/B]\n\nYes I knew about the oak tree outside his window...\nI believe the language was made to make two devices comminicate to each other (I dont think it was a TV I think it was some new project they were making... some device that they were creating) james found C frustrating to use while programming for this project so he spent many a night working on his own programming language and thats how Java was devoloped..\n\nNinjaa\n\nAugust 5th, 2002, 13:44\n\nI just have a quick question to add to this debate over whether C or C++ is better. I don't think there is any question that C is faster than C++, and the languages are very similar. But here's the problem.\nOmniDistortion\n\nAugust 5th, 2002, 13:46\n\naww its not as hard (I wouldnt call it downgrading your thoughts)\nI dont believe it has Object-oriented programming or anything so you would pick it up in no time!\n\nM.I.K.e7\n\nAugust 5th, 2002, 14:12\n\nOriginally posted by NinjaNot too problematic I guess (unless you are really in need of the STL all the time, because you won't have it in ANSI C).\n\nYou only have to be clear that you don't have classes, inheritence, and all that.\nInstead of methods in classes you have global functions. What data you used to pack in classes you can pack in structures instead and still access it with the same syntax.\n\nAfter all C++ contains C, so it also depends on how much OOP-centric you programmed C++. When you never had global functions (apart from main() that is) and always had lots and lots of inheritance (ie. your C++ programs look a bit like Java) then you'll have a harder time, but otherwise it shouldn't be too complicated.\n\nOne thing you have to get used to is that there is no \"new\" and \"destroy\", you'll have to use \"malloc()\" and \"free()\" and have to be very careful to allocate the right amount of memory or you will get segmentation faults.\n\nOmniDistortion\n\nAugust 5th, 2002, 14:16\n\nM.I.K.e7: one question: do you develop anything, such as create any plugins or code any emulators?\n\nM.I.K.e7\n\nAugust 5th, 2002, 14:29\n\nAt the moment I don't do private development (only research in dynamic recompilation as shown in anyother thread which I think I have mentioned here before), and at work I'm currently doing reading into yet another development environment (PowerBuilder this times), so I'm not doing that much practical work there either at the moment.\n\nI know too less about graphics and sound programming to do a complete emulator or a plugin (especially since I don't do any private Windows development), but I'll continue my research, and maybe I can pack some stuff in a longish article to demystify dynamic recompilation for developers who seek a way to speed up their CPU emulation.\n\nOmniDistortion\n\nAugust 5th, 2002, 14:32\n\nah so thats why you arent devoloping anything...\nwell... I program..um...some html...and tiny bit of C and Java so I am way up there with you M.I.K.e7!\n(\"whatever omni\")\n\nNinjaa\n\nAugust 5th, 2002, 14:37\n\nYeah, that's about what I thought Mike. Thanks for the reply. I think I will just stick with C++ until there comes a time that I really need some performance tweaks.\n\nammoQ\n\nAugust 5th, 2002, 14:38\n\nDowngrading from C++ to C can be hard when you are used to use some constructs in C++ and don\u012bt have them in C, so you have to figure out how it can be done in C. I would not underestimate the time necessary to find your way into C.\n\nM.I.K.e7\n\nAugust 5th, 2002, 15:47\n\nOriginally posted by OmniDistortion\nah so thats why you arent devoloping anything...\n\nThe reasons are\nat work: I simply don't have a project to work on yet\nat home: I'm so damn lazy... :(\n\nwell... I program..um...some html...\n\nI don't normally count that as programming, otherwise I programmed LaTeX as well....\nBut if you want to count that:\n\n\n\nNothing exceptional, I just want to provide information...\n\nand tiny bit of C and Java so I am way up there with you M.I.K.e7!\n\nWell, I programmed in BASIC (ST-Basic, OmikronBasic, BBC BASIC, VBS), TurboPascal, C, Modula-2, Assembly (68K, ARM, MIPS, x86), Scheme, Miranda, Prolog, Clarion, PL/SQL, and probably some other langauges I forgot, so learning new languages is to me more like trying not to mix up all the languages I know...\n\nammoQ\n\nAugust 6th, 2002, 01:51\n\nIt's a shame that you are so lazy, M.I.K.e7! Someone with your skills should do something good for mankind, like writing a better GUI for Linux! ;)\n\nM.I.K.e7\n\nAugust 6th, 2002, 07:35\n\nOriginally posted by ammoQ\nIt's a shame that you are so lazy, M.I.K.e7!\n\nTell me about it...\nBut after a 40 hour week and not having holidays for about 15 months (that happens when you are fired before you can take holidays and have to start at a new firm) I'm not really in the mood of doing anything when I come home. But at the moment my 7 year old niece is here for a visit, so the time per day I might have for myself basically shrinks down to about 2 hours per day...\n\nMaybe I think of doing something productive after I had a few weeks off...\n\nSomeone with your skills should do something good for mankind,\n\nHey, but I'm a master of evil ;)\n\nlike writing a better GUI for Linux! ;)\n\nOf no... Then I could start writing a decent kernel as well...\n\nDoubleD_99\n\nAugust 17th, 2002, 23:12\n\nDo C over C++ believe me! I first started in C++ and soon found out that the only real good part of C++ is that it is more organised for bigger program use. Everything else that you can think of usually is better in C. Like most of the development kits to make video games for GB, N64, or PSX is in C only and C is faster for making programs like emulators, games, plugins for ePSXe (Above example) and more. Also C++ has more of a header (usually) so the programs are bigger is size. There are a lot more examples, but for now i rate C:thumbup:\n\nNinjaa\n\nAugust 26th, 2002, 20:11\n\nTo program for windows you need some C++ experience though, right? Isn't the Windows SDK based around classes?\n\nammoQ\n\nAugust 27th, 2002, 00:02\n\nNinja, AFAIK the Windows API is basically a C-API; you get the classes from the MFC.\n\nNinjaa\n\nAugust 27th, 2002, 12:21\n\nOk, I guess I misunderstood.\n\nchillypacman\n\nSeptember 5th, 2002, 08:26\n\nI dont think they used c for programming win 2000 or any of the other windows most likely was some big time programming language which no one except microsoft knows of\n\nOmniDistortion\n\nSeptember 5th, 2002, 08:29\n\nI am pretty sure they would have used either C++ or ASM... (they cant make much a market out of a programming language that is easier to even make OSs easier... they would use it for marketing as well.... either that or we would have at least heard of it)\n\nammoQ\n\nSeptember 5th, 2002, 09:59\n\nI'm pretty sure nearly all of windows is written in C, Assembler and C++. Some small parts of the new .net-Server are written in C#. What's the point in using a big time programming language nobody knows of? They also have the need to hire programmers that work for them or to contract other companies to deliver parts for the whole Windows-Package. Doesn't make sense to use a language nobody knows."}
{"text": "Global Navigation\n\n2.3 Computer Programming for the Humanities\n\nBy Mark Choate\n\nLast modified: 2007-08-21 15:27:42\n\nJournalists, professors, authors and creative workers are increasingly required to work in environments that call for greater technical aptitude. Computer programming skills are required to make creative use of the full range of communication options available in our web-enabled world. To that end, this course wil teach students basic object-oriented programming skills, with a focus on web-related development topics.\n\nThroughout the course, key concepts will be introduced that will help students think critically about technical issues with respect to communication. Examples include XML and the Document Object Model (DOM), the separation of content from design, localization, and version control. The course will also cover project management topics and introduce agile programming methodologies such as pair programming, where two people work side-by-side and share the task of writing code. No programming experience is required, but students should be comfortable with computer terminology and the world wide web.\n\nComputer programming is a creative activity. It requires a degree of discipline and the use of certain techniques that are often unfamiliar to humanities students. How do you use the left side of your brain in service of the right side of your brain?\n\nThis will be an intense course. We will use \"pair programming\" in class, where two students will be paired to develop software together. This is a proven technique used by highly experienced developers and one that will be helpful to learning students. Students will rotate, with one student at the terminal typing in code and the second student (or possibly third) watching and discussing the program. Each week there will be a lecture and an in-class project. Students will also be working on a larger project (as a team or 2-3 programmers) to develop a wiki (you can decide what other features to add)."}
{"text": "Visual C# .NET 2003: Learning to Program\n\nwith Jesse Liberty\n\nCourse Description: This course begins with an overview of C# and the .NET platform. You will learn the fundamentals of the C# language, including how to set up the application development environment, and how to write your first simple C# applications. You will learn about variables and constants, expressions and statements, operators and namespaces, and how to create classes and instantiate objects. You will be introduced to database development with ADO.NET and building ASP.NET applications. You'll use streams to read and write data both to your local machine and across the network and the Internet. Finally, you'll explore interoperability with legacy COM objects such as ActiveX controls and COM components."}
{"text": "This unique book uses multimedia applications to motivate introductory computer science majors or non-majors. The book's hands-on approach shows how programs can be used to build multimedia computer science applications that include sound, graphics, music, pictures, and movies. The students lea..."}
{"text": "Redirected from BCPLBCPL is a computer programming language; its name is short for Basic CPL; CPL stands for Combined Programming Language. CPL was a joint development of Cambridge and London Universities. CPL was a large language which proved difficult to implement using the compiler techniques of the early 1960s. Consequently the project was not successful. However a cut down version of the language, minus the types and some of the more complex features, was designed by Martin Richards[?] whilst he was at the University of Cambridge in 1966. He named it BCPL. The first compiler implementation was written while he was visiting MIT in the spring of 1967. The language was described in a paper presented to the 1969 Spring Joint Computer Conference.\n\nThe language is lean, powerful, and portable. It proved possible to write small and simple compilers for it and was therefore a popular choice for bootstrapping a system. Reputedly some compilers could be run in 16 kilobytes. Several operating systems were written partially or wholly in BCPL (for example, Tripos or Amiga Kickstart). A major cause of its portability lay in the form of the compiler. It was split into two parts. The front end parsed the source and generated O-Code for a virtual machine; the backend took the O-code and translated it into the code for the target machine. Soon afterwards this became fairly common practice, cf. Pascal or Java, but the Richards BCPL compiler was the first to define a virtual machine for this purpose.\n\nThe language is unusual in having only one data type: a word (a fixed number of bits, usually chosen to align with the architecture's machine word). The interpretation of any value was determined by the operators used to process the values (so, + added two values together treating them as integers; ! indirected through a value effectively treating it as a pointer). In order for this to work, the implementation provided no type checking[?].\n\nThe philosophy of BCPL can summarised by quoting from the book (BCPL, the language and its compiler):\n\nThe philosophy of BCPL is not one of the tyrant who thinks he knows best and lays down the law on what is and what is not allowed; rather, BCPL acts more as a servant offering his services to the best of his ability without complaint, even when confronted with apparent nonsense. The programmer is always assumed to know what he is doing and is not hemmed in by petty restrictions."}
{"text": "Computer versions of APL (A\nProgramming Language) evolved from the algorithmic notation of K. E. Iverson.\nAPL was implemented as an interactive language by Iverson, Falkof and others at\nIBM as APL 360. APL is similar to algebraic notation, but interprets\nexpressions right to left. APL uses special symbols. The Text\nKeyboardused for APL in MYSYS and MYNET. Some comparison of APL with\nother traditional computer languages is given in APL is not A Programming\nLanguage.Also in Iverson _ APL + J\n\nFour APL*PLUS interpreters were available for\nsmall computers at UNB. APL/PC, originally for 8088 and\nsimilar machines, APLII with the same features as APL2\nby IBM requires a 80386 or higher. APLIII\nsimilar to APLII but for Windows.APL+Windows. These have now been discontinued, but various versions are\navailable commercially. A number of APL workspaces are included in NUNET. See\nthe Tools page.\n\nConsult texts such as 'APL IS EASY', 'APL an\ninteractive approach' by GILMAN and ROSE, for the basics of APL programming.\nSee the APL*PLUS documentation for a complete listing of functions, features\nand system supplied workspaces.\n\nWhen not in a defined function (fn) you are in APLie. When 'Enter'\nis keyed in APLie the line marked by the cursor on\nthe computer display is interpreted. This is referred to as Entering. If the\nline follows APL syntax rules, it is executed and the result displayed,\notherwise an error message describes why the interpretation failed. APL runs in\na session manager and the default is APLie.\n\nFunctions behave like verbs, variables and\nconstants like nouns, etc. They can be combined as in math. E.g. 3+4 is a\nsequence of the constant 3, primitive + and constant 4. Enter 3+4 on one line,\nthe result 7 will show on the next.\n\nThis works with a+b,\nwhere a and b are algebraic variable names. Values\nmust be assigned to a and b for APL to interpret the a+b expression, otherwise a 'value error' will result. a3 and b4 assigns values. Interpreting a+b\nwill then produce the same result as 3+4. This is a dyadic or two variable use\nof the primitive +. The algebraic y=a+b means the\nsame as ya+b in APL. Any expression written in\ncorrect APL syntax and where the required information is complete will be\nexecuted when entered. Expressions can be up to 255 characters long. APL does\nnot have precedence rules like algebra and relies on the right to left sequence\nand parentheses for the order of execution."}
{"text": "The JR Programming Language\n\nJR is a language for concurrent programming. It is an imperative language that provides explicit mechanisms for concurrency, communication, and synchronization. JR is an extension of the Java programming language with additional concurrency mechanisms based on those in the SR (Synchronizing Resources) programming language. It is suitable for writing programs for both shared- and distributed-memory applications and machines. The JR implementation executes on UNIX-based systems (Linux, Mac OS X, and Solaris) and Windows-based systems. It is available free from the JR webpage. The JR Programming Language: Concurrent Programming in an Extended Java, an advanced-level text book, describes the JR programming language and illustrates how it can be used to write concurrent programs for a variety of applications. This text presents numerous small and large example programs. The source code for all programming examples and the given parts of all programming exercises are available on the JR webpage. Dr. Ronald A. Olsson and Dr. Aaron W. Keen, the authors of this text, are the designers and implementors of JR. The JR Programming Language: Concurrent Programming in an Extended Java is designed for upper-level undergraduate and graduate-level students in computer science. This book is also suitable for a professional audience, composed of researchers and practitioners in industry.\n\nDownload links:"}
{"text": "Overview\n\nMain description\n\nC for Engineers and Scientists is a complete and authoritative introduction to computer programming in C, with introductions to object-oriented programming in C++, and graphical plotting and numerical computing in C/C++ interpreter Ch\u00ae and MATLAB\u00ae for applications in engineering and science. This book is designed to teach students how to solve engineering and science problems using C. It teaches beginners with no previous programming experience the underlying working principles of scientific computing and a disciplined approach for software development. All the major features of C89 and C99 are presented with numerous engineering application examples derived from production code. The book reveals the coding techniques used by the best C programmers and shows how experts solve problems in C. It is also an invaluable resource and reference book for seasoned programmers.\n\nC for Engineers and Scientists focuses on systematic software design approach in C for applications in engineering and science following the C99, the latest standard developed by the ANSI and ISO C Standard Committees which resolved many deficiencies of C89 for applications in engineering and science.\n\nThe book includes a companion CD which contains the C/C++ interpreter Ch for use as an instructional tool as well as Visual C++ and gcc/g++ compilers to help teaching and learning of C and C++. Ch presents a pedagogically effective user-friendly interactive computing environment for the simplest possible teaching/learning computer programming in C so that the students can focus on improving their program design and problem solving skills."}
{"text": "Android\u2122 Overview Training Course\n\nCourse SummaryThe goal of Marakana's Android Overview training is to give you a solid understanding of the entire Android operating system. It gives you the big picture of how Android is put together, the SDK tools, security and other considerations. The course also introduces what it takes to architect Android apps and goes into testing and debugging tools available and best practicesThe goal of this module is to give you an overview of various system services that Android framework offers to developers. We'll explore what services are there, and how to use them. Out of 60+ services, we'll pick a handful of common ones and look at their usage. Primary focus is to understand the patters that are common for all of them so that you can deduct usage of the other services simply by following the documentation.\n\nAbout Your Instructor\n\nMarko Gargenta has been programming in Java even before it was named Java. His background is in very large enterprise web application development but he's also had a fair-share of UI experience having rewritten the entire AWT into lightweight components before Java Swing ever came out. He's a big believer in agile development processes, being a certified ScrumMaster himself as well as contributor to eXtreme Programming methodology.\n\nMarko is a professional consultant and instructor. He's taught teams of organizations such as Sony-Ericsson, Ericsson Canada, MetroPCS, Experian, DoJ, DoD, and many others. He's published a PHP/MySQL by Example book with Prentice Hall (world's largest tech publisher) as well as created many of Marakana's courseware, including the Android series.\n\nAndroid Meetup Group Organized by Marakana\n\nMarakana team organizes and runs the San Francisco Android Users' Group - an interactive group of Android developers. In our monthly meetings, we discuss Android\n\nAverage Student Rating for Android\u2122 Overview\n\nStudent Testimonials"}
{"text": "PHP Tutorial\n\nPHP Hello Video Tutorial for Beginners ThisView Rating\n\nVideo Tutorial: Installing WAMP Server In this video tutorial I will explain you how to install WAMP Server and how you can download & installing WAMP Server on your windows system. You can use the WAMP server for developing and testing database driven applications in PHP programming language.View Rating\n\nWhat a PHP Programmer Can Do The PHP programming code is a scripting language that many different websites have been using in recent years. This has caused the demand for PHP programmers to be very high all around the world. View Rating\n\nIt?s Easy to See Why You Should Learn PHP The code of a website is important. It is used to get the site to run properly. This includes ensuring that all of the individual modules can work together. PHP is one such type of coding system that can be used. It can be very useful and easy for anyone to learn how PHP can work. View Rating\n\nGreat Uses for PHP Language The PHP scripting language is incredibly useful. It is a free open source language that can work in any way that a person wants it to without having to pay anything to get it to work or be edited.View Rating\n\nPHP and MySQL Work Well Together PHP and MySQL are open source programs that are very different from each other. They can both be used for all sorts of online functions. They are equally important for anyone to use.View Rating\n\nPHP Is Great for Website Creation PHP is one of the most commonly used and understood types of website creation scripts in the world. It is being used by all sorts of different computers and is being loaded onto many servers.View Rating"}
{"text": "Kurt Jaegers\n\nKurt Jaegers is an Oracle Database Administrator and Windows Network Administrator, as well as a long-time hobbyist game developer. He has built games for everything from the Commodore 64 to the Xbox 360. He is the owner of xnaresources.com, and the author of XNA 4.0 Game Development by Example: Beginner's Guide (C# edition) and XNA 4.0 Game Development by Example: Beginner's Guide \u2013 Visual Basic Edition, both of which were published by Packt Publishing Mar 2013\n\nErrata Type: Code | Page No.: 106\n\nThe last line (other than the line with a single { ) should read:\n\nfor (short x = 0; x < width - 1; x++)\n\n(replacing \"height\" in the existing text with \"width\"). The code works because we are dealing with a square, so height and width are the same value, but if the reader uses a non-square heightmap this would introduce an error.\n\nSample chapters\n\nFrequently bought together\n\nBuy both these recommended eBooks together and get 50% off the total price\n\nWhat you will learn from this book\n\nThe core concepts of 3D graphics and how XNA describes the 3D world\n\nBuild a 3D maze that the player can explore in search of the mysterious spinning cube\n\nCreate 3D terrain based on a 2D height map image, adding texturing and lighting to the terrain's surface\n\nLoad, display and animate 3D models\n\nBuild a button-based user interface overlay for your 3D game\n\nCreate a billboard particle system to produce dynamic explosions\n\nBuild a skybox to give your worlds full 3D backgrounds\n\nDetect collisions between 3D objects and have your game react accordingly\n\nIn Detail\n\nMove beyond the world of flat 2D-based game development and discover how to create your own exciting 3D games with Microsoft XNA 4.0. Create a 3D maze, fire shells at enemy tanks, and drive a rover on the surface of Mars while being attacked by alien saucers.\n\n\"XNA 4 3D Game Development by Example: Beginner's Guide\" takes you step-by-step through the creation of three different 3D video games with Microsoft XNA 4.0. Learn by doing as you explore the worlds of 3D graphics and game design.\n\nThis book takes a step-by-step approach to building 3D games with Microsoft XNA, describing each section of code in depth and explaining the topics and concepts covered in detail. From the basics of a 3D camera system to an introduction to writing DirectX shader code, the games in this book cover a wide variety of both 3D graphics and game design topics. Generate random mazes, load and animate 3D models, create particle-based explosions, and combine 2D and 3D techniques to build a user interface.\n\n\"XNA 4 3D Game Development by Example: Beginner's Guide\" will give you the knowledge to bring your own 3D game creations to life.\n\nApproach diagrammed and covered in detail. Each game begins with a concept description and concludes with suggestions for expanding on the finished game.\n\nWho this book is for\n\nThis book is intended for readers who want to create 3D games using the XNA Framework. Basic knowledge of the C# programming language and 2D XNA concepts are helpful, but not required."}
{"text": "LoI\nReference Manual\nVersion 0.12\n\nG. M\u00fcller\n\nJuly 6, 1999\n\nThis document presents a coordination language called LoI (\"Language of Interaction \").\nIt is based on the notion that in a distributed application interactions between the\ncomponents are better separated from the components itself to enhance the modularity\nand extensibility of the application. This leads to a paradigm called\ninteraction-oriented programming. LoI is particularly designed to support this paradigm.\n\nIts core is mainly based on Java (without objects). Addionally, it provides a\npolymorphic type system, high-order functions, support for concurrent and real-time\nprogramming, and powerful constructs for communication (e.g. group communication).\n\nIt is assumed, that the reader is acquainted with a (procedural) programming language.\nEven better is some knowledge about concurrent programming. Additionally, the type\nsystem might be more comprehensible for someone who already mastered polymorphic typing\nin some other (functional) language.\n\nThis is just an HTML version of the reference manual of LoI. The\noriginal version also explains the principles of\ninteraction-oriented programming and gives a (rather short) introduction\nto LoI."}
{"text": "Archives\n\nMeta\n\nEZGUI and the language of simplicity !\n\nComputer programming is never easy. There are many challenges we face as programmers in trying to develop software quickly and efficiently. So why is EZGUI professional (current version is 5.0) so different than other methods of coding applications ?\n\nEZGUI was designed with the idea of the \"language of simplicity\" .\n\nWhat does that mean ? While I strongly believe in the value of a RAD environment, when it really comes down to it, building quality software depends upon coding. No RAD environment can replace good old code. Code is the glue the holds are application together. Why ?\n\nProgrammers can easily get into a mindset of viewing software from a technical point of view. Is the RAD environment they use easy to use ? How can I write as little code as possible ? But no matter what we as programmers have in mind as far as making life easier for ourselves, software is a tool used by our end users. It is designed to do tasks. Our end users think in terms of tasks, not in terms of technology. Does the software do the tasks the end user requires ?\n\nI wrote custom software for local businesses for a number of years and one thing I learned was that I needed to think like my customers, rather than a programmer. One way I did this was by being task oriented. I viewed a software project simply as a set of tasks my customer needed to handle. This effected how I wrote code, because I had to break down the end users higher level tasks into smaller user interface tasks so I could build them exactly what they wanted. The ability to build quality reusable libraries which were task oriented, helped me write software faster and better because I could more easily customize it to exactly the way the wanted it.\n\nThe EZGUI runtime engine was designed based on this concept of being \"task oriented\" and \"customization oriented\". When I used Visual Basic, I loved how easy it was to design an application. The RAD environment of Visual Basic was hard to beat. Where I had problems was when something I wanted to do was slightly out of the ordinary and it went beyond the VB \"blackbox\" of objects. Other VB programmers must have felt a similiar feeling since it was not uncommon to see VB'ers add Windows API code to their applications so they could go beyond the VB \"blackbox\".\n\nWhen developing EZGUI, I didn't simply just start creating wrappers for the Windows API nor did I concentrate on the Visual Designer thinking the RAD environment would solve all the problems. I concentrated on tasks. Yes, I viewed EZGUI as a \"task library\". It didn't matter if a task was easy to impliment or hard to impliment. I simply asked myself, what if a programmer wanted to do \"this or that\" and I then proceeded to build a solution which allowed customization if possible, but was easy to use. This is why EZGUI became more than just a library. It became an engine, a GUI engine.\n\nYou see, some tasks may be simple enough so that you can write a simple function which does the task and is then finished. But the more I worked on EZGUI, the more I found that some tasks required a running engine which continued to work even after the initial request for the task. Let's look at one example which well demonstrates this.\n\nOne day I was thinking about how does one build applications which are not rectangular windows, but are odded shaped. The first step was to find a way to make a window non-rectangular. This required a complex window region, but how do you generate that region ? Well, the shape of the window would be based on the background image, so it made sense to write a routine which could convert a Bitmap image into a complex window region and then to be able to pass that region to a window (form). But more is required here. Once you have your window region, you need to be able to draw the bitmap you used as the background, which means you have to be able to process a dialogs WM_PAINT routine. Now you needed an engine to handle that or you would have to code two different tasks, one to create the window region and the other to paint the form background. But this is one task, I decided, not two.\n\nIn the code above, I load a Bitmap and then with one command EZ_ShapeFormToPicture I tell EZGUI to store a bitmap for the next form created, convert it into a window region and when the form is created set the window region and then process the forms WM_PAINT routine and draw that bitmap to the forms background. Yes, two tasks became one.\n\nIt was this concept of \"tasks\" which molds how EZGUI was designed. This is where EZGUI has the advantage. It was designed to solve problems, to handle tasks and to allow customization of many of those tasks. This is why I has to be a GUI engine rather than simply a set of API wrappers. Some tasks are very complex and let's look at one. If you create applications with a listview or treeview control, one of the more common tasks you may have to deal with is how to add the ability to drag and drop items. At first glance, you may browse the API docs looking for a single window message or function that does this, but there is none. There are a number of API's which need to be called and you have to subclass the controls to process the mouse movement. Actually it is quite complex. EZGUI provides a number of commands to support its drag and drop engine for the listview and treeview controls and it is about 600 lines of code. But this is not something which you can just one or two API's and then it is all done. It is very complex and requires an internal engine to track the drag icon and to do internal message processing. Now where things get complex is if you need to customize the drag and drop. The listview and treeview are two different controls, so how do you build an engine which treats them as equals (one task, but for two different control types). Also what is you want to drag and itme, not within the control to another control or even to another top level window ? Now what happens if you want to customize the drag icon ? Now what happens if the drag icon goes to a position where you need to change how the icon looks (ie. outside of the control) ? What happens if you want to custom draw the icon dynamically ?\n\nNow to make things even more complex, I quickly realized that any drag and drop code for these controls is useless if you don't impliment an autoscrolling engine. If the dragged item reaches the top or bottom of the control, then you need to automatically make the control scroll to bring more items into view. Can you see how by viewing this as a task, it can get very complex quickly. In this case I had to impliment something which is very complex and hard to do and it required any engine to do this. So how hard is it to code a drag and drop icon in EZGUI ? Check this out for a treeview control:\n\nThis impliments the complete drag and drop icon task. Now in the %EZ_DragItemDrop event you decied what to do once you know where the item was dropped and add the code for that. But this code impliments the actual drag icon, mouse tracking, icon drawing and autoscrolling. A complex task made easy. EZGUI even generates Events for you so you know what to start a drag operation and when it is finished.\n\nAnother way EZGUI makes coding easier is the way it handles parameters for many commands. EZGUI has autoscaling built in since it uses its own coordinate system. Forms and controls use character coordinates (floating point so accurate down to the pixel) which it can scale. This means all the coordinates of your forms and controls are scalable. Another way EZGUI simplifies things is to avoid the use of API handles as much as possible. It does use API handles for treeview items and menus, but many other UI elements do not use handles at all. For example forms are given names and there is no need to store a forms handle. This makes coding a lot easier. Common resources like colors (brush) and fonts also don't require a handle. EZGUI builds internal tables and uses indexes for colors and fonts. This allows you to easily reference a color or font without having to use a global variable with a handle in it. EZGUI allows you to free a color or font, but if you don't it cleans up when your app terminates.\n\nEZGUI also uses simple, easy to remember, property strings rather than API constants (where you OR bits) in many commands. It makes coding easier. For example, the EZ_DefFont command can create a font and does not need any complex bit flags or API constant. For example consider these examples:\n\nEZ_DefFont 9, \"Arial\", 12, \"BVUIQ\"\n\nThis defines font #9 (an index) to Arial with a size of 12 points and which is Bold (B), Variable Width (V), Underlined (U), Italics (I) and Letter Quality (Q). EZGUI uses this simple single character type of property strings as much as possible. Also by each property character usually being the first letter of the propety name (ie. B for Bold) it makes it easy to remember, so you don't have to read the help file as often to remember properties.\n\nYou see, while you may be able to quickly lay out a user interface in a visual designer, what really matters is making that UI do something useful. This is where EZGUI's runtime engine makes the difference, both with its internal engines and its easy to use command set. This is the \"language of simplicity\" ! I find it interesting when I see Powerbasic programmers struggling to accomplish some task (on the PB forums) and then see EZGUI users say something like \"that would be so simple with EZGUI !\".\n\nEZGUI is a GUI engine, not a visual designer, but guess what ? It comes with its own visual designer, so you get a RAD tool also. You get the best of both worlds. And even if the EZGUI designer is a little different than what you are used to and maybe you miss your old Visual Basic environment, it's when you start coding that you realize the power of the tool you have. Unlike Visual Basic where customization was difficult, EZGUI provides so many high level and low level tools for customization that you won't really miss that old RAD tool of yours. The power of EZGUI is the GUI engine !\n\nEZGUI is the only GUI engine or GUI framework for use with PowerBasic."}
{"text": "There are about as many different programming languages available to computer users as there are users to take advantage of the programs written in these languages. Some of the languages are more recognizable than others, plus the programs that use them seem to be simpler, at least to some users, to navigate. Therefore, it is not unusual to hear of users finding programs with specific programming languages that they like and sticking with them.\n\nUnfortunately, not all programming languages lend themselves to every aspect of computer usage. For example, some software and hardware may actually run better because of a different programming language.\n\nOne programming language may actually make it easier for the user to access the Internet. For those who are involved in web design, this can be an asset, as it would give more people the chance to see their work. However, again, because of fear that the program using a different programming language won't work as well as the one with which a user is familiar, there may be a reluctance to change.\n\nFor this reason, some programming companies are actually creating websites or using other forms of communication to introduce their programming language to users and educate them. These companies are aware of the reluctance of users to move away from their comfortable programs that use PHP scripting or other programming languages, but they want them to have the benefits that other programming languages can offer.\n\nThese companies want others to learn of the benefits that they can achieve from using different programs that were written in lesser-known or even brand new programming languages. To this end, they provide ways for users to learn about the new programming languages, in the hopes they will decide to move out of their \"comfort zone\" and give theirs a try.\n\nThose Matrix movies were cool and all, not to mention the fight scenes and futuristic war settings kicked some serious tail. But just remember the fact about those movies, the one true realization of the \"Matrix\". It's as simple as the popular screensaver we all have seen and for which the movies are known. The familiar green lines of 'code' endlessly splitting and forming like technical wallpaper on a cyberspace wall.\n\nThose films are all about coding\u2013understanding programming language, or to be more specific, computer language.\n\nWould you believe computers can 'talk'? Makes the \"Matrix\" that much more interesting now, doesn't it?\n\nIt's that computer language that allows your desktop or laptop to successful run programs, applications, accessories, games, utilities, processes, you name it. Everything. From the moment you turn your computer on, it's communicating with itself to run the operating system, test the memory, open up start-up applications, etc etc. Generally, a 'compiler' and 'linker' inside your system is used by a computer to in essence translate the instructions latent in any program. So it can be understood that even programs can 'talk'. Yes, it's true. What the computer does then is have the instructions from any given program translated to a 'machine code' that the operating system can then run right on the desktop. The final product of an engineered electrical conversation, much like how Neo would move around the Matrix and manipulate the Coding to suit his fancy. Basically the same thing.\n\nIf you understand computer language well enough, the fact is you can actually create these 'worlds' people would see in games for the PC, or Playstation and Wii and XBOX consoles, by simply inserting lines of code similar to what you'd see in \"The Matrix\". (Only if you look closely, the \"Matrix\" code is basically an alien language! But that's beside the point.)\n\nYou can then finally say the wonderful line everyone loves, knowing computer language\u2026. THERE IS NO SPOON.\n\nLearning a variety of programming languages is essential if you want to master programming for various applications, but it can be difficult to determine where to begin. There are so many different languages that picking the best one with which to start can be integral in easily learning subsequent languages.\n\nC is arguably the best programming language to learn first. Mastering this language will not only teach you the basics of programming concepts, but it is a powerful language that is still widely used in a variety of platforms.\n\nLearning to program in C starts you at the beginning and teaches you various concepts such as polymorphism, inheritance, classes and other programming tenets that are carried throughout other languages. C is also the basic level of Java. Java's syntax and concepts stem from C, so mastering it will facilitate learning Java as well as other languages.\n\nC is still widely used in applications such as operating systems, games, and myriad other software applications. The fact that it is still a current language makes learning it a marketable skill. There is also little evidence to support this language's disuse in the near future.\n\nConsidered a mid-level language, C combines the best of low and high level languages into one very powerful programming language. It is also block-structured. This means that code is written in succinct and separate blocks that are unconnected. This makes debugging easy and makes understanding the code's functionality more simple. The block structure also makes testing the code much easier as you can quickly find where you might have gone wrong.\n\nWanting to learn a programming language is a daunting task, but by starting with C you'll be learning a great foundation on which to build your understanding of other languages. This powerful language is the best to learn the fundamentals of programming and will allow you to more easily master other languages.\n\nIf you want to educate yourself about computer languages, you will want to know more about a language commonly known as PHP. Knowing the PHP code can help you understand more about web page design and the history of web page evolution.\n\nPHP is used in developing web pages and was first invented by Rasmus Lerdorf in 1995. It continues to evolve and is a free software. In fact, the letters PHP first referred to personal home page. The invention of the language came about because Lerdorf wanted to be able to maintain his homepage, so he invented Perl scripts, which were tools that would allow him to accomplish certain tasks. He wanted to be able to post his resume and he was curious about how much traffic he was getting on his page.\n\nOn June 8, 1995, Lerdorf made his language public. He gathered a team of professionals who helped him improve his code and it was then released and called PHP/FI 2 at the end of 1997. Following that, two more developers took the language and enhanced it even further. They called their version PHP 3 and created a company to market it. Their company was called Zend Technologies and was based out of Israel.\n\nThe next significant change came about around the year 2000. In that year, on May 22 PHP 4 hit the market and has changed in small ways until 2008, when the version was called 4.4.9. There is also a version of PHP which is called PHP 5, and this was made available during 2004. PHP 5 had a lot of new features and found many admirers.\nIf you are looking to use PHP, it is helpful to note that it is available on a 32-bit operating system as well as a 64-bit operating system and is available on Microsoft Windows, where it is found with a 32-bit operating system.\n\nOut of all technology and electronics, scanning probably has been the most underrated next to faxing. Most of the machines are huge, like printers. And they're not terribly portable because of the size. But can you imagine how easy it would be to do research at a library if you had a portable scanner to copy every single piece of information you needed for your dissertation at Harvard University about the study of the centuries-old dead language known as Sanskrit?\n\nExtremely easy. And also a reality.\n\nEnter: the Fujitsu ScanSnap S1100. A device touted to be one of the smallest scanners known to man, and so small that you can actually carry it in your backpack or even purse. And even better, it doesn't sacrifice quality or efficiency. Weighing only slightly over 12 ounces and sporting a sleek, thin look, the ScanSnap measures up with its heavy ancestors well, making it a Snap to Scan your Documents! It's so powerful that this writer absolutely HAD to capitalize those words.\n\nIf you have a form of Bluetooth technology, you can simply scan the materials you need and instantly transfer them into your network wherever your desktop or even laptop are located. Undoubtedly astonishing features! Trips to the library have been optimized. Any form of research has been now tweaked for efficiency at the highest level. And it's all because of the Fujitsu ScanSnap S1100.\n\nIt's currently not available to the public; but it will be featured at the Consumer Electronics Show of 2011, and the word is out that it will wow everyone. Because in this day and age, efficiency and convenience is the name of the game. Scanning on the Go is part of that game for big business. Again, with the capital letters! It's THAT important. Don't forget it: the Fujitsu ScanSnap S1100."}
{"text": "Computer Programming\nArticles\n\nThis page features blog posts about\ncomputer programming. Can't find what you're looking for? Let your favorite tutor know that the WyzAnt community could benefit from a blog post about\ncomputer programming!\n\nLearn as much Math as possible - everything consists-of or is composed-of Math. And, when you say \"When will we ever use Math?\" the actual answer turns out to be, \"You use Math in everything, everywhere, all of the time!\"\n\nMost students have had a rough time with Math - not because they are stupid but because their teacher didn't figure out how they learn best individually - everyone learns differently - even the students who seem smart figered out how to work-around the teachers and of course they never admit that they are also struggling and they don't share...\n\nWhen using C++ for object-oriented programming, there are some basic concepts and best practices that should be followed for good software engineering. First is the use of public and private in class definitions. Most programmers moving from C to C++ are accustomed to using structs, where all fields are \"public\" for others to access; in C++, all fields in a class are \"private\" by default instead. There is a good reason for this: everything in a class should be private unless otherwise necessary. If there is some data that you wish to \"expose\", you are best off using getter/setter methods...\n\nI've tutored students throughout the DC metropolitan area in web programming (in HTML, XML, PHP), database development (in SQL and MS Access) and statistical analysis, mainly using SPSS (Statistical Package for Social Sciences). I noticed that unlike other technologies, SPSS is often introduced to students at the tail end of the undergraduate and graduate school experience. So, they are often pressed to learn the system and conduct professional research analyses in a short amount of time. To help WyzAnt students, here are a few good online resources that explain how SPSS works:\n\nWhy would failure ever be a good thing? Well, in computer programming, failure can mean that you have done a good job testing your code and you have found a bug. Finding a bug during testing means that you can fix your bug before you submit your project or assignment to your boss or your teacher. In the process of fixing the bug, you might realize how to improve other parts of the code as well. Without thorough testing, with a possible failure or two along the way, you cannot be confident that your code will do what it is supposed to do.\n\nA struct is a datatype from the C programming language that encapsulates a number of different datatypes into a single object. This can be used to easily handle a set of values as a single \"package\", while also being able to access the individual members of the structure. One example of this may be a ContactInfo structure that contains a person's first name, last name, e-mail address, phone number, birthday, etc.\n\nIt's easy to see how this would later be extended into the notion of a \"class\", where the object could have methods defined to access the data or otherwise manipulate its contents,...\n\nFor the past few years, I've spent most of my time teaching and tutoring on physics, but I also tutor students in programming languages such as C, C++ and Java. These languages are three of the most difficult to learn due in large part to their comprehensiveness. These and languages very similar to them are the programming languages used to implement most of the highest performing and functionally complicated applications in the world, including operating systems, office suites, high performing websites and smartphone apps. was working with a physics student the other day and came across a football trajectory problem which was very timely because Superbowl Sunday fast approaching and the Pittsburgh Steelers are still in the mix. Yeah!"}
{"text": "Conditionals 1 - 'if'\n\nPrerequisite:\n\nComputers have to be programmed in order to perform tasks and make decisions according to the user'sexpectations. In this course, we will focus on the decision-making part of programs. Programing languages provide constructs, and both logical and comparison operators. Results of computation can then be compared, combined and tested to implement branching (branching is a simple concept that sounds scary as do most programing terms! Take the 'if' construct: \"If the dog needs to go out, let him out. Else he will pee on the floor.\" The dog's need to go out, being let out and the events that follow are one branch of this 'if'; the other is the dog being ignored, and the consequences that ensue.)\n\nGetting started with conditionals\n\nThis course will provide you with the basic concept that all programming depends on: determining IF a condition is true or false. This concept goes deeply into computers themselves and how they function on the most basic level: the binary system of 0,1. In normal life we use the Decimal system: based on 1-10, of course. Counting in the binary system looks awful but is totally simple: just count in 1's and 0's! All computers function on 1,0: on, off, true, false. Testing for these conditions is, of course, simple, using the lovely IF statement.\n\nSimple, and great fun to play with! Use your imagination. In real life, what can either be yes/no, on/off? A light switch for sure. How about a pick-up line in a bar? Does it work for you? Yes or No! Of course different actions occur depending on that 'condition'... we'll leave those to your imagination ;)\n\nYou are exploring the very guts of coding in this course. Everything else depends on this knowledge. Everything! We suggest you take the exam pronto, before taking the course. It will filter out what you do and don't know, and present you with a list of course videos you need to watch. Don't worry if you blow it: hey, that's why you're here.\n\nLearning IF conditional is real fun\n\nYou're here to learn the basics of coding first, then move on to do more complicated coding. Shit I don't know the real steps to get to that game! That needs to go here. If you just tell me, I'll integrate in 2 seconds onto a real working game (which we code from scratch, like any other project!) You talk about MAJOR fun!\n\nIt all starts with conditionals: with that IF. Don't forget our community. There you'll find other students at various places \u2013 they're not only fun, but a great resource when you get stuck (you WILL get stuck: experienced programmers get stuck all the time. Main part of the fun is figuring out what went wrong!!) So, want to play with us? IF so, start right here (IF this is over your head, take the free Starting Point course for the first time or again!) All roads start with a single step.\n\nThe most common basic constructs are:\n\n\u2022 If\n\n\u2022 if-else\n\n\u2022 if-else if-else\n\n\u2022 Nested if, if-else and if-else if-else clauses\n\n\u2022 Testing of negated conditions\n\nThis course has been designed for the novice programmer to understand the behavior of a program based on the flow into and out of these constructs. Though it may look complicated at the moment, we compare it to true-life situations, as you'll see. This makes it simple to understand, we promise!\n\nIn the real world, getting work done, either by oneself or by others, involves making both physical and mental decisions. With computers, it's no different. But computers are incapable of acting on their own; we have to provide all the possible decisions to make them work for us. Together with computation, such decision making comprises \"computer programming,\" which is accomplished by implementing logic in a programming language. In this section, we shall focus mainly on the decision-making constructs of the language, and they really are easy to understand. A few examples and code samples will set you on your way!\n\nWhat is decision making?\n\nThe term used for \"decision making\" in computer programming is often called \"branching\". In modern computers, logical branching is boolean in nature; that is, the condition being tested can result in one of only two \"truth values\", \"true\" or \"false\" (but not both, nor neither). It is like 2 faces of a coin, which when tossed lands flat with one of the 2 sides on top: either \"heads\" or \"tails\" (but not both, nor neither). Hence the term \"boolean logic\" is used to describe computer's reasoning.\n\nAt the heart of a decision-making language construct is condition testing, and testing almost always involves using comparison (<, =, <) and logical (& - and, | - or) operators. Such operators manipulate constants, variables and expressions to return a boolean value which is called \"evaluation of the conditional\". We shall very soon informally define the terms we have used so far. As we saw above, a conditional is a logical expression comprised of several expressions combined with logical and comparison operators to finally evaluate to a boolean value: \"true\" or \"false\". We assume you are already introduced to the terms \"expression\" and \"operator\".\n\nThis may sound complex, but in reality it's simple.\n\nHere's a real-world conditional:\n\nif the dog barks at the door\n\nthen (do a few things \u2013 get the leash: take him out: wait for him to do his thing.)\n\nelse (do a few other things: get a rag to clean up the mess, yell at the dog, feel guilty.)\n\nExplanation:\n\nYour conditional is \"if the dog barked at the door.\" It evaluates to a Boolean: either true or false. Depending on that Boolean, actions are taken. Oh, but comparison operators, you say! You didn't use those \u2013 surely they're far more complex.\n\nSo we'll give the dog a break. If he barks for longer than five minutes, let him out! The rest stays the same. There, now you've used a comparison operator: \">\" (greater than.) Yes, it can get more complex (and fun!) as you'll see: let's begin to learn about those conditionals!\n\nOur free content is sponsered by these ads become a prime member and get rid of them."}
{"text": "How will Your Users Do Their Work?\n\nOnce you know who your users are and what they will be doing, you will need to figure out how it will be done in a general sense. This does not include what your program will actually look like, however. In a personal finance application, one of the user's primary tasks will be entering in transactions. The user will need to type in the data for each transaction or download them from their bank over the Internet. You need to know this kind of information for each task the user will have to perform, common or otherwise.\n\nThe actual implementation is determined last, which is why it has not been discussed until now. This is where the general usage of the application is determined. For example, the user will have a form to enter transactions into an account. The form should have text fields for each of the different kinds of data, such as the payee, the amount, and the check number. Somewhere nearby, the user will be able to see a list of all the transactions in the current account. Because this is where the actual building of the look of the program takes place, it is crucial at this point in development to know and understand what makes software truly easy to use, so this is what we will examine next. Note that what technologies will be used to actually create the program have not even been mentioned yet. For your audience, technology is merely the means to an end -- a tool -- and not the goal itself."}
{"text": "Sams Teach Yourself MySQL in 21 Days - 3. Introduction - 5 ... developer who used Visual Basic and Visual C++, Mark has joined the open ..... program that manages databases, much like Microsoft's Excel manages spreadsheets. SQL is a ...\n\nIn just 24 sessions of one hour or less, you'll learn how to build complete, reliable, and modern applications with Visual Basic 2012. Using this book's straightforward, step-by-step approach, you'll master the entire process, from navigating VB 2012 2012 2012 environment and use VB's powerful new tools\n\nWork with objects, collections, and events\n\nBuild attractive, highly functional user interfaces\n\nMake the most of VB 2012's advanced controls\n\nCreate efficient modules and reusable procedures\n\nStore data, make decisions in code, and use loops to improve efficiency\n\nJames Foxall is President of Tigerpaw Software, Inc., a 25 year old commercial software company with more than 25,000 users. He is a leading authority on interface and behavior standards for Windows and Office environments and is an expert on improving business processes through technology. He contributes to several journals and magazines, speaks internationally, teaches college courses on Visual Basic, and has been featured widely in print and online media for his technology expertise.\n\nDVD Includes: Microsoft\u00ae Visual Basic 2010 Express Edition\n\nOn the Web: Access code examples from the book, as well as updates, and corrections as they become available at informit.com/title/9780672331138\n\nIn only 21 days, you'll have all the skills you need to get up and running efficiently. With this complete tutorial, you'll master the basics of database programming and then move on to the more advanced features and concepts. Understand the fundamentals of database programming in Visual C++. Master all the new and advanced database features that Visual C++6 offers. Learn how to effectively use the latest tools and features of Visual C++ for database programming by following practical, real-world examples. Get expert tips from a leading authority for programming your databases with Visual C++ 6 in the corporate environment.\n\nSams Teach Yourself Data Structures and Algorithms in 24 Hours presents data structures and algorithms in an easy-to-read, easy-to-understand style, allowing you to grasp the concepts quickly and apply the knowledge to your programs. The very popular C++ programming language is used for examples and code samples.Sams Teach Yourself Database Programming with Visual Basic 6 in 21 Days is a tutorial that allows you to learn about working with databases in a set amount of time. The book presents you with a step-by-step approach to learning what can be a critical topic for developing applications. Each week will focus on a different aspect of database programming with Visual Basic. Some of the topics covered are data controls, programming with the Microsoft Jet Engine, and programming with the ODBC Interface and SQL.\n\nSams Teach Yourself Database Programming with Visual Basic 6 in 24 Hours takes a straight forward, no-nonsense approach to teaching Visual Basic database programming. The book will focus on five primary areas of database programming: The Fundamentals of Visual Basic 6 and the database capabilities built into the programming environment; The concepts and practices that are applicable to multiple user and group access situations; Connecting to remote database servers; Database solutions for the Internet and intranets; and The future of databases and Visual Basic programming. Sams Teach Yourself Database Programming with Visual Basic 6 in 24 Hours does not try to be a compendium of all the questions any person may ever have, rather, the book focuses on teaching the reader how to use Visual Basic for database applications.\n\nVisual Basic, the 32-bit programming language from Microsoft, is used by programmers to create Windows and Windows 95 applications. It can also be used to program applications for the Web. This book shows those programmers how to design, develop, and deploy Visual Basic applications for the World Wide Web\n\nThis step-by-step tutorial shows readers how to program with Visual Basic in a set amount of time"}
{"text": "A Central University runs from its main campus and a number of associated colleges. The University has several programmes ranging from Diploma (1 year duration), Bachelor's degree (3 or 4 year's duration), Post Graduation (2 to 3 years duration) and research degree programmes (2-3 years duration). The structure of each programme is approved centrally. A [...]\n\nQuestion 1: Define the term Multimedia. What is need of multimedia software? List four software used in multimedia industry. (5 Marks) Question 2: What is collaborative learning? Explain the process of collaborative learning using Multimedia, with an example. (5 Marks) Question 3: List the hardware and software components essential for professional multimedia application development. Also, [...]\n\nQuestion 1: Design a database application to maintain BCA Students Examination Records and to generating the Hall Tickets for eligible students using Visual Basic. Provide necessary documentation, reports, screen layouts etc. for the project. (7 Marks) Question 2: What is a significance of data control? How are these used? Explain. (3 Marks) Question 3: What [...]\n\nQuestion 1: What is Normalization? Explain the condition under which a relation needs to be normalized to 3 NF fro3 2 NF with the help of an example? (5 Marks) Question 2: Compare primary, secondary and clustering indexes. Which of these indexes are dense and which are not? (5 Marks) Question 3: What is difference [...]\n\nQuestion 1: Explain how the existence of remote users might complicate information system design. Describe a system in which you might be considered a remote user. (10 Marks) Question 2: Define well-formulated educational objectives for your academic career. Describe at least five constraints that could limit your ability to achieve your objectives. (5 Marks) Question [...]\n\nQuestion 1: Explain the three main purposes of an operating system? What is layered approach to OS design? Also, describe its advantages and disadvantages. (4 Marks) Question 2: Write a shell program to generate the first 25 prime numbers. (4 Marks) Question 3: What is 'Mutual Exclusion'? Write pseudo code to implement mutual exclusion using: [...]\n\nQuestion 1: Write an algorithm for the implementation of a circular doubly linked list (10 Marks) Question 2: What are the advantages of Arrays and Pointers? What is the basis for selection of Arrays or Pointers as data structure in a program. (5 Marks) Question 3: What is a row major order? What is"}
{"text": "9780133378504\n\nBuy New Textbook\n\nThis item is temporarily unavailable from the publisher, but is expected in soon. Place your order now and we will ship it as soon as it arrives.\n\n$130.46\n\neTextbook\n\n180 day subscription\n\n$64.79\n\nRent Textbook\n\nWe're Sorry Sold Out\n\nUsed Textbook\n\nWe're Sorry Sold Out\n\nMore New and Used from Private Sellers\n\nStarting at $89.28\n\nQuestions About This Book?\n\nWhat version or edition is this?\n\nThis is the 9th edition with a publication date of 2An Introduction to Programming Using Visual Basic 5.0\n\nAn Introduction to Programming with Visual Basic 6.0, Update Edition\n\nIntroduction to Programming Using Visual Basic 2008, An (w/VS2008 DVD)\n\nIntroduction to Programming Using Visual Basic 2008, An (w/VS2008 DVD)\n\nIntroduction to Programming Using Visual Basic 2010\n\nIntroduction to Programming Using Visual Basic 4.0\n\nIntroduction to Programming with Visual Basic 6.0 4th ed.\n\nIntroduction to Programming with Visual Basic.NET, An\n\nSummary\n\nAn Introduction to Programming Using Visual Basic 2012, Ninth Editionconsistently praised by both students and instructors is designed for readers with no prior computer programming experience. Now updated for Visual Basic 2012, Schneider focuses on teaching problem-solving skills and sustainable programming skills. A broad range of real-world examples, section-ending exercises, case studies, and programming projects gives readers more hands-on experience than any other Visual Basic book on the market.\n\nAuthor Biography\n\nDavid I. Schneider spent over 32 years teaching at the University of Maryland, and has published an impressive 28 books over the past 18 years. He is the author of several best-selling texts, including his Visual Basic Series with Prentice Hall. Why are his books best-sellers? Students love his extensive use of examples and applications\u2013a concept that stems from his teaching experience and results in books that are \"tried and true.\" His best-selling Visual Basic texts have been successfully used for many years and have received consistent praise from both students and instructors."}
{"text": "ez\u2014for the Programmer\n\nIn this article, Terry Gliedt continues his tour through the Andrew project and gives us a taste of another aspect of it. Here's the ez editor again, but this time as a source view editor for the programmer in us all.\n\nCompiling Your Code\n\nez has support to assist you in finding\ncompile errors. This is done by invoking make, capturing the output\nand then asking ez to show you the source lines in error. This is\ndone by creating a second window of the source (select\nNew Window on the Window menu\ncard). In either of the source windows, select\nStart Compile on the Make menu\ncard. You can see the results in Figure 6. When the\ncompile completes and there are errors, select Next Error on the\nMake menu card. ez will then switch files to the offending file (if\nnecessary) and show the line identified in error by the compiler.\nCorrect the errors and start the process over again.\n\nSometimes just having the editor format the source helps to\nunderstand the code. The first time I used ez on my C source, I\nimmediately noticed that some code was shown as comments. \"Ha! A\nbug in ez\", I thought. Well, there was a bug, but not in ez. I\ndiscovered I had missed an ending comment delimiter in a program\nthat I thought was working. I actually had 10 lines of code\ncommented out. That was enough to convince me of the value of views\nin ez.\n\nez is not a complete source browser in\nthe sense of some commercial applications, but rather it provides a\nset of functions to help you to navigate through your source.\nSometimes you don't want to see some parts of your program.\nHighlight that part of your program with the mouse and select\nCompress region on the Source Text menu card and you will see\nsomething like that shown in Figure 7. If you click in the\n\"compressed lines\" box, the code will be shown again. Selecting\nDecompress all on the Source Text menu card will expand all\ncompressed source areas.\n\nThe program ctags is a program found on most Unix systems. It\nwill generate a file called tags which contains cross-reference\ninformation on the functions within a set of source files. You can\nalso get cross-reference information on variables by issuing the\ncommand \"ctags -v *.h *.c\". ez can use this\nfile to show you where functions or variables are defined. Load the\ntags file by selecting the menu item Load New Tag File or Rebuild\nTag File on the Tags menu card. To find where a variable or\nfunction is defined, select the variable with your mouse and select\nFind Tag on the Tags menu card. ez will switch to the file where\nthis is defined and show you the line where it is defined.\n\nTemplates\n\nSo far we have been talking about editing existing source\nfiles. ez provides additional support when you edit a new,\nnon-existent source file, by providing a means for you to control a\n\"template\" or default file. Each language has its own template file\nwhich can be found in /usr/andrew/lib/tpls. You can tailor your own\nby creating your own template directory and telling AUIS\napplications where your templates are by defining the\n\nTEMPLATEPATH environment variable. To set this up, issue the\nfollowing commands:\n\nNow you can edit your own $HOME/tpls/c.tpl template and\ntailor this to your needs. Figure 8 shows you one such template.\nWhat you will see is much like a conventional program source, and\nindeed, it is. This is where you put your own \"boiler-plate\"; code\nyou'd want in most any program. More interesting, however, is the\nexistence of dogtags (what's in a\nname?). These are fields, delimited with \"<@\" and \"@>\", which\nare automatically substituted when the template is loaded. For\ninstance in Figure 8, you see <@name@>, which is replaced\nwith the name of the file being edited (fig1.c). Most of these are\npretty obvious. For a complete list of all dogtags, see the help\ntext shown by the command auishelp dogtags"}
{"text": "Recommendation: Unrated. Description: Walkthrough showing the move-to-front method for self-organizing listsEvaluation: Simple-to-use user interface for walking through the example. Simply open up the AV (see directions below) and step through the example with pseudo-code. As you go through the example, you are directed to the corresponding line in the pseudocode and given a line or two of explanation in the message window. Attractive layout of the data, including colors."}
{"text": "Java vs. C\nJava: Java vs. C\nIs Java easier or harder than C?\nJava is harder because ...\nJava is more powerful and can do much more than C.\nFor example, C doesn't have a graphical user interface (GUI),\nand C doesn't have any\n\nObjective C\nObjective Ctutorials. We will be explaining the\nprogramming language with easy to learn examples. You will find these Objective\nCtutorials very useful...\naccess\nObjective-C provides facility of class level\naccess. In the examples\n\nC and C++ books-page13 C and C++ books-page13\n&nbsp... in C++\nThis book was motivated by my experience in teaching the course... understanding of a data structure requires three\nthings: First, you must learn\n\nabout c and java\n://\n c and java i need java and c language interview and objective questions with answers for the fresher.please provide to me\nPlease\n\nObjective-C keywords\nObjective-C keywords\n&nbsp...-C language. Objective-C is a superset of C language, so program written in c and C++ should\ncompile as objective-c. It provides some additional keywordsiPhone Loops in objective c\nof loop examples, i have discussed about...\nDo loop in Objective c\nwhile loop... in Objective c with the help of few examples.\nBut if you are new to object oriented... will learn about all kind of loops in further Objective cexamplesjQuery - jQuery Tutorials and examples\njQuery - jQuery Tutorials and examples\nThe largest collection of jQuery examples and jQuery Tutorials on the web. Learn and master jQuery from scratch. jQuery is nice\n\nC# question\nCreate a Solution by name Bank with Classes Account.cs, SavingsAccount.cs and savingsTest.cs to Demonstrate Abstract Classes in C# 1st question... and savingsTest.cs to Demonstrate Abstract Classes in C"}
{"text": "Intermediate ColdFusion (P122)\n\nColdFusion is the award winning rapid application development system that integrates database, electronic mail, browser and web server technologies into web applications. Intermediate ColdFusion is a continuation of Introduction to ColdFusion Web Development Course, with special topics including: complex datatypes, looping structures, in-depth debugging and troubleshooting, charting and graphing. The last two weeks are devoted to the Web Application Framework.\n\nStudents will gain the experience in ColdFusion programming via building an E-commerce Application - Online Book Store and completing a series of ongoing exercises.\n\nSuccessful completion of Introduction to ColdFusion Web Development Course or equivalent experience.\n\nProficiency with HTML, including forms.\n\nBasic knowledge of SQL.\n\nBasic knowledge of JavaScript is helpful, but not required.\n\nRequirements\n\nHardware: The ColdFusion Application Server for Windows has the following minimum hardware requirements, according to Macromedia:\n\nPentium or higher running Windows 98, Me, NT, 2000, or XP\n\n400 MB of disk space\n\n256 MB of RAM\n\nA CD-ROM drive\n\nSoftware:\n\nThe TCP/IP networking protocol must be enabled on your system.\n\nWeb Browser: Internet Explorer 4+ or Netscape Navigator 4+.\n\nColdFusion MX Application Server or any other version of ColdFusion Application Server starting from version 4.0. 30 days trial version of ColdFusion MX can be downloaded from \n\nWeb server: ColdFusion MX does not require an external web server. For other versions of ColdFusion you can use one of the following: Personal Web Server with Windows 98, ME, NT; Internet Information Server comes with Windows 2000 Professional Edition and XP Professional Edition. You cannot use ColdFusion Server not MX version with Windows XP Home Edition.\n\nText Editor: HomeSite, 30 days trial version can be downloaded from:  or Notepad - plain text editor for Windows, or any similar program for Unix or Linux"}
{"text": "Introduction to ActionScript 2.0/Introduction\n\nActionScript is the programming language used in Flash projects. This book is intended to help anyone, including those without programming experience, to learn ActionScript and programming in general.\n\nNote that if you have programming experience, this book will be quite easy for you. If your previous language is JavaScript, you may even want to skip the some of the 'bare basics' parts.\n\nThis book assumes that you know basic Flash operations. Before you start, make sure you can:\n\nopen a new file in Flash\n\ncreate a symbol and drag a symbol onto the stage\n\nset a frame as a keyframe\n\nimport music into Flash\n\nIf you do not, check out the official documentation for your version of Flash first.\n\nWhat this book does not aim to do\n\nThis book is not about the production of Flash games or websites. The information presented in this book should be helpful for all novice Flash programmers, not just those who would like to create a game or interactive website.\n\nThis book is not here to teach you animation. ActionScript is intended for interactive multimedia elements such as games and websites. If you want to learn animation, find a book that teaches you to animate with Flash.\n\nIt is often said that ActionScript's simplicity allows non-programmers to program. This is not our aim here; rather, we hope to make you into a programmer through the simple language that is ActionScript. What are you waiting for? Let's start!\n\nHang on... why am I still learning AS2?\n\nFirstly, some folks have pre-Adobe versions of Flash that don't support AS3, and don't want to learn FlashDevelop/Flex development. AS2 are obviously the only choice for these people.\n\nSecondly, AS2 is easier for novice programmers. Although some elements of AS2, often with roots in ECMAScript, may be deemed bad practice (weak typing, absolute addresses, user-defined global variables, code inside instances...), this book does not encourage the use of these elements. The reader is strongly recommended to adhere by the principles described in this book, which will not only improve your programming skills but also smooth your future migration to AS3."}
{"text": "An Introduction to Rlab: A High Level Language for Scientific and Engineering Applications\n\nRlab stands for \"our lab\". It is available to almost everyone who needs a computational tool for scientific and engineering applications, because it is freely available, and it runs on many platforms.\n\nI started working with high level\nlanguages when I realized I was spending far too much time writing\nFortran and C language programs as a part of engineering analyses,\ntest data reduction, and continuing education. I searched for a\nbetter engineering programming tool; except for Matlab, and some\nMatlab-like programs (all commercial), I came up empty-handed (this\nwas in 1989). I did not feel Matlab's language design was powerful\nenough, but I would have used it had it been lower in cost and\navailable on more platforms. I diverted my \"off-hour\" studies to\ninterpreter construction, and started prototyping Rlab. Within a\nyear, I released version 0.10 to the Internet for comment. Now,\nalmost five years later, Rlab has undergone significant changes and\nimprovements primarily due to excellent assistance from users\naround the world.\n\nRlab does not try to be a Matlab clone. Instead, it borrows\nwhat I believe are the best features of the Matlab language and\nprovides improved language syntax and semantics. The syntax has\nbeen improved to allow users more expression and reduce\nambiguities. The variable scoping rules have been improved to\nfacilitate creation of larger programs and program libraries. A\nheterogeneous associative array has been added to allow users to\ncreate and operate on arbitrary data structures.\n\nOverview\n\nThe term \"high level language\" has many different\nconnotations. In the context of Rlab it means that variables are\nnot explicitly typed or dimensioned. A variable's type and\ndimension are inferred from usage, and can be arbitrarily changed\nduring a program's execution. This automatic typing and dynamic\nallocation free the scientific programmer from many of the more\ntime consuming programming duties normally associated with\nlanguages like C or Fortran.\n\nIn Rlab's case, high level also means interactive. Since one\nof the purposes is to provide convenient means for data\nmanipulation and visualization, the program can be run in either\nbatch or interactive mode. Typing rlab at the\nshell prompt starts the program. Rlab gives the user the command\nline prompt prompt >, from whence program\nstatements are issued and executed.\n\nWhat do you get? What does it cost? Most people find that\nthey can develop a working program far faster than with C or\nFortran. Furthermore, the built-in graphics capabilities and\ninteractive mode of operation promote experimentation and\nexploration of data and methods. The price you pay is slower\nprogram execution in some instances.\nPerformance tests between compiled and interpreted languages\nusually show the compiled language to be faster in all respects. If\nyour Rlab program uses scalar operations exclusively, and uses none\nof the built-in linear algebra functions, then it will be\nsubstantially slower than the Fortran or C version. However, if you\ntake advantage of Rlab's optimized array operations, built-in\nlinear algebra and utility functions, you may find that Rlab will\nperform quite well.\n\nAlthough I cannot provide a complete introduction in a single\narticle, I can show you enough of the language to help you decide\nif it is something that you would want to try. A more complete\nintroduction is provided in \"The Rlab Primer\", which is included\nin the source and binary distributions.\n\nData\n\nThe numeric array, or matrix, is the most commonly used data\ntype. The numeric array can be one-dimensional (a vector) or\ntwo-dimensional. Most often, matrices are created by reading data\nfrom another program or from a file. For simpler examples, we will\ncreate our matrices interactively. Array/matrix syntax uses square\nbrackets, [ ], like the C language, to delimit\nthe matrix, and semi-colons to separate each row from the next. So,\nto create a matrix within Rlab, the user types:\n\n> a = [1, 2; 3, 4]\n\nWhich provides the following response:\n\na =\n1 2\n3 4\n\nMatrix referencing and assignment uses the following\nsyntax:\n\n> a[1;] = 2 * a[2;2,1]\na =\n8 6\n3 4\n\nThe semi-colon delimits row and column specifications. The\nabsence of a row or column specification selects all of the rows or\ncolumns. Additionally, the user can specify particular indices, or\ncombinations of indices, in any order. In the previous example,\na[2;2,1] selects the second row of\na, and the second and first columns (in that\norder) of that row. Therefore, a[2;2,1]\nevaluates to [4,3]. This quantity is then\nmultiplied by 2, and the result is assigned to the first row of\na.\n\nIn this article real numbers will be used in all of the\nexamples. However, Rlab can deal with complex numbers equally well.\nTo enter a complex number, the imaginary constant\ni or j is used (don't worry,\nyou can still use i and j as\nvariables). For example: a = 1 + 2j creates the\ncomplex number with real part 1 and imaginary part 2. All numeric\noperators and functions (where they make sense) work with complex\nvalues as well as real values.\n\nThe traditional numeric operators are overloaded. When\nworking with scalar operands, the results are what most people\nwould expect. However, when working with array/matrix operands, the\nnumeric operators behave differently. Addition and subtraction\nfunction in an element-by-element sense between the two operands.\nThe multiplication operator * performs the\nmatrix inner-product. To illustrate:\n\nNote (in the first two lines) that a ; at\nthe end of a statement suppresses printing the result. The division\noperator / performs traditional division on\nscalar operands, and solves sets of simultaneous linear equations\nwith matrix/vector operands. A set of element-wise operators exist\nto perform element-by-element operations between arrays. The\nelement-wise operators are two-symbol operators; the first symbol\nis always a . so the element-wise division\noperator is ./ and the element-wise\nmultiplication operator is .*:\n\nAs you can see, string arrays consist of arbitrary length\nstrings. There are no restrictions upon the relative size of\nstrings in an array. Strings can be concatenated with the\n+ operator. The other (traditionally numeric)\noperators do not operate on string what"}
{"text": "Advanced Programming\n\nThis advanced programming topic presents information that\nexperienced software engineers will find invaluable. Knowledge of\nthese topics is not necessary to successfully create an embedded 8051\ntarget program using the Cx51 Compiler. However, the following topics\nprovide insight into how many non-standard procedures are\naccomplished.\n\nAdvanced programming discusses the following topics:\n\nFiles you may alter to customize the startup procedures\n\nFiles you may alter to customize run-time execution of library\nroutines"}
{"text": "Reader's Guide\n\nReader's Guide\n\nThis book was written with GNU/Linux application developers in mind. You'll note that topics such as the Linux kernel or device drivers are absent. This was intentional, and while they're fascinating topics in their own right, they are rarely necessary to develop applications and tools in the GNU/Linux environment.\n\nThis book is split into five parts, each focusing on different aspects of GNU/Linux programming. Part I, \"Introduction,\" introduces GNU/Linux for the beginner. It addresses the GNU/Linux architecture, a short introduction to the process model and also licenses, and a brief introduction to open source development and licenses. Linux virtualization is also explored, including models and options in Linux.\n\nPart II, \"GNU Tools,\" concentrates on the necessary tools for GNU/Linux programming. The de facto standard GNU compiler tool chain is explored, along with the GNU make automated build system. Building and using libraries (both static and dynamic) are then investigated. Coverage testing and profiling are explored, using the gcov and gprof utilities, as is application bundling and distribution with automake and autoconf. Finally, source control is reviewed with some of the popular options on Linux and also data visualization with Gnuplot.\n\nWith an introduction to the GNU/Linux architecture and necessary tools for application development, we focus next in Part III, \"Application Development Topics,\" on the most useful of the services available within GNU/Linux. This includes pipes, Sockets programming, dealing with files, both traditional processes and POSIX threads, message queues, semaphores, and finally shared memory management.\n\nIn Part IV, \"GNU/Linux Shells and Scripting,\" we move up to application development using shells and scripting languages. Some of the most useful GNU/Linux commands that you'll encounter in programming on GNU/Linux are covered, and there is a tutorial on the Bourne-Again Shell (bash). Text processing is explored using two of the most popular string processing languages (awk and sed). We'll also look at the topic of parser generation using GNU Flex and Bison utilities (lex and yacc- compatible parser generator). Scripting with Ruby and Python is investigated as well.\n\nIn Part V, \"Debugging and Testing,\" debugging is addressed using a variety of different aspects. We investigate some of the unit-testing frameworks that can help in automated regression. The GNU Debugger is introduced, with treatment of the most common commands and techniques. Finally, the topic of code hardening is explored along with a variety of debugging tools and techniques to assist in the development of reliable and secure GNU/Linux applications.\n\nWhile the book was written with an implicit order in mind, each chapter can be read in isolation, depending upon your needs. Where applicable, references to other chapters are provided if more information is needed on a related topic.\n\nThreads in This Book\n\nThis book can be read part-by-part and chapter-by-chapter, but a number of threads run through it that can be followed independently. A reader interested in pursuing a particular aspect of the GNU/Linux operating system can concentrate on the following sets of chapters for a given topic thread."}
{"text": "This document reviews security features of two most popular modern development platforms--Java and .NET (Java v1.4.2/J2EE v1.4 and .NET v1.1). The platform choice is not random, because they represent, to a certain extent, competition between UNIX-like and Windows systems, which largely defined software evolution over the last decade. Although Java... more...\n\nRigorous practice for the number-one certification for Java programmers--from the co-developers of the exam Co-written by bestselling Java certification authors and the co-developers of the SCJP exam, this book features four complete practice exams, totaling more than 800 questions, covering all of the topics on the latest revision to the Sun Certified... more...\n\nHauptbeschreibung This document intends to offer a detailed discussion of selected distributed object-oriented architectures at conceptual level. The first part of the discussion offers a comprehensive overview of the Socket architecture in Java 2 and Berkeley UNIX and the distributed object model of Java Remote Method Invocation and the Common Object... more...\n\nThe world's leading programming author offers comprehensive coverage of the new Java release. The definitive guide to Java has been fully expanded to cover every aspect of Java SE 6, the latest version of the world's most popular Web programming language. This comprehensive resource contains everything you need to develop, compile, debug, and... more...\n\nEssential Skills--Made Easy!. Let master programmer and bestselling author Herbert Schildt teach you the fundamentals of Java programming. Updated for the newest version of Java (Java SE 6), this step-by-step guide will have you programming in Java right from the start. Herb begins by explaining why Java is the preeminent programming language of the... more...\n\nFrom the world's most popular resource for web designers and developer's comes the ultimate guide to jQuery Begins with an exploration of fundamental jQuery concepts such as Document Object Model (DOM) scripting Explores writing \"Don't Repeat Yoursefl\" (DRY) to gain a comprehensive understanding of these imperative modern techniques and best practices... more... will be busy learning the architecture of an Android... more...\n\nNine handy minibooks cover just what programmers need to get going with Java 7 The newest release of Java has more robust functionality to help web and mobile developers get the most ouf of this platform-independent programming language. Like its bestselling previous editions, Java All-in-One For Dummies, 3rd Edition has what you need to get upThis... more..."}
{"text": "C++ is the language of choice for developers who want to maximize their productivity and code reuse. The object-oriented advantages that come from well-defined interfaces, encapsulation of data and functions, object reuse, class hierarchies, and modularity attract developers working on a variety of programming projects.\n\nSGI offers a ProDev\u2122 WorkShop C++ bundle that combines state-of-the-art C++ compilers and the ProDev WorkShop tool for debugging and analyzing object-oriented code. This ProDev\u2122 C++ development environment includes compilers, libraries, and tools for all levels of C++ programming, providing a complete set of tools that help developers be more productive and ensure the quality of C++ based software systems.\n\nProDev C++ includes:\n\nVisual and command-line debugger tools in support of C++ in ProDev WorkShop\n\nAs of the 7.4 release, MIPSpro C has been improved to support the full International ANSI C++ standard with the exception of a small number of features which would break our existing binary compatibility. MIPSpro C++ is a high-performance, optimizing compiler designed to take advantage of the hardware features of SGI\u00ae computers, including processor architecture, memory hierarchy, and system architecture.\n\nMIPSpro C++ gives you flexibility to control optimizations by providing a variety of flags to enhance the performance of the application at run time. Select a 32-bit or 64-bit programming model to suit the performance and data-addressing needs of your application."}
{"text": "DESCRIPTION: Understanding the system (computer) and programming on it requires one to first know the underlying architecture. Whenever we run a program how it is managed by the OS, how two systems communicate with each other in terms of networking, all these concepts are built in the current module.\n\nStarts with the base of programming - assembly and C programming.\n\nThis Module explains the low level programming with the introduction of Microprocessor architecture with the family of the processors till x86.\n\nIA32 - It describes how various parts of a CPU are organised and how they can be used for programming.\n\nDESCRIPTION: Being one of the most popular OS on PC its most widely used even by a person who knows nothing about computer. The current module focuses on how to develop applications explicitly for Windows based users.\n\nModule 3 - Foundations of Enterprise Programming\n\nUnit 1: Database Programming\n\nUnit 2: Web Programming\n\nRelational Database Architecture\n\nQuerying Database using SQL\n\nUpdating Database using SQL\n\nStored Procedures and Triggers\n\nDatabase Client Applications\n\nHTML and CSS\n\nClient-Side Scripting with JavaScript\n\nHTTP and CGI\n\nServer-Side Scripting with PHP\n\nXML and AJAX\n\nDESCRIPTION: Business going web, customers prefer operations like buying and selling of products online. Making the product data available on web requires how to persist the data in database and presenting the same on web, which is explained in the current module. PHP Programming: Many small scale applications which are running on web require heavy presentation of the data, PHP is best suited for such kind of applications.\n\nModule 4 - JavaJNI and Invocation API\n\nNetwork Sockets and RMI\n\nJDBC and JWS\n\nAWT and Swing\n\nJSP and JSF\n\nDESCRIPTION: As web market is evenly distributed majorly between two popular OS UNIX and Windows, we need to understand the programming languages required to build an application for these OS. Java is the most popular web based programming language on UNIX and hence the current module focuses on building large web applications using Java.\nThis module will teach students to develop the business applications latest and most popular platforms viz. Sun Microsystems's Java. These applications will have multiple facilities like connectivity in terms of Desktop Clients, Web Clients, Mobile Clients, Web Services etc.\n\nModule 5- .NETP/Invoke and COM Interop\n\nNetwork Sockets and Remoting\n\nADO.NET and WCF\n\nWindows Forms and WPF\n\nASP.NET and Silverlight\n\nDESCRIPTION: If it is Windows OS, then .NET is now the trend for building software for desktop or web application.\nThis module allows candidates to get familiar with a programming environment that allows development of platform independent application in multiple high level languages. This module will teach students to develop the business applications using latest and most popular platform Microsoft's .NET. These applications will have multiple facilities like connectivity in terms of Desktop Clients, Web Clients, Mobile Clients, Web Services etc\n\nDESCRIPTION: Today, software plays an important role in bringing ease of use, efficiency, accuracy, productivity in almost all domains of human activities - banking, telecommunications, government applications, education, defense, satellite control systems, social networking, etc,. These are large software applications and some are critical systems. Software errors in such large applications can undesirably affect the lives, livelihood and businesses of many people. Studies also reveal that software maintenance costs are far greater (about 70% of total SW life cycle cost) than software development cost. Such reliable software systems cannot be built, just by a few programmers, cooperating in an adhoc way. It needs an \"engineering approach\" and hence software engineering has emerged as an important discipline in software development. The module will impart students a sound understanding of the concepts, methods and tools used in the core software development activities namely in requirements, design, construction, testing and also the supporting activities of project management, quality assurance, configuration management, team management and process management. During this Module the students also get to know the in and out of practical techniques of testing as expected by the industry. Module ensures an exhaustive coverage of the entire spectrum of Software testing.\n\nModule 7: Aptitude Skills, Communications & Personality Development\n\nUnit 1: Aptitude Skills\n\nUnit 2:Communications & Personality Development\n\nQuantitative Problems\n\nLogical Reasoning\n\nAnalytical Skills\n\nCoding & Decoding\n\nPuzzles & Problem solving\n\nMotivation & Goal Setting\n\nEffective Business English Communication (Verbal & Non-Verbal).\n\nBusiness Etiquettes & Corporate Look.\n\nExecutive Skills.\n\nSpecial Professional Skills.\n\nDESCRIPTION: Since, IT industry is talent driven industry the Organizational Behaviours of IT organizations are different than that of the traditional organisations. This module will address the issues pertaining to organisations structure, behaviours of an IT professionals and soft skills like team work. Also it will concentrate on aptitude preparation, which will be very crucial whenever candidate goes through company recruitment process.\n\nModule 8: Live Technical Workshop\n\nUNIX Shell Scripting Fundamentals\n\nPython Scripting Fundamentals\n\nAdvanced Python Scripting\n\nExtending and embedding Python\n\nCloud Computing and Windows Azure\n\nAndroid and Windows Phone Programming\n\nObjective C and iPhone Programming\n\nDESCRIPTION: Live Technical Workshops allows you to get hands on experience on recent trends/ Technologies like Cloud Computing, Mobile App Development etc. In today's world End users access cloud-based applications through a web browser, while the business software and user's data are stored on servers at a remote location. Hence cloud computing allows companies to avoid upfront infrastructure costs, and focus on projects that differentiate their businesses instead of infrastructure.\n\nMobile Applications are usually developed in the specified languages using either the Android SDK, Windows SDK or iPhone SDK including development tools which are available. As of March 2013, more than 900,000 applications have been developed for these three, with over 70 billion downloads for the same. Hence its necessary to be well-versed with them.."}
{"text": "Here's part of \"The Secret Guide to Computers,\" copyright by Russ Walter, 29th edition. For newer info, read the 30th edition at \n\nJava\n\nJava\nresembles JavaScript (and JScript) but includes extra commands, so you can\ncreate a greater variety of programs. Those extra commands make Java a complete\nprogramming language (like QBASIC and Visual BASIC).\n\nJava is fairly easy to learn: it's just slightly harder\nthan QBASIC, Visual BASIC, JavaScript, and JScript. Java's a simplified version\nof C (which\nis much harder and explained in the next chapter).\n\nFundamentals\n\nThere are several versions of Java. Microsoft's version is\ncalled Visual J++.\nI'll explain how to use Visual\nJ++ 6.0, which you can buy individually or as part of Visual Studio 6.\n(Other versions of Java are similar.)\n\nCopy Java to the hard disk\n\nHere's how to copy Visual J++ 6.0 (professional edition) to\nthe hard disk.\n\nTurn on the computer\nwithout any floppy or CD-ROM disks in the drives, so the computer runs Windows\n98 and the computer's bottom left corner says Start. Put the Visual J++ disk\ninto the CD-ROM drive. The computer will say \"Visual J++\". Press ENTER. Click\n\"I accept the agreement\". Press ENTER.\n\nType the 10-digit CD key\nnumber (printed on the orange sticker at the back of the CD-ROM disk's square\ncase). Press TAB. Type your name. Press TAB. Type the name of your company (if\nany). Press ENTER three times.\n\nYou'll see a product ID.\nCopy it onto a sheet of paper. Press ENTER three times.\n\nDouble-click in the Name box. Invent a name for your program\n(such as \"joe\"); type the name and press ENTER.\n\nPress ENTER again. Double-click \"Class1.java\" (which is at the\nscreen's right side).\n\nYou see a big white box. In that box is a prototype Java\nprogram. That program does nothing useful, but you can edit it to do whatever\nyou wish!\n\nIn that program, the important lines look like this:\n\npublic class Class1\n\n{\n\npublic static void main\n(String[] args)\n\n{\n\n}\n\n}\n\nThe other lines are green. The computer ignores the green lines\n\u2014 and you should too! \u2014 since they're just comments.\n\nIf you find the green lines too distracting, erase them as\nfollows:\n\nPoint in the left margin, to\nthe left of the first green line, so the mouse pointer is an arrow (not a\nvertical line). Click (to highlight that line), or drag down (to highlight that\nline and several lines below it). Press the DELETE key to delete the\nhighlighted lines.\n\nLet's program the computer to say:\n\nmake your nose\n\ntouch your toes\n\nTo do that, edit the prototype program by inserting these\nextra lines:\n\npublic class Class1\n\n{\n\npublic static void main\n(String[] args)\n\n{\n\nSystem.out.println(\"make your nose\"); x\n\nSystem.out.println(\"touch your toes\");\n\nwhile (true); x\n\n}\n\n}\n\nHere's how to insert those extra lines:\n\nClick to the right of the\nsecond \"{\", press ENTER, type the first extra line, press ENTER, type the\nsecond extra line, press ENTER, and type the third extra line. Notice you must\ntype a semicolon at the end of each line.\n\nThe computer indents the\nlines automatically. (If you ever want the computer to indent differently, do\nthis before typing a line's first word or symbol: press the TAB key to indent;\npress the BACKSPACE key to unindent.)\n\nHere's what those extra lines mean:\n\nThe first extra line\nmakes the computer system send out a printed line\nsaying \"make your nose\" and makes the computer press ENTER afterwards. (If you\nomit the \"ln\", the computer will not press ENTER afterwards.)\n\nThe second extra line\nmakes the computer print \"touch your toes\" and press ENTER afterwards.\n\nThe third extra line\nmakes the computer pause awhile, so you can read what the computer\nprinted. That line is needed in Visual J++ 6.0 but not in most other Java\nversions.\n\nWhen you finish inserting those extra lines, congratulations!\nYou've written a Java program!\n\nRun the program\n\nTo run the program, press\nthe F5 key. The computer will say \u2014\n\nmake your nose\n\ntouch your toes\n\nthen pause for you to admire what it said. When you finish\nadmiring the computer's work, do this: while holding down the Ctrl key, tap the\nC key.\n\nSwitch programs\n\nWhile the program you wrote is on the screen, you can edit it.\nAfter editing it, run it (by pressing the F5 key).\n\nWhen you finish playing with that program, here's how to\ncreate a totally different program instead:\n\nIf the program is still\non the screen, look at the X at the screen's top right corner; instead of\nclicking that X, click the X that's immediately below it, so the program lines\nyou typed disappear.\n\nClick the New Project\nbutton (which is near the screen's top left corner, below the word \"File\").\nThen do the \"Start a new program\" routine that I explained in this page's left\ncolumn.\n\nHere's how to view an old program you created earlier:\n\nGo into Visual J++. If a\ndifferent program is on the screen, get it off the screen (by clicking the X\nthat's below the top right corner's X). Click the Open Project button (which is\nnear the screen's top left corner and shows an opening manila folder). You'll\nsee a list of Java program folders, double-click the program folder you want to\nuse. You'll see a green icon and a blue icon for your program; double-click the\nblue icon. At the screen's right edge, you'll see the blue icon again;\ndouble-click it again. Then double-click \"Class1.java\".\n\nErase files\n\nIf you type and run a program named \"joe\", the computer\ngenerates a folder called \"joe\", which is in the Visual Studio Projects folder,\nwhich is in the My Documents folder.\n\nThe \"joe\" folder contains four files, called \"joe.vjp\",\n\"joe.sln\", \"joe.suo\", and \"joe.exe\".\n\nTo erase them all, do this:\n\nGet the icon for the \"joe\"\nfolder onto the screen (by clicking the Open Project button). Click that \"joe\"\nfolder icon. Press the DELETE key (to move the folder to the Recycle Bin) or\npress SHIFT with DELETE (to erase the folder). Press ENTER.\n\nMath\n\nThe computer can do math. For example, this line makes the\ncomputer do 4+2:\n\nSystem.out.println(4+2);\n\nIf you put that line into your program and run the program, the\ncomputer will print this answer on your screen:\n\n6\n\nIf you bought 750 apples and buy 12 more, how many apples do\nyou have altogether? This line prints the answer:\n\nSystem.out.println(750+12+\" apples\");\n\nThat line makes the computer do 750+12 (which is 762) and add\nthe word \" apples\" (which includes a blank space), so the computer will print:\n\n762 apples\n\nThis line makes the computer put the answer into a complete\nsentence:\n\nSystem.out.println(\"You have \"+(750+12)+\" apples!\");\n\nThe computer will print \"You have \" and add 762 and add\n\" apples!\", so altogether the computer will print:\n\nYou have 762 apples!\n\nLike most other languages (such as BASIC and JavaScript), Java\nlets you use the symbols +, -, *, /, parentheses, decimal points, and e notation.\n\nIntegers versus double precision\n\nJava handles two types of numbers well.\n\nOne type of number is called an integer (or int). An int contains no decimal point\nand no e. For example, -27 and 30000 are ints.\n\nThe other type of number that Java handles well is called a double-precision number\n(or a double).\nA double contains a decimal\npoint or an e. For example, -27.0 and 3e4 are doubles. You can\nabbreviate: instead of writing \"-27.0\", you can write \"-27.\", and instead of\nwriting \"0.37\" you can write \".37\".\n\nLargest and tiniest numbers\n\nThe largest permissible int is about 2 billion. More\nprecisely:\n\nthe largest int is 2147483647\n\nthe lowest int is -2147483648\n\nIf you try to feed the computer an int that's too large or too\nlow, the computer won't complain. Instead, the computer will typically print a\nwrong answer!\n\nThe largest permissible double is about 1.7e308. More\nprecisely, it's 1.7976931348623158e308. If you feed the computer a math problem\nwhose answer is bigger than that, the computer will give up and typically say\nthe answer is:\n\nInfinity\n\nThe tiniest double that the computer handles well is about\n2.2e-308. More precisely, it's 2.2250738585072014e-308. If you feed the\ncomputer a math problem whose answer is tinier than that, the computer will\neither handle the rightmost digits inaccurately or give up, saying the answer\nis 0.0.\n\nTricky arithmetic\n\nIf you\ncombine ints, the answer is an int. For example, 2+3 is this int:\n5.\n\n11/4 is\nthis int: 2. (11/4 is not 2.75.)\n\nIf you combine doubles, the answer is a double. If you combine\nan int with a double, the answer is a double.\n\nHow much is 2000 times 2000000? Theoretically, the answer\nshould be this int: 4000000000. But since 4000000000 is too large to be an int,\nthe computer will print a wrong answer. To make the computer multiply 2000 by\n2000000 correctly, ask for 2000.0*2000000.0, like this:\n\nSystem.out.println(2000.0*2000000.0);\n\nThat program makes the computer get the correct answer,\n4000000000.0, which the computer will write in e notation, so you see this\nanswer:\n\n4.0E9\n\nLong decimals\n\nIf an answer is a decimal that contains many digits, the computer will typically\nprint the first 16 significant digits accurately and the 17th digit\napproximately. The computer won't bother printing later digits.\n\nFor example, suppose you ask the computer to print 10.0\ndivided by 9.0, like this:\n\nSystem.out.println(10.0/9.0);\n\nThe computer will print:\n\n1.1111111111111112\n\nNotice that the 17th digit, the 2, is slightly wrong:\nit should be 1.\n\nDivision by 0.0\n\nIf you try to divide 1.0 by 0.0, the computer will say the\nanswer is:\n\nInfinity\n\nIf you try to divide 0.0 by 0.0, the computer will say the\nanswer is \u2014\n\nNaN\n\nwhich means \"Not a Number\".\n\nAdvanced math\n\nThe computer can do advanced math. For example, it can compute\nsquare roots. This line makes the computer print the square root of 9:\n\nSystem.out.println(Math.sqrt(9.0));\n\nThe computer will print:\n\n3.0\n\nSay Math.sqrt(9.0) rather than Math.sqrt(9), because the\nnumber you find the square root of should be double-precision, not an integer.\nIf you make the mistake of saying Math.sqrt(9), the computer will print the\ncorrect answer but slowly.\n\nBesides sqrt, you can use other advanced math functions, but\nyou must say \"Math.\" at the beginning of each. Here's a list of those\nadvanced-math functions:\n\nTo handle exponents, you can\nuse sqrt (square root), exp (exponential power of e), and log (logarithm base\ne). You can also use pow: for example, pow(3.0,2.0) is 3.0 raised to the 2.0\npower.\n\nFor trigonometry, you can\nuse sin (sine), cos (cosine), tan (tangent), asin (arcsin), acos (arccosine),\nand atan (arctangent). You can also use atan2: for example, atan2(y,x) is the\narctangent of y divided by x.\n\nFor absolute value, use\nabs. For example, abs(-2.3) is 2.3.\n\nTo round, use floor (which\nrounds down) or ceil (which stands for \"ceiling\" and rounds up). For example, floor(26.319) is 26.0, and\nceil(26.319) is 27.0.\n\nVariables\n\nLike BASIC and JavaScript, Java lets you use variables. For\nexample, you can say:\n\nn=3;\n\nA variable's name can be short (such as n) or long (such as\ntown_population_in_1999). It can be as long as you wish! The name can contain\nletters, digits, and underscores, but not blank spaces. The name must begin\nwith a letter or underscore, not a digit.\n\nBefore\nusing a variable, say what type of number the variable stands for.\nFor example, if n and town_population_in_1999 will stand for numbers that are\nints and mortgage_rate will stand for a double, begin your program by saying:\n\npublic class Class1\n\n{\n\npublic static void main\n(String[] args)\n\n{\n\nint n, town_population_in_1999;\n\ndouble mortgage_rate;\n\nIf n is an integer that starts at 3, you can say \u2014\n\nint n;\n\nn=3;\n\nbut you can combine those two lines into this single line:\n\nint n=3;\n\nHere's how to say \"n is an integer that starts at 3, and\npopulation_in_1999 is an integer that starts at 27000\":\n\nInstead of saying ++n and then giving another command, say ++n\nin the middle of the other command. For example, instead of saying \u2014\n\n++n;\n\nj=7*n;\n\nsay:\n\nj=7*++n;\n\nThat's pronounced: \"j is 7 times an increased n\". So if n was 2,\nsaying j=7*++n makes n become 3 and j become 21.\n\nNotice that when you say j=7*++n, the computer increases n before\ncomputing j. If you say j=7*n++ instead, the computer increases n after\ncomputing j; so j=7*n++ has the same effect as saying:\n\nj=7*n;\n\n++n;\n\nArrays\n\nLike BASIC and JavaScript, Java lets you create arrays. For\nexample, if you want x to be a list of 3 double-precision numbers, begin your\nprogram by saying:\n\ndouble[] x=new\ndouble[3];\n\nThat says x will be a list of 3 double-precision numbers,\ncalled x[0], x[1], and x[2]. Like JavaScript, Java starts counting at 0.\n\nHere's a complete Java program using that array:\n\npublic class Class1\n\n{\n\npublic static void main\n(String[] args)\n\n{\n\ndouble[] x=new double[3]; x\n\nx[0]=10.6; x\n\nx[1]=3.2; x\n\nx[2]=1.1; x\n\nSystem.out.println(x[0]+x[1]+x[2]);\n\nwhile (true);\n\n}\n\n}\n\nThe computer will print the sum, 14.9.\n\nNotice that if you say double[] x=new double[3], you can refer\nto x[0], x[1], and x[2], but not x[3]. If you accidentally refer to x[3], the\ncomputer will gripe about \"ArrayIndexOutOfBoundsException\".\n\nIf you want x to be a table having 2 rows and 3 columns of\ndouble-precision numbers, begin your program by saying:\n\ndouble[][] x=new\ndouble[2][3];\n\nSince Java always starts counting at 0 (not 1), the number in\nthe table's top left corner is called x[0][0].\n\nCharacter variables\n\nA variable can stand for a character.\n\nFor example, suppose you're in school, take a test, and get an\nA on it. To proclaim your grade, write a program containing this line:\n\ngrade='A';\n\nHere's the complete program:\n\npublic class Class1\n\n{\n\npublic static void main\n(String[] args)\n\n{\n\nchar grade; The\ngrade is a character.\n\ngrade='A'; The\ngrade is 'A'.\n\nSystem.out.println(grade);Print\nthe character that's the grade.\n\nwhile (true);\n\n}\n\n}\n\nThe computer will print:\n\nA\n\nIn that program, you can combine these two lines \u2014\n\nchar grade; The grade is a character.\n\ngrade='A'; The grade is 'A'.\n\nto form this single line:\n\nchar grade='A'; The grade is this character: 'A'.\n\nString variables\n\nA variable can stand for a whole String of characters:\n\npublic class Class1\n\n{\n\npublic static void main\n(String[] args)\n\n{\n\nString x;\n\nx=\"he\";\n\nSystem.out.println(\"fat\"+x+\"red\");\n\nwhile (true);\n\n}\n\n}\n\nThe first shaded line says there's a String of characters,\ncalled x. The second shaded line says x is this String of characters: \"he\". The\nthird shaded line makes the computer print \"fat\" then x (which is \"he\") then\n\"red\", so the computer will print:\n\nfathered\n\nJava requires you to capitalize the first letter of String:\nsay String, not string.\n\nIn that program, you can combine these two lines \u2014\n\nString x;\n\nx=\"he\";\n\nto form this single line:\n\nString x=\"he\";\n\nInput\n\nLike BASIC and JavaScript, Java lets you input; but Java makes\nit harder.\n\nString input\n\nThis program lets you input a String:\n\nimport\njava.io.*;\n\npublic class Class1\n\n{\n\npublic static void main\n(String[] args) throws IOException\n\n{\n\nInputStreamReader is=new InputStreamReader(System.in);\n\nBufferedReader br=new BufferedReader(is); x\n\nSystem.out.print(\"What is your name? \");\n\nString s=br.readLine();\n\nSystem.out.println\n(\"I like the name \"+s+\" very much\");\n\nwhile (true);\n\n}\n\n}\n\nTo handle input well, you must prepare the computer for input:\n\nBegin your program by saying\n\"import java.io.*\".\n\nSay \"throws IOException\" at the\nend of the \"public static void main\" line.\n\nBegin the program's main part\nby inserting lines about InputStreamReader and BufferedReader.\n\nType all that carefully! Beware of capitals and spaces! After\nyou've typed all that junk, the rest of the program is easy:\n\nThe System.out.print line makes\nthe computer ask \"What is your name? \".\n\nThe next line makes the\nString s be whatever the human types; the computer reads the Line the human\ninputs.\n\nThe System.out.println\nmakes the computer say \"I like the name \" then s then \" very much\".\n\nFor example, if the human's name is \"Dr. Hector von\nSnotblower, Jr., M.D.\", the program makes the conversation go like this:\n\nWhat is your name? Dr. Hector\nvon Snotblower, Jr., M.D.\n\nI like the name Dr. Hector von\nSnotblower, Jr., M.D. very much\n\nInteger input\n\nThe program above lets you input a String. To input an integer\ninstead, do this trick: input a String, then convert the String to an integer\nby saying \"Integer.parseInt\". For example, this program asks the human's age,\nthen predicts how old the human will be 10 years from now:\n\nimport java.io.*;\n\npublic class Class1\n\n{\n\npublic static void main (String[]\nargs age=Integer.parseInt(br.readLine());\n\nSystem.out.println (\"Ten\nyears from now, you'll be \"+(age+10));\n\nwhile (true);\n\n}\n\n}\n\nHere's how the program works:\n\nThe System.out.print line makes\nthe computer ask \"How old are you? \".\n\nThe next line makes the integer\nage be the string the human types, converted to an integer.\n\nThe System.out.println makes\nthe computer say \"Ten years from now, you'll be \" then age+10.\n\nHere's a sample run:\n\nHow old are you? 27\n\nTen years from now, you'll be 37\n\nDouble-precision input\n\nIn the program above, age is an integer. If you want age to be\ndouble-precision instead, change the shaded line to this \u2014\n\ndouble age=Utils.parseDblList(br.readLine())[0];\n\nand insert one more line at the top of the program:\n\nimport com.ms.wfc.util.*;\n\nThat works in Visual J++ 6.0, but other Java versions use\ndifferent commands.\n\nIf a person's age is less than 18, let's make the computer say\n\"You are still a minor.\" Here's the fundamental line:\n\nif (age<18)\nSystem.out.println(\"You are still a minor.\");\n\nNotice you must put parentheses after the word \"if\".\n\nIf a person's age is less than 18, let's make the computer say\n\"You are still a minor.\" and also say \"Ah, the joys of youth!\" and \"I wish I\ncould be as young as you!\" Here's how to say all that:Since that \"if\" line is above the \"{\", the \"if\" line is a\nstructure line, similar to a \"public class\" line, and does not end in a\nsemicolon.\n\nHere's how to put that structure into a complete program,\nassuming age is an integer:\n\nimport java.io.*;\n\npublic class Class1\n\n{\n\npublic static void main\n(String[] args\nage=Integer.parseInt(br.readLine());else\n\n{\n\nSystem.out.println(\"You are an adult.\");\n\nSystem.out.println(\"Now we can have some adult fun!\");\n\n}\n\nSystem.out.println(\"Glad to have met you.\");\n\nwhile (true);\n\n}\n\n}\n\nIf the person's age is less than 18, the computer will print\n\"You are still a minor.\" and \"Ah, the joys of youth!\" and \"I wish I could be as\nyoung as you!\" If the person's age is not less than 18, the computer will print\n\"You are an adult.\" and \"Now we can have some adult fun!\" Regardless of the\nperson's age, the computer will end the conversation by saying \"Glad to have\nmet you.\"\n\nThe \"if\" statement uses this notation:\n\nNotationMeaning\n\nif (age<18) if\nage is less than 18\n\nif (age<=18) if\nage is less than or equal to 18\n\nif (age==18) if\nage is equal to 18\n\nif (age!=18) if\nage is not equal to 18\n\nif (age<18 && weight>200) if\nage<18 and weight>200\n\nif (age<18 || weight>200) if\nage<18 or weight>200\n\nNotice that in the \"if\" statement, you should use double\nsymbols: you should say \"==\" instead of \"=\", say \"&&\" instead of\n\"&\", and say \"||\" instead of \"|\". If you accidentally say \"=\" instead of\n\"==\", the computer will gripe. If you accidentally say \"&\" instead of\n\"&&\" or say \"|\" instead of \"||\", the computer will still get the right\nanswers but too slowly.\n\nStrings\nThe symbols <, <=, ==, and != let you compare numbers or characters but\nnot Strings. If you try to use them to compare Strings, you'll get wrong answers.\n\nFor example, suppose x and y are strings, and you want to test\nwhether they're equal. Do not say \"if (x==y)\". Instead, say:\n\nif (x.equals(y))\n\nMake sure you put the period after x and put parentheses around\ny.\n\nAn alternative is to say:\n\nif\n(x.equalsIgnoreCase(y))\n\nThat makes the computer compare x with y and ignore\ncapitalization. It makes the computer consider x to be \"equal\" to y if the only\ndifference is \"which letters in the string are capitalized\".\n\nTo test whether x's string comes before y's in the dictionary,\ndo not say \"if (x<y)\". Instead, say:\n\nif (x.compareTo(y)<0)\n\nWhile\n\nLet's make the computer print the word \"love\" repeatedly, like\nthis:\n\nlove love love love love love\nlove love love etc.\n\nlove love love love love love\nlove love love etc.\n\nlove love love love love love\nlove love love etc.\n\netc.\n\nThis program does it:\n\npublic class Class1\n\n{\n\npublic static void main\n(String[] args)\n\n{\n\nwhile (true)\nSystem.out.print(\"love \");\n\n}\n\n}\n\nIn that program, the \"while (true)\" means: do repeatedly. The\ncomputer will do System.out.print(\"love \") repeatedly, looping forever \u2014 or until you abort the program by pressing Ctrl with C.\n\nLet's make the computer start at 20 and keep counting, so the\ncomputer will print:\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\netc.\n\nThis program does it:\n\nProgramMeaning\n\npublic class Class1\n\n{\n\npublic static void main\n(String[] args)\n\n{\n\nint i=20; Start the integer i at 20.\n\nwhile (true) Repeat indented lines forever:\n\n{\n\nSystem.out.println(i); print\ni then press ENTER\n\n++i; increase i\n\n}\n\n}\n\nIt prints faster than you can read.\n\nTo pause the printing, press\nthe PAUSE key.\n\nTo resume the printing, press\nthe ENTER key.\n\nTo abort the program, press\nENTER, then press Ctrl with C.\n\nIn that program, if you say \"while (i<30)\" instead of\n\"while (true)\", the computer will do the loop only while i remains less than\n30; the computer will print just:\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\nTo make that list stay on the screen, so you can read it, make\nthe computer pause by saying \"while (true)\" at the end of that program, so your\nprogram looks like this:\n\nProgramMeaning\n\npublic class Class1\n\n{\n\npublic static void main\n(String[] args)\n\n{\n\nint i=20; Start the integer i at 20.\n\nwhile (i<30)Repeat indented lines while i<30:\n\n{\n\nSystem.out.println(i); print i\n\n++i; increase i\n\n}\n\nwhile (true);Pause, so human can read screen.\n\n}\n\n}\n\nInstead of saying \"while\n(i<30)\", you can say \"while (i<=29)\".\n\nFor\n\nHere's a more natural way to get that output of numbers from\n20 to 29:\n\npublic class Class1\n\n{\n\npublic static void main\n(String[] args)\n\n{\n\nfor (int i=20; i<=29; ++i) System.out.println(i);\n\nwhile (true);\n\n}\n\n}\n\nIn that program, the \"for (int i=20; i<=29; ++i)\" means \"Do\nrepeatedly. Start the integer i at 20, and keep repeating as long as i<=29.\nAt the end of each repetition, do ++i.\"\n\nIn that \"for\" statement, if you change the ++i to i+=3, the\ncomputer will increase i by 3 instead of by 1, so the computer will print:\n\n20\n\n23\n\n26\n\n29\n\nThe \"for\" statement is quite flexible. You can even say \"for\n(int i=20; i<100; i*=2)\", which makes i start at 20 and keep doubling, so\nthe computer prints:\n\n20\n\n40\n\n80\n\nLike \"if\" and \"while\", the \"for\" statement can sit atop a\ngroup of indented lines that are in braces.\n\nComments\n\nTo put a comment in your program, begin the comment with the\nsymbol //. The computer ignores everything that's to the right of //. Here's an\nexample:\n\n// This program is fishy\n\n// It was written by a sick\nsailor swimming in the sun\n\npublic class Class1\n\n{\n\npublic static void main\n(String[] args)\n\n{\n\nSystem.out.println(\"Our\nfunny God\"); // religious\n\nSystem.out.println(invented cod\"); // wet joke\n\nwhile (true);\n\n}\n\n}\n\nThe computer ignores all the\ncomments, which are to the right of //.\n\nWhile you type the program, the computer makes each // and\neach comment turn green. Then the computer ignores everything that's turned\ngreen, so the computer prints just:"}
{"text": "Chapter 4. Code Comfort\n\nChapter 4. Code Comfort\n\nWe've reached the precipice: we're staring at a game that doesn't do much and WON'T do much more unless we write some code. If you're brand new to this stuff, code is scary or, rather, the idea of code is scary. Will you have to type a bunch of ones and zeroes, or cryptic punctuation along thousands of monotonous line numbers? If you have ever tried developing a game or if you have ever been taught to program using some ancient language in a high school computer course, code might have been the thing to undo you. But, here you are giving it one more crack at the bat. The world NEEDS a three-dimensional keep-up game, by cracky! It's time to show the world what you're made of."}
{"text": "Academics\n\nCampusCEINTRODUCTION TO C++ PROGRAMMING\n\nItem: E158"}
{"text": "7966G-2Master the Java Foundation Classes withGraphic Java 2,the most complete and comprehensive guide to the AWT, Swing, and the 2D APIVOLUME 2: SWING(This is a 2 Volume set)Swing gives Java application programmers world-class tools for building professional, customizable cross-platform GUIs. This comprehensive reference by former Sun engineer David Geary shows experienced programmers how to take full advantage of Swing's power. Practical explanations and robust code examples provide the resources you need to build Java applications with sophisticated graphical user interfaces.Graphic Javais the one exhaustive reference that contains everything you need to know about Swing. In depth explanations are coupled with class diagrams and code examples for all of the key components, including:Buttons and labelsProgress bars and slidersFrames, windows, and dialogsInternal frames and desktop panesColor and file choosersMenus and toolbarsLists and combo boxesText componentsTables and treesYou'll discover the key design considerations associated with Swing development, including Swing's object-oriented idioms and design patterns, and the pluggable look and feel architecture. You will understand how to use the Swing components, but more importantly you will have an understanding of how the components are designed and how they fit together within the Swing framework."}
{"text": "Learning from Leonardo\n\nby Joseph J. Strout, La Jolla, CA\n\nVisualizing and understanding algorithms forward and backward\n\nIntroduction\n\nThough many readers of this magazine will have forgotten, programming does not come naturally to the human mind. New programmers struggle with burdens at several different levels: learning the syntax of a language, comprehending the step-by-step flow of program code, and grasping abstract algorithms. It's especially hard to learn these skills from a book or chalkboard; we understand better when we see things in action.\n\nA source-level debugger can let a student step through a program, which helps clarify how the computer is interpreting the code. It doesn't help much with following complex algorithms at a more abstract level, though. In addition, a traditional debugger can only step forward; it's like a VCR with no rewind button. This means that if you miss a step or want to see a computation again, you have to restart the program from the beginning. This is where Leonardo comes in.\n\nWhat Leonardo Does\n\nLeonardo is a C development environment made specifically for teaching and learning. It provides two major improvements over a traditional IDE. First, it provides a mechanism for visualizing computations graphically as they happen; by attaching graphical representations to key variables in a program, it's relatively easy to get a high-level understanding of what the algorithm is doing. Second - and this is the one that really amazes me - its source-level debugger runs both forwards and backwards! In addition to the usual step forward, step down (into a function), step up (out of the function), and run, the Leonardo control panel has buttons to step backwards, step back out of a function, step back into a function, run backwards, and reset the process.\n\nCode written with Leonardo is completely reversible. Variable assignments will be undone, output sent to the console will disappear, graphics drawn will be undrawn, and so on. You have access to the full set standard ANSI functions, and yes, those are reversible too. The number of program steps you can undo is limited by available memory, but in practice, this did not seem to be a serious limitation.\n\nLeonardo does this magic by running your code on a \"Virtual CPU\" that not only provides reversible execution, but also catches memory errors, invalid parameters to standard function calls, leaks, and so on. You can't produce stand-alone applications with Leonardo, and programs written in it run much slower than they would as native Mac applications. But for illustrating programming concepts, or even debugging a complex algorithm, Leonardo's graphical state display and reversible execution are hard to beat.\n\nUsing Leonardo\n\nLeonardo ships as a PowerPC application plus standard C headers and libraries. It also comes with a large and neatly organized set of ready-to-run samples.\n\nTo get a feel for Leonardo's animation capabilities, simply launch the program and pick any of the samples from the Program hierarchical menu. Most of these illustrate common data structures and algorithms, like a sorted heap or the mini-max game-playing algorithm, but the collection also includes a few games and utilities. Choosing an item will run the corresponding program, which comes already compiled. Most programs present both a text console interface, and one or more graphical displays to give you a peek at what's going on inside. See Figure 1 for a typical example (from the \"RedBlackTrees\" sample).\n\nFigure 1.A Leonardo text console and graphics window.\n\nAs a consequence of running the already-compiled executable, you have only a limited control palette and no access to the source code. This is fine for observing the graphical illustration of an algorithm, but to dig any deeper, you'll want a full set of controls.\n\nFor that, use the Open C Project menu command, or simply double-click one of the project files in the finder (they all end in \".\u00b5\" like the old Metrowerks convention). This presents a project window similar to that in other IDEs; it lists the files in the project, and has buttons for running, setting project options, and so on (see Figure 2). The first thing you'll want to do is open the project settings window, by clicking the rightmost button. Project settings in Leonardo are mercifully simple; it's just a matter of setting a couple of memory partitions, and toggling four build options on or off. I recommend you turn all four on - in the pre-built projects, \"Debug Mode\" is turned off, which is why access to the code was so limited before.\n\nFigure 2.Leonardo's project window (top) and project settings dialog.\n\nWith debug mode turned on, running the project presents a full debug console (Figure 3) as well as a source-code display. This will be familiar to anyone used to other source-level debuggers; you can step through your code in various step sizes (e.g., step down into a function, or run until the current function returns). The surprising controls are the buttons at lower left, which allow you to roll a program backwards. While delightful, the use of these buttons is staightforward and little more needs to be said about them.\n\nFigure 3.Leonardo's debug-mode process control panel.\n\nThe visualization commands are another matter. The graphical display that accompanies most of the sample projects is created by embedded commands in the source code, in a special declaration language called \"Alpha.\" While you don't need to understand Alpha to make good use of the sample projects, making your own graphical displays will require a bit of study.\n\nSpeaking Alpha\n\nAlpha commands are embedded in the C code within block comments. As such, they are ignored by a C compiler, but can be interpreted by a special Alpha preprocessor. This processor sets up graphical elements and inserts calls to update those elements when a relevant variable changes value.\n\nOne starts by declaring a window for the graphical display. There can be multiple windows, so each is given an ID number used to refer to it later, as follows:\n\n/**\nView(Out 1); // declare a window with ID 1\n**/\n\nThis creates a window entitled \"View 1\" to appear, as soon as the code containing this block is executed. If it is at global scope, the window will appear as soon as the program runs, before entry into the main() function. When the code block containing the above directive exits, the window will disappear. The Alpha preprocessor acts as if it is converting these directives into C++ object declarations; they can occur anywhere in a code block, and they disappear automatically when that code block is finished.\n\nA blank window is not very informative, so let's add a \"Rectangle\" declaration, based on the width of a variable, like so:\n\n// make a rect with ID=0, left=20, top=10,\n// width=i, height=10 in view=1:\nRectangle(Out 0, Out 20, Out 10, Out H, Out 10, 1) Assign H=i;\n\nThe frequent (but not constant) repetition of the keyword \"Out\" before parameters, as well as the need to use the \"Assign\" keyword rather than simply specifying \"Out i\" in the correct position in the parameter list, are mysteries difficult to fathom without a complete manual (see below). However, Leonardo comes with literally dozens of examples of graphical displays using Alpha, so for most purposes you should be able to find a similar example and adapt it to your specific needs. My example here (shown in complete form in Listing 1) was adapted from an example given in the \"Read Me\" document, with reference to Appendix A of the manual, and was fairly easy to produce. It displays the state of two variables with two different rectangles - a sort of dynamic bar graph, continually updated as the program runs.\n\nDocumentation & Support\n\nLeonardo is written by two developers in Italy, and is distributed free of charge, so commercial-level technical support is not to be expected. The chief support venue is the Leonardo web site (see URL at the end of this article), which is clean and well designed, and which (fortunately for most American users at least) is in well-written English. It includes an overview; a number of images, including animations; a program library; and an on-line manual. The manual is also included with the distribution.\n\nUnfortunately, the manual is still \"under construction\" and stops just when it was getting interesting. Only the first two chapters, \"Installing Leonardo\" and \"Let's write a C program\" are present; the rest of the manual is outlined but not yet available. Still, these two chapters are an excellent introduction to the system, and provide enough to get you started. There is also an appendix which provides a brief reference for all the Alpha predicates used to provide graphical output.\n\nSending email to the authors appears to be the only way to get interactive support. A mailing list would have been nice for such a complex and powerful tool. Nonetheless, when I sent some questions and suggestions to the authors, I received a helpful response fairly quickly.\n\nLimitations\n\nDespite the version number (3.4.1 at the time of this writing), Leonardo is clearly not a finished product. The manual is mostly unwritten, and there are menu items which are apparently not yet implemented. For example, the Preferences command is present in the Edit menu but perpetually disabled.\n\nFunctionally, Leonardo measures up fairly well. Its most serious shortcoming is that, surprisingly, there is no way to view or change the values of variables in the debugger. That is unfortunate; graphical visualization is very helpful for getting the big picture, but often one needs to inspect or tweak individual variables in order to fully understand the code. The omission of this feature will leave some users having to go back and forth between Leonardo and another IDE. In addition, it's not possible to set or change breakpoints while the program is running; breakpoints can only be set by adding a #pragma to the code and rebuilding. But these were the only functional limitations found; overall it is quite solid.\n\nThe interface, on the other hand, has a few more problems. First, it frequently displays black or red text against a thick marbled background, making it nearly illegible. This is true even for the Windows-style bar at the bottom of the screen that displays context-sensitive help - a poor substitute for balloon help. The windows have a very annoying habit of expanding to fill the entire screen whenever you touch anything, regardless of whether they have any actual data to display in all that space. There are interface widgets on each document-style window which look like they may be pop-up menus - and sometimes they are, but sometimes they aren't. Checkbox items can't be toggled by clicking on their text, as is usual in the Mac interface, but only by clicking on the box itself. Also in the \"minor quibbles\" category, the integrated editor does not support the standard F1-F4 editing keys, and it'd be nice to be able to change the font.\n\nAs a piece of software engineering, Leonardo is excellent; as an example of interface design, it's somewhat lacking. Hopefully this will improve as the program matures. In my email to the authors, I complained about some of the worst problems (such as the marbled background), and was assured that future versions would correct at least some of them. It's worth repeating that this is free software, and none of the limitations mentioned above are very serious; overall the quality is superb.\n\nConclusion\n\nLeonardo is a very remarkable application. While perhaps not as polished as a commercial IDE, it is extremely well polished by the standards of free software, and it was rock solid in my hands. The visualization provided by the Alpha predicates allow one to watch an algorithm at work in a very powerful and intuitive way, and the ability to step ordinary C code forward and backward is nothing short of amazing.\n\nThis application would be most useful in computer science and programming courses. It comes with a large library of common data structures and algorithms right out of the box, ready to illustrate their workings in animated color, and more could easily be written from these examples. Any one of these could feature prominently in a class lecture, and is likely to engage the students and foster comprehension much better than abstract discussions or static diagrams. Since Leonardo is free, students can be encouraged to download a copy and play with the programs on their own. When they do, they'll find Leonardo's reversible execution to be an extremely helpful way to explore any algorithm.\n\nLeonardo's only real drawback is that, as yet, it is unfinished - a state especially regrettable in the manual. The authors are doing this work with no financial support from the users, so it's the users' responsibility to support them in other ways. Write to them, let them know what you like and don't like, tell them how you're using it, and ask if there is anything you can do to help. With the concern and support of a strong user base, Leonardo is sure to become an indispensable tool for teaching, learning, and debugging.\n\nUseful URLs\n\nJoe Strout works as a software developer in a neuroscience lab in southern California. While not helping to unravel the secrets of the brain, he enjoys pursuits ranging from martial arts to 3D modeling. He welcomes your comments at joe@strout.net visions"}
{"text": "There are some good books for beginners: e.g Learning Python and Programming Python\nI think the best way is to start to write a program, and if you have difficulties, ask the forums.\n(I've always write a CD/DVD catalog program in every programming language I have to learn:)"}
{"text": "C++ Style Guide\n\n\"Programs must be written for people to read, and only incidentally for machines to execute.\" (Abelson & Sussman)\n\n\"The computer programs that are truly beautiful, useful, and profitable must be readable by people. So we ought to address them to people, not to machines.\" (Donald Knuth)\n\n\"You see, assholes don't care whether other people can read their code. What they love is if you have to struggle to read their pieces of dense idiotic shit. To them, punctuation, style, indentation, spacing, or comments are just not necessary. You have to be able to read it the way they wrote it and f%$#! you if you can't.\" (Zed Shaw)\n\nWriting a program that \"just works\" isn't enough. Programs must be readable and expressive. Here is a general set of rules to follow when formatting your code.\n\nThe most important rule is: KISS (keep it short and simple). Always choose the simpler implementation option over the more complicated one. This makes maintenance a lot easier.\n\nWrite good C++ code. That is, readable, well commented when necessary, and object-oriented."}
{"text": "1.10a \u2014 How to design your first programs\n\nBy Alex, on September 5th, 2009 convert that idea into actual code. But it turns out, you have many of the problem solving skills you need already, acquired from every day life.\n\nThe most important thing to remember (and hardest thing to do) is to design your program before you start coding. In many regards, programming is like architecture. What would happen if you tried to build a house without following an architectural plan? Odds are, unless you were very talented, you'd end up with a house that had a lot of problems: leaky roofs, walls that weren't straight, etc\u2026 Similarly, if you try to program before you have a good gameplan moving forward, you'll likely find that your code has a lot of problems, and you'll have to spend a lot of time fixing problems that could have been avoided altogether with a little design.\n\nA little up-front planning will save you both time and frustration in the long run.\n\nStep 1: Define the problem\n\nThe first thing you need to figure out is what problem your program is attempting to solve. Ideally, you should be able to state this in a sentence or two. For example:\n\nI want to write a phone book application to help me keep track of my friend's phone numbers.\n\nI want to write a random dungeon generator that will produce interesting looking caverns.\n\nI want to write a program that will take information about stocks and attempt to predict which ones I should buy.\n\nAlthough this step seems obvious, it's also highly important. The worst thing you can do is write a program that doesn't actually do what you (or your boss) wanted!\n\nStep 2: Define your targets\n\nWhen you are an experienced programmer, there are many other steps that typically would take place at this point, including:\n\nUnderstanding who your target user is\n\nDefining what target architecture and/or OS your program will run on\n\nDetermining what set of tools you will be using\n\nDetermining whether you will write your program alone or as part of a team\n\nCollecting requirements (a documented list of what the program should do)\n\nHowever, as a new programmer, the answers to these questions are typically simple: You are writing a program for your own use, alone, on your own system, using an IDE you purchased or downloaded. This makes things easy, so we won't spend any time on this step.\n\nStep 3: Make a heirarchy of tasks\n\nIn real life, we often need to perform tasks that are very complex. Trying to figure out how to do these tasks can be very challenging. In such cases, we often make use of the top down method of problem solving. That is, instead of solving a single complex task, we break that task into multiple subtasks, each of which is individually easier to solve. If those subtasks are still too difficult to solve, they can be broken down further. By continuously splitting complex tasks into simpler ones, you can eventually get to a point where each individual task is manageable, if not trivial.\n\nLet's take a look at an example of this. Let's say we want to write a report on carrots. Our task hierarchy currently looks like this:\n\nWrite report on carrots\n\nWriting a report on carrots is a pretty big task to do in one sitting, so let's break it into subtasks:\n\nWrite report on carrots\n\nDo research on carrots\n\nWrite outline\n\nFill in outline with details about carrots\n\nThat's a more managable, as we now have three tasks that we can focus on individually. However, in this case, \"Do research on carrots is somewhat vague\", so we can break it down further:\n\nWrite report on carrots\n\nDo research on carrots\n\nGo to library and get book on carrots\n\nLook for information about carrots on internet\n\nWrite outline\n\nInformation about growing\n\nInformation about processing\n\nInformation about nutrition\n\nFill in outline with details about carrots\n\nNow we have a hierarchy of tasks, none of them particularly hard. By completing each of these relatively manageable sub-items, we can complete the more difficult overall task of writing a report on carrots.\n\nThe other way to create a hierarchy of tasks is to do so from the bottom up. In this method, we'll start from a list of easy tasks, and construct the hierarchy by grouping them.\n\nAs an example, many people have to go to work or school on weekdays, so let's say we want to solve the problem of \"get from bed to work\". If you were asked what tasks you did in the morning to get from bed to work, you might come up with the following list:\n\nPick out clothes\n\nGet dressed\n\nEat breakfast\n\nDrive to work\n\nBrush your teeth\n\nGet out of bed\n\nPrepare breakfast\n\nGet in your car\n\nTake a shower\n\nUsing the bottom up method, we can organize these into a hierarchy of items by looking for ways to group items with similarities together:\n\nGet from bed to work\n\nBedroom things\n\nGet out of bed\n\nPick out clothes\n\nBathroom things\n\nTake a shower\n\nBrush your teeth\n\nBreakfast things\n\nPrepare breakfast\n\nEat breakfast\n\nTransportation things\n\nGet in your car\n\nDrive to work\n\nAs it turns out, these task hierarchies are extremely useful in programming, because once you have a task hierarchy, you have essentially defined the structure of your overall program. The top level task (in this case, \"Write a report on carrots\" or \"Get from bed to work\") becomes main() (because it is the main item you are trying to solve). The subitems become functions in the program.\n\nIf it turns out that one of the items (functions) is too difficult to implement, simply split that item into multiple subitems, and have that function call multiple subfunctions that implement those new tasks. Eventually you should reach a point where each function in your program is trivial to implement.\n\nStep 4: Figure out the sequence of events\n\nNow that your program has a structure, it's time to determine how to link all the tasks together. The first step is to determine the sequence of events that will be performed. For example, when you get up in the morning, what order do you do the above tasks? It might look like this:\n\nint main()\n{\n// Get first number from user\nGetUserInput();\n// Get mathematical operation from user\nGetMathematicalOperation();\n// Get second number from user\nGetUserInput();\n// Calculate result\nCalculateResult();\n// Print result\nPrintResult();\n}\n\nStep 5: Figure out the data inputs and outputs for each task\n\nOnce you have a hierarchy and a sequence of events, the next thing to do is figure out what input data each task needs to operate, and what data it produces (if any). If you already have the input data from a previous step, that input data will become a parameter. If you are calculating output for use by some other function, that output will generally become a return value.\n\nWhen we are done, we should have prototypes for each function. In case you've forgotten, a function prototype is a declaration of a function that includes the function's name, parameters, and return type, but does not implement the function.\n\nLet's do a couple examples. GetUserInput() is pretty straightforward. We're going to get a number from the user and return it back to the caller. Thus, the function prototype would look like this:\n\nint GetUserInput()\n\nIn the calculator example, the CalculateResult() function will need to take 3 pieces of input: Two numbers and a mathematical operator. We should already have all three of these by the time we get to the point where this function is called, so these three pieces of data will be function parameters. The CalculateResult() function will calculate the result value, but it does not display the result itself. Consequently, we need to return that result as a return value so that other functions can use it.\n\nGiven that, we could write the function prototype like this:\n\nint CalculateResult(int nInput1, char chOperator, int nInput2);\n\nStep 6: Write the task details\n\nIn this step, for each task, you will write it's actual implementation. If you have broken the tasks down into small enough pieces, each task should be fairly simple and straightforward. If a given task still seems overly-complex, perhaps it needs to be broken down into subtasks that can be more easily implemented.\n\nFinally, the last step is to connect up the inputs and outputs of each task in whatever way is appropriate. For example, you might send the output of CalculateResult() into an input of PrintResult(), so it can print the calculated answer. This will often involve the use of intermediary variables to temporary store the result so it can be passed between functions. For example:\n\n// nResult is a temporary value used to transfer the output of CalculateResult()\n// into an input of PrintResult()\nint nResult = CalculateResult(nInput1, chOperator, nInput2);\nPrintResult(nResult);\n\nThis tends to be much more readable than the alternative condensed version that doesn't use a temporary variable:\n\nPrintResult( CalculateResult(nInput1, chOperator, nInput2) );\n\nThis is often the hardest step for new programmers to get the hang of.\n\nNote: To fully complete this example, you'll need to utilize if statements, which we won't cover for a while, but you're welcome to take a sneak-peak at now.\n\nA fully completed version of the above calculator sample follows (hidden in case you want to take a stab at it yourself first):\n\nKeep your program simple to start. Often new programmers have a grand vision for all the things they want their program to do. \"I want to write a role-playing game with graphics and sound and random monsters and dungeons, with a town you can visit to sell the items that you find in the dungeon\" If you try to write something too complex to start, you will become overwhelmed and discouraged at your lack of progress. Instead, make your first goal as simple as possible, something that is definitely within your reach. For example, \"I want to be able to display a 2d representation of the world on the screen\".\n\nAdd features over time. Once you have your simple program working and working well, then you can add features to it. For example, once you can display your 2d world, add a character who can walk around. Once you can walk around, add walls that can impede your progress. Once you have walls, build a simple town out of them. Once you have a town, add merchants. By adding each feature incrementally your program will get progressively more complex without overwhelming you in the process.\n\nFocus on one area at a time. Don't try to code everything at once, and don't divide your attention across multiple tasks. Focus on one task at a time, and see it through to completion as much as is possible. It is much better to have one fully working task and five that haven't been started yet than six partially-working tasks. If you split your attention, you are more likely to make mistakes and forget important details.\n\nTest each piece of code as you go. New programmers will often write the entire program in one pass. Then when they compile it for the first time, the compiler reports hundreds of errors. This can not only be intimidating, if your code doesn't work, it may be hard to figure out why. Instead, write a piece of code, and then compile and test it immediately. If it doesn't work, you'll know exactly where the problem is, and it will be easy to fix. Once you are sure that the code works, move to the next piece and repeat. It may take longer to finish writing your code, but when you are done the whole thing should work, and you won't have to spend twice as long trying to figure out why it doesn't.\n\nMost new programmers will shortcut many of these steps and suggestions (because it seems like a lot of work and/or it's not as much fun as writing the code). However, for any non-trivial project, following these steps will definitely save you a lot of time in the long run. A little planning up front saves a lot of debugging at the end.\n\nThe good news is that once you become comfortable with all of these concepts, they will start coming naturally to you without even thinking about it. Eventually you will get to the point where you can write entire functions without any pre-planning at all.\n\n\u2026and so on. The basic idea is that the user inputs a horizontal (x) and vertical (y) length, and gets delicious trig function goodness out. The program outputs the correct hypotenuse, and sin/cos/tan in radians, but it doesn't output the correct sin/cos in degrees. When x = y = some double, the angles should be 45 degrees, but I get something along the lines of 40.5 to whatever level of precision specified. Anyone have any idea why this is happening and what I can do to fix it?\n\nLooking at the date I'm pretty sure you've figured it out by now, but just in case:\n\nYour error in this case is a reasoning error. sin(x) = opposite/hypotenuse, with x being the angle. Your error started with your assumption that opposite/hypotenuse equals the angle. As stated, angle != sin(angle). In order to find the angle you should use the inverse function, found in 'cmath' for C++ and 'math.h' for C. The inverse function is asin(double x), where x = sin(x), called mathematically as arc sine. Arc cosine is acos(double x). You can convert things from there.\n\nNote that arc sine and arc cosine is not definitively an inverse function to sine and cosine if you know what inverse functions are, but that doesn't matter all that much here.\n\nThank you very much for this tutorial. Seems to be the best online cpp tutorial so far, and I find this part and your comments on coding style of as great importance as explanation of commands, functions etc.\n\nyou missed the function prototypes at the beginngin and you need to put the last functions inside of int main(). it's best for you to read on, your problems will be addressed very soon in alex's superb tutorials!\n\nI recently decided to teach myself C++ because I would like to get into game programming and well I am glad I found this wonderful tutorial. I understand it will take time and am willing to do give time, but I'm curious if I will be able to make a 2D World (as stated in this article) soon seeing as I am on Chapter 2 at the moment and am a bit confused how to put graphics to program.\n\nPutting graphics into a program usually uses separate libraries that incorporate c++ to teach the graphics to react/act to one another.\nIt is a lot to understand if you want to make games with c++, I am taking a Game Design + Development course and c++ is more used for larger scale games that require a team to implement it.\n\nIf you want to create indie games (games created by you, yourself) you may want to start coding with another program like Flash AS3 (ActionScript) or java.\n\nThis is a really good tutorial on c++ though from all the online / book instructions I have come across (which is a lot) and c++ is really important to know on any coding scale. I would recommend googling graphics programming and see what comes up. Check out DirectX or SDL which are c++ graphic related libraries and there are probably more, those are the only two I know about and somewhat know how to use. DirectX is a very LARGE library though and can be kind of overwhelming. OpenGL is another graphics related one, but I am not sure if it uses windows programming (which is still c++ the libraries are just different)\n\nHello, I am fairly new to programming and have been finding these tutorials very helpful. Could someone please help me find out what is wrong with my code. Everything compiles fine, but when I run the program the result is for example if I wanted to calculate 1+2 the answer would print 2. The second number always gets printed and not the calculated value.\n\nI did not understand one thing in this lesson, but you may have not been mentioning it or be mentioning it later: How do you get keyboard input? So, like, the person can enter their name, press enter, and then the program will print it? If you will explain this later, I am sorry for being impatient.\n\nThis began as an attempt to somewhat duplicate the calculator program in the example, one that would read the value, expression, and second value all at the same time. I failed for so long I decided to just try and make a program that would identify what KIND of expression you entered, not even evaluate it. Just for it to say: \"You entered an addition equation. \" \u2026 and so on for other types of equations. The problem is that no matter what type of equation I enter, whether it is 5 + 5, 5 \u2013 5, 5 * 5, or 5 / 5 I always get a response telling me that I entered a subtraction equation. Any ideas, anyone?\n\nRegarding the calculator, I tried according to your example and it was a bit confusing(I'm a noob as you can guess) and i was having a bit hard time understanding what goes, where it goes\u2026, but then I tried a different approach. I typed on separate file what I want to do as you suggested so I can keep track of what i'm doing, what is expected and what I want to achieve. After the typing, things were MUCH MUCH simpler, so, this is my short code I made:\n\nHey!\nI have read through all the stuff before it now, and i think this is an ideal moment to say thanks for these amazing guides! I just wrote my first program all myself, (basic but it makes me look clever to my friends ;)), it basiclly just adds to numbers together, find multiples, although i did manage to use a IF thingy, (i looked at the later chapter). So YEAH! Just shows how well you have wrote your guides :)\n\nThanks sooo much\nI'm gonna be reading all of this no matter what so watch out for more of my posts.\n\nafter all those digging around with this chapter\u2026i found out another way of writing the calculator\u2026.it is much better because u dont need to enter it one by one\nbut u can enter the whole calculation at once and then the result is up\u2026\n\nThis is my second time reading through this chapter and one particular issue that caught my eye is that in section 0.1, you say \"We will also avoid the twin evils\u2026and the unexplained new concept, where a new concept that is integral to the example is introduced without any mention of what it is or how it works\u2026\"\n\nHowever, in section 1.10a, you use the command \"char\" without having ever introduced it, or its function anywhere in the tutorial. I was able to eventually pick up on what it did, but still very confusing for first time programmers.\n\nThank you for these tutorials. I have bought text books to try and teach myself\u2026didn't work out so well. It seems in most cases the textbooks are 90% BS and 10% the stuff i need to know. These tutorials seem to be 100% of what i need to know. Again, thanks.\n\nI am attempting to write the calculator program but, am having an issue. Through my troubleshooting it seems that when each function returns the value to main the value it returns is 0 (or \" \" in the char's case). I am wondering if I am not using cin correctly or what? I have looked at a few different sections including the comments sections and not been able to find the answer, so i apologize if it has already been covered. cin >> a should store the users input as variable a correct? Here is my code.\n\nI'm having an issue with my calculator program, and I can't figure out what the error means. The code won't compile and gives me an error saying \"No conversion from 'const char *' to 'int' and 'int differs in indirection from'. Here's the code:\n\n// calcTest.cpp : Defines the entry point for the console application.\n//\n\nThank you Mr. Alex for these tutorials. This are the first tutorials that actually explain everything. I have a few questions tho.\n\n1. Why arent the forums working? It says the page doesnt exist.\n\n2. After writing the calculator I'm trying to modify it so that after it displays the result, I want it to use that result as the first integer, and then ask the user for an operator and the second integer, but no luck. The result is always \"4199440\u2033 :P\nGuess its not time for that yet lol.\nCan anyone at least satisfy my curiosity on that matter?\n\nWell, I rewrote my code. It seems like I had some really stupid syntax mistakes! Now, I do not have errors about variables or functions, but I have 4 errors about the if statements! More specific, the produced errors are:\n\nNevermind, I think I understood how the think with functions works. I solved the 1st problem of the next section. Here is my code (once again, no HTML tags used, because I don't know how \u2026 embarassing maybe, but true!):\n\nI used by purpose different variables (int c and int result) to see what will happend. As stated in some comment in a previous section, the compiler needs to see only the form of the function (which is the type of the return value, how many parameters it uses, and which is the type of these parameters). It is the caller which decides the value of the variables. So, while may seems that int c is not defined anywhere, substantially int c IS int return when it is called by the main(). (Am I right here or \u2026?)\n\nYou are so right! Pls, could you comment also about my question regarding C++ functions? All the comments I have read from you so far they were very helpful, so I am sure that u can really help me to clear things out. Thank you.\n\n@Chris \u2013 Gravatar.\n@Kostas81 \u2013 when you call on the writenumber, it copies the value of whatever you send to the function, defines it as 'c', uses it, and at the end of the function it destroys the value, if that was what you were asking.\n\nI think you are right. The variables nX and nY are defined and used localy inside\nint CalculateResult(int nX, char chOperation, int nY). But it is the caller, that is, main(), which decides which the variables are, and the decision is nX = nInput1 and nY = nInput2. (It could be just a number, as for example nX = 3 and nY = 5, as in a previous example. But here the number is the integer given from the user as input. The first number is assigned to nInput1 and the second to nInput2. And then, main() uses int CalculateResult(nInput1, chOperation, nInput2).\n\nWait, I just worked out why. If I put in say, a + as the input, the other tests will result true, meaning it will always call GetOperation() again.\nI replaced the if with if(op != '+' && op != '-' && op != '*' && op != '/')\nHowever, it seems to return the first value I put in. So, if I tried to have the letter 'a' as an operator, it tells me its not valid, then asks for another, so I put in +. It's still returning a.\n\nNeed some help with the calculator code. I wrote it and compiled it. It worked, with small numbers and adding/subtracting. I used it in my other program but when I got someone to test it they used big numbers. It works but gives wrong answer. And if it's a really big number then it just shows the 3 outputs at the same time, asking for operator, new number and result, in the same row and gives result as 0.\nThis is what happens:\nPlease enter a number: 586565730854226435643\nPlease enter an operator (+,-,*,/): Please enter a number: Your result is: 0\nI can't work out where I went wrong.\n\nI would just like to point out that it's not only new programmers who make the mistake of not bothering with any pre-planning before they start coding. I've worked in software development for many years and quite a high proportion of the experienced developers I work with repeatedly make this mistake on every project and then wonder why they spend most of their working life debugging their code. I would urge anyone new to programming to heed the advice here and put some time into planning out programs in some detail before you start coding. This will avoid a lot of debugging and I can confirm from experience that debugging badly written code is probably the most mind-numbingly tedious activity I've ever come across.\n\nthen just tweak the corresponding equations in the calculate and result functions \u2026.. that's nice \u2026.. wow I just started yesterday and I'm getting really hooked on C++ \u2026. well, your way of explaining things is really easy to understand \u2026. thanks Alex.\n\nIf you read some coments your question have been answered\u2026\nHere is a copy paste answer (answer from zingmars):\nYou need to use two equality signs (\"=\") when comparing something.\nA single sign is an assignment.\n\nI don't know about using cout , i would just use \"cin >> a\" (but declare int a; on the line previous, do that same with char for the operand. Also, for the if statements you need to use the single apostrophe, not the punctuation mark shifted from the tilde. ` vs '. Finally, your last line of code that says result needs parameters inside the parentheses. That should do it."}
{"text": "Formats\n\nDescription de l'ouvrage\n\nDate de publication: 2 novembre 2001 | S\u00e9rie: Classique FrancFinally someone has written a beginning book on PERL for biologists, and has also done an excellent job of doing so. This book assumes no prior programming experience, and therefore suits the biologist who needs to concentrate on using computers to solve biological problems, and not have to become a computer scientist in the process. PERL can be a very cryptic language, but it is also extremely concise, and PERL programmers frequently and rightfully boast about their \"one-liners\" that accomplish complicated tasks with only one line of code.\n\nSince it is addressed to readers with no programming experience, the author introduces some elementary concepts of programming in the first three chapters. These include what text editor to use, how to install PERL, how run PERL programs, and other relevant elementary topics.\n\nThe author then gets down to writing a program to store a DNA sequence in chapter 4. Very basic, it merely reads in a string and prints it out, but serves to start readers on their way to developing more useful programs. Later a program for the transcription of DNA to RNA is given, which illustrates nicely the binding, substitution and trace operators. Block diagrams are used here, and throughout the book, to illustrate basic PERL operators. The author shows in detail how to read protein sequence data from a file and how to use it in a PERL program. The reader is also introduced to the most ubiquitous data structure in all of computing: the array. Already the reader gets a taste of the power of PERL to manipulate arrays, using operations such as 'unshift', 'push', 'splice', etc.\n\nThe next chapter introduces conditional statements in PERL, as a warm-up for the discussion on finding motifs in sequences. The reader can see why PERL is the language of choice in bioinformatics, with its ability to find substrings or patterns in strings. Things do become more cryptic in the discussion of regular expressions, but the reader can get through it with some effort. Interesting programs are given for determining the frequency of nucleotides.\n\nSince the programs have become more complicated to this point, a discussion of subroutines follows in the next chapter. And, for the same reason, the reader is introduced to debugging in PERL in this chapter also. The greater the complexity of the program, the harder it becomes to avoid making mistakes, and even more difficult to find them. The very important concepts of pass by value versus pass be reference are discussed briefly in this chapter.\n\nRandom number generators, so important in any consideration of mutations, are discussed in chapter 7. It is shown, via some straightforward programs, how to select a random location in DNA and mutate it with some other nucleotide. In addition, the author shows how to use random numbers to generate DNA sequences and mutate them in order to study the effect of mutations over time.\n\nThe next chapter is the most interesting in the book, for it shows how PERL can be used to simulate how the genetic code directs the translation of DNA into protein, the hash data structure being used extensively for this purpose. The author shows how to read DNA from files in FASTA format, and discusses in detail reading frames. He gives a useful subroutine to translate reading frames.\n\nThe author returns to regular expressions in chapter 9, wherein they are used as 'wildcards' to search for a particular string in a collection of strings. In addition, the range operator is used to find restriction sites. Regular expressions are also used in the next chapter to manipulate GenBank 'flat files'. The author does however give URLs for more sophisticated bioinformatics software. This is followed in chapter 11 by a discussion of the use of PERL to work with files in the Protein Data Bank. Recursion, one of the most powerful techniques in programming, is introduced here.\n\nChapter 12 covers the Basic Local Alignment Search Tool (BLAST), wherein readers get a taste of the field of computational biology. This extremely popular software package is used to find similarity between a given sequence and a library of known sequences. The author does discuss some of the basic rudiments of string matching and homology, and encourages the reader to consult the BLAST documentation for further details. In addition, the author briefly discusses the Bioperl project in this chapter, and shows the reader how to run some elementary computations using it.\n\nThis book definitely is a timely one and it will serve the needs of biologists who need to obtain some programming expertise in PERL. There are helpful exercises at the end of each chapter that serve to solidify the understanding of the concepts introduced in the chapter. After a thorough study of it, readers will be well-equipped to use PERL in bioinformatics. With more mathematical background, readers after finishing it will be able to enter the exciting field of computational biology, a field that is exploding, and one in which will require imaginative programming skill in the future.\n\n\"Bioinformatics\" is the new sexy term for what used to be called simply \"computational biology\". Simply put, it involves pretty much any application of computation techniques to biological problems. The reason for the new nomenclature and the greatly increased interest in the topic is, like much in modern biology, a more-or-less direct consequence of the many genome sequencing projects of the last decade.\n\nThe consensus in the field seems to be that it's more productive (and certainly easier) to teach biologists how to program, rather than try to get programmers up to speed on the intracities of molecular biology. For similar reasons, Perl is a popular language to learn: it's easy to get off the ground and be productive with it, without requiring a heavy computer science background. (This, of course, has downsides as well...)\n\nNever one to miss out on a trend, I'm going to be teaching a course on Bioperl and advanced Perl programming, starting next fall, which means I'm doing a lot of reading in this topic area, trying to develop lectures and find good background reading material. One of the first books I grabbed was _Beginning Perl for Bioinformatics_, which has been sitting on my \"to read\" shelf since O'Reilly sent me a review copy in December of 2001. It's a typical O'Reilly \"animal\" book (the cover bears three tadpoles), which does a decent job of introducing the basic features of the Perl language, and it should enable a dedicated student to get to the point where she can produce small useful programs. However, I'm not completely happy about the book's organization, and I think the occasional \"if you're not a biologist, here's some background\" interjections could have been cut without hurting anything.\n\nThe initial chapters in the book cover \"meta\" information, such as theoretical limits to computation, installing (or finding) the Perl interpreter on your computer, picking a text editor, and locating on-line documentation. Some general programming theory stuff is covered as well -- the code-run-debug cycle, top-down versus bottom-up design, the use of pseudocode. There's also some biology background, but it's very introductory level stuff -- DNA has four bases, proteins are made of 20 amino acids, and so on.\n\nIn chapter four, the book begins to get into actual Perl, with some coverage of string manipulation. Examples deal with simulating the transcription of DNA into RNA. Chapters five and six continue to flesh out the language, covering loops, basic file I/O, and subroutines. Chapter seven introduces the rand() function, in the context of simulating mutations in DNA. Subsequent chapters introduce the hash data type (using a RNA->protein translation simulation), regular expressions (as a way to store the recognition patterns of restriction endonucleases), and parsing database flat files and BLAST program output.\n\nI'm clearly out of the target audience of the book, as I already have a strong working knowledge of Perl. Perhaps that's why I found the order that concepts were presented in to be a bit strange -- for example, hashes, which are a fundamental data type, aren't introduced until halfway through the book, and regular expressions (one of the key features of Perl) first appear even later. As I said above, I also found the biological background sections to be more distracting than anything, but I've also got a strong biology background, so perhaps I'm off base here too. That said, I think a person with a CS background would be better served with a copy of _Learning Perl_ and an introductory molecular biology text than with this particular book.\n\nOne of the things I did enjoy about the book were the frequent coding examples, all of which presented realistic computational biology sorts of problems and then demonstrated how to solve them. I'm sure that when I get around to writing lectures, I'll be leafing through this book looking for problems I can use in class.\n\nOverall, recommended for biologists without programming experience who would like to get started using Perl for simple programming. Not recommended for people with computer science backgrounds looking to get into bioinformatics.\n\n10 internautes sur 10 ont trouv\u00e9 ce commentaire utile\n\n4.0 \u00e9toiles sur 5Decent intro to the subject27 juillet 2003\n\nPar Chris Devers - Publi\u00e9 sur Amazon.com\n\nFormat:Broch\u00e9\n\nAs the banner above the title of James Tisdall's Beginning Perl for Bioinformatics indicates, this book is 'an introduction to Perl for biologists.' What the banner doesn't mention is that it's also an introduction to biology and bioinformatics for Perl programmers, and it's also an introduction to both Perl *and* biology for people that have never really been exposed to either field. The author has clearly thought a lot about making one book to please these different audiences, and he has pulled it off nicely, in a way that manages to explain basic topics to people learning about each field for the first time while not coming off as condescending or slow-paced to those that might already have some exposure to it.\n\nSuperficially, this book isn't all that different from a lot of introductory Perl books: the Perl material starts out with an overview of the language, followed by a crash course on installing Perl, writing programs, and running them. From there, it goes on to introduce all the various language constructs, from variables to statements to subroutines, that any programmer is going to have to get comfortable with. Pretty run of the mill so far. Tisdall starts with two interesting assumptions, though: [1] that the reader may have never written a computer program before, and so needs to learn how to engineer a robust application that will do its job efficiently and well, and [2] that the reader wants to know how to write programs that can solve a series of biological problems, specifically in genetics and proteomics.\n\nAs such, there is at least as much material about the problems that a biologist faces and the places she can go to get the data she needs as there is about the issues that a Perl programmer needs to be aware of. The author introduces the reader to the basics of DNA chemistry, the cellular processes that convert DNA to RNA and then proteins, and a little bit about how and why this is important to the biologist and what sorts of information would help a biologist's research. The main sources of public genetic data are noted, and the often confusing -- and huge -- datafiles that can be obtained from these sources are examined in detail.\n\nWith the code he presents for solving these problems, Tisdall makes a point of not falling into the indecipherable-Perl trap: this is a useful language, well-suited to the essentially text-analysis problems that bioinformatics means, and he doesn't want to encourage the kind of dense, obscure, idiomatic coding style that has given Perl an undeservedly bad reputation. Some of Perl's more esoteric constructs are useful, and they show up when they're needed, but they're left out when they would only serve to confuse the reader. This is a good decision.\n\nRather, the focus is on teaching readers how to solve biological problems with a carefully developed library of code that happens to leverage some of Perl's most useful properties. The result is pretty much a biologist's edition of Christiansen & Torkington's Perl Cookbook or Dave Cross' Data Munging With Perl. The author presents a series of issues that a working bioinformaticist might have to deal with daily -- parsing over BLAST, GenBank, and PDB files, finding relevant motifs in that parsed data, and preparing reports about all of it. If a bioinformaticist's job is to be able to report on interesting patterns from these various sources, then following the programming techniques that Tisdall explains in clear, easy-to-follow prose would be an excellent way to go about doing it.\n\nAnd when I say \"programming techniques,\" note that I'm not specifically mentioning Perl. The code in this book is clear and organized, and all programs are carefully decomposed into logical subroutines that are then packaged up into a library file that each later sample program gets to draw from. Each new program typically contains a main section of a dozen lines of code or less, followed by no more than two or three new subroutines, along with calls to routines written earlier and called from the BeginPerlBioinfo.pm that is built up as the book progresses. Each sample is typically preceded by a description of what it's trying to accomplish and followed by a detaild description of how it was done, as well as suggestions of other ways that might have worked or not worked.\n\nThis modular approach is fantastic -- too many Perl books seem to focus so heavily on the mechanics of getting short scripts to work that they lose sight of how to build up a suite of useful methods and, from those methods, to develop ever-more-sophisticated applications. It isn't quite object-oriented programming, but that's clearly where Tisdall is headed with these samples, and given a few more chapters he probably would have started formally wrapping some of this code into OO packages.\n\nIf I have a complaint with the book, in fact, it's that Tisdall doesn't go any further: everything is good, but it ends too soon. Seemingly important topics such as OO programming, XML, graphics (charts & GUIs), CGI, and DBI are mentioned only in passing, under \"further topics\" in the last chapter. I also have a feeling that some of the biology was shorted, and the book barely touches upon the statistical analysis that probably is a critical aspect of the advanced bioinformaticist's toolbox. I can understand wanting to keep the length of a beginner's book relatively short, and this was probably the right decision, but it would have been nice to see some of the earlier sample problems revisited in these new contexts by, for example, formally making an OO library, showing a sample program that provided a web interface to some of the methods already written, or presenting code that presented results as XML or exchanged them with a database.\n\nBut these are minor quibbles, and if the reader is comfortable with the material up to this point, she shouldn't have a hard time figuring out how to go a step further and do these things alone. It's a solid book, and one that should be able to get people learning Perl, genetics, or both up to speed and working on real world problems quickly."}
{"text": "Author(s): Tony GaddisIn Starting Out with C++: From Control Structures through Objects, Brief Edition, 7e, Gaddis takes a problem-solving approach, inspiring students to understand the logic behind developing quality programs while introducing the C++ programming language. This style of teaching builds programming confidence and enhances each student's development of programming skills. This edition in the Starting Out Series covers the core programming concepts that are introduced in the first semester introductory programming course. As with all Gaddis texts, clear and easy-to-read code listings, concise and practical real-world examples, and an abundance of exercises appear in every chapter. This book includes the first 15 chapters from the best\u2014selling Starting Out with C++: From Control Structures through Objects, and covers the core programming concepts that are introduced in the first semester introductory programming course."}
{"text": "Pure declarativeprogramming languages are a holy grail that is unlikely ever to be achieved, unless artificial intelligence results in computer programs that are smarter than computer programmers, and that's a long, long way off.\n\nDECLARATIVEprogramming is programming by telling the computer WHAT, not HOW.\n\nPrograms are evaluated by proving queries with respect to the given program.\n\nDeclarativeprogramming in the weak sense means that the programmer apart from the logic of a program also must give control information to yield an efficient program.\n\nMost declarativeprogramming languages stem from work in artificial intelligence and automated theorem proving, areas where the need for a higher level of abstraction and a clear semantic model of programs is obvious.\n\nDeclarativeprogramming is distinct from imperativeprogramming, which is more commonly known as proceduralprogramming.\n\nRule engines and declarativeprogramming give you the ability to quickly alter the behavior of your system in a way which is difficult to program in raw Java, and to manage and interact with data in a more human way.\n\nDeclarativeprogramming has been around for at least 30 years, but is presently enjoying a renaissance due to the rise of open source software, XML, and a reinvigorated interest in rule engine technology.\n\nA logic program is written as a set of logical definitions (declarations, specifications.) The same program is interpreted by a computer as a set of imperativeprocedures.\n\nAfter composing the program in a declarative way, the programmer may wish to consider program'simperative meaning, and add control structures to improve the efficiency.\n\nThis research project was concerned with designing a logic programming system which could offer the programmer a wide expressive power and minimize the need for thinking about the procedural meaning of the program.\n\nThe aim of this workshop is to bring together educators and others who are interested in exchanging ideas on how to use a functional or declarativeprogramming style in the classroom or in e-learning environments.\n\nHistorically this level of abstraction has been associated with specialized programming languages, but it is now routinely used by both students and professional programmers in a variety of contexts, programming languages, and courses.\n\nAbstract: In its ultimate form, declarativeprogramming provides solutions to problems using only a statement of the problem as the program.\n\nIn these languages, you -command- the program to carry out a sequence of instructions: -put- some data in a variable; -fetch- the data back out of the variable; -loop- through a block of instructions -until- some condition is satisfied; do something -if- something else is true.\n\nOn the other hand, there are also many programming languages that are -declarative- in style, including both functional and logic languages, and also including both general purpose and specialized ones.\n\nPPDP is an annual programming language conference that was created in 1999 as the union of two former conferences: Programming Languages, Implementations, Logics and Programs (PLILP) and Algebraic and Logic Programming (ALP).\n\nPPDP sollicits papers on all topics related to declarativeprogramming in a broad sense, including the use of declarative methods in programming, and the design, implementation and application of novel programming languages that support such methods.\n\nPPDP aims to complement other more focused programming language conferences by offering a forum for discussion and cross-fertilization of ideas to researchers working on various paradigms or on different aspects of declarativeprogramming.\n\nDeclarativeprogramming by way of custom controls has always been a part of Windows (WinForm) development.\n\nIt is a style of programming whereas at one level you define, in detail, how a variety of things are done, and from another level you instruct as to what needs to be done.\n\nIn the end, I hope to leave you with an understanding of what declarativeprogramming is, how you can use it when developing ASP.NET Web applications, and how, with the help of WebControls, to use it as an approach to ASP.NET development.\n\nIn our experience, there are two essentially different styles of declarative logic programming, which can be called the 'algorithmic' (or 'directed') style and the 'free' (or 'undirected') style, depending on whether the programmer knows the control flow or not.\n\nThe free style is used often in constraint programming, theorem proving, and computational linguistics.Usually, the programmer specifies the problem's logical constraints, purely declaratively, and then separately specifies the inference (or search,or resolution) strategy.The strategy gives partial information about the operational semantics.\n\nProlog is quite weak for specifying the strategy; a logic programming language intended for the free style usually extends Prolog in substantial ways.\n\nEven if they aren't correct, understanding the differences between declarative and imperativeprogramming is an educational experience because it gives you a different way of looking at how you program.\n\nMost introductions to programming (and even accepted techniques, like using the Visual Studio designer) create programs that embed both declarative and imperative aspects in code.\n\nDeclarativeProgramming is a methodology who's time has come and while it may seem a bit abstract and overly complex at first, I assure you that once you start using it, you'll fall in love with it quickly.\n\nBefore I even knew what DeclarativeProgramming was, I was yearning for it.\n\nEver since I first encountered them, I thought they were ugly and there was nothing Object Oriented about them.\n\nAt the level of methodology, the use of logic-based principles in the design of tools for program development, analysis, and verification relative to all declarative paradigms is of interest.\n\nThe goal is to stimulate research in the use of logical formalisms and methods for specifying, performing, and analyzing computations, and to stimulate cross-fertilization by including work from one community that could be of particular interest and relevance to the others.\n\nPapers related to the use of declarative paradigms and tools in industry and education are especially solicited.\n\nMy hope is also that using a declarative approach for my problem could actually improve the performance of the solution (which is now handled imperatively), and that's even harder to satisfy, given the reputation of declarative implementations, which are often much slower than imperative languages.\n\nI was trying to apply the declarative approach to one problem in the knowledge representation area, and the problem I ran into was unsuitable semantics of today's frameworks.\n\nfor me, one of the best examples of how \"imperative\" programming fails to scale well is the classic chess game example.\n\nContrary to imperativeprogramming, declarativeprogramming is a programming paradigm by giving specification rather than the algorithm of how to find out the solution.\n\nBy this definition, you could say that C is a declarative language because when I write \"t[i]\", I am just telling it what data I need and I don't care if it involves dereferencing a memory location to get it...\n\nYou see, the above examples are of semantics and that is what declarativeprogramming really cares about.\n\nKANREN is a declarative logic programming system with first-class relations, embedded in a pure functional subset of Scheme.\n\nPure, declarative, and constructive binary arithmetics: Addition, multiplication, division with the remainder as sound and complete, pure, declarative relations that can be used in any mode and that recursively enumerate their domains."}
{"text": "If code is exercised by unit tests, changes can be made quickly and\nsafely; if it isn't, they can't, so your first job when you inherit\nlegacy code should be to write some. That's where this book comes in.\nWhat to know three different ways to inject a test into a C++ class\nwithout changing the code? Or which classes or methods to focus testing\non? It's all here, along with lots of other useful information.\n\nThis book is an excellent guide to how open source projects actually\nwork. Every page offers practical advice on how to earn commit privileges\non a project, get it more attention, or fork it in case of irreconcilable\ndifferences.\n\nMost of us have heard know that maintenance consumes 40-80% of software\ncosts, but did you know that roughly 60% of that is enhancements, rather\nthan bug fixes? Or that if more than 20-25% of a component has to be\nmodified, it is more efficient to re-write it from scratch? Those facts,\nand many more, are in this little book, along with references to the\nprimary literature to back up every claim it makes.\n\nThe book's aim is to show scientists and engineers with little formal\ntraining in programming how Python can make their lives better. Regular\nexpressions, numerical arrays, persistence, the basics of GUI and web\nprogramming, interfacing to C, C++, and Fortran: it's all here, along\nwith hundreds of short example programs.\n\nThis book is about designing applications to deal with the things that\ndon't happen in the classroom or the lab: load fluctuations, power\noutages, upgrades, tangled configurations, and everything else you have\nto worry about when scaling up applications to work in the real world.\n\nLeading software engineering researchers take a chapter each to describe\nkey empirical results and the evidence behind them. Topics range from\nthe impact of programming languages on programmers' productivity to\nwhether we can predict software faults using statistical techniques.\n\nThese books are a guide to all the other conceptual tools that working\nprogrammers ought to have at their fingertips, from sorting and\nsearching algorithms to different kinds of trees and graphs. The\nanalysis is far more accessible than that of many other textbooks, and\nwhile the author's use of C may seem old-fashioned in an age of Java and\nC++, it does ensure that nothing magical is hidden inside an overloaded\noperator or virtual method call.\n\nCarlton A. Crabtree, A. Gunes Koru, Carolyn Seaman, and Hakan Erdogmus. An Empirical Characterization of Scientific Software Development Projects According to the Boehm and Turner Model: A Progress Report. In Second International Workshop on Software Engineering for Computational Science and Engineering, pages 22\u201327, 2009. (doi:10.1109/SECSE.2009.5069158)\n\nYolanda Gil, Pedro A. Gonz\u00e1lez-Calero, and Ewa Deelman. On the Black Art of Designing Computational Workflows. In 2nd Workshop on Workflows in Support of Large-Scale Science, pages 53\u201362. ACM, 2007.\n\nRobert Gray and Diane Kelly. Investigating Test Selection Techniques for Scientific Software Using Hook's Mutation Sensitivity Testing. In Third International Workshop on Software Engineering for Computational Science and Engineering, May 2010.\n\nPhilip M. Johnson and Michael G. Paulding. Understanding HPC Development through Automated Process and Product Measurement with Hackystat. In Second Workshop on Productivity and Performance in High-End Computing, 2005.\n\nD. E. Post and R. P. Kendall. Large-Scale Computational Scientific and Engineering Code Development and Production Workflows. In Proc. 12th Workshop on Use of High Performance Computing in Meteorology, October 2006.\n\nJ. Segal. Software Development Cultures and Cooperation Problems: a Field Study of the Early Stages Of Development of Software for a Scientific Community. Computer Supported Cooperative Work, 18(5/6):581\u2013606, 2009.\n\nGregory R. Watson and Craig E. Rasmussen. A Strategy for Addressing the Needs of Advanced Scientific Computing Using Eclipse as a Parallel Tools Platform. Technical report, Los Alamos National Laboratory, December 2005.\n\nJames M. Willenbring, Michael A. Heroux, and Robert T. Heaphy. The Trilinos Software Lifecycle Model. In Proceedings of the 3rd International Workshop on Software Engineering for High Performance Computing Applications, 2007. (doi:10.1109/SE-HPC.2007.5)"}
{"text": "A language is just any means by which humans,\ncomputers, or any active member of a dynamical system,\ncan communicate information.\nComputer languages are languages used to vehiculate\ninformation about what the computer should do;\nany media for exchanging information is a language.\n\nNow, this makes a language even out\nof point-and-click-on-window-system,\nor out of a bitstream protocol.\n\nSo what?\nWhy has a language got to use ASCII symbols or a written alphabet at all?\nPeople use sounds,\nthe deaf use their hands,\nvarious animals use a lot of different ways to communicate,\ncomputers use electrical signals.\nWhat makes the language is the structure of the information communicated,\nnot the media used for this communication to happen.\n\nWritten or spoken english, though they have differences,\nare both english, and recognizable as such;\nwhat makes english is its structures,\nits patterns, not the media used to communicate those patterns.\nThese patterns might be represented by things as physically foreign\nto each other as vibrations of the air (when one talks),\nor digital electrical signals on a silicon chip\n(when your computer text such as this very article you're reading).\n\nOf course, symbol-based languages are simpler to implement\non today's computers,\nbut that's only a historical dependency,\nthat may evolve and eventually disappear.\n\nAnd of course not all languages are equivalent.\nSurely the language used to communicate with a washing machine\nis much more limited than what we use to talk to humans.\nStill, there is no reason why not to call it a language.\n\nAs with Operating Systems,\nthe problem is not to define the concept of a computer language,\nbut to identify what characteristics it should have to maximize its utility.\n\nSo what kind of structure shall a computer language have?\nWhat makes a language structure better or more powerful than another?\nThat's what we'll have to inspect.\n\nIt should stressed that computer languages have nothing to do with finished,\nstatic \"perfect\" computer programs:\nthose can have been written in any language,\npreferably a portable one\n(for instance, any ANSI supported language,\ni.e. most probably the largely supported \"C\",\neven if I'd then personally prefer FORTH or Scheme).\nIf all interesting things already had been said and understood,\nand all ever needed programs already run satisfactorily on current machines,\nthere would be no more need for a language;\nbut there are infinitely many interesting things,\nand only finitely many things said and understood,\nso a language will always be needed,\nand no finite language (a grammarless dictionary) will ever be enough.\n\nMuch like an operating system,\nbeing useful not as a static library,\nbut as a frame for dynamic computing,\ncomputer languages have to do with programming,\nwith modifyings programs,\ncreating new programs,\nnot just watching existing ones;\nthat is, computer languages are for communicating,\nbe it with other people or a further self.\nThat is languages are protocols to\nstore and retrieve documents\nin such a way that the meaning of a document,\nits dynamical properties,\nits propension towards evolution and modification, etc,\nbe preserved.\n\nThus, the qualities of a (programming) language do not lie only\nin what can eventually be done as a static program with the language;\nor more precisely, assuming we have all the needed \"library\" routines\nto access the hardware we need, all Turing-equivalent languages are\nequally able to describe any static program.\nThese qualities do not lie\nin the efficiency of a straightforward implementation either,\nas a good \"optimizing\" compiler can always be achieved later,\nand speed critical routines can be included in libraries\n(i.e. if you really need a language,\nthen you won't be a beginner for a long time at this language).\n\nThe qualities of a language lie in the easiness to express\nnew concepts, and to modify existing routines.\n\nWith this in mind, a programming\nlanguage is better than another if it is easier for a human to write a new\nprogram or to modify an existing program, or of course to reuse existing\ncode (which is some extension to modifying code); a language is better,\nif sentences of equal meaning are shorter, or if just if better\naccuracy is reachable.\n\nWe evaluated a computing system's utility by the actual time saved by\nusing them on the long run, as compared to using other tools instead, or\nnot using any. Now, personal expediency suggests that people keep using\nthe same tools as they always did, however bad they may be, and add\nfunctionalities as they are needed, because learning and installing new\ntools is costly. But this leads to obsolete tools grown with bogus bulging\nfeatures, that provide tremendous debugging and maintenance costs.\nIt results in completely insecure software, so no one trusts any one else's\nsoftware, and no one wants to reuse other people's software, all the more if\none has to pay.\n\nFor the problem is that, with existing tools, 99.99% of programming time\nthroughout the world is spent doing again and again the same basic things\nthat have been done hundreds of times before or elsewhere.\nIt is common to hear (or read) that most programmers spend their time\nreinventing the wheel, or desesperately trying to adapt existing wheels to\ntheir gear.\nOf course, you can't escape\nasking students and newbies to repeat and learn what their elders did,\nso they can understand it and interiorize the constraints of computing.\nThe problem is that today's crippled tools and closed development strategies\nmake learning difficult and reuse even more difficult,\nsecure reuse being just impossible.\nThus people spend most of their time writing again and again\nnew versions of earlier works,\nnothing really worth the time they spend,\nnothing original,\nonly so they can be sure they know what it does,\nand it provides correctly the particular feature they need\nthat couldn't be done before, or at least not exactly.\nEven then, they seldom manage to have it do what they want.\n\nNow, after all, you may argue that such a situation creates jobs, so is\ndesirable; so why bother ?\n\nFirst of all, there is plenty of useful work to do on Earth, so time and\nmoney saved by not repeating things while programming can be spent on many\nmany other activities (if you really can't find any, call me, I'll show you).\nPhysical resources are globally limited,\nso wasting them at doing redundant work is unacceptably harmful.\n\nPaying people to dig holes and fill them back just to create jobs,\nas suggested by despicable economists like J.M. Keynes,\nis of utmost stupidity.\nElse, we might encourage random killing,\nas it decreases unemployment among potential victims,\nand increases employment among morticians, cops, and journalists.\nIf Maynard Keynes' argument holds,\nI particularly recommend suicide to its proponents\nfor the beneficial effect it has on society.\nSee Bastiat's works [1]\nfor a refutation of this myth,\nmore than a hundred years before stupid socialist politicians apply it:\nmaybe spending money to do useless things\nmight have some beneficial aspects,\nas for example stimulating employment;\nbut their global effect is very harmful,\nas the money and energy spent by central organs\nto the limited benefit of a few\ncould have been spent much more usefully for everyone\n(not forcibly by a central organ at all),\nas there are so many useful things to be done,\nbe it only to prepare against natural catastrophes,\nnot to talk about human curses.\nThat useless work policy is taking a lot from everyone\nto give little to a few.\n\nNow, rewriting is a serious problem for everyone.\nTo begin with, rewriting is a loss of time,\nthat make programming delays quite longer,\nthus is very costly.\nMore costly even is the fact that rewriting is an error prone operation\nand anytime during a rewrite,\none may introduce errors very difficult to trace and remove\n(if need be,\none may recall the consequences of computer failures in space ships,\nphone nets, planes).\nReuse of existing data accross software rewrites,\nand communication of data between different software\nproves being of exorbitant cost.\nThe most costly aspect of rewriting may also be\nthe fact that any work has a short lifespan,\nand will have to be rewritten entirely from scratch\nwhenever a new problem arises;\nthus programming investment cost is high,\nand software maintenance is of high cost and low quality.\nAnd it is to be considered that rewriting is an ungrateful work\nthat disheartens programmers,\nwhich has an immeasurably negative effect\non programmer productivity and work quality,\nwhile wasting their (programming or other) talents.\nLast but not least,\nhaving to rewrite from scratch creates an limit to software quality, that is,\nno software can be better than what one man can program during one life.\n\nRewrite is waste of shared resources by lack of communication.\nAnd all the argument is about that:\nnot communicating is harmful;\nany good the system should encourage communication.\nNow, even when current operating systems greatly limit\ncommunication of computer code,\nthey happily do not prevent humans to communicate\ninformal ideas of computer code.\nThis is how we could get where we are.\n\nTherefore, it will now be assumed as proven that\ncode rewriting is a really bad thing,\nand that we thus want the opposite: software reuse,\nsoftware sharing.\n\nWe could have arrived at the same conclusion just with this simple argument:\nif some software is really useful (considering the general interest),\nthen it must be used many, many times, by many different people,\nunless it is some kind of computation with a definitive answer\nthat concerns everybody (which is difficult to conceive:\nsome software that would solve a metaphysical or historical problem!).\nThus, useful software, least it be some kind of very unique code,\nis to be reused countless times.\nThat's why to be useful, code must be very easy to reuse.\n\nIt will be showed that such reuse\nis what the \"Object-Orientation\" slogan is all about,\nand what it really means when it means anything.\nBut reuse itself introduces new problems\nthat have to be solved before reuse can actually be possible,\nproblems as we already saw, of trust:\nhow can one trust software from someone else?\nHow can one reuse software without spreading errors from reused software,\nwithout introducing errors due to misunderstanding\nor misadaptation of old code,\nand without having software obsolescence?\nWe'll see what are possible reuse techniques,\nand how they cope with these problems.\n\nThe first and the simplest way to reuse code is just\nthe \"copy-paste\" method:\nthe human user just copies some piece of code, and pastes it in a new context,\nthen modifies it to fit a new particular purpose.\n\nThis is really like copying whole chapters of a book,\nand changing a names to have it fit a new context;\nthis method has got many flaws and lacks,\nand we can both moral and economically object to it.\n\nFirst of all, copying is a tedious and thus error-prone method:\nif you have to copy and modify the same piece of code thousands of times,\nit can prove a long and difficult work,\nand nothing will prevent you from doing as many mistakes\nwhile copying or modifying.\n\nAs for the moral or economical objection, it is sometimes considered bad\nmanners to copy other people's code, especially when copyright issues are\ninvolved; sometimes code is protected in such a way that one cannot copy it\neasily (or would be sued for doing that); thus this copy-paste method won't\neven be legally of humanly possible everytime.\n\nThen, assuming that the previous problems could be solved\n(which is not obvious at all),\nthere would still be a big problem about code copying:\nuncontrolled propagation of bugs and lacks of feature accross the system.\nAnd this is quite a serious threat to anything like code maintenance;\nactually, copying code means that any misfeature in the code\nis copied altogether with intended code.\nSo the paradox of code copying is that bad copying introduces new errors,\nwhile good copying spreads existing errors;\nin any case code copying is an error prone method.\nError correction itself is made very difficult,\nbecause every copy of the code must be corrected\naccording to its own particular context,\nwhile tracking down all existing copies is especially difficult\nas code will have been modified (else the copy would have been made useless\nby any macro-defining preprocessor or procedure call in any language).\nMoreover, if another programmer (or the same programmer some time later)\never wants to modify the code,\nhe may be unable to find all the modified copies.\n\nTo conclude, software creation and maintenance is made very difficult,\nand even impossible, when using copy-paste; thus, this method is definitely bad\nfor anything but exceptional reuse of a small number of mostly identical\ncode in a context where expediency is much more important than long-term\nutility. That is, copy-paste is good for \"hacking\" small programs for\nimmediate use; but it's definitely not a method to program code meant to\nlast or to be widely used.\n\nThe second easiest, and most common way to reuse code,\nis to rely on standard libraries.\nComputer libraries are more like dictionaries and technical references\nthan libraries, but the name stuck. So places where one can find lots of\nsuch \"libraries\" are called repositories.\n\nUsing a standard library is easy:\nlook for what you need in the standard library's index,\ncarefully read the manual for the standard code you use,\nand be sure to follow the instructions.\n\nUnhappily,\nnot everything one needs will be part of a standard library,\nfor standard library include only things that have been established\nas needed by a large number of persons.\nPatiently waiting for the functionality one needs\nto be included in a next version of standard libraries\nis not a solution, either,\nbecause what makes some work useful is precisely\nwhat hasn't been done before,\nso that even if by chance the functionality gets added,\nit would mean someone else did the useful work in one's place,\n\n.....\nnot everything there are good reasons why\nbefore a standard library is available\nYou wait for the function you need to be included in the standard library,\nand then use it as the manual describes it when it is finally provided.\n\nstandards are long to come,\nand are even longer to be implemented the way they are documented.\nBy that time, you will have needed new not-yet-standard features,\nand will have had to implement them or to use non-standard dictionaries;\nwhen the standard eventually includes your feature,\nyou'll finally have to choose between keeping a non-standard program,\nthat won't be able to communicate with newer packages,\nor rewriting your program to conform to the standard.\n\nMoreover, this reuse method relies heavily on a central agency\nfor editing revised versions of the standard library.\nAnd how could a centralized agency do all the work for everyone to be happy ?\nTrying to impose reliance on a sole central agency that is communism.\nRelying only on multiple concurrent hierarchically organized agencies\nis feudalism.\nOneself is the only thing one can ultimately rely upon;\nand liberalism tells us that\nonly by having the freeer the information interchange between people,\nthe better the system.\n\nIt's like vocabulary, culture: you always need people to write\ndictionaries, encyclopaedias, and reference textbooks;\nbut these people just won't ever provide new knowledge and techniques, they\nrather settle what everyone already know, thus facilitating communication\nwhere people had to translate between several existing ones more easily.\nYou still need other people to create new things: you just can't wait for\nwhat you need to be included in the next revision of such reference book;\nit won't ever be if no one does settle it clearly before it may be considered\nby a standardization commitee.\n\nNow, these standard dictionaries have a technical problem:\nthe more useful they strive to be, the larger they grow, but\nthe larger they grow, the more difficult it gets to retrieve the right word\nfrom its meaning, which is what you want when you're writing.\nThat's why we need some means to retrieve words from their subject, their\nrelationship with other words;\nthus we need a language to talk about properties of words (perhaps the same),\nabout how words are created, what words are or not in the standard dictionary\nand will or will not be.\nAnd this language will have to evolve too,\nso a \"meta\"-library will not be enough.\n\nWhen vocabularies grow too large,\nthere appear \"needle in haystack\" problems:\nthough it exists, you can't locate the word you're looking for,\nbecause there's no better way to look for it than to cautiously read the\nentire dictionary until you come to it...\n\nFurthermore, how is a dictionary to be used ?\nA dictionary does not deal with new words; only old ones.\nTo express non-trivial things,\none must do more than just pronounce a one magic word;\none must combine words into meaningful sentences.\nAnd this is a matter of grammar\n- the structure of the language -\nnot vocabulary.\nWe could have seen that immediately:\nstandard libraries do not deal with writing new software,\nbut with sharing old software,\nwhich is also useful, but comes second,\nas there must be software before\nthere can be old software.\nComputer software was not created,\nbut develops from a long tradition.\nSo a library is great for reuse, but actually,\na good grammar is essential to use itself,\nand reuse in particular.\n\nThat is,\nthe right thing is not statically having a extended vocabulary,\nbut dynamically having an extended vocabulary;\nhowever statically extended, the vocabulary will never be large enough.\nThus we need good dynamical way to define new vocabulary.\nAgain, it's a matter of dynamism versus statism.\nCurrent OSes suck because of their statism.\nDynamically having an extended vocabulary means\nhaving dynamic ways to extend the vocabulary,\nwhich is a matter of grammar, not dictionary.\n\nNow what does reuse mean for the language grammar ?\nIt means that you can define new words from existing ones,\nthus creating new contexts,\nin which you can talk more easily about your particular problems.\nThat is, you must be able to add new words and provide new, extended,\ndictionaries.\nTo allow the most powerful communication, the language should provide\nall meaningful means to create new words.\nTo allow multiple people whose vocabularies evolve independently to\ncommunicate their ideas, it should allow easy abstraction\nand manipulation of the context,\nso that people with different context backgrounds can understand exactly\neach other's ideas.\n\nThus we have two basic constructions, that shall be universally available:\nextracting an object's value in a context (commonly called beta-reduction),\nand abstracting the context of an object (commonly called lambda-abstraction).\nA context is made of variables. When you reduce an object, you replace\noccurences of the variable by its bound value; when abstracting the context,\nyou create an object with occurences of an unbound variable inside,\nthat you may reduce later after having bound the variable. We thus have\na third operation, namely function evaluation, that binds an object to\na free variable in a context.\n\nFor the grammar to allow maximal reuse,\njust any object shall be abstractible. But what are those objects ?\n\nThe theory of abstractions is called lambda-calculus.\nThere are infinitely many different lambda-calculi, each having its\nown properties.\n\nBasically, you start with a universe of base objects.\n.......\nBase objects, or zero-order objects...\nfirst order ...\nsecond order ...\nnth order ...\nhigher order ...\nreflectivity ...\nbeware of reflectivity of a sub-language, not the language itself ...\nsyntax control ...\n.......\n\nWe already saw how the one big problem about reusing software is it that\nwhen you share the software, you share its good features,\nbut you also share its bugs.\n\nReuse is good when it saves work,\nbut you can't call that saving work when it makes you spend so much more time\ntracking bugs, avoiding them, fearing them, trying to prevent their effects,\nthat you would have been better rewriting the software from scratch so you\ncould trust it.\n\nThat's why sharable software is useless if it is not also trustworthy software.\n\nFirstly, we must note that this worry about security does not\ncome from software sharing;\nit is only multiplicated and propagated by software sharing.\nEven when you \"share\" code only with your past and future selves,\nthe need arises.\nThe problem is you're never sure that a module you use does what\nyou expect it to.\nMoreover, to be sure you agree with the module, you must have some\nmeans to know what you want, and what the author intended.\nAnd this won't warranty that the module works as intended by the author.\n......\n\nThe first idea that arises is then \"programming by contract\", that is,\nevery time some piece of code is called, it will first check all the\nassumptions made on the parameters, and when it returns, the caller will\ncheck that the result does fill all the requirements. This may seem simple,\nbut implementing such technique is quite tricky: it means that checking the\nparameters and results is easy to do, and that you trust the checking code\nanyway; it also implies that all the necessary information for proper checking\nis computed, which is loss of space, and that all kind of checking will take\nplace, which is loss of time. The method is thus very costly, and what does it\nbring ? Well, the program will just detect failure and abort ! Sometimes\naborting is ok, when you have time (and money) to call some maintenance\nservice, but sometimes it is not: a plane, a train, a boat, or a\nspacecraft\nwhose software fail will crash, collide, sink, explode, be lost, or whatever,\nand won't be able to wait for repairs before it's too late. And even when\nlives or billion dollars are not involved, any failure can be very costly,\nat least for the victim, who may be unable to work.\nThat's why security is something important that any operating\nsystem should offer support for.\nWhy integrate such support in the OS itself, and\nnot on \"higher layers\" ? For the very same reasons that reuse had to be\nintegrated to the OS: because else, you would have to use not the system,\nbut a system built on top of it, with all the related problems, and you\nwould have to rely on the double (or bigger multiple, in case of multiple\nintermediate layers) implementations, that each introduce unsecurity (perhaps\neven bugs), unadapted semantics, big loss in performance.\n\nSo we just saw techniques to design trustworthy software.\nNow, how could you be sure they were well used (if at all),\nunless you did participate to the design using them ?\nThese techniques can only enforce trust to the technician people\nwho have access to the internals of the software.\nWhat kind of trust can the user expect from some software s/he purchased ?\n\nSome companies sell support for software, so they shall repair or replace\ncomputer systems in case the customer may have problems.\nSupport is fine indeed; support is even needed by anyone seriously using a\ncomputer (now which kind of support, it depends on what the customer needs,\nand what he can afford). But support won't ever replace reliable software.\nYou never can repair all the harm that may result from misdesigned software\nwhen used in critical environment: exploding spacecrafts, shutdown phone\nnetworks, missed surgical operation, miscomputed bank accounts,\nblocked factories, all these cost so much that no one can ever pay back.\nThus, however important, the computer support one gets\nis independent from the trustworth of the software one uses.\n\nThe computer industry offers no guarantee to its software's reliability.\nYou have to trust them, to trust their programmers and their sellers.\nBut you shouldn't, as their interest is to spend as few money as possible\nin making their software reliable, as long as you buy it.\nThey may have some ethics that will bind them to design software as reliable\nas they can; but don't count on ethics to last indefinitely, when there is.\nThe only way to make sure they strive is to have some pressure on them,\nso that in case they would cheat you, you threaten software vendors to sue them\n(and long when even possible), or to lead a campaign against buying their\nproducts.\n\nThe former very hard, when possible at all, and last for years during the which\nyou must feed lawyers, be worried, without being sure to win.\nThe latter means there is fair competition, so you can choose a product that\nwill replace the one that fails; it also means that competing software allow\nto recover your data from the flawed system, and run on your former hardware.\nSo even competition isn't enough if it's wild and uncontrolled, and vendors\ncan create de facto monopolies on software or hardware compatibility (which\nthey do).\n\nThe only reason why you should trust software is that everyone can, and many\ndo, examine, use and test freely the software and its\nactual or potential competitors, and still keep using it.\nWe shall insist on there being potential competitors, to which you\nmay compare only if the software sources and internal documentation is\nfreely available, which is open development, as compared to\ndevelopment with non-disclosure agreements.\nThis is the one true heart of liberalism.\n\nNow, what if the software you use is too specific to be used and tested by\nmany ?\nWhat if there's no way (at reasonable price) to get feedback from the\nother actual and potential users of the software ?\nWhat if you don't have time to choose before you can get enough feedback to\nmake some worthwhile opinion ?\nIn those cases, the liberal theory above won't apply anymore.\n\nAs the need of security in computer systems grows,\none can't satisfy himself with trusting all the modules one uses,\njust because other people were (alledgedly) happy with them,\nor the authors of the modules have a good reputation,\nor other people bought it but there's no way to get feedback,\nor (silly idea) one paid a lot for it,\nor have been promised an \"equal\" replacement (but no money back for the other\nloss) in case it fails.\n\nHowever, trusting a computer system is foremost when lives (or their\ncontents) are involved by the correct behavior of a module.\n\nThus, providers of computer system modules will have to provide some\nreliable warranty that their modules cause no harm.\nThey may offer to pay back any harm that may result from bugs\n(but such harm is seldom measurable).\nOr they may offer a proof of the correctness of their program.\n\nTest suites are pretty, but not very significant.\nWhat are tests in a million cases,\nwhen there are multi-zillions of them, or even infinitely many ?\nTest suites are due to fail.\n\nComputers were born from mathematicians and their theory is largely\ndevelopped. If computer systems are designed from mathematically simple\nelements, that have well-known semantics,\nit may be actually possible to prove that the computer system actually does\nwhat it is meant to do.\n\nThe advantage of a mathematical proof is that,\nwhen done according to the very strict rules of logic,\nit is as accurate as a comprehensive test,\neven though such test may be impossible\nbecause the number of cases so wondrous (when not infinite) that it would\ntake far longer than the age of the universe to check each one even at the\nspeed of light.\n\nNow, proving a program's correctness is a difficult task,\nwhose complexity grows uncontrollably with the size of the program to prove.\nThis is why the need to use computer systems arises quickly for such proof.\nThus, to trust the proof,\nyou must also trust the computer proofchecking program.\nBut this program can be very short and easy to understand;\nit can also be made publicly available, and be examined, used, tested,\nby all the computer users and hackers throughout the world,\nas explained previously, because it is useful to everyone indeed.\nIf those requirements are fulfilled,\nsuch program may be really much more reliable\nthan the most reknowned human doing the same job.\n\nAnyway, the simplest are the specifications and proofs,\nthe most reliable they are too.\nTherefore, programmers ought to use the programming concepts that allow\nthe easiest proofs, such as pure lambda-calculus, as used in a language\nlike like ML. Any kind of thing like side-effects and shared (global)\nvariables should be avoided whenever possible. The language syntax should\nremain always clear and as localized as possible.\nAs for the efficiency hungry, we recall that however fast to execute,\nan unreliable program is worthless, while\ntoday's compiler technology is ready to translate mathematical abstractions\ninto code that is almost as fast as the unreliable software obtained by\nthe so-called \"optimizing\" compilers for unsafe languages.\n\nOf course, having program proofs does not mean we should be less careful.\nIf you misspecify what a program must do, and prove the program fulfills\nthe bogus specification, you may have a bogus program;\nso you must be careful to undertand well what the program is meant to do,\nand how to express it to the proofchecker.\nAlso, proofs are always founded on assumptions.\nWith wrong assumptions, you can prove anything.\nSo program proofs mean we should always be careful,\nbut we may at last concentrate on the critical parts,\nand not lose our time verifying details,\nwhich computers do much better than us.\n\nActually, that's what machines, including computers, are all about:\nhaving the human concentrate on the essential,\nand letting the machines do repetitive tasks.\n\nA programming language is low level when\nits programs require attention to the irrelevant."}
{"text": "If you are new to programming with Python and are looking for a solid introduction, this is the book for you. Developed by computer science instructors, books in the \"for the absolute beginner\" series teach the principles of programming through simple game creation. You will acquire the skills that you need for practical Python programming... more...\n\nPython is a multipurpose development language that can be used on virtually every platform. It offers built-in support for critical development steps including data structures, dynamic typing, and dynamic building. It can be used in lieu of Java or C++, and Python scripts can be developed in a fraction of the time it takes to program and debug higher-level... more...\n\nThe Python Developer's Handbook is designed to expose experienced developers to Python and its uses. Beginning with a brief introduction to the language and its syntax, the book moves quickly into more advanced programming topics, including embedding Python, network programming, GUI toolkits, JPython, Web development, Python/C API, and more. Python... more...\n\nThis book provides an introduction for students and technicians on how to program in Pascal and apply it to common analytical and circuit design problems in electronic and telecommunications engineering. more...\n\nSams Teach Yourself Perl in 21 Days covers the basics of Perl in the first few chapters, and then moves on to practical issues of Perl and in-depth discussions of more advanced topics. Later chapters also delve into software engineering topics, with discussions of modular code and object-oriented programming. CGI is covered in one chapter, but it... more...\n\nSams Teach Yourself PL/SQL in 21 Days, Second Edition, quickly empowers you to create your own Oracle solutions with PL/SQL. Completely revised to cover Oracles 8i, the book provides guidance and direction, leading you through a progression of topics that begin with the basic building blocks of PL/SQL, and ending with in-depth discussions of the more... more..."}
{"text": "Visual programming means anyone can be a coder\n\nCoding by tweaking on-screen shapes and drawings could revolutionise computer programming, making it accessible to all\n\nMANY great ideas start out as scribbles on scraps of paper, as thinking visually is an intuitive way to grapple with abstract concepts. Part of the reason is the immediacy - thoughts can be captured and communicated in a sketch and, if wrong, changed or scratched out just as quickly. Not so for computer programmers.\n\nA program is a set of instructions for turning input - such as numerical values - into output. The causal chain is one-way. To change the output, you have to trace the chain back to the relevant instructions and change what they do with the input. This can make hunting down errors in the program or simply experimenting with different outputs an unintuitive process of jumping back-and-forth.\n\nArtist and programmer Toby Schachman thinks we can do better. As part of his thesis project for the Interactive Telecommunications Program at New York University, he developed an experimental programming interface called Recursive Drawing, in which programmers can incrementally build up complex fractal-like structures. The design lets them manipulate the underlying source code by simply dragging parts of the patterns around. \"When people describe algorithms they'll give a spatial analogy almost all the time,\" says Schachman. Though still in its early stages, the ideas behind the interface could change the way programming is done. Think of interacting with Photoshop.\n\n\"The form that you're working in resembles the thing that you're creating,\" says Schachman - there is no need to worry about changing the underlying code. His prototype works in much the same way. He will present it at the Splash programming conference in Tucson, Arizona, in October.\n\nHe's not alone in wanting to simplify the coding process. Bret Victor, who has designed user interfaces for Apple, is another developer who wants to open up programming to a wider community. \"To write code you essentially have to play computer. You have to simulate in your head what each line of code would do,\" he said in a talk last year at the Canadian University Software Engineering Conference. \"So much of creation is about discovery and you can't discover anything if you can't see what you're doing.\"\n\nSchachman's approach is a good start, agrees Peter van Roy, a computer scientist at the Catholic University of Louvain (UCL) in Belgium and developer of FractaSketch, a graphical design tool based on fractals that has been used in the fashion industry. \"Text-based programming is still the best way to give precise instructions to a computer,\" he says. But there's a big gap between writing the text and seeing what the running program does. \"Bringing in graphical ideas like Schachman does can definitely reduce this gap,\" he adds\n\nSara Jones at City University in London, who is researching creative techniques for software development, says Recursive Drawing is part of a trend that will help to democratise programming. \"It opens up the process of programming to a broader community of people, including artists, architects and designers, for whom the unnecessary translation of ideas into text may constitute a frustrating and unwelcome block to the flow of creative ideasJust Another Syntax?\n\nWed Aug 29 12:29:04 BST 2012 by Alexandre Vinet\n\nProgramming is complex because the logic required to run a computer is complex, not because the syntax is too hard to understand. It takes some adjustments to learn a new syntax, but the concept of computer programming is what you really need to learn. Once the actual programming aspect has been successfully understood, syntax is just a minor obstacle. Symbols and images and drawings will just be another syntax.\n\nI fear making it simpler and more accessible would allow people to be able to code some programs without being able to fully understand the actual logic required, thus making very inefficient, possibly insecure code. A bit like the way Microsoft FrontPage made creating websites a lot more accessible and easy for non web-savvies, but ended up creating pages with bloated, unmanageable code that was very difficult to maintain and expand on.\n\nIt would be, however, extremely interesting to see a combination of text based programming with a visual cue on the side giving you an idea of where your code is going. Current compilers and interpreters are usually very good at letting you know where your code will break your application because of a syntax mistake, but not very good at guessing if your application is going to do what you want it to do. I would gladly welcome a change to breakpoints.\n\nJust Another Syntax?\n\nWed Aug 29 15:09:01 BST 2012 by Daniel\n\nI've done designing of domain specific computer languages, and yes, for certain limited applications one may develop some language to express visually. The most famous of this approach has been the \"programming by example\", where you prototype how things will look like. A different approach may try to visualize an aspect of what happens in a computer, and build a language to manipulate that visual representation, like an editor. The \"programmer\" can then manipulate visually the representation, simulating it to check whether it delivers the final result, and when ready, the recorder interaction generates all necessary underlying machine instructions.\n\nI am highly sceptical however, that anyone will make accessible to untrained people any general purpose programming technology.\n\nJust Another Syntax?\n\nWed Aug 29 19:09:01 BST 2012 by Paul Clapham\n\nI've been programming for a long time and I regularly see products which are supposed to let the general public produce applications by manipulating graphics on the screen. But if you look around, you'll find that nobody is actually using those applications.\n\nSo here's my proposal: Let the people working on this visual program paradigm elaborate it until they can produce an application which schedules garbage-truck drivers to work various shifts depending on the rules in their union contract. Preferably with a real union contract. Then they will have something worth considering."}
{"text": "An Introduction to APL for analysis and planning\nAPL, A Programing Language,( A Personal Language )\nBY A. M. Stevens ams\n\nAPL because of its array handling ability, range of primitive functions and\noperators is a useful notation for describing the many types\nof models used for component and systems analysis. It can also be used\nfor routine data processing and many other computer based activities. It\nis especially useful for working directly on the computer display for the\nkinds of problems that traditionally are done with paper, pencil and calculator\n.One of the advantages is that the notation is machine readable, and paper\nor computer file copies can be made of the work.\n\nAPL allows considerable variation in style. These notes reflect\nmy\npersonal style. The intent is to illustrate the structure and capability\nof what I consider a general purpose tool. You may wish to use another\nstyle and/or LANGUAGE that is more suitable to your knowledge, personality\nand preferences. However some knowledge of APL may be useful for communication\nand comparison purposes.\n\nAPL was invented by K. E. Iverson as an algorithmic notation.\nIt uses a number of special symbols, Many of these can be found in the\nlower case Greek alphabet. The J language is a modern APL dialect which\nuses only symbols found on the regular ASCII keyboard.\n\nAPL was first implemented by an IBM team as APL/360 for IBM 360\ncomputers. It is available in many versions. There is an INTERNATIONAL\nStandard.\n\nMYSYS is based on APL*PLUS/PC (version 11.1). It was marketed\nfirst by Scientific Time Sharing, and later by MANUGISTICS inc. The latest\nversions are marketed by ALP2000 who have succeeded MANUGISTICS.\nMYS2 uses APL*PLUS II, version 5.1 which was an expanded version\nthat includes some of the features of APL2 which was developed and is\nmarketed by IBM. The versions used are 'Application Development' systems,\nand were licensed to UNB. They are generalized tool kits and system development\nplatforms for use on personal computers.\nThese notes are part of MYNET that have been converted from MYSYS to HTML\nfor display with a browser.\n\nMYSYS is my customized version that has evolved for my personal use.\nIt began with APL360 in 1974. It is made available to use as you see fit.\n\nAPL is an interpretative interactive language that defaults to Immediate\nexecution mode. I refer to this as APLie .\nAPL is terse, has a large set of symbols that are an extension of tradition\narithmetic and algebraic in fix notation. It differs from common algebraic\nnotation because it interprets expressions from right to left.\n\nAPL does not have precedence rules like algebra. It relies on the\nright to left sequence and levels of parentheses ( ) to establish the order\nof execution.\n\nAPL is said to have a rich set of primitives, i.e. functions\nand operators like +-, etc. The set continues to grow slowly as APL evolves.\nThe primitives specify many actions with a single symbol which require\nconsiderable code in other languages.\n\nTo make extensive use of any version of APL you should obtain\na copy of the system documentation.\n\nThe SYSHELP distributed with the APL*PLUS systems includes help on all\nAPL primitives and other system features. Key [F6] of MYSYS executes\nqask, a general query function. Enter HELP or MYHELP at the prompt for\na help directory. Many APL and MYSYS functions are described in the various\n'help files'. The helps are a forward chaining expert system.\n\nAPL uses a random access memory segment called ACTIVE WORKSPACE\n(ws). The ws name is displayed on status line that also shows the keyboard\ntype and other status indicators.\n\nThe primitives are available by keystrokes from the keyboard. There\nare several APL keyboards in use. This is called the TEXTor\nUNIFIED keyboard. Key [F6] and ask for 'keyboard' for a map. The\nAPL360 keyboard was restricted by the number of symbols available on a\n'selectric typewriter' terminal.\n\nThe keyboard map that you are using may be another standard or customized\nversion. The layout can be discovered by systematically pressing each key\nincluding combinations of [Shift], [Ctrl], [Alt], and [Shift Alt] with\nthe other keys.\n\nA little patience and a superficial knowledge of where the various APL\nprimitives are located on your keyboard is necessary to get started. Keep\na hard copy of a keyboard layout handy until you are familiar with the\nlocations. Modern versions of APL include other 'tricks' that are not shown\non a keyboard map, but are part of the 'session manager'.\n\nAPL uses 'objects' referred to as variables (numeric and character)\nand functions (which are sometimes called programs in other computer\nlanguages).\n\nConsult 'APL language' by IBM; texts such as 'APL IS EASY'; 'APL an\ninteractive approach' by GILMAN and ROSE; SHARP APL Manual; or APL*PLUS/PC\ndocumentation for more information.\n\nWhen the 'Enter' key is pressed the line on the screen where\nthe cursor is positioned is interpreted by this version of APL. This is\ncalled Entering in these notes.\n\nAn Entered line is interpreted and if it follows APL syntax, it is 'executed'\nand the result displayed, otherwise an error message is displayed describing\nwhy the interpretation failed\n\nAPL expressions (lines) in this system can be up to 255 characters\nlong and are read from right to left.\n\nFunctions behave like verbs, variables and constants like nouns, etc.\nThey can be combined as in mathematics. Eg. 3+4 is a sequence of the constant\n3, the primitive function + and the constant 4.\n\nIf 3+4 is Entered on one line the result 7 will show on the next. This\nis APL in 'immediate execution mode'.\n\nThe above example will work with a+b, where a and b are variable names\nas used in algebra. Values must be assigned to a and b for APL to interpret\nthe a+b expression, otherwise a 'value error' will result.\n\nValues are assigned by using as follows: a3, and b4 will produce\nthe same result as 3+4. This is a dyadic or two variable use of the primitive\nfunction +.\n\nThe familiar y=a+b is written as ya+b in APL.\n\nA variable may contain numeric or character data. It may be a singleton,\na vector, which is a one dimensional list; or a multidimensional array.\nThe shape of a variable can be determined by the shape function \u00fb.\nEg. \u00fbTEXT will determine the shape of the character variable TEXT.\n\nIt is not necessary to know very much about APL to use it or a system\nwritten with it as the background language. This system (MYSYS) normally\nleaves the user in a ready mode in an active workspace and clears the state\nindicator after an error.\n\nIf the system is disrupted enter: )RESET and try again. If failure continues,\nperhaps there is an error in the proceedure that you are trying to use\nor you are trying to achieve a result beyond the capabilities of the system.\n\nIf the system locks up it can be restarted by Keying: Ctrl, Alt, and\nDel at the same time and waiting for the loading process to take place.`\n\nA modern APL system for a microcomputer will provide a full set of tools\nincluding facilities for report preperation and graphics, file handling,\ndata enrty and the other desireable features for individual analysis of\nfairly large activity models.\n\nIt will also provide facilities for mainframe communication and interfaces\nto routines written in other languages.\n\nBecause APL is an array language, many of the techniques used for languages\nbased on singletons are unnecessary. This and the mathematical type notation\nsimplify the code required for many proceedures.\n\nUsing arrays and because APL is an interpretative also means that many\nalgorithms based on looping and suitable for other languages should not\nbe used in APL. Algorithms should use matrix and other array proceedures\nwhere convenient.\n\nIt is not necessary to understand all the functions, operators; system\ncommands, functions and variables to use APL. Most APL users learn only\nthe subset that is personally useful and enlarge their knowledge as required.\nIt is much like using any language; you can start small and let your vocabulary\nand syntax grow.\n\nThe minimal useful set is familiar algebraic notation and by the addition\nof a few others to your tool kit you can do work of considerable complexity.\n\nTexts and application descriptions illustrate powerful combinations\nof APL primitives known as 'idioms'. These are very useful to a\nconstant or causual user. Some of theses are documented in the IDIOM\nhelp file.\n\nAPL also has a lengthy set of 'SYSTEM' COMMANDS, FUNCTIONS, VARIABLES\nand CONSTANTS. It is necessary to become familiar with:\n\n)load 'wsname' to beging a previously saved workspace. 'wsname'\ncan be any name beginning with a letter and up to 8 characters long. This\nversion of APL does not distinguish between upper or lowercase letters\nfor wsnames. It translates all to uppercase.`\n\n)save will the workspace with the name shown on the status line.\nA workspace called 'clear' cannot be saved. This is the name of the default\nws if none is named on startup.`\n\n)wsid 'wsname' will change the name of the workspace to the name\ngiven in wsname. When using APL*PLUS on a PC the name includes the disk\ndrive (library) number. 0 is the A: drive, 1 the B: dirve etc. On a hard\ndisk system there can be many ' libraries'.`\n\nIt is good pratice to use )save periodically during your work\nto avoid loosing what you have done in the event of a system failure.`\n\n)off to leave the APL system and return to the operating system.\nBe sure to use )save before using )off if you wish to save your\nwork. )off unties files, erases the APL executor and active ws.`\n\nWhen you are in a workspace:\n)fns \u00a6 to list FUNCTIONS; [S6] if using MYSYS\n)vars \u00a6 to list VARIABLES; [S7] if using MYSYS`\nThis APL has a 'line editor' that is active at all times on the\ndisplay and may be in 'replace' or 'insert' mode.\nAPL*PLUS/PC has a full screen text and numeric editor. Use:\n)EDIT name\nor\n\u2022edit 'name'`\n\nThe editor can also be used to define and edit functions. The editor chooses\none of its three modes based on the type of object contained in the name\nused. If the name is not already in use it assumes that it is a character\nvector unless the name is prefixed by \u00ec or #. The \u00ec prefix\nidicates that the name is a function. The # prefix indicates a numeric\narray. In MYSYS use [F10] for )edit`\n\nAn APL implimentation is enhanced and constrained by: the HARDWARE,\nthe Operating System, and the library of available utilities (UTILS and\nUVARS), and USER skill. My keyboard skills are poor so a variety of utilitiess\nare used to reduce the number of required keystrokes.`\n\nEarly versions of APL used all sloping CAPS and the greek looking APL\nprimitive symbols. The character constraint was the symbols that could\nbe obtained from IBM model 2741 terminal. Many remember this version and\navoid APL because of the funny looking type style. This should no longer\nbe a constraint.`\n\nAs mentioned previously APL syntax is terse and intrepretation is from\nright to left. APL uses the following for describing ALGORITHMS. The OBJECTS\nare: FUNCTIONS including the primitives; VARIABLES including boolean, integer\nand floating point numbers and charater. The character set is based on\nan eight bit byte or 256 item atomic vector.`\n\nAn APL function is said to have 'valance and be: 'Nilidic' (valence\n= 0) no 'arguments', Eg. start 'Monadic' (valence = 1) right argument only,\nEg. mean X 'Dyadic' (valence = 2) left and right arguments, Eg. a VSUM\nb\n\nA function 'returns a result' when it assigns its output to a variable,\neg. ra VSUM b.\n\n'OPERATOR' is a special primitive function that can be used in conjunction\nwith other primitives, Eg. / \\ and . are the usual operators.`\n\nNote: Character and Numeric Variables cannot be mixed in this version\nof APL. In other versions, especially those which allow the use of 'general'\nor 'nested' arrays allow mixed use of characters and numerics.\n\nVariables can be singletons, or multidimensional arrays\n\nSome examples of APL syntax in immediate execution: Traditional Aritmetic\n& Algebraic like notation: 3'4` Some APL's allow a number of expressions\non a line: 6\u00f65 4\u00f63 6+9+15` 3'4+2 2+3'4` 4-3'2 4'3-2'6\n4'3\u00f66` The examples above demonstrate dyadic use of the primitives.\nMonadic use of some common primitives: +6 -6 \u00f66 '6 '\u00fd6\n'0` Interpretation is modified by Parentheses ( ): 4'3-2'6 (4'3)-2'6`\nThe inner nest of () is interpreted first starting at right: (6+(1-5)'6)+4\u00f62`\nThe above are ok with vectors (arrays) of numbers: 3'6 7 8 9 6 7'6 5\n3 4 5 - 2 3` Note that a singleton will operate on an array of any size\nbut arrays must match in size and shape.` Unambiguous assigment using ''\nrather than '=' a3 b7 c2 5 9 a b c a+b'c` For more examples\n[Enter] on the line below:"}
{"text": "Share\n\nC++ (C Plus Plus)\n\nC++ is a statically typed, free-form, multi-paradigm, compiled, general-purpose, powerful programming language. It is regarded as an intermediate-level language, as it comprises a combination of both high-level and low-level language features. C++ is one of the most popular programming languages and is implemented on a wide variety of hardware and operating system platforms++"}
{"text": "Computer Development instruction program 1. The reasons.\nAfter choosing the class content to help teach programming already. Must be able to serve the following heads to get.\n- Why this content. Problems in didactics and the content is not more urgent or not.\n- Why computer-assisted instruction. Other media utilise cheaper or not.\nIf either answer heads or do not have the weight unit of the answer is not unassailable enough. Should strike down the programme.\n2. The objective.\nDada set as property and what to ask from the bookmen before and after utilising the electronic computer assisted command....\n\nDevelopment of computer Stages of ontogenesis of computer-assisted instruction programme.\nSeparated into eight stages.\nSequence of 1,2 and 3 sets of features and functionality of the application form. Computer-assisted instruction is the duty of an pedagogue or teacher because noesis. On class to teach psychological science of teaching methods and measuring the sequence of steps 4,5 and 6 is to make and prove and better computing device assisted statement is a subprogram of computer scientists. Or computer programmers who are able And experience in programing and figurer equipment with. Expeditiously...\n\nComputer Assisted Instruction Known or popular short that CAI is not uncommon for those in the academic world, because there are now concerned in instructing and development. Computer-assisted instruction programme to be cared very From schoolhouse to university degree, too as other means. Computer Company. Many have put in that development. There are besides numerous inquiry disciplines taken a leak. And growing of electronic computer assisted instruction. In Conference on. Demonstration of electronic computer use in instruction scientific discipline and math, \"the Institute for the Promotion of...\n\nDataBase Management In the management database. Many computer programs. Convenience. To get at the selective information. And stored in different languages such as Pascal, C language, but STAPLE programme. That is accepted and wide utilised software package is a set of FoxPro database management programmes are effective.\nTo care with high database. The program can Operates in the interface and can be utilised at once to substance abusers. Developed by the drug user itself. The tools of writing. Program itself. This allows for easier application development.\nSetup Application.\nBecause of the FoxPro..."}
{"text": "Lots of books call themselves 'essential' but very few of them live up to that claim. This is an exception to the rule. 'Essential ActionScript 3.0' is exactly what it says: whether you are a beginner who wants to learn ActionScript from the ground up or an old hand who needs an authoritative reference work, look no further - this is it! I should probably add, however, that this is big and complex book and even though it is suitable for a programmer moving to ActionScript from some other language it may be intimidating to somebody with little or no previous programming experience.\n\nThere was a time when ActionScript might have been described as a 'simple' language used for controlling animated graphics using Adobe's Flash. While it is still at the programming heart of Flash, ActionScript 3.0 is now a fully fledged object oriented language of considerable complexity. If you want to create Internet applications using Adobe's Flex framework or desktop applications using the new AIR framework, you will need to master ActionScript.\n\nColin Moock's book guides you through all the fundamental features of ActionScript programming - how to write classes and create objects, how to use instance and static methods, statements, operators and event-handing. It then moves on to explore the inner workings of the language and the standard Flash libraries, explaining how to manipulate bitmaps and vector drawing, animation, text input, display hierarchies and more.\n\nIt's probably worth pointing out that this book operates primarily within the 'world' of Flash, not of Flex or AIR. In other words, the programs mainly deal with graphics and animation rather than with controls, data and operating system integration. Put another way, the packages used by the programs are generally imported from 'flash' rather than from 'mx' (the Flex 'namespace'). If the specifics of the Flex framework are your main interest, you may need some other book in addition to this one. I say 'in addition to' rather than 'instead of' for the simple reason that, whether you are principally interested in programming Flash graphics or Flex controls, you will need a solid grounding in the ActionScript language. And, for that, this book really is the essential guide."}
{"text": "BASIC\n\nupdated Jun 24, 2007 12:17 pm | 3,025 views\n\nThe BASIC programming language (Beginners' All-purpose Symbolic Instruction Code) is a high level general purpose programming Language that was developed in 1963 at Dartmouth College by John G. Kemeny and Thomas E. Kurtz. The original BASIC dialectwas known as Dartmouth BASIC. Some of the popular versions of BASIC language are MS-DOS/PC-DOS based BASICA, GW-BASIC,QuickBASIC,Turbo BASIC, PowerBASIC etc.\n\nIt allowed for a much wider scope of users, and it's evolved descendants, including Visual Basic, are heavily used today.The Visual Basic by Microsoft has an orientation towards an object-oriented and event-driven platform which is drastically different from the tradional and original flavours of BASIC language.\n\nThe language came into widespread use in the late 1970s and early 1980s, when microcomputers were introduced with a BASIC interpreter included in ROM. Typically shoehorned into 8KB of memory, these stripped-down versions gave the language a bad name.\n\nHistory\n\nThe original BASIC language was designed in 1963 by John Kemeny and Thomas Kurtz and implemented by a team of Dartmouth students under their direction. BASIC was designed to allow students to write programs for the Dartmouth Time-Sharing System. It intended to address the complexity issues of older languages with a new language design specifically for the new class of users time-sharing systems allowed \u2014 that is, a less technical user who did not have the mathematical background of the more traditional users and was not interested in acquiring it. Being able to use a computer to support teaching and research was quite attractive enough. In the following years, as other dialects of BASIC appeared, Kemeny and Kurtz' original BASIC dialect became known as Dartmouth BASIC.\n\nThe eight design principles of BASIC were:\n\nBe easy for beginners to use.\n\nBe a general-purpose programming language.\n\nAllow advanced features to be added for experts (while keeping the language simple for beginners).\n\nBe interactive.\n\nProvide clear and friendly error messages.\n\nRespond quickly for small programs.\n\nNot require an understanding of computer hardware.\n\nShield the user from the operating system.\n\nThe language was based partly on FORTRAN II and partly on ALGOL 60, with additions to make it suitable for timesharing. (The features of other time-sharing systems such as JOSS and CORC, and to a lesser extent LISP, were also considered.) It had been preceded by other teaching-language experiments at Dartmouth such as the DARSIMCO (1956) and DOPE (1962 implementations of SAP and DART (1963) which was a simplified FORTRAN II). Initially, BASIC concentrated on supporting straightforward mathematical work, with matrix arithmetic support from its initial implementation as a batch language and full string functionality being added by 1965. BASIC was first implemented on the GE-265 mainframe which supported multiple terminals. Contrary to popular belief, it was a compiled language at the time of its introduction. It was also quite efficient, beating FORTRAN II and ALGOL 60 implementations on the 265 at several fairly computationally intensive programming problems such as numerical integration Simpson's Rule.\n\nThe designers of the language decided to make the compiler available without charge so that the language would become widespread. They also made it available to high schools in the Dartmouth area and put a considerable amount of effort into promoting the language. As a result, knowledge of BASIC became relatively widespread (for a computer language) and BASIC was implemented by a number of manufacturers, becoming fairly popular on newer minicomputers like the DEC PDP series and the Data General Nova. The BASIC language was also central to the HP Time-Shared BASIC system in the late 1960s and early 1970s. In these instances the language tended to be implemented as an interpreter, instead of (or in addition to) a compiler.\n\nSeveral years after its release, highly-respected computer professionals, notably Edsger W. Dijkstra, expressed their opinions that the use of GOTO statements, which existed in many languages including BASIC, promoted poor programming practices.[2] Some have also derided BASIC as too slow (most interpreted versions are slower than equivalent compiled versions) or too simple (many versions, especially for small computers left out important features and capabilities"}
{"text": "I start\u00aded learn\u00ading pro\u00adgram\u00adming in eighth grade. It was on my school's first Apple II and the pro\u00adgram that most sticks in my head was a short BASIC rou\u00adtine that had a small square bounc\u00ading around and off the edges of the screen. I dove into\u2026"}
{"text": "Web Site Promotion\n\nOnline Tutoring Blog\n\nDevelopment\n\nApplication development is complex, time-consuming and error prone. Highly skilled developers are required.\n\nModular and subsystem programming code will be accomplished during this stage.\nUnit testing and module testing are done in this stage by the developers.\nThe design must be translated into a machine-readable form. The development step performs this task.\nIf the design is performed in a detailed manner, Development can be accomplished without much complication.\nProgramming tools like compilers, interpreters, debuggers etc are used to generate the code.\nDifferent high level programming languages like C#, C++, C, Java are used for coding.\nWith respect to the type of application, the right programming language is chosen.\n\nThe latest developments allow to generate applications straight from the knowledge systems.\nThis approach finds its justification in the use of semantic technologies with substitution of www data with verified production data.\nThe RAD model assumes the use of the RAD tools like VB, VC++, C# etc rather than creating software using conventional third generation programming languages.\nThe RAD model works to reuse existing program components (when possible) or create reusable components (when necessary). In all cases, automated tools are used to facilitate construction of the software.\n\nThis is also the phase where the bugs are worked out of the system. A contingency plan is also developed at this point.\nA contingency plan is an emergency management document. If the power goes out \u2013 what happens to the system? What is the back up? How fast can it be brought back up to speed? Again.\n\nDevelopment Environments:\n\nHtml,JavaScript\n\nAsp,Asp.net\n\nPhp\n\nJsp\n\nC#\n\nUML\n\nJava,J2EE,EJB\n\nDatabase Script(SQL)\n\nAccess,Mysql,Sql,Oracle\n\nMore Advance - To Create .dll files, .ear, jar..... Set up program - for your business."}
{"text": "Programming for Android\n\nAn Android application can be created on the desktop or directly on the mobile. Techniques and tools available.\n\nAndroid is dedicated to mobile phones it is an operating system under a\nfree license, as is Linux. It was created by a startup specialized in the\ncreation of software for mobile, Android, that has been acquired by Google\nin July.\n\nVideo of Android 3\n\nGoogle\nhas federated a lot of players in the mobile domain around its initiative\nin an entity called Open Handset Alliance whose logo is displayed on\nthe right.\nIt includes:\n- Operators as Telefonica, Telecom Italia.\n- Phone manufacturers including LG, Motorola, Samsung.\n- Founders components: Intel, Nvidia, Texas Instruments.\n- And Net players like eBay.\n\nThe platform\n\nAndroid, is more than an operating system, it is also a user interface and\na platform for applications created by Google. Being open, it will enable\nindependent programmers to create software for mobile devices.\nThe main advantage over current systems such as Windows Mobile, is a full\naccess to the hardware, while it was limited so far.\nAn SDK is already\navailable for developers.\nApplications provided by Google include Gmail, Google Mobile (search engine),\nCalendar, Google Documents, Youtube, Maps...\n\nRenderScript is a 3D rendering API using the graphics processor and is available for the Android 3.0 tablets.\nHowever it is expected in the near future to merge Android 2 and 3, so we should also have one day this on smartphones. This interface is part of the SDK, and programmed in a language close to C, compiled in intermediate code.\n\nDalvik\n\nDalvik is a virtual machine that interprets the object code from compiling a Java source (or other language).\n\nThe Alien Dalvik compiler is a portable version of Dalvik that runs Android applications.\nRunning them on other operating systems would allow to make applications portable between various types of smartphones. The first consumer version is scheduled on MeeGo to the end of the year.\n\nTo cope with the inconvenience that may possibly arise from the Oracle lawsuit against Google, about Dalvik, the virtual machine for Android, which has the disadvantage to not have been produced by them, the Fosdem foundation launched the IceRobot project. This is another virtual machine entirely based on code licensed under GNU.\n\nProgramming tools for Android\n\nThe version 3.0 of the Android SDK still contains an emulator for testing applications on a virtual mobile phone. It is as committed to slates as smartphones and supports larger screens. To do this, the user interface has been completely redesigned.\nNew components are added to the library. The applications have been rewritten to a more intuitive using.\nThe support for M3U playlist URL should allow to view TV on a tablet with a tool such as VLC.\n\nTerminal IDE. Command line and development tools for Java and C on Android. This allows to work directly on the mobile device. Git is included in the IDE.\n\nApp Inventor. Abandoned by Google but maintained by MIT, which is the creator, this tool can automatically generate an application.\n\nAIDE. Another IDE to develop apps directly on the mobile. Compatible with Eclipse.\n\nARM Tools. Eclipse plugin to program at native level. Eclipse now includes Android programming, see at the main site."}
{"text": "Java Programming, Chapter 12 Exercises\nProgramming Exercises\nFor Chapter 12\nTHIS PAGE CONTAINS programming exercises based on\nmaterial from Chapter 12 of this on-line\nJava... in B.\nSuppose that A and B are variables of type set in\nJava\n\nJava Programming: Chapter 8 Index Chapter8\nArrays\nCOMPUTERS GET A LOT OF THEIR POWER from working..., but it can\ngrow to hold any number of items.\nContents of Chapter8:\nSection... 5: Multi-Dimensional Arrays\nProgramming Exercises\nQuiz on this Chapter\n\njava program 8 java program 8 Develop the program calculateHeight, which computes the height that a rocket reaches in a given amount of time. If the rocket accelerates at a constant rate g, it reaches a speed of g ?8 - Java Beginners 8 Unit board is PIC18F4520\nPurpose of euiqpment is to make test heart beat; fast/slow/moderate heartbeat\nI need to activate the speaker when testing for heartbeat. Should be able to start buzzing when testing is done.\nShould\n\nJava Programming: Chapter 5 Exercises\nProgramming Exercises\nFor Chapter 5\nTHIS PAGE CONTAINS programming exercises based on\nmaterial from Chapter 5 of this on-line\nJava textbook... and most complex program that has come up so far\nin the exercises.)\nYou\n\nJava Programming: Chapter 8 Quiz\nQuiz Questions\nFor Chapter8\nTHIS PAGE CONTAINS A SAMPLE quiz on material from\nChapter8 of this on-line\nJava textbook. You should be able to answer these questions after\nstudying that chapter. Sample answers to all\n\nWindows 8 Advantages and Disadvantages\nIsHow To Install Windows 8\nIn this tutorial we will discuss about how to install windows 8 on your... 8 and if you are willing to install the latest version of Windows 8 in your... 8 on your computer you need to follow few simple basic steps. Follow\n\nBenefits of Window 8 for Business\nAs Windows 8 has recently unveiled, most of the people want to know, how this new operating system can benefit them, and Benefits of Windows 8 for Businesses... businesses.\nTo start with, one of the prime benefits of Windows 8"}
{"text": "Learning PHP And MySQL In this video training title from Doug Bierer, you will learn the fundamentals of PHP and MySQL. These two platforms have been virtually inseparable for many years, and major groundbreaking websites such as WordPress, Wikipedia, and Facebook use PHP and MySQL technologies.\n\nThis computer software training is designed for the beginner; no previous programming or database experience is required. Your training begins with the absolute basics, covering topics such as creating variables, working with data types and outputting them to a webpage. You will learn how to work with arrays, how to use loops and control structures such as foreach, while and if. You will learn about functions and creating classes for object-oriented programming. You will master interacting with MySQL and using SQL functions to store and retrieve data. Doug also provides indepth lessons on how PHP and MySQL can be used to send email, work with date and time functions, use cookies and sessions, building web forms, and much more.\n\nThroughout this training course you will complete labs that re-enforce the concepts you have learnt. Once you have completed this video tutorial you will be well versed in the fundamentals of creating web applications using PHP and MySQL. Working files are included, allowing you to follow along with the author throughout the lessons."}
{"text": "You may have definite ideas about writing code when working alone, but team development requires that everyone use the same approach. With the JavaScript practices in this book -- including code style, programming tips, and automation -- you will learn how to write maintainable code that other team members can easily understand, adapt, and extend.\n... more...\n\nSolve a wide range of problems in your web application quickly and efficiently with the Yahoo! User Interface Library (YUI). With this definitive, getting-started guide to version 3 of the popular open source JavaScript library, you?ll learn how to address many of the most common and challenging problems that web development presents.\nYUI 3 Cookbook... more...\n\nWeb apps would run much better if heavy calculations could be performed in the background, rather than compete with the user interface. With this book, you?ll learn how to use Web Workers to run computationally intensive JavaScript code in a thread parallel to the UI. Yes, multi-threaded programing is complicated, but Web Workers provide a simple... more...\n\nUse CoffeeScript to Write Better JavaScript Code Than Ever Before! If you can do it in JavaScript, you can do it better in CoffeeScript. And, since CoffeeScript ?compiles down? to JavaScript, your code will fit neatly into virtually any web environment. In Programming in CoffeeScript , Mark Bates shows web developers why CoffeeScript... more...\n\nThis fully updated definitive JavaScript guide covers the latest features\u2014including its uses in Ajax and HTML5-based Web applications. JavaScript: The Complete Reference, Third Edition is completely revised to cover the newest changes to JavaScript up to version 1.9, the latest browser-specific features for Internet Explorer, Firefox, and Chrome,... more...\n\nThis book picks up right where Learning Perl leaves off. With Intermediate Perl , you?ll graduate from short scripts to much larger programs, using features that make Perl a general-purpose language. This gentle but thorough guide introduces you to modules, complex data structures, and object-oriented programming.\nEach chapter is small enough... more...\n\nGet a quick introduction to WebGL, the new standard for 3D rendering on the Web and a member of HTML5?s family of technologies. With this hands-on guide, you?ll learn essential WebGL development and production concepts, using the JavaScript 3D engine Three.js. At the end of the book, you?ll put everything together and build a full 3D application... more...\n\nWith Learning JavaScript Design Patterns , you?llExplore many popular design patterns,... more...\n\nTake your web development skills from browser to server with Node?and learn how to write fast, highly scalable network applications on this JavaScript-based platform. With this hands-on guide, you?ll quickly master Node?s core fundamentals, gain experience with several built-in and contributed modules, and learn the differences and parallels between... more..."}
{"text": "Complete Java Training\n\nThe Java language began modestly as a programming language to address the needs of a diverse set of consumer appliances, but has since evolved to become the most popular language and platform for building enterprise level applications. Intertech Training's Complete Java course teaches you the syntax and core APIs of the Java programming language while also coaching you on the conventions and practical techniques necessary to code Java professionally."}
{"text": "The best free resources to Learn Python Programming Language and Python Frameworks\n\nPreviously I have listed an extensive list of Free Computer Programming Ebooks which includes few books to learn about Python Programming,In this post I am going to list out all free resources available to learn basic Python programming as well as best tutorials to learn some Popular Python frameworks like Django Python Web framework, Flask web microframework, Kivy the multitouch Python framework and Pygame.\n\nWrite for Techiestuffs\n\nHere is a perfect opportunity for you to showcase your writing skill, your expertise and technical experience to unique and highly passionate group of peoples that choose to stay updated with Techiestuffs Network."}
{"text": "Chapter 6. References - Pg. 201\n\n6 References Learning references is one of the major rites of passage in Perl. Introduced in Perl 5, references opened the way for complex data structures and object-oriented programming. References are the key to organizing data and passing it around as a unit. If you want to move to the next level in Perl, you need references. Although this chapter shows you some reference tricks, your greatest ben- efit will come from your effective creation and manipulation of data struc- tures. You'll develop those skills with practice, so don't be afraid to start using them. Item 58. Understand references and reference syntax. A reference is a scalar value. You can store a reference in a scalar variable"}
{"text": "Description: Introduction to the constructs in the Matlab programming language, aimed at students who already know how to program. Array and matrix operations, functions and function handles, control flow, plotting and image manipulation, cell arrays and structures, and the Symbolic Mathematics toolbox."}
{"text": "Java Training Package\n\nE-Careers, January 2012, Pages: 116Start Using JavaScript Duration 5 Hour(s) Compare JavaScript to Java Incorporate JavaScript into HTML on a Web page Work with JavaScript variables and expressions Work with JavaScript functions and objects Using JavaScript for Interactivity Duration 3 Hour(s) You will learn: Events in JavaScript, The Form Object Creating Interactive Forms, Loops Using Advanced JavaScript Duration 6 Hour(s) Use frames, documents, and windows Use cookies Manipulate text strings Work with the history list\n\nOverview Duration 1 Hour(s) This section gives a foundation of Java fundamentals upon which to build. The course introduces the use of the Java language and the Java Virtual Machine, the basics of syntax and control flow, compiling and running a Java application, and other fundamental topics. Object-Oriented Concepts Duration 1 Hour(s) This course teaches the fundamentals of object-oriented programming concepts and their application in a Java environment. Java Core Packages Duration 1 Hour(s) Describe how Java classes are organized into packages. Estimate the lifetime of a Java object. Explain the difference between Java applications and applets Java AWT and JFC Duration 1 Hour(s) This course gives a foundation of Java fundamentals upon which to build. The course introduces the use of the Java language and the Java Virtual Machine, the basics of syntax and control flow, compiling and running a Java application, and other fundamental topics. File Input/Output Duration 1 Hour(s) Manipulate files, directories and their contents from within Java applications. Identify how to open and close files from within a Java application. Describe how to read and write files from within a Java application. Describe how to use formatting specifiers to construct custom output Object Serialization Duration 1 Hour(s) This course teaches how to use classes and methods in the java.io package to serialize object data. Threads, Exception Handling and Assertions Duration 1 Hour(s) This course teaches how to create applications that use threads to simultaneously carry out multiple tasks, and how to use exceptions and assertions to detect and handle unexpected run-time conditions. Dates and Numbers Duration 1 Hour(s) This course teaches how to work with dates, numbers and currencies in Java. It also covers how to create applications that search text strings and files for patterns of text, or tokens. Networking Java Applications Duration 1 Hour(s) This course teaches how to how to create client/server applications and use the java.net package to create networking applications in Java. Generics and Collections Duration 1 Hour(s) This course teaches how to create groupings of objects using collections and how to use generics to assign some type safety to those collections. The course covers the four major categories of collections, type safety and type erasure, sorting and searching in collections and arrays, and the use of polymorphism with generics. Database Connectivity Fundamentals Duration 1 Hour(s) This course teaches how to create Java applications that communicate with databases using Open Data Base Connectivity (ODBC) technology. Key Topics and Features Duration 1 Hour(s) Review key features of the Java language and development environment Highlight key topics covered during this entire course"}
{"text": "An instructional lesson that leads the user through key features and functions of things such as software applications, hardware devices, processes, system designs, and programming languages. The tutorial typically is set up as a series of steps that progress through levels of difficulty and understanding. For this reason, the tutorial is best followed in its logical sequence in order to understand all of the elements of what the user is trying to learn.\n\nThe term is used widely on the Internet as there are many Web sites that offer tutorials on everything from HTML coding to overclocking a graphics card. While tutorials can take printed form, the term is more commonly being used to refer to online learning programs.\n\nTutorials-Expert's task it to collect all the tutorials related to the field of computer programming, application development and graphics designing such that to build the biggest index on the web. This will allow the users to access various tutorials according to their needs and hence providing them the solution for which they came looking for.\n\nHow do we do it?\n\nIts simple, the people who write tutorials submit their links here on our website. Once the tutorial is approved by the moderating staff (so as to validate its quality) , its added to the main system. As more and more people write tutorials daily, our database is constantly expanding.\n\nWhat is their benefit?\n\nThe people who write tutorials get encouraged by the amount of traffic they recieve from our website.\n\nSo now, if you are intrested in going trough our collection, you can either use the sitemap or the navigation in the left panel.\n\nTired of working all day long and wanted to relax? Play really cool flash games to make the heat go away. From the thousands of games to choose from, You are most definitely going to find the ones you will like."}
{"text": "It might be nice to work through Structure and Interpretation of Computer Programs, which is available online for free. This book is an introduction to computer science and the programming language Scheme, which is a flavor of the programming language Lisp, which is based on the lambda calculus. Although it is not strictly a book about the lambda calculus, it might be fun or useful to gain some hands-on and \"practical\" experience with the lambda calculus by reading some of this book and working through some of its exercises.\n\nThanks for the tip. I'm sure you're right in saying that it will provide an insight, though I am perhaps looking for a more theoretical approach (as Alonzo Church originally formulated it). I have some active experience in F# which should provide a basis. \u2013 NoldorinJul 28 '10 at 15:48\n\n4\n\nThis won't help much with understanding types. \u2013 Charles StewartJul 28 '10 at 21:06"}
{"text": "Summary\n\nDifferent programming languages call arrays by different names and have different methods for manipulating them, but any programming language worth using provides some means of working with sets of data. PHP is no different in this regard. In fact, as you had the chance to see in this chapter, PHP excels in its array-handling capabilities. What PHP refers to simply as an array really encompasses two related but different structures\u2014ordered and unordered lists.\n\nIn this chapter, we covered PHP arrays and array functions, starting with creating and populating them and then looking at different techniques for adding elements to existing arrays and removing elements from them either singly or in groups. We also discussed how to determine whether a given element exists in an array, how to access that element once you have made that determination, and how to traverse an array in a systematic fashion."}
{"text": "\"... We programmin ...\"\n\nWe programming language. Second, in a project involving the evolution of a well-established language, compatibility with previous versions is a major issue, and maintaining this compatibility was our second objective. Third and most important, the commercial success of spreadsheets is largely due to the fact that many people find them more usable than programming languages for programming-like tasks. Thus, our third objective (with resulting constraints) was to maintain this usability advantage.\n\n\"... We chara ...\"\n\nWe characters who can interact with one another, 2) a collection of 3D characters and scenery designed to spark story ideas, and 3) a tutorial that introduces users to writing Alice programs using storybased examples. In a study comparing girls ' experiences learning to program using Storytelling Alice and a version of Alice without storytelling support (Generic Alice), we found that users of Storytelling Alice and Generic Alice were equally successful at learning basic programming constructs. Participants found Storytelling Alice and Generic Alice equally easy to use and entertaining. Users of Storytelling Alice were more motivated to program; they spent 42 % more time programming, were more than 3 times as likely to sneak extra time to work on their programs, and expressed stronger interest in future use of Alice than users\n\n\"... Software sy ...\"\n\nSoftware systems have fallen prey to the assumption that they are supposed to capture idealized models of computation inspired by deceptively simple metaphors such as objects and mathematical functions. Aspect-oriented programming languages have made a significant breakthrough by noticing that, in many situations, humans think and describe in crosscutting terms. In this paper we suggest that the next breakthrough would require looking even closer to the way humans have been thinking and describing complex systems for thousand of years using natural languages. While natural languages themselves are not appropriate for programming, they contain a number of elements that make descriptions concise, effective and understandable. In particular, natural languages referentiality is a key factor in supporting powerful program organizations that can be easier understood by humans.\n\n\"... Recent advances in programming environments have focused on improving programmer productivity by utilizing the inherent structure in computer programs. However, because these environments represent code as plain text, it is difficult and sometimes impossible to embed interactive tools, annotations, ...\"\n\nRecent advances in programming environments have focused on improving programmer productivity by utilizing the inherent structure in computer programs. However, because these environments represent code as plain text, it is difficult and sometimes impossible to embed interactive tools, annotations, and alternative views in the code itself. Barista is an implementation framework that enables the creation of such user interfaces by simplifying the implementation of editors that represent code internally as an abstract syntax tree and maintain a corresponding, fully structured visual representation on-screen. Barista also provides designers of editors with a standard text-editing interaction technique that closely mimics that of conventional text editors, overcoming a central usability issue of previous structured code editors.\n\n\"... It ...\"\n\nIt Our parser uses these formats to turn strings into structured objects and to report its level of confidence that each string is a valid instance of the format. End-user programmers can use our system to create validation code that takes a graduated response to slightly invalid data. We evaluate our system's expressiveness by defining formats for commonly-occurring web data.\n\n\"... Software engineering research and programming language design have enjoyed a symbiotic relationship, with traceable impacts since the 1970s, when these areas were first distinguished from one another. This report documents this relationship by focusing on several major features of current programmin ...\"\n\nSoftware engineering research and programming language design have enjoyed a symbiotic relationship, with traceable impacts since the 1970s, when these areas were first distinguished from one another. This report documents this relationship by focusing on several major features of current programming languages: data and procedural abstraction, types, concurrency, exceptions, and visual programming mechanisms. The influences are determined by tracing references in publications in both fields, obtaining oral histories from language designers delineating influences on them, and tracking cotemporal research trends and ideas as demonstrated by workshop topics, special issue publications, and invited talks in the two fields. In some cases there is conclusive This article has been developed under the auspices of the Impact Project. The aim of the project is to provide a scholarly study of the impact that software engineering research\u2014both academic and industrial\u2014has had upon practice. The principal output of the project is a series of individual papers covering the impact upon practice of research in several selected major areas of software\n\n\"... HANDS is a new programming system for children that was designed for usability. This paper examines the effectiveness of three features of HANDS: queries, aggregate operations, and data visibility. The system is compared with a limited version that lacks these features. In the limited version, progr ...\"\n\nHANDS is a new programming system for children that was designed for usability. This paper examines the effectiveness of three features of HANDS: queries, aggregate operations, and data visibility. The system is compared with a limited version that lacks these features. In the limited version, programmers can achieve the same results but must use more traditional programming techniques. Children using the full-featured HANDS system performed significantly better than their peers who used the limited version. This provides evidence that usability of programming systems can be improved by including these features.\n\n\"... Software exten ...\"\n\nSoftware extent to whic h the yc reate abstrac tions. To address this, we deployed an online survey to In formation Week subsc ribers to ask about not only so ftware usage but also feature usage related to abstra c tionc reation. Most respondents didc reate abstrac tions. Moreover, through fac tor analysis, w e found that features fell into three clusters--when users had a propensity to use one feature, then they also had a propensity to use other features in the same cluster. These clusters\n\n\"... Novices face many barriers when learning to program, including the need to learn both a new syntax and a model of computation. By constraining syntax and providing concrete visual representations on which to operate, direct manipulation programming environments can potentially lower these barriers. ...\"\n\nNovices face many barriers when learning to program, including the need to learn both a new syntax and a model of computation. By constraining syntax and providing concrete visual representations on which to operate, direct manipulation programming environments can potentially lower these barriers. However, what if the learning goal of the novice is to be able ultimately to program in conventional textual languages, as is the case for introductory computer science students? Can direct manipulation programming environments lower the barriers to programming, and, at the same time, promote positive transfer to textual programming? To address this question, we designed a new direct manipulation programming interface for ALVIS Live!, a novice programming environment. We then conducted an experimental study that compared the programming outcomes promoted by the new direct manipulation interface to those promoted by ALVIS Live!'s textual programming interface. We found that the direct manipulation interface not only led to significantly better initial programming outcomes, but also to significant positive transfer to the textual interface. Our results show that direct manipulation interfaces can provide novices with a \"way in \" to traditional textual programming. 1.\n\n\"... Usability is an important feature for programming languages. However, user studies which compare programming languages or systems are both very expensive and typically inconclusive. In this paper, we posit that discount usability methods can be successfully applied to programming languages concepts ...\"\n\nUsability is an important feature for programming languages. However, user studies which compare programming languages or systems are both very expensive and typically inconclusive. In this paper, we posit that discount usability methods can be successfully applied to programming languages concepts such as language features. We give examples of useful feedback received from applying heuristic evaluation to a selection of language features targeted at parallel programming."}
{"text": "C# 4.0 Unleashed is for anyone who wants to learn the C# programming language in depth, understanding how language features truly work. While giving you those insights, you learn where and how to use the features to design various kinds of software. This book not only teaches the language\u0393\u0393\u00e9\u00bc\u0393\u00e4\u00f3s capabilities, it also looks behind the scenes to build a solid foundation to aid you in understanding the .NET platform as a whole.\n\nBart De Smet offers exceptional insight into the features of both the language and Microsoft\u0393\u0393\u00e9\u00bc\u0393\u00e4\u00f3s broader framework. He doesn\u0393\u0393\u00e9\u00bc\u0393\u00e4\u00f3t just cover the \u0393\u0393\u00e9\u00bc\u253c\u00f4what\u0393\u0393\u00e9\u00bc\u252c\u00a5 and \u0393\u0393\u00e9\u00bc\u253c\u00f4how\u0393\u0393\u00e9\u00bc\u252c\u00a5 of effective C# programming: He explains the \u0393\u0393\u00e9\u00bc\u253c\u00f4why,\u0393\u0393\u00e9\u00bc\u252c\u00a5 so you can consistently choose the right language and platform features, maximizing your efficiency and effectiveness.\nThe early chapters introduce the .NET platform, the tooling ecosystem, and the C# programming language, followed by in-depth coverage of the C# programming language itself, with immediate application of language features. The last chapters give an overview of the .NET Framework libraries about which every good developer on the platform should know.\n\n* Understand the .NET platform: its language support, libraries, tools, and more\n* Learn where C# fits, how it has evolved, and where it\u0393\u0393\u00e9\u00bc\u0393\u00e4\u00f3s headed\n* Master essential language features including expressions, operators, types, objects, and methods\n* Efficiently manage exceptions and resources\n* Write more effective C# object-oriented code\n* Make the most of generics, collections, delegates, reflection, and other advanced language features\n* Use LINQ to express queries for any form of data\n* Master dynamic programming techniques built on .NET\u0393\u0393\u00e9\u00bc\u0393\u00e4\u00f3s Dynamic Language Runtime (DLR)\n* Work with namespaces, assemblies, and application domains\n* Write more efficient code using threading, synchronization, and advanced parallel programming techniques\n* Leverage the Base Class Library (BCL) to quickly perform many common tasks\n* Instrument, diagnose, test, and troubleshoot your C# code"}
{"text": "eBook Details:\n\neBook Description:\n\nFoundation Game Design with ActionScript 3.0, 2nd Edition\n\nIn response to the success of the first edition of Foundation Game Design with ActionScript 3.0, 2nd Edition, Rex van der Spuy has revised and updated all the code to meet current programming best practices, and the focus is now on accurate ActionScript 3.0, regardless of the IDE that you use. After the successful first edition of Foundation Game Design with ActionScript 3.0, 2nd Edition comes a modernized update of all the code to meet current programming best practices and an ActionScript 3.0 focus regardless of the IDE that you use.\n\nWe've all sneaked the odd five minutes here or there playing the latest Flash game that someone sent around the office, but creating those games is trickier than it looks. The aim of Foundation Game Design with ActionScript 3.0, 2nd Edition is to take you, even if you've minimal multimedia or programming experience, through a series of step-by-step examples and detailed case studies-to the point where you'll have the skills to independently design any conceivable 2D game using Flash and ActionScript.\n\nFoundation Game Design with ActionScript 3.0, 2nd Edition is a non-technical one-stop shop for all the most important skills and techniques a beginning game designer needs to build games with Flash from scratch. Whether you're creating quick blasts of viral amusement, or more in-depth action or adventure titles, this is the book for you. Download eBook Free \u00bb\n\neBook Details:\n\nPaperback: 436 pages\n\nPublisher: friendsofED; 1st edition (September 12, 2011)\n\nLanguage: English\n\nISBN-10: 1430236140\n\nISBN-13: 978-1430236146\n\neBook Description:\n\nAdvancED ActionScript 3.0: Design Patterns\n\nAdvancED ActionScript 3.0: Design Patterns is a fresh look and new approach to utilizing valuable, structural techniques and methods that are commonly used in the field of rich interactive application development. With each method broken down into different strategized explanations, you'll find the approach most suitable for you. Whether it is an example you can utilize as-is, or one you can start with and develop further, you will have a glossary of definitions and organizational concepts at your fingertips.\n\nObject-oriented programming (OOP) and design patterns are not new to the field, but can often be overlooked in their value. They are, at times, not only overwhelming to learn, but difficult to put into practice. However, they are useful because they create a structure that can be broken down, rebuilt, and reused.\n\nProvides the building blocks required for the implementation of OOP\n\nAddresses problems and concerns regarding OOP\n\nOffers solutions on how to approach and utilize OOP\n\nAdvancED ActionScript 3.0: Design Patterns is for Flash and/or Flex developers seeking a better understanding of object-oriented programming and the knowledge to utilize it in a manner practical to the language itself."}
{"text": "Develop your own iPhone applications. Ideal for non-Mac programmers, this introductory guide shows developers how to create applications for the world's most popular smart phone. You will learn how to use a modified version of the Mac development environment, the Objective-C programming language, and the Xcode development tools. Nearly... more...\n\nCreate your own iPhone OS and Mac OS X applications with ease!\nObjective-C for iPhone Developers: A Beginner's Guide shows you how to use the Objective-C programming language and Apple's Foundation Framework so you can write innovative Mac OS software and iPhone applications. The first stop for aspiring iPhone developers, this hands-on guide... more...\n\nCreate your own iPhone and iPad apps with ease!\niOS SDK Programming: A Beginner?s Guide shows you, step by step, how to build custom applications for the iPhone and iPad. All text, code, illustrations, and examples reflect the latest features in iOS SDK 4. Free online videos help flatten the learning curve. Author James A. Brannan works exclusively... more..."}
{"text": "Chapter 1. Setup and First Run\n\nChapter 1. Setup and First Run\n\nI know you want to start writing apps as soon as possible, but there\nare three things you need to know first:\n\nI don't assume you already know how to program.\n\nYou don't need to have existing experience with Objective-C,\nCocoa, Xcode, or even C. If you have some familiarity with a computer\nlanguage (even HTML), it will help you. You do need to be a reasonably\nproficient Mac user. If you show up with the desire to learn Mac\nprogramming, I'll walk you through what you need to know.\n\nThe chapters are modular.\n\nIf you know C and object-oriented concepts, but not Objective-C\nspecifically, you can skip to Chapter 5 after\nlearning about Xcode in this chapter. If you've already dabbled in Mac\nor iPhone programming, and know your way around Objective-C and some\nbasic Cocoa topics, you can probably jump to Chapter 7. Otherwise, start right\nhere.\n\nYou need a Mac running Snow Leopard.\n\nAll of the chapters assume that you're running Mac OS X 10.6\nSnow Leopard, which runs only on Intel-based Macs."}
{"text": "Editorial Reviews\n\nThis book covers topics ranging from the general principles of .NET through the C# language and how its used in ASP.NET and Windows Forms. Written by programmers for programmers, the content of the book is intended to get readers over the hump of the .NET learning curve and provide solid practical knowledge that will make developers productive from day oneMews Systems in Prague, Czech Republic"}
{"text": "CS 350: Computer System Concepts\n\nCS 350\n\nGeneral\n\nHome Page\n\nSpring Semester in 2013\n\nThe course provides an introduction to computer systems --\nespecially the software-hardware interface and system-call\ninterface provided by the operating system.\n\nTopic include, operating system services -operating system\nabstractions (processes, files, memory, etc); resource\nmanagement using system calls; user (systems programmer)\ninterface to the operating system, interprocess communication, and basic concepts in networking.\nC Language programming will be taught as part of the course.\n\nThe left hand column gives access to the various top-level\nCS350 pages, and also appears in several of these top-level\npages. The top level pages are:"}
{"text": "In several steps input characters are turned into a sequence\nof terminal symbols and a symbol table and then into a tree\nrepresenting the program expressed by the input characters. The\ntree can then be converted into something that is more or less\nexecutable and will produce the effect expected by the program.\n\nThe compilation phases run more or less in parallel, i.e., the\nintermediate data may or may not be available explicitly. How\ncompilation progresses depends on the implemented language, e.g.,\nif declare before use is required (as in C) or not (as in Java, mostly).\n\npj helps implementing lexical analysis, syntax analysis,\nand the parse tree, all just based on an annotated grammar.\n\nIf requested, pj creates input for and executes JLex, a\nprogram that generates a scanner from a table of regular expressions\nand actions programmed in Java. The actions assemble symbols from\ninput characters and may include maintaining symbol information\nin a Map-based datastructure.\n\npj creates input for and executes jay, Berkeley\nyacc retargeted to Java, a program that generates a parser\nfrom a table of grammar rules expressed in BNF and actions\nprogrammed in Java. pj creates an interface describing the\nactions. The actions are executed once the input symbols from the\nscanner match rules of the grammar and they usually create a parse\ntree describing a user program.\n\nWhile jay requires BNF input, pj also supports\nnotations for iterative and optional constructs and expands them\nas BNF. If requested, the iterative constructs will include\nrobust error recovery.\n\nIf requested, pj implements the action interface with\na factory and classes that implement a parse tree and a structured\ndump.\n\nFinally, pj generates test drivers for the scanner and\nthe parser which can include the graphical animation jay.yydebug.\n\nA compiler consists of a frontend and a backend. The frontend\nanalyzes the source program and creates an intermediate representation.\nThe backend processes the intermediate representation, e.g., to\nperform further analysis, determine runtime memory allocation,\ngenerate machine code, or interpret the program.\n\npj facilitates writing frontends that represent a\nsource program as a tree using subclasses of ArrayList.\nA backend then has to traverse such a tree and make decisions\nbased on the branch node classes and leaf values. jag\nsupports a pattern/action paradigm to implement the tree traversal.\n\njag is a preprocessor; actions are programmed in Java.\nIn the actions jag expands shorthand notations for printing\nand for recursive calls on the pattern selection mechanism.\n\nA pattern investigates the classes of a branch node and its\ndescendants; inheritance is used as a wildcard mechanism that\nencourages a programming style where patterns for more specific\nclasses override patterns for more general classes. A tree traversal\ncan first be implemented with a few general patterns and later improved\nby adding patterns for special cases.\n\njag might benefit from generic node classes which\npj would have to create.\n\nIt is quite simple to convert between a tree and an XML document.\nThis can support near automatic generation of deeply nested XML\ndocuments from structured data, i.e., a return of little languages\nfor structured data. It also poses the question how XSL could be\nleveraged in language processing -- after all, XSL programming can be based\non a pattern/action paradigm.\n\nWhile wcs can spoof System in every package\nusing a delegate to a singleton in a well-known package,\nthe implementation should first attempt to take advantage\nof a security policy, if any, which might permit things like\nSystem.setIn(java.io.InputStream).\n\nIn pj/+ should mark a list of one or more\nelements with some delimeter and /* should mark a delimited\nlist which can be empty.\n\njag should support null correctly: if not\nspecified in the input, an optional item will be represented by\npj as null."}
{"text": "\"For every polynomial algorithm you have,\nI have an exponential algorithm that I would rather run.\"\n\n\u2014 Alan Perlis\n\n\"Achieving a polynomial-time solution to a nontrivial problem\nis not something that depends on fine-grained implementation details;\nrather, the difference between exponential and polynomial\nis based on overcoming higher-level obstacles.\nOnce one has a [polynomial] algorithm to solve the problem, however,\nit is often possible to achieve further improvements in runnning time\nby being careful with the implementation details,\nand sometimes by using more complex data structures.\"\n\n\"Having a solid base of algorithmic knowledge and technique\nis one characteristic that separates the truly skilled programmers\nfrom the novices.\nWith modern computing technology,\nyou can accomplish some tasks without knowing much about algorithms,\nbut with a good background in algorithms, you can do much, much more.\"\n\n\"Dynamic programming is a fancy name for\n[recursion]\nwith a table.\nInstead of solving subproblems recursively,\nsolve them sequentially and store their solutions in a table.\nThe trick is to solve them in the right order\nso that whenever the solution to a subproblem is needed,\nit is already available in the table.\nDynamic programming is particularly useful on problems for which\ndivide-and-conquer appears to yield an exponential number of subproblems,\nbut there are really only a small number of subproblems\nrepeated exponentially often.\nIn this case, it makes sense to compute each solution the first time\nand store it away in a table for later use,\ninstead of recomputing it recursively every time it is needed.\"\n\n\"A greedy algorithm starts with a solution to a very small subproblem\nand augments it successively to a solution for the big problem.\nThe augmentation is done in a \"greedy\" fashion, that is,\npaying attention to short-term or local gain,\nwithout regard to whether it will lead to a good long-term or global solution.\nAs in real life,\ngreedy algorithms sometimes lead to the best solution,\nsometimes lead to pretty good solutions,\nand sometimes lead to lousy solutions.\nThe trick is to determine when to be greedy.\n\n[Most greedy algorithms are deceivingly simple.]\nOne thing you will notice about greedy algorithms is that they are\nusually easy to design, easy to implement, easy to analyze,\nand they are very fast,\nbut they are almost always difficult to prove correct.\""}
{"text": "A comprehensive resource that can be used by RPG programmers as they advance from basic subfile usage to more advanced programming, this manual offers concepts, explanations, and practical examples that reflect current trends. With downloadable templates that include both the DDS and RPG IV code, this resource provides the techniques and styles?from... more...\n\nWritten especially for programmers adopting a free-format style, this manual explores the role of functions in writing RPG IV programs. Demonstrating the potential of functions, many topics are explored such as details about existing RPG IV built-in functions, writing new functions, using ILE concepts to use C functions, and utilizing IBM API?s functions.... more... Using a hands-on approach, you'll learn how to think in programming terms, how to use Objective-C... more... * Discover what setsSams Teach Yourself SQL in 10 Minutes, 2E is a tutorial-based book, organized into a series of easy-to-follow, 10-minute lessons. These well targeted lessons teach you in 10 minutes what some books take several hours or days to teach. Instead of dwelling of database theory and relational design, this book takes a very hands-on approach to solving... more...\n\nAn in-depth tutorial on how to use Java 2 Micro Edition to program handheld devices Although Java is one of the most popular programming languages, it is too powerful to be used on wireless, handheld devices like the Palm Connected Organizer. A miniature version of Java, called Java 2 Micro Edition, has now been created by Sun Microsystems to runThis unique book provides an overview of all four technologies required for building e-commerce applications and demonstrates how they combine with each other to best effect. * A single running example (an electronic retail application) demonstrates how the techniques work in practice * Coverage of Java Database Connectivity (JDBC) and Java Server... more..."}
{"text": "Below you can find a list of resources and tutorials for learning the game engine Unity. The list will be updated as new resources are released. If you believe that you created an amazing tool or tutorial, please contact me and I am happy to add your work to the list.\n\nUnity features three scripting languages; JavaScript, C#, and Boo. Depending on your scripting language of choice, you might want to choose different tutorials to get started with Unity. Each tutorial link will also mention which scripting language is used. Most Unity tutorials available on the web are using JavaScript. Notice that JavaScript is commonly used for web applications. Unforunately, books which cover JavaScript are normally of little use for Unity's implementation of JavaScript. But worry not, a vast amount of tutorials will follow...\n\nIf you rather prefer to jump into the action, skip the manual and basic resources altogether and have a look at several books which have been published on Game Development with Unity (several recently added on 03/22/2012). A complete list of Unity books and their descriptions can be found here: \n\n4) Sue Blackman wrote a book in which she guides the reader through the development of a Javascript-based project which resembles an adventure-type of game. Sue highlights the viewpoint of an artist working in game development. See the forum thread and the amazon link. A new second edition is planned for release in May 2013.\n\nYou are now faced with the choice of tackling example projects provided by Unity Technologies or jump straight into user-generated tutorials. As the example projects are quite complex, I would suggest working through some video tutorials first. Nonetheless, here are the links for Unity's official example projects. They can be taken completely apart, reverse-engineered and reused for own projects.\n\nUnity Gems A website of text-based tutorials. This is a mix of introductory (intermediate) scripting tutorials and more advanced tutorials. Themes currently cover general tips for Unity scripting, Memory Management, Finite State Machines, Quaternions/Rotations and Coroutines. Some content for Boo and Unity Script is provided, several tips and descriptions are more conceptual and should be helpful regardless of the language that is used. website: \n\nUnityCookie (CGCookie) A series of tutorials for an introduction to Unity and several scripting video tutorials (using Javascript) \n\nUnityScript Basics (Scripting Basics for Noobs) If you're new to scripting, read up on this good introduction to scripting in Unity. Lots of analogies are provided which makes it really easy to understand. The details are explained for UnityScript, but the introduction is great for any scripting language. This content is not for the most recent version of Unity, but should be helpful nonetheless. website - \n\nPolypusher.net Tai-Pan Development Set Tutorial Series Standalone tutorials that give insights into Polypusher's development processes of their RTS Tai-Pan. All assets are included royalty-free and tutorials are delivered as videos or pdf-documents. I have not tested their tutorials yet, but their work seems impressive and of high quality. website -  [Using Unity 3]\n\nOnce you went through some or all of these tutorials, you should be creating your own content in no time. Next, I'll provide an overview of general resources for Unity. Whenever you need to find some information about Unity, scripting, projects, collaborations or anything Unity-related, check these links out:"}
{"text": "Going Through the Looking Glass to Program\n\nIntroduction: Alice is educational software that teaches students computer programming in a 3D environment. It is a free programming environment that teaches very sophisticated concepts in a fun, interactive way. With Alice you just drag and drop programming statements to create three-dimensional worlds.\n\nThis activity contains 12 questions.\n\nTo create 3D animations in Alice, you __________.\n\ndrag and drop programming statements\n\ntype the necessary procedures and apply them to existing objects\n\ntype the necessary methods and apply them to existing objects\n\nmust first create a library of methods, classes, and objects, then apply the methods and classes to the objects\n\nThe Web site alice.org is maintained by __________.\n\nUniversity of Cincinnati (UC)\n\nOklahoma State University (OSU)\n\nSUNY University at Buffalo (UB)\n\nCarnegie Mellon University (CMU)\n\nThe __________ is the term used to describe the virtual environment that you create.\n\ngallery\n\nstudio\n\nuniverse\n\nworld\n\nTo add objects such as Mr. Roboto, you select them from the __________.\n\nGallery\n\nCharacter pane\n\nStudio\n\nObject menu\n\nColor, opacity, height, and width are examples of an object's __________.\n\nvariables\n\nmethods\n\nprocedures\n\nproperties\n\nHow to walk, react to an explosion, and trip and fall are examples of an object's __________.\n\nvariables\n\nmethods\n\nclasses\n\nproperties\n\nA __________ allows you to perform a similar set of actions over and over without a lot of repetitious programming.\n\nbehavior\n\nloop\n\nvariable\n\nsubroutine\n\nA(n) __________ is used to evaluate something and based on that evaluation, follow one set of steps or another set of steps.\n\nlooping statement\n\ninheritance\n\nmethod\n\nbinary decision\n\nSpelling, capitalization, and punctuation are examples of programming __________.\n\nsyntax\n\nconstructs\n\nattributes\n\nsemantics\n\nAlice's background code uses the __________ programming language.\n\nJava\n\nC+ +\n\nVisual Basic\n\nC#\n\nInterested in a Career in Entertainment Technology?\n\nTask: In addition to providing support for Alice, Carnegie Mellon offers a degree in entertainment technology through its Entertainment Technology Center (ETC).\n\nAssignment: Visit the ETC Web site at  and answer the following questions.\n\nWhat degree is offered by the ETC?\n\nThis degree is offered jointly by:\n\nWhat is the concept behind both the Center and the Master's program?\n\nLook at the list of current students. How many fall into the \"fine artist\" and \"technologists\" categories?\n\nList five terms to which \"entertainment technology\" refers.\n\nGo to the View Gallery to see a sampling of some student projects. Select one of the projects that interests you, view the video, and describe the project.\n\nWhen did the ETC begin offering courses?\n\nYearly enrollments in the program are limited to how many students?\n\nAre you interested in this degree? Explain why or why not.\n\nTo create paragraphs in your essay response, type <p> at the beginning of the paragraph, and </p> at the end.\n\nOther 3D Animation Tools\n\nTask: Autodesk offers a product called Maya, which does 3D modeling, animation, rendering, and visual effects. Let's learn more about this software"}
{"text": "This course is a study of the organization and structure of modern programming languages\nwith emphasis on semantic issues.\nInterpreters are used to illustrate and encounter essential concepts in programming languages.\nThe underlying language for these efforts will be Scheme,\nthough the language elements interpreted by our programs may be very un-Scheme-like.\nThe first one-third of the semester will cover a quick recollection of Scheme programming\nand an introduction to basic programming language concepts.\nIn Chapter 5 we use this background to construct an interpreter for a simple language\nwhich supports assignment and which supports procedures as first class objects.\nThis interpreter serves as the basis for the discussion in the succeeding material.\n\nWe will be using the MacGambit implementation of Scheme for the Macintosh.\nThis implementation is public domain and you are encouraged to get a copy for your local Macintosh.\nThere are some extensions to this implementation which will be provided.\n\nThe timeline lists two Reviews; these will be supplemented with regular assignments,\nmuch of which will involve the production of code.\nThe course will conclude with a final, or comprehensive, event.\nI am open to suggestions as to the form this event will take.\nA recipe for your evaluation is roughly:\n\nEach member of the class is a valuable resource for others in the class.\nAbsences and tardiness diminish the quality of the course; come to class and come on time.\nAssignments will be a regular feature, with submission of your efforts coming on roughly\na weekly basis.\nBe sure to turn homework in on time.\nReviews taken \"off schedule\" are extremely unusual and always arranged for in advance.\n\nIt is expected that you will at all times endeavor to honestly represent any work you turn in.\nThis includes full and explicit attribution of assistance.\nCollaboration on some assignments may be restricted.\nIf you have any question concerning the rules governing an assignment,\ndo not hesitate to seek clarification."}
{"text": "5 Glossary\n\n5 Glossary\n\nANNOTATION\n\nIn the International Standard, this section contains the glossary. In this book the glossary is printed at the end of the volume.\n\n6 Overview of the Common Language Infrastructure\n\nThe Common Language Infrastructure (CLI) provides a specification for executable code and the execution environment (the Virtual Execution System, or VES) in which it runs. Executable code is presented to the VES as\nmodules\n. A module is a single file containing executable content in the format specified in Partition II, sections 21-24.\n\nThe remainder of this section and its subsections contain only informative text.\n\nAt the center of the Common Language Infrastructure (CLI) is a unified type system, the Common Type System (CTS), that is shared by compilers, tools, and the CLI itself. It is the model that defines the rules the CLI\nfollows\nwhen declaring, using, and managing types. The CTS establishes a framework that enables cross-language integration, type safety, and high performance code execution. This section describes the architecture of CLI by describing the CTS.\n\nThe following four areas are covered in this section:\n\nThe Common Type System.\nSee Partition I, section 8. The Common Type System (CTS) provides a rich type system that supports the types and operations found in many programming languages. The Common Type System is intended to support the complete implementation of a wide range of programming languages.\n\nMetadata.\nSee Partition I, section 9. The CLI uses metadata to describe and reference the types defined by the Common Type System. Metadata is stored (\"\npersisted\n\") in a way that is independent of any particular programming language. Thus, metadata provides a common interchange mechanism for use between tools that manipulate programs (compilers,\ndebuggers\n, etc.) as well as between these tools and the Virtual Execution System.\n\nThe Common Language Specification.\nSee Partition I, section 10. The Common Language Specification is an agreement between language designers and framework (class library) designers. It specifies a subset of the Common Type System and a set of usage conventions. Languages provide their users the greatest ability to access frameworks by implementing at least those\nparts\nof the CTS that are part of the CLS. Similarly, frameworks will be most widely used if their\npublicly\nexposed aspects (classes, interfaces,\nmethods\n, fields, etc.) use only types that are part of the CLS and\nadhere\nto the CLS conventions.\n\nThe Virtual Execution System.\nSee Partition I, section 12. The Virtual Execution System (VES) implements and enforces the CTS model. The VES is responsible for loading and running programs written for the CLI. It provides the services needed to execute managed code and data, using the metadata to connect separately generated modules together at runtime (late binding).\n\nTogether, these aspects of the CLI form a unifying framework for designing, developing, deploying, and executing distributed\ncomponents\nand applications. The appropriate subset of the Common Type System is available from each programming language that targets the CLI. Language-based tools communicate with each other and with the Virtual Execution System using metadata to define and reference the types used to construct the application. The Virtual Execution System uses the metadata to create instances of the types as needed and to provide data type information to other parts of the infrastructure (such as remoting services, assembly downloading, security, etc.).\n\nANNOTATION\n\nThis Common Language Infrastructure standard describes the requirements to which languages and implementations of the Virtual Execution System (VES) must adhere to be in compliance. Although it does not, of course, prescribe implementations, it does define the outcome of the design. The CLI specifies a file format and an instruction set, and it describes how programs written with that file format, using that instruction set, are supposed to work.\nImplementations\nof the VES are responsible for making them work. The CLI defines for compilers what they must produce to work with a VES, and what they are required to\nconsume\nfrom others. To describe the semantics of the file format, this standard also defines a compiler called the\nIL assembler\n(\nilasm\n), although it is intended, of course, to be\nillustrative\n.\n\nEnd informative text\n\n6.1 Relationship to Type Safety\n\nType safety is usually discussed in terms of what it does (e.g.,\nguaranteeing\nencapsulation between different objects) or in terms of what it\nprevents\n(e.g., memory corruption by writing where one shouldn't). However, from the point of view of the Common Type System, type safety\nguarantees\nthat:\n\nReferences are what they say they are -\nEvery reference is typed and the object or value referenced also has a type, and they are assignment compatible (see Partition I, section 8.7).\n\nIdentities are who they say they are -\nThere is no way to corrupt or spoof an object, and by\nimplication\na\nuser\nor security domain. The access to an object is through accessible functions and fields. An object may still be designed in such a way that security is compromised. However, a local analysis of the class, its methods, and the things it uses, as opposed to a global analysis of all uses of a class, is sufficient to assess the vulnerabilities.\n\nOnly appropriate operations can be invoked -\nThe reference type defines the accessible functions and fields. This includes limiting visibility based on where the reference is\u2014e.g., protected fields only visible in subclasses.\n\nThe Common Type System promotes type safety; e.g., everything is typed. Type safety can be\noptionally\nenforced. The hard problem is determining if an implementation conforms to a\ntypesafe\ndeclaration. Since the declarations are carried along as metadata with the compiled form of the program, a compiler from the Common Intermediate Language (CIL) to native code (see Partition I, section 8.8) can type-check the implementations.\n\n6.2 Relationship to Managed Metadata-Driven Execution\n\nMetadata describes code by describing the types that the code defines and the types that it references externally. The compiler produces the metadata when the code is produced. Enough information is stored in the metadata to:\n\nManage code execution -\nnot just load and execute, but also memory management and execution state inspection.\n\nAdminister the code -\nInstallation, resolution, and other services.\n\nReference types in the code -\nImporting into other languages and tools as well as scripting and automation support.\n\nThe Common Type System assumes that the execution environment is metadata-driven. Using metadata allows the CLI to support:\n\nMultiple execution models -\nThe metadata also allows the execution environment to deal with a mixture of interpreted, JITted, native and legacy code and still present uniform services to tools like debuggers or profilers, consistent exception handling and\nunwinding\n, reliable code access security, and efficient memory management.\n\nAuto support for services -\nSince the metadata is available at execution time, the execution environment and the base libraries can automatically supply support for reflection, automation, serialization, remote objects, and interoperability with existing unmanaged native code with little or no effort on the part of the programmer.\n\nBetter optimization -\nUsing metadata references instead of physical offsets, layouts, and sizes allows the CLI to optimize the physical layouts of\nmembers\nand dispatch tables. In addition, this allows the generated code to be optimized to match the particular CPU or environment.\n\nFlexible deployment resolution -\nSince we can have metadata for both the reference and the definition of a type, more robust and flexible deployment and resolution mechanisms are possible. Resolution means that by looking in the appropriate set of places it is possible to find the implementation that best satisfies these requirements for use in this context. There are five elements of information in the foregoing: two items are made available via metadata (requirements and context); the others come from application packaging and deployment (where to look, how to find an implementation, and how to decide the best match).\n\n6.2.1 Managed Code\n\nManaged code\nis simply code that provides enough information to allow the CLI to provide a set of\ncore\nservices, including\n\nGiven an address inside the code for a method, locate the metadata describing the method\n\nWalk the stack\n\nHandle exceptions\n\nStore and retrieve security information\n\nThis standard specifies a particular instruction set, the Common Intermediate Language (CIL, see Partition III), and a file format (see Partition II, sections 21-24) for storing and transmitting managed code.\n\n6.2.2 Managed Data\n\nManaged data\nis data that is allocated and released automatically by the CLI, through a process called\ngarbage collection\n.\n\n6.2.3 Summary\n\nThe Common Type System is about integration between languages: using another language's objects as if they were one's own.\n\nThe objective of the CLI is to make it easier to write components and applications from any language. It does this by defining a standard set of types, making all components fully\nself-describing\n, and providing a high performance common execution environment. This ensures that all CLI-compliant system services and components will be accessible to all CLI-aware languages and tools. In addition, this\nsimplifies\ndeployment of components and applications that use them, all in a way that allows compilers and other tools to leverage the high performance execution environment. The Common Type System covers, at a high level, the concepts and interactions that make all of this possible.\n\nThe discussion is broken down into four areas:\n\nType System -\nWhat types are and how to define them.\n\nMetadata -\nHow types are described and how those descriptions are stored.\n\nVirtual Execution System -\nHow code is executed and types are\ninstantiated\n, interact, and die.\n\nANNOTATION\n\nThe discussion of the Common Type System starts in section 8, rather than in section 7, which follows. Section 7 introduces the Common Language Specification, which is the set of restrictions on the CTS that ensure interoperability among languages."}
{"text": "Welcome to the only guidebook series that takes a visual approach to professional-level computer topics. Open the book and you'll discover step-by-step screen shots that demonstrate over 100 key Visual Basic 2005 techniques, including:\n\nInstalling VB 2005.\n\nCreating forms, menus, and dialog boxes.\n\nSetting defaults and creating controls.\n\nDeclaring variables, expressions, and arrays.\n\nCreating conditional statements.\n\nDeveloping assorted loops.\n\nDefining subroutines.\n\nUsing classes.\n\nDebugging and packaging applications.\n\nAnd, of course, you ll find the Visual series features you ve come to expect, such as:\n\nHigh-resolution screen shots demonstrate each task.\n\nSuccinct explanations walk you through step by step.\n\nTwo-page lessons break big topics into bite-sized modules.\n\n\"Apply It\" and \"Extra\" sidebars highlight useful tips.\n\nOrder your copy today.\n\nBiography\n\nJim Keogh is on the faculty of Columbia University and Saint Peter's College in Jersey City, New Jersey. He developed the e-commerce tract at Columbia University. Jim has spent decades developing applications for major Wall Street corporations and is the author of more than 70 books, including Java Database Programming For Dummies, Unix Programming For Dummies, and Linux Programming For Dummies.\n\nCopyright 2013 IDG Communications. ABN 14 001 592 650. All rights reserved. Reproduction in whole or in part in any form or medium without express written permission of IDG Communications is prohibited."}
{"text": "Dive Into Python by Mark Pilgrim\n\nPilgrim is a philosophy major, and he sprinkles philosophical humor throughout the book the way Larry Wall sprinkles camels.\n\nApress, 2004\n\nISBN: 1-59059-356-1\n\nPrice: $39.95 US\n\nThe back cover of Dive Into Python claims it is a practical book for\nbusy programmers. As a rule, one should never believe\nback-cover blurbs, but this one is true. This book\nteaches Python by dissecting useful programs that do\nactual tasks, such as using regular expressions to validate\nstreet addresses and phone numbers and accessing\nHTTP and SOAP Web services, and providing great detail about\nwhat might go wrong and how to troubleshoot it.\nPilgrim emphasizes how to write unit tests and the\n\"write tests before code\" philosophy.\n\nIn the book, readers get the code before the explanation. Pilgrim\ndoes a remarkable job of making his explanations\nclear and complete, and he introduces concepts exactly\nwhere you need them. Dive Into Python is not a\nreference book, however. If you see len() or\nfunc(*args, **kw) in an example and don't know what it means,\nyou have to visit the on-line Python documentation.\n\nPilgrim is a philosophy major, and he sprinkles\nphilosophical humor throughout the book the way Larry\nWall sprinkles camels. He even quotes Larry in saying\nPerl is worse than Python \"because people wanted it\nworse.\" My favorite gems are, on reference counting,\n\"Things disappear when nobody is looking at them\"\nand \"Bugs happen. A bug is a test case you haven't\nwritten yet.\"\n\nDive Into Python is published under the GNU\nFree Documentation License\u2014cheers to Pilgrim and\nApress for doing this. Let's hope more books will be\npublished this way.\n\nSee the Dive Into Python home page diveintopython.org; the complete text of the book is on-line"}
{"text": "Approved by the Faculty School of Technology and Business Studies, 26 October 2010. This syllabus is valid from 26 October 2010.\n\nRevised:\n\nRevised, 18 February 2013. Revision is valid from 18 February 2013.\n\nLearning Outcomes\n\nOn completion of this course, students will be able to:\n\nCreate Java applications with a user interface where a user can insert, delete, up-date and list data from a data source\n\nWrite and use self-developed classes in order to create working objects\n\nCreate objects from classes and calling methods\n\nUse standard classes from the Java API to solve programming problems\n\nUse control structures such as sequence, selection, iteration in order to control the flow of a program\n\nUse the UML (Unified Modelling Language) during the design phase in the program development cycle, i.e. develop an object-oriented model using UML-notation\n\nDocument programs using javadoc\n\nExplain relevant concepts and terminology in program development\n\nDescribe and explain how the Java platforms are related to each other and how they are used\n\nShow basic understanding of how to manage Event Handling in Graphical User Interfaces (GUI)\n\nWrite to, and read from text files\n\nCourse Content\n\nThe course content is subdivided into three modules. The programming language is exclusively Java\n\nModule 1 (2.5 HEC)\n\nThis module compromises the concepts of object-oriented programming (OOP) and how the Java language is constructed in general. Additionally it covers the concepts of identifiers, data types, modifiers, operators, variables, expressions and statements. While the programming language is object-oriented emphasis is made on classes and objects, which are used to build up programs. Further more the module covers how to assign variables, constants and object references, and how to manipulate text in graphical dialogue boxes. On top of writing program source code also a documentation written in a natural language is needed. Therefore this module covers how to create Java documentation using the tool javadoc's. An important part of programming is the ability to make logical decisions during program execution. This is done by using conditions in order to make a selection. Finally, this module covers how to perform operations on data using methods, and how UML (Unified Modeling Language) is used to create models of the system which is about to be built. The pupose of modeling with UML is to make it easier to understand the system and thereby easier building it.\n\nModule 2 (3 HEC)\n\nThis module compromises different types of iterations, i.e. how to repeat program statements until certain predefined conditions are met. Thereafter the module covers how to create self made classes and how to create objects of such classes. Finally, this module covers how to read and write data to text files, programmatically. Further more this module covers the content of previous modules in more depth.\n\nModule 3 (2 HEC)\n\nThis module compromises how graphical user interfaces (GUI) are developed and how events are handled. Additionally, the module covers how to store, read and manipulate data using data structures. Finally, the student develops a component based application in a mini project. Further more this module covers the content of previous modules in more depth.\n\nAssessment\n\nThe examination for each module consists of written programming assignments and theory examinations as well as student reflection. The modules are worth 2.5, 3, and 2 Higher Education Credits (HEC) respectively. Grades for individual modules are given after the completion of each module.\n\nForms of Study\n\nThe course is offered as a distance course using English as the spoken language. The student is expected to obtain knowledge and skills mainly through independent studies. Course material will consist of: distance lectures, course literature, hand-in assignments or practical exercises.\n\nGrades\n\nThe Swedish grades U - VG To obtain VG as the final course grade, a VG is required in at least two of the modules.\n\nPrerequisites\n\n-----\n\nAdditionally 90 credits is required.\n\nOther Information\n\nThe course is equivalent to Introduction to Java Programming IK1003, or Program Development: Fundamentals IK1025 or a similar introductory course. The maximum number of exam re-sits is limited to five per module.\n\nA computer with Windows XP, or Windows 7 and an Internet broadband connection with at least 2 Mbit/sec is required for the course. Other operating systems are accepted but not supported during the course. Additionally a web camera and a headset, or a microphone, are required.\n\nApply 3 of 3. 3 of 3\n\nLoading\u2026\n\nRecommended Computer Skills:\n\nSurf on the Internet, read and send emails, make use of a word-processing programme (e.g. Word).\n\nSurf on the Internet, read and send emails, use a word-processing programme (e.g. Word). Connect a camera and headphones to the computer and install a programme using instructions.\n\nAccess to a computer (Not a mini pc, tablet or similar) with broadband connection, at least 0.5 Mbit/s both directions.\n\nAccess to a computer (Not a mini pc, tablet or similar) that is not older than three years (or equivalent) and broadband connection, at least 1 Mbit/s (not mobile broadband, because mobile broadband can vary considerably in speed).\n\nVarious communication, e.g. e-mail, and use of basic functions in our learning platform (Fronter), such as finding information and being able to submit files.\n\nHigher rate of web-based communication where our learning platform (Fronter) is a natural element of the course. Web-based meetings with sound and image where simple presentations can be held. Lectures can be broadcast live or can alternatively be made available afterwards online"}
{"text": "Java Programming Curriculum Guide\n\nIn this area we offer courses in Java programming, GUI development, and the Java Micro environment (J2ME). For J2EE courseware see the J2EE Curriculum Guide, and also note that several courses on Java, XML and Web services are found in the XML Curriculum Guide.\n\nThese are the skills that are fundamental to all other Java development pursuits. We offer two main starting points:\n\nFor experienced programmers of C, C++ and other Java-like languages, Course 103, \"Java Programming,\" provides thorough training in Java, including structured and object-oriented concepts and techniques, and including key features of the Core API such as collections and streams.\n\nFor those less experienced programmers, or for people with experience in languages that are not much like Java - COBOL, PL/SQL, scripting languages - we provide a combination of courses: Course 102, \"Introduction to Java,\" provides a more gradual introduction to Java, and in combination with Course 104, \"Intermediate Java Programming,\" assures that students learn the same complete set of skills and APIs as those who've taken Course 103.\n\nFor many of its courses, Capstone offers optional \"overlays\" of files that support use of the Eclipse IDE in the classroom. See \"Using Capstone's Eclipse Overlays\" for an overview of this feature.\n\nLook for the in the following diagrams.\n\nFAQ: Which version of Java do I want?\n\nThe Java language has undergone a significant transformation with the release of Java 5.0, and it is important to match the version used in training to the version that will be practiced. See \"Java Versions and Terminology Demystified.\"\n\nFrom this basis - either 103 or 102+104 - students can proceed to advanced Java by way of Course 106, study JDBC in Course 168, or move to other areas of the curriculum."}
{"text": "The book starts off with an introduction to Unix for beginners. Next, it goes into the basics of the file system and shell. The reader is led through topics ranging from the use of filters, to how to use C for programming robust Unix applications, and the basics of grep, sed, make, and awk. The book closes with a tutorial on making a programming language parser with yacc and how to use troff with ms and mm to format documents, the preprocessors tbl, eqn, and pic, and making man pages with the man macro set. The appendices cover the ed editor and the abovementioned programming language, named hoc, which stands for \"high-order calculator\".\n\nThe book is perhaps most valuable for its exposition of the Unix philosophy of small cooperating tools with standardized inputs and outputs. It is this philosophy, and the architecture based on it, that has allowed open source projects to be assembled into larger systems such as Linux, without explicit coordination between developers.\n\nThe book was written before ANSI C was first drafted, therefore the programs in the book are nonstandard and follow K&R style. However, the source code available on the book's website has been updated for ANSI C conformance (but uses the implicit int rule, which is disallowed in C99)."}
{"text": "Haskell programming language\n\nHaskell is a standardized functionalprogramming language with non-strict semantics, named after the logician Haskell Curry. It was created by a committee formed in the 1980s for the express purpose of defining such a language.\nThe latest semi-official language standard is Haskell 98, intended to specify a minimal, portable version of the language for teaching and as a base for future extensions.\nThe language continues to evolve rapidly, with Hugs and GHC (see below) representing the current de facto standard.\n\nThere is also a Haskell-like language that offers a new method of support for GUI development called Concurrent Clean. Its biggest deviation from Haskell is in the use of uniqueness types for input as opposed to monads.\n\nAn educational version of Haskell called Gofer was developed by Mark Jones.\nIt was supplanted by HUGS, the Haskell User's Gofer System (see the implementations section of this article).\n\nFor more comprehensive information, see the haskell.org website, linked at the end of this article.\n\nImplementations\n\nThe following all comply fully, or very nearly, with the Haskell 98 standard, and are distributed under open source licences. There are currently no commercial Haskell implementations.\n\nHugs ([1]) is a bytecode interpreter. It offers fast compilation of programs and reasonable execution speed. It also comes with a simple graphics library. Hugs is good for people learning the basics of Haskell, but is by no means a \"toy\" implementation. It is the most portable and lightweight of the Haskell implementations.\n\nGlasgow Haskell Compiler ([2]). The Glasgow Haskell Compiler compiles to native code on a number of different architectures, and can also compile to C. GHC is probably the most popular Haskell compiler, and there are quite a few useful libraries (e.g. bindings to OpenGL) that will only work with GHC.\n\nnhc98 ([3]) is another bytecode compiler, but the bytecode runs significantly faster than with Hugs. Nhc98 focuses on minimising memory usage, and is a particularly good choice for older, slower machines.\n\nHBC ([4]) is another native-code Haskell compiler. It hasn't been actively developed for some time, but is still usable.\n\nHelium ([5]) is a newer dialect of Haskell. The focus is on making it easy to learn. It currently lacks typeclasses, making it incompatible with many Haskell"}
{"text": "Get thoroughly up to speed on Android programming, and learn how to create up-to-date user experiences for both handsets and tablets. With this book?s extensively revised second edition, you?ll focus on Android tools and programming essentials, including best practices for using Android 4 APIs. If you?re experienced with Java or Objective-C, you?ll... more...\n\nThis book focuses on the nontechnical user who is responsible for building, maintaining, and managing Drupal web sites. The book covers why you should consider using Drupal when building a new web site, what Drupal is, installing and configuring Drupal, creating and managing content, managing users, adding functionality to your web site through DrupalPython Essential Reference is the definitive reference guide to the Python programming language ? the one authoritative handbook that reliably untangles and explains both the core Python language and the most essential parts of the Python library. Designed for the professional programmer, the book is concise, to the point, and highly accessible.... more...\n\nGet the basics on four key web programming tools in one great book! PHP... more..."}
{"text": "Write Portable Code contains the lessons, patterns, and knowledge for developing cross-platform software that programmers usually must acquire through trial and error. This book is targeted at intermediate- to advanced-level programmers and will be a valuable resource for designers of cross-platform software, programmers looking to extend their skills to additional platforms, and programmers faced with the tricky task of moving code from one platform to another."}
{"text": "There are a number of great universities offering courses for programmers, and a degree in programming can be a vital asset to many careers. Students who want to pursue careers in the computer programming field need to learn Common Business-Oriented Language (COBOL), Java, C#, C++ and other such programming languages. The languages help computer programmers write instructions that computers follow when running programs. Some schools offer computer programming specializations such as video game programming and computer programming analysis. Successful completion of a degree program qualifies students to pursue careers in this exciting field.\n\nWelcome\n\nWelcome to Agile, your online guide to all the latest news in the world of technology. Agile is the brain child of Jens Martens who, with a team of writers, aims to bring all the exciting news in the world of technology. All the articles on Agile are written by professional writers with experience in the world of electronics, and each story covered is designed to either inform, inspire or provide advice for anyone with a love for technology."}
{"text": "Partner(s):TA:Lab 6 Biot-Savart Prelab Sketch and Define the System Write and sketch the vectors Rs, Rp, R Define the source Write the integral to find H Integrate and Fill in Chart Write a program to find H and include with lab Plot the ma\n\nLandscape and Urban Planning 48 (2000) 161167The value of trees, water and open space as reected by house prices in the NetherlandsJoke Luttik*Alterra, Green World Research, P.O. Box 125, 6700 AC Wageningen, NetherlandsAbstract An attractive en\n\nLand UseIssues and ConsiderationsLOOK AT THE COMPLETE PICTUREPlanningWatershed PlanningLocal Planning andZoningThe Purpose of Natural Resource PlanningWatershed & Natural Resource Planning Local Planning,Considering Best Land UseLoss of\n\nASM 336 NAPRA TCT Homework Due Nov. 14 20 points Assume the following scenario: The land is located in Miami County, Indiana. The soil you're using is a Miami soil (IN103MhC3) The field is cropped in continuous corn. Planting date is May 15\n\nManure Management Planner: Background The Manure Management Planner is a program designed here at Purdue to help farmers and land managers utilize computer software to apply appropriate amounts of fertilizer to their fields while being environmentall\n\nPython, CGINovember 23, Unit 8So Far We can write programs in Python (in theory at least) Conditionals Variables While loops We can create a form for our web page Adding controls Now we need some way to take that form information and proc\n\n=CGS 6305Lecture 20ep@cise.ufl.edu=TemplatesWhen designing a linked list of any type, all common operations must be definedAll linked lists should allow addition of elements to the tailallow deletion of data elementsdata searchi\n\nHow it WorksDeclaring an identifier of a template type type forces the compiler to generate the code for such typeThe compiler handles the replacement and attempts to compile the template class with the substituted parameterA \"template instantia"}
{"text": "Web Log Stats Lesson 2\nDisplaying Output\n\nWhen we start writing and testing Smalltalk code, we will need a way to\nverify that VisualWorks is behaving the way we expect it to. We need to\n\"see what we're doing\". Besides developing a GUI or writing data out to\nan external file, this lesson provides a quicker and more convenient way\nto display output.\n\nThe four basic ways of how VisualWorks provides feedback (displays output) are:\n\nPrint it (from the <Operate> menu)\n\nInspect it (from the <Operate> menu)\n\nThe System Transcript\n\nSimple Dialog Box\n\nThe easiest and most universal way of writing Smalltalk code in VisualWorks\nis by using a Workspace. A Workspace is just that, an area where\nyou can enter and test Smalltalk code. To open a new Workspace, from the\nVisualWorks main Launcher window, either click the last button on\nthe Toolbar (it looks like a notepad) or select the menu option\nTools >> Workspace. This will create a new window (called appropriately\nenough Workspace) like the one shown in Figure 2-1.\n\nFigure 2-1. The VisualWorks Workspace\n\n1.\nIn the Workspace, enter the following:\n\n4 squared\n\n2.\nHighlight this text, <Operate-Click&gt and select Print It.\n\nNote that 16 will appear just to the right. For a mathematics refresher,\na number squared is a number times itself, in this case 4 times 4.\n\nFigure 2-2. The Print It option within the VisualWorks Workspace\n\n3.\nHighlight the text again, <Operate-Click&gt and select Inspect it.\n\nA new window will appear (called appropriately enough\nthe Inspector window).\n\n4.\nIn the left pane of the Inspector window, click (highlight) the word self.\n\nNote that in the right pane you will see the value of self\nwhich is 16. If you are curious as to the hexadecimal, octal or binary values of 16,\nsimply click on those terms in the left pane. The term self will always default\nto the decimal value for numbers.\n\nFigure 2-3. The VisualWorks Inspector Window\n\n5.\nClose the Inspector window.\n\n6.\nNo introduction to a new language would be complete without writing the infamous\n\"Hello World\" program. Here is how to do that using the System Transcript.\nEnter the following in the Workspace window:\n\nTranscript show: 'Hello World'\n\n7.\nHighlight the text again, <Operate-Click&gt and select Do It.\n\nNote that the words Hello World have now appeared\nin the display area of the main VisualWorks Launcher window. As\ndiscussed earlier in Lesson 1, this area is called the System Transcript\n(or just simply the Transcript) and is used primarily for debugging\nby most Smalltalk programmers.\n\nFigure 2-4.Hello World in the VisualWorks System Transcript\n\n8.\nNow let's write the infamous Hello World program using a simple dialog box.\nEnter the following in the Workspace window:\n\nDialog warn: 'Hello World'\n\n9.\nHighlight the text again, <Operate-Click&gt and select Do It.\n\nNote that a dialog box appears with the words Hello\nWorld in the middle.\n\nFigure 2-5.Hello World in a simple dialog box\n\n10.\nClick OK.\n\nSmalltalk Basics\n\nIn the last two examples, you actually wrote and executed Smalltalk code. On\nthe surface, the \"statements\" probably looked like normal programming commands\nthat you might have seen in other languages, such as a COBOL Display\nstatement or a Visual Basic Print command. But in Smalltalk, that's not\nthe case.\n\nThe difference bewteen Smalltalk and other languages is that Smalltalk\nis classified as a \"pure object-oriented\"\nlanguage. What this means is that the only way to get something to happen\nwithin Smalltalk is by sending messages to objects. That last sentence cannot\nbe emphasized enough - the only way to get something to happen within\nSmalltalk is by sending messages to objects.\n\nFor example, in the expression 4\nsquared, the term squared is not a \"command\"\nor \"function\" in the Smalltalk language per se. It would be explained\nthis way:\n\nThe number 4 is a particular instance of\nthe SmallInteger class. The SmallInteger class, which\nis a subset of the class Integer (by the way, integers are whole\nnumbers), knows how to do certain things with whole numbers and squared\njust happens to be one of them. So the 4 object (instance of\nthe SmallInteger class) was sent the message squared.\nSmalltalk then said (to itself), \"I now have enough information to make\nsomething happen. The message squared is being sent to the object\n4 and I will execute that message (which in this case is to multiply\n4 times 4 and return 16).\n\nIf that sounded a bit confusing, it's probably because you never had it explained\nin object-oriented terms before. It is highly recommended that you proceed to the\nprimer on object-oriented principles. This will provide a further explanation of\nclasses, objects and messages. From this point on, the tutorial will start to use\nobject-oriented (OO) terms in explaining the code samples, so a basic understanding\nof OO principles is required for those explanations to make any sense."}
{"text": "Professional PHP4 Programming - structures, session management, and secure programming.\n\nFoundation PHP for Flash -While most programming books print source code as is, this one distinguishes itself with a keen visual presentation with graphics used to highlight sections of both Flash ActionScript and basic PHP. It also helps that Webster is a notably lively writer.\n\nBeginning PHP4 -\nBeginning PHP4 offers an almost ideal introductory tutorial to one of today's hotter scripting languages. This book really is everything that the novice needs to start building dynamic Web sites that are powered by PHP4, but old hands at programming also will find in it valuable information.\nPHP, of course, is introduced in the book, but there's also an approachable and effective introduction to programming in general. The conscientious tutorial on basic concepts like variables, keywords, and flow control will give even beginners an understanding of the basics of writing programs.\n\nPHP and MySQL Web Development -\nThe PHP server-side scripting language and the MySQL database management system (DBMS) make a potent pair. Both are open-source products - free of charge for most purposes - remarkably strong, and capable of handling all but the most enormous transaction loads. Both are supported by large, skilled, and enthusiastic communities of architects, programmers, and designers. PHP and MySQL Web Development introduces readers (who are assumed to have little or no experience with the title subjects) to PHP and MySQL for the purpose of creating dynamic Internet sites.\n\nProgramming PHPMySQL/PHP Database Applications -\nHow could the combination of PHP and MySQL - which is feature-rich, highly reliable combination, capable of dealing with large traffic volumes, and absolutely free of charge in most cases - be any better? In MySQL/PHP Database Applications, Jay Greenspan and Brad Bulger explain how to work with the capable pair, primarily for applications you might use on a Web site. If you take the time to study the advice and work through your own tests of the concepts presented, it's pretty much certain that you'll walk away with the knowledge you need to do serious development work with the PHP scripting language and the MySQL database server.\n\nPHP Black BookBooks on Peer-to-Peer\n\nPeer-to-Peer: Harnessing the Power of Disruptive Technologies -\nPeer-to-Peer is a book about an emerging idea. That idea is that the traditional model of participating in the Internet, in which a small computer operated by an everyday user (a \"client\") asks for and receives information from a big computer administered by a corporation or other large entity (a \"server\"), is beginning to give some ground to a new (new to the fringes of the Internet, anyway) model called peer-to-peer networking. In peer-to-peer networking, all participants in a network are approximately equal. Furthermore, the participants are usually ordinary computers run by everyday people. The ICQ chat service and the Napster music-sharing community are examples of what this book is about.\n\nPeer to Peer Application Development: Cracking the Code -\nIn this unique guide, a crack team of software engineers delivers the programming solutions and source code you need to jump-start a state-of-the-art peer-to-peer application project. Using flow charts and line-by-line analysis of a full-scale P2P file-sharing application, they show you how to solve for typical P2P programming challenges \u2013 and create your own sate-of-the-art P2P application using Java or C#, XML, sockets, threading, ASP, and SQL Server 2000.\n\nP2P: Getting Down to Business -\nAn extensive analysis of the business model potential of peer-to-peer computing. The paper begins by examining the nature of P2P systems and what makes something P2P. Three kinds of P2P (or distributed computing) are distinguished: file sharing, grid computing, and distributed information architecture. The paper shows several uses of P2P and finishes by looking at areas where P2P-based companies might successfully create sustainable business models. It is followed by an extensive listing illustrates the points made with details on over 70 existing systems.\n\nCovers current P2P applications and tackles the thorny issues of P2P Intellectual Property Protection and Privacy.\n\nProvides hands-on instruction about some of the more popular P2P file sharing products, including Scour, Gnutella, AIMster, and Freenet.\n\nDemonstrates how to communicate and collaborate in the workplace using AOL IM, Microsoft Messenger, Groove, NetMeeting, Freetopia, and more.\n\nPeer-to-Peer: Building Secure, Scalable, and Manageable Networks -\nLeverage the power of peer-to-peer to achieve seamless personal and business communication and transactions. This easy-to-follow guide shows you, step-by-step, how to implement a peer-to-peer network. The book includes clear definitions, real world examples, practical technology explorations, and no-nonsense solutions.\nThis book provides you with both the background knowledge and the practical information you need to take advantage of the emerging world of peer-to-peer computing.\n\nEarly Adopter JXTA: Peer-to-Peer Computing with Java -\nJXTA is a new technology that enables us to build peer-to-peer systems - systems which enable computers to discover one another and co-operate together across the Internet. This kind of interaction characterizes some of the most interesting networked applications that have appeared in the last year: Napster, Gnutella, Morpheus, and their relatives. In these systems, a user installs a client program, which discovers other installed clients on other machines, and communicates with them - allowing the sharing of files between computers. This peer-to-peer architecture is a completely new paradigm in software design, representing a totally different approach to the standard client-server frameworks used in almost all the distributed systems that currently exist.\n\nP2P: How Peer-to-Peer Technology Is Revolutionizing the Way We Do Business -\nIt's been little more than a year since the name Napster began rolling off people's tongues and peer to peer, or P2P, became standard new economy jargon. But P2P is far more than Napster. It's a new way of thinking and computing that lets companies leverage their existing network infrastructure to boost value, cut costs, and maximize resources in an entirely new way.\nTo understand and implement revolutionary peer-to-peer technologies, managers, executives, entrepreneurs, and investors need to understand the business implications and application of the technology outlined by Hassan M. Fattah in P2P. Part technology analysis, part case study, and part management guide, P2P examines the key issues businesses face in implementing P2P and presents the opportunities and challenges that accompany this new technology."}
{"text": "Chapter 29 Modular Programming Using Objects In Chapter 1, we claimed that one way Scala is a scalable language is that you can use the same techniques to construct small as well as large pro- grams. Up to now in this book we've focused primarily on programming in the small: designing and implementing the smaller program pieces out of which you can construct a larger program. 1 The other side of the story is programming in the large: organizing and assembling the smaller pieces into larger programs, applications, or systems. We touched on this subject when we discussed packages and access modifiers in Chapter 13. In short, packages and access modifiers enable you to organize a large program using packages as modules, where a module is a \"smaller program piece\" with a well defined interface and a hidden implementation. While the division of programs into packages is already quite helpful, it is limited because it provides no way to abstract. You cannot reconfigure a"}
{"text": "Book Review: Parallel Programming with Microsoft .NET\n\nParallel programming breaks down complex computing processes into smaller components that can be\nrun simultaneously on separate processors. It can improve application performance today and prepare\napplications for the hardware environment of tomorrow. Parallel Programming with Microsoft .NET:\nDesign patterns for decomposition and coordination on multicore architectures, from Microsoft\nPress, is an introduction and how-to guide for .NET programmers that are looking into parallel\nprogramming.\n\nThe first three chapters lay down the groundwork, introducing readers to the common problems\nassociated with parallel computing and to the important concepts of parallel loops and parallel\ntasks. Subsequent chapters present design patterns for a number of situations in which one would\napply parallel programming strategies, starting with simple cases and moving into increasing\ncomplex procedures."}
{"text": "Software Carpentry is a learning resource that just doesn't seem to be getting the coverage of the high profile providers such as Udacity, edX and Coursera. Yet it provides high quality video lectures that cover core programming and computing topics.\n\nThe stated aim of the project is to educate scientists in computer use. The argument is that most scientists have to get involved in using a computer to do their analysis at some point and, because they aren't trained properly, they end up in a life and death struggle to make the machine do what they want. Or less dramatically, they simply end up wasting a lot of time.\n\nSoftware Carpentry aims to fix the problem with video lecturers on a very wide range or topics.\n\nYou can discover what the aims are in this 90-second video, but don't get too worried about the emphasis on scientists. If you take a look at the lecture videos. then you will discover that while they might be aimed at scientists, they are perfectly general accounts of the topics covered.\n\nThere are lots of courses but the ones that are most relevant to programming are\n\nWhat is interesting about the Software Carpentry approach is that they are not as academic as the alternatives. These are videos on topics that are relevant to the working programmer rather than a computer science course. If this is what you are looking for then try some of the videos.\n\nThey also don't provided timed lecture courses complete with exams and certificates. That is, the resources are all about self study at your own pace - but this doesn't mean that they couldn't be used as the basis for a course - or a MOOC.\n\nThe courses come with pdf notes and Powerpoint presentations so that you can study away from the video lectures.\n\nWhat is even more surprising, is that all of the materials are freely available under a Creative Commons license. This means you can not only use them for your own purposes but edit and remix them. The project is supported by the Alfred P. Sloan Foundation and Mozilla, but lots of other well known entities have provided support in the past.\n\nSoftware Carpentry also runs, and encourages others to run, \"boot camps\" based on their material - see the website for more details.\n\nThis seems like a great project and well worth both using and supporting.\n\nIntel has just released Beacon Mountain - an Android development environment. You might be wondering why anyone would need another Android development environment? The answer in this case is the Atom. [ ... ]"}
{"text": "Preface to:\nObject-Oriented Programming with Java:\nAn Introduction\n\nIntroduction\n\nThis book is designed for those readers who wish to\nstart learning to program in an object-oriented programming language.\nIt has been designed primarily as a first programming text.\nIt is also suitable for those who already have some experience\nwith another programming language, and who now\nwish to move on to an object-oriented one.\nIndeed, much of the material is based on courses delivered by the author to\nstudents with a wide range of both\nnon-programming and programming backgrounds.\nThe language we use to teach object-oriented programming is Java.\n\nSince its arrival on the scene in 1995, the adoption of Java\nas a primary programming language has been amazing.\nIn its favor at the time of its arrival\nwere the facts that it was an object-oriented language, and that\nit offered a safer and more portable alternative to other languages.\nIt also rode the wave of interest in the World Wide Web, with which it\nintegrated well in its provision of applets.\nSince then, however, Java has come to be regarded as a genuine mainstream\nprogramming language.\n\nOur approach in this book is to regard Java as a\nlanguage that readers will want to use as a primary tool in\nmany different areas of their programming work - not just for creating\nprograms with graphical content within Web pages.\nFor this reason, in the early chapters\nwe have avoided an emphasis on creating applets and\nGUI-based programs.\nWhile being able to create GUI-based programs is superficially attractive,\nthe language\nconcepts required to create them properly are, in fact, quite advanced.\nNevertheless, we recognize that visual examples are much more fun to create\nand work with.\nTo this end, many of our early examples and exercises\nare enhanced by the provision of\nvisual material that makes them more interesting to experiment with.\nAn object-oriented language makes this approach relatively easy,\nwithout the reader needing to become enmeshed in the details of how\nthey are implemented.\n\nKey Features\n\nThe following are key features of this book:\n\nAn 'objects-early' approach; showing how to interact with\nfully-fledged objects, before moving on, in Chapter 4,\nto define classes from scratch.\n\nFrequent in-place exercises and reviews.\n\nA thorough glossary, explaining many of the highlighted items of\nterminology found in the text.\n\nAn accessible introduction to the fundamental object-oriented\ntopics of polymorphism and inheritance.\n\nSignificant coverage of the many GUI classes belonging to both the\nAbstract Windowing Toolkit (AWT) and Swing (JFC),\nwhich support both standalone applications and applets.\n\nUp-to-date coverage of the Java 2 Platform API.\n\nHow to use the power of threads for multi-threaded programs, while\navoiding hazards such as deadlock, livelock and thread starvation.\n\nChapter Outlines\n\nIn Chapter 2 through Chapter 15,\nwe cover the most important features of object-oriented programming\nand the Java language.\nWithin those chapters, exercises have been\ndeliberately positioned between sections, rather than grouped at the end.\nWe recommend that these exercises are attempted at the point they are reached,\nbecause many of them are designed to reinforce important concepts\nthat you should feel confident with before moving forward.\nEach of these chapters also includes periodic reviews to reprise and\nreinforce the main points of the\nmaterial covered in the preceding sections.\nFrom time to time, case studies are used in order to reinforce or bring\nout further points that are best made in looking at the\ndesign and implementation of a larger problem.\nIn the remaining chapters, we describe in detail how to use many of the\nGUI components provided by the AWT and Swing classes, how to write multi-threaded\nprograms and how to interact with programs across a network.\nWe conclude with a chapter on simulation - a common application area for\nobject-oriented programs.\nThroughout the book, there is an emphasis on the importance of good programming\nstyle; particularly the need to maintain an object's integrity from outside\ninterference.\nThe individual chapters are organized as follows.\n\nChapter 1 provides an introduction to the basics of computer\nsystems, for those with little or no experience of using a computer to write\nprograms.\nWe present a simple model of a computer and its components,\nin order to provide a\nfoundation for the ways in which the design of\nmost programming languages is shaped by them.\nExperienced programmers will find that they can skip this chapter.\n\nIn Chapter 2, we describe the fundamental elements of the\nJava language, and show how to compile and run a simple program.\n\nIn Chapter 3, we provide\nan introduction to basic object-oriented concepts, such as classes and objects.\nThe approach taken in this chapter is fundamental to that taken in the rest of\nthe book: objects are important.\nWe believe that an `objects-early' approach is the best way to learn an\nobject-oriented language.\nAt this stage, the emphasis is on using existing classes\nrather than defining them.\nThis approach helps to emphasize that objects communicate by passing\nmessages to one another.\n\nIn Chapter 4, we begin to show how simple\nclasses may be defined from scratch.\nWe discuss the ways in which objects use attributes to\nmaintain their state and the importance of protecting\nthose attributes from inappropriate modification.\nIt is at this early stage\nthat the concepts of accessors, mutators and\nencapsulation are introduced.\n\nIn Chapter 5, we\nstart to introduce the core features of Java\nthat enable behavior to be added to class definitions.\nWe concentrate on straight-line sequences of statements,\nand discuss arithmetic expressions.\n\nIn Chapter 6, we continue to add behavior to classes\nbut introduce statements that allow objects to perform alternative sequences of\nstatements.\nWe include a discussion of Boolean expressions, which are used\nto control this behavior.\n\nIn Chapter 7, the ability to repeat statements\nis added to class definitions.\nBy the end of this chapter, we are able to use the three fundamental\nelements of behavior - sequence, choice and repetition.\n\nIn Chapter 8, we introduce packages - Java's\nmeans of grouping related classes.\nWe include a description of several pre-defined classes that are used over and\nover again in programs: Math, String and StringBuffer.\n\nIn Chapter 9, we describe array objects, which make\nit possible to group related objects or items of data into fixed-sized\ncollections.\n\nIn Chapter 10, we introduce classes that support\narbitrary-sized collections of objects.\nWhile most programming languages provide array\nfacilities, Java adds standard collection classes\nthat other languages often leave to programmers to create for themselves.\n\nIn Chapter 11, we explore Java's exception-handling\nmechanism.\nThis provides a way for objects to indicate when an unexpected situation has\narisen with which they do not know how to deal.\nComplementary to this is the ability to `catch' exceptions and develop\nwork-arounds for the problems encountered.\n\nIn Chapter 12,\nwe look at some of the many ways in which a program can\ninteract with the external file system, via pre-defined input-output classes.\n\nIn Chapter 13, we investigate\nJava's interface facility.\nIn earlier chapters we use the term `public interface' informally, but\nthis chapter explores the issue in more depth.\nCentral to it is the concept of polymorphism.\nSince polymorphism is such a\nfundamental concept in any object-oriented language, we continue our\ndiscussion of it in the next chapter.\n\nIn Chapter 14, we\ntake the discussion of polymorphism one stage further by describing Java's\nextends facility for class inheritance.\nInheritance\nprovides the ability to derive new classes that inherit much of their code\nand functionality from existing classes. Among other things,\nthis permits code re-use.\nAs part of the material in this chapter,\nwe discuss alternatives to inheritance and\ninappropriate inheritance.\n\nIn Chapter 15,\nwe look at abstract classes, nested\nclasses and nested interfaces.\nBy the end of this chapter, we have covered most of the main features of the\nJava language.\nApart from Chapter 18, therefore,\nthe remaining chapters are largely\nconcerned with using these features in different applications; such as\ngraphical programming, networking and simulation.\n\nIn Chapter 16, we describe the classes of the\nAbstract Windowing Toolkit (AWT).\nThe AWT provides a powerful collection of classes\nthat simplify the creation of applications with graphical user interfaces.\nThey free a programmer from a need to know\ndetails of the windowing environment in which their programs will be run.\nFor the sake of generality,\nwe concentrate on standalone applications, rather than applets.\nApplets are covered, separately, in Chapter 20.\n\nIn Chapter 17, we continue the description of Java's\ngraphical features.\nThis chapter covers the Swing classes, which\nbuild on the AWT facilities to provide a more complex set of classes,\nand greater programmer control over the look-and-feel of a program.\n\nIn Chapter 18, we introduce the final major\nlanguage feature: threads.\nThreads are a powerful feature that\nmake it possible to create objects that run concurrently, sharing the\navailable processor time between them.\nHowever, the power of threads brings with it a number of new problems of\nwhich the designer of multithreaded programs\nneeds to be aware. We discuss problems such as race hazards,\nstarvation, livelock and deadlock, and how to avoid them.\n\nIn Chapter 19, we introduce the classes that allow\na program to interact with other programs across a network.\nWe discuss use of the reliable TCP protocol and the unreliable\nUDP protocol, both of which are well supported by Java's socket classes.\n\nIn Chapter 20, we return to features of graphical programming,\nwith a description of applets.\nApplets are largely restricted forms of the stand-alone applications\ndescribed in Chapter 16.\nThey are provided with a secure environment which prevents them from\ndirectly accessing the host machine on which they are run.\nThese restrictions apply so that they can be run within browsers, providing\nthe familiar active content of Web pages.\n\nChapter 21, concludes the main content of the book\nwith a description of the basic elements of\nevent-driven (discrete) simulation.\nSimulations represent an important set of object-oriented programs\nand we describe them through the presentation of two case studies.\n\nThe Appendices provide additional background material on primitive data\ntypes, number representations, operators and a list of Java's reserved words.\nSome recurring design patterns are discussed in Appendix E\nand our main stylistic conventions are summarized in\nAppendix F.\nThe book concludes with a comprehensive glossary of terminology.\n\nThe Java API continues to grow, and it is impossible to cover it all in\ndetail within the scope of a teaching text such as this.\nIn Chapter 15,\nthrough Chapter 20, therefore,\nwe only attempt to sample the riches of the classes it\ndefines, and provide illustrations of something of what is possible with them.\nBy that stage, our hope is that the reader will be able to\nharness the power that object-oriented programming in Java permits, and be\nable to create their own interesting and practical everyday programs.\n\nSupporting Materials\n\nThe examples we use have been developed using the Java 2 SDK,\nwhich is freely available from the\nJavaSoft Web site.\nYou are strongly recommended to obtain a copy of the documentation on the Java\nAPI which is available from the JavaSoft site.\nThe source code for the\nexamples in this book is available from the publisher's Companion Website or\nfrom here either\nvia HTTP or\nvia FTP.\n\nMaterial for instructors are also available. These include solutions to sample\nexercises taken from Chapters 1 to 15, and PowerPoint slides for the same\nset of chapters."}
{"text": "THE #1 BEST SELLING BOOK ON OBJECTIVE-C 2.0! From the author of Programming in C, Programming in Objective-C 2.0 provides the new programmer a complete, step-by-step introduction to the Objective-C language. The book does not assume previous experience with either C or object-oriented programming languages, and it includes many detailed, practical examples of how to put Objective-C to use in your... (more)... (more)\n\nby GARY WHITE\n\nby Alan Shalloway, James R. Trott\n\nThe Lean-Agile Pocket Guide for Scrum Teams is a useful reference for Scrum teams who have had some basic training and want to use Scrum in the context of Lean. It is designed to assist the transition to effective Scrum practices that enable enterprise delivery of value to customers. While this is not a book on Lean practices, it is presented in a manner that is consistent with Lean thinking.This book... (more)\n\n\"This edition contains Larman's usual accurate and thoughtful writing. It is a very good book made even better.\" --Alistair Cockburn, author, Writing Effective Use Cases and Surviving OO Projects\"Too few people have a knack for explaining things. Fewer still have a handle on software analysis and design. Craig Larman has both.\" --John Vlissides, author, Design Patterns and Pattern Hatching\"People often ask me... (more)\n\nby Macromedia\n\nActionScript is Flash's scripting language. You can use ActionScript to control objects in Flash movies to create navigation and interactive elements and to extend Flash to create highly interactive movies and Web applications.\n\nProfessional XSL takes an applied, tutorial-style approach to teaching the core fundamentals of the XSLT, XPath and XSL-FO specifications. You'll learn how to create well structured and modularized stylesheets to generate your required output, how to change, filter, and sort data, and how to incorporate other content for presentation purposes. XML is now the established standard for platform-neutral data... (more)... (more)\n\nDYNAMIC HTML IN ACTION, SECOND EDITION, is a valuable guide for HTML/Web authors eager to get the most out of the extended interactive and multimedia abilities of Dynamic HTML version 2 (as featured in Internet Explorer 5-and possibly supported by Netscape as well). DYNAMIC HTML IN ACTION, SECOND EDITION, covers everything that makes Internet Explorer 5 the next breakthrough technology for creating dynamic... (more)\n\nFinally, the smoke is clearing on the technology which unleashes the full capabilities of the world's 4.0 web browsers: DHTML. Capable of creating full multimedia power on a web site, DHTML is a collection of related technologies, cascading style sheets, Javascript, and HTML used together in powerful and elegant ways. The effects can be stunning, and give web designers unprecedented power over their visual... (more)\n\nby Macromedia\n\nSerious Play is about serious work: how the world's leading companies model, prototype, and simulate to innovate. Increasingly, prototypes are the key platforms and models are the core media for managing risk and creating value. They allow for cost-effective creativity, encourage profitable improvisation, and inspire organizations to collaborate in unexpected ways. Serious Play is a crisply written handbook... (more)\n\nAs the World Wide Web continues to expand, it becomes increasingly difficult for users to obtain information efficiently. Because most search engines read format languages such as HTML or SGML, search results reflect formatting tags more than actual page content, which is expressed in natural language. Spinning the Semantic Web describes an exciting new type of hierarchy and standardization that will replace the... (more)\n\nNew Masters of Flash is both global showcase and practical tutorial. Twenty of the planet's most awe-inspiring Flash designers share their influences, ideas and objectives in individual introductory essays. They then take the reader through a step-by-step tutorial explaining in detail how to create in Flash 5 the interfaces, applications and effects that they have made famous. On the accompanying CD, watch... (more)\n\nObject-Oriented Programming with ActionScript takes you beyond the level of \"neat\" code tricks and teaches you how to architect and implement true Macromedia Flash MX applications. You will also learn the programming theory needed to take full advantage of the object-oriented nature of ActionScript. Nearly a third of the book is focused on teaching you everything there is to know about one of the most powerful... (more)\n\nMacromedia Flash 4 was the standard for web animation and interactivity, and Flash 5 contained improvements in content creation, interactivity, and portability. Those designers not currently using Flash will find version 5 a must-have product and they will need a professional tutorial approach on how to maximize their use of Flash 5. The authors present two dozen projects created with Macromedia Flash 5, all... (more)"}
{"text": "Short Description for Programming in Objective-C Programming ... Full description\n\nFull description for Programming in Objective-C\n\nProgramming This unique approach to learning, combined with many small program examples and exercises at the end of each chapter, makes Programming in Objective-C ideally suited for either classroom use or self-study. The fourth edition of this book has been updated to cover the significant changes that first appeared in iOS 5 and Xcode 4.2, including the use of Automatic Reference Counting (ARC) to improve and simplify memory management in Objective-C programs.\n\"The best book on any programming language that I,ve ever read. If you want to learn Objective-C, buy it.\"-Calvin Wolcott \"An excellent resource for a new programmer who wants to learn Objective-C as their first programming language-a woefully underserved market.\"-Pat Hughes Table of Contents 1 Introduction 14 Introduction to the Foundation Framework 15 Numbers, Strings, and Collections 16 Working with Files 17 Memory Management and Automatic Reference Counting 18 Copying Objects 19 Archiving 20 Introduction to Cocoa and Cocoa Touch 21 Writing iOS Applications A Glossary B Address Book Example Source Code"}
{"text": "Take CIS-115 or CSC-133. Take DRE-096 and DMA-040 or ENG-070, RED-070 and MAT-070 or Placement Test Credit Equivalent\n\nCorequisites:\n\nNone\n\nThis course introduces computer programming using the C# programming language with object-oriented programming principles. Emphasis is placed on event-driven programming methods, including creating and manipulating objects, classes, and using object-oriented tools such as the class debugger. Upon completion, students should be able to design, code, test, debug, and implement objects using the appropriate environment at the beginning level."}
{"text": "Understanding the Anatomy of an Android Application\n\nClassical computer science classes often define a program in terms of functionality and data, and Android applications are no different. They perform tasks, display information to the screen, and act upon data from a variety of sources.\n\nDeveloping Android applications for mobile devices with limited resources requires a thorough understanding of the application lifecycle. Android also uses its own terminology for these application building blocks\u2014terms such as Context, Activity, and Intent. This chapter familiarizes you with the most important components of Android applications.\n\nMastering Important Android Terminology\n\nThis chapter introduces you to the terminology used in Android application development and provides you with a more thorough understanding of how Android applications function and interact with one another. Some of the important terms covered in this chapter are\n\nContext: The context is the central command center for an Android application. All application-specific functionality can be accessed through the context.\n\nActivity: An Android application is a collection of tasks, each of which is called an Activity. Each Activity within an application has a unique task or purpose.\n\nIntent: The Android operating system uses an asynchronous messaging mechanism to match task requests with the appropriate Activity. Each request is packaged as an Intent. You can think of each such request as a message stating an intent to do something.\n\nService: Tasks that do not require user interaction can be encapsulated in a service. A service is most useful when the operations are lengthy (offloading time-consuming processing) or need to be done regularly (such as checking a server for new mail)."}
{"text": "Welcome to part 5 of my Android Development Tutorial! In this tutorial, I completely finish the tip app that I have been making. If you want to learn about the Android event listener you are in the right place.\nI will cover how to both get values from and change values in Android...\n\nWelcome to part 4 of my Android Development Tutorial. In the last part, I showed you how to put together an Android User Interface. This time I will add to that app in a big way!\nOver the course of this tutorial and the next I will cover RadioButtons, RadioGroups, CheckBoxes,...\n\nIn this part of my Android Development Tutorial, I will build an Android user interface.\nI cover how to do numerous things: How to use the Android Visual Layout Editor, How to edit the GUI layout by editing the XML, How to use TextView, EditText and the SeekBar, How to catch events,...\n\nIn this tutorial, I decided to cover all of the topics I would need, so that in every tutorial that follows I can just make apps. Don't try to memorize everything! Here I'm just covering a bunch of things you need to be familiar with.\nWe'll cover the lifecycle of...\n\nIn a previous tutorial, I showed you how to Install the Android Development Tools. In this first part of my Android Development Tutorial I'm going to describe almost every file and folder used to develop an Android app.\nI'll walk through every single file and explain how...\n\nIn my last tutorial, I showed you how to install the Android development tools. In this tutorial, I'll show you how to solve many of the Android SDK Problems you have recently sent me.\nWe'll look at: How to speed up the emulator. Solve the problem in which the Android...\n\nWelcome to my tutorial on how to Install Android Development Tools. I received many requests on how to do this and it is a great topic to cover right before I start my Android Development Tutorial.\nI'll cover how to install Googles ADT plugin, all of the common errors people...\n\nWelcome to my Java Heap Tutorial. In previous tutorials, I covered how to print out trees in Java. You may want to look at that before continuing here, but it isn't required.\nA Heap is kind of like a tree, but it is normally implemented as an array. There are 2 main rules for...\n\nIn my previous tutorial Solving Programming Problems, I walked you threw the process of solving a generic programming problem. We made a method that printed out a tree structure in the console.\nIn this tutorial, I'll walk through the process of finding bugs in the code and..."}
{"text": "Written by a software developer for software developers, this book is a unique collection of the latest software development methods. The author includes OOD, UML, Design Patterns, Agile and XP methods with a detailed description of a complete software design for reusable programs in C++ and Java. Using a practical, problem-solving approach, it shows how to develop an object-oriented application-from the early stages of analysis, through the low-level design and into the implementation. Walks readers through the designer's thoughts - showing the errors, blind alleys, and creative insights that occur throughout the software design process. The book covers: Statics and Dynamics; Principles of Class Design; Complexity Management; Principles of Package Design; Analysis and Design; Patterns and Paradigm Crossings. Explains the principles of OOD, one by one, and then demonstrates them with numerous examples, completely worked-through designs, and case studies. Covers traps, pitfalls, and work arounds in the application of C++ and OOD and then shows how Agile methods can be used. Discusses the methods for designing and developing big software in detail. Features a three-chapter, in-depth, single case study of a building security system. For Software Engineers, Programmers, and Analysts who want to understand how to design object oriented software with state of the art methods.\n\nThe best selling 'Algorithmics' presents the most important, concepts, methods and results that are fundamental to the science of computing. It starts by introducing the basic ideas of algorithms, including their structures and methods of data manipulation. It then goes on to demonstrate how to design accurate and efficient algorithms, and discusses their inherent limitations. As the author himself says in the preface to the book; 'This book attempts to present a readable account of some of the most important and basic topics of computer science, stressing the fundamental and robust nature of the science in a form that is virtually independent of the details of specific computers, languages and formalisms'.\n\nExtensively revised and updated, this proven book by noted C++/C expert Ira Pohl is written specifically for C programmers who are transitioning to C++. The book takes an evolutionary teaching approach, using C as a starting point and C++ as a destination. This third edition reflects the new ANSI C++ Standard, and covers the latest language features - including detailed discussions of templates, STL, and exception handling. [via]\n\n\"Simulation,\" writes Gary Flake in his preface, \"becomes a form of experimentation in a universe of theories. The primary purpose of this book is to celebrate this fact.\"In this book, Gary William Flake develops in depth the simple idea that recurrent rules can produce rich and complicated behaviors. Distinguishing \"agents\" (e.g., molecules, cells, animals, and species) from their interactions (e.g., chemical reactions, immune system responses, sexual reproduction, and evolution), Flake argues that it is the computational properties of interactions that account for much of what we think of as \"beautiful\" and \"interesting.\" From this basic thesis, Flake explores what he considers to be today's four most interesting computational topics: fractals, chaos, complex systems, and adaptation.Each of the book's parts can be read independently, enabling even the casual reader to understand and work with the basic equations and programs. Yet the parts are bound together by the theme of the computer as a laboratory and a metaphor for understanding the universe. The inspired reader will experiment further with the ideas presented to create fractal landscapes, chaotic systems, artificial life forms, genetic algorithms, and artificial neural networks.\n\nThis is the long-awaited 3rd Edition of Tanenbaum's classic book on computer networking. The finest network engineer I know (who was stolen from my previous employer by developers of IPv6) swears by this book, and it is arguably the best single resource for gaining a good technical understanding of modern networking in the mid 1990s. Very Highly Recommended. [via]\n\n\"The long-awaited second edition of Wesley Chun's Core Python Programming proves to be well worth the waitits deep and broad coverage and useful exercises will help readers learn and practice good Python.\"\n\nAlex Martelli, author of Python in a Nutshell and editor of Python Cookbook\n\n\"There has been lot of good buzz around Wesley Chun's Core Python Programming. It turns out that all the buzz is well earned. I think this is the best book currently available for learning Python. I would recommend Chun's book over Learning Python (O'Reilly), Programming Python (O'Reilly), or The Quick Python Book (Manning).\"\n\nDavid Mertz, Ph.D., IBM DeveloperWorks\u00ae\n\n\"I have been doing a lot of research [on] Python for the past year and have seen a number of positive reviews of your book. The sentiment expressed confirms the opinion that Core Python Programming is now considered the standard introductory text.\"\n\nRichard Ozaki, Lockheed Martin\n\n\"Finally, a book good enough to be both a textbook and a reference on the Python language now exists.\"\n\nMichael Baxter, Linux Journal\n\n\"Very well written. It is the clearest, friendliest book I have come across yet for explaining Python, and putting it in a wider context. It does not presume a large amount of other experience. It does go into some important Python topics carefully and in depth. Unlike too many beginner books, it never condescends or tortures the reader with childish hide-and-seek prose games. [It] sticks to gaining a solid grasp of Python syntax and structure.\"\n\n bookstore Web site\n\n\"[If ] I could only own one Python book, it would be Core Python Programming by Wesley Chun. This book manages to cover more topics in more depth than Learning Python but includes it all in one book that also more than adequately covers the core language. [If] you are in the market for just one book about Python, I recommend this book. You will enjoy reading it, including its wry programmer's wit. More importantly, you will learn Python. Even more importantly, you will find it invaluable in helping you in your day-to-day Python programming life. Well done, Mr. Chun!\"\n\nRon Stephens, Python Learning Foundation\n\n\"I think the best language for beginners is Python, without a doubt. My favorite book is Core Python Programming.\"\n\ns003apr, MP3Car.com Forums\n\n\"Personally, I really like Python. It's simple to learn, completely intuitive, amazingly flexible, and pretty darned fast. Python has only just started to claim mindshare in the Windows world, but look for it to start gaining lots of support as people discover it. To learn Python, I'd start with Core Python Programming by Wesley Chun.\"\n\nBill Boswell, MCSE, Microsoft Certified Professional Magazine Online\n\n\"If you learn well from books, I suggest Core Python Programming. It is by far the best I've found. I'm a Python newbie as well and in three months time I've been able to implement Python in projects at work (automating MSOffice, SQL DB stuff, etc.).\"\n\nptonman, Dev Shed Forums\n\n\"Python is simply a beautiful language. It's easy to learn, it's cross-platform, and it works. It has achieved many of the technical goals that Java strives for. A one-sentence description of Python would be: 'All other languages appear to have evolved over time--but Python was designed.' And it was designed well. Unfortunately, there aren't a large number of books for Python. The best one I've run across so far is Core Python Programming.\"\n\nChris Timmons, C. R. Timmons Consulting\n\n\"If you like the Prentice Hall Core series, another good full-blown treatment to consider would be Core Python Programming. It addresses in elaborate concrete detail many practical topics that get little, if any, coverage in other books.\"\n\nMitchell L Model, MLM Consulting\n\n\"Core Python Programming is an amazingly easy read! The liberal use of examples helps clarify some of the more subtle points of the language. And the comparisons to languages with which I'm already familiar (C/C++/Java) get you programming in record speed.\"\n\nMichael Santos, Ph.D., Green Hills Software\n\nThe Complete Developer's Guide to Python\n\nNew to Python? The definitive guide to Python development for experienced programmers\n\nCovers core language features thoroughly, including those found in the latest Python releaseslearn more than just the syntax!\n\nUsing practical code examples, Chun introduces all the fundamentals of Python programming: syntax, objects and memory management, data types, operators, files and I/O, functions, generators, error handling and exceptions, loops, iterators, functional programming, object-oriented programming and more. After you learn the core fundamentals of Python, he shows you what you can do with your new skills, delving into advanced topics, such as regular expressions, networking programming with sockets, multithreading, GUI development, Web/CGI programming and extending Python in C.\n\nThis edition reflects major enhancements in the Python 2.x series, including 2.6 and tips for migrating to 3. It contains new chapters on database and Internet client programming, plus coverage of many new topics, including new-style classes, Java and Jython, Microsoft Office (Win32 COM Client) programming, and much more.\n\nLearn professional Python style, best practices, and good programming habits\n\nGain a deep understanding of Python's objects and memory model as well as its OOP features, including those found in Python's new-style classes\n\nBuild more effective Web, CGI, Internet, and network and other client/server applications\n\nLearn how to develop your own GUI applications using Tkinter and other toolkits available for Python\n\nImprove the performance of your Python applications by writing extensions in C and other languages, or enhance I/O-bound applications by using multithreading\n\nLearn about Python's database API and how to use a variety of database systems with Python, including MySQL, Postgres, and SQLite\n\nFeatures appendices on Python 2.6 & 3, including tips on migrating to the next generation!\n\nData Structures and Other Objects Using C++ meets the needs of anyone who wants to balance the introduction of object-oriented concepts with data structures with C++. This book takes a gentle approach to the data structures course in C++ in that it provides an early, self-contained review of object-oriented programming and C++ to give students a firm grasp of key concepts and allows those experienced in another language to adjust easily. The book also offers flexibility that allows professors such options as emphasizing object-oriented programming, covering recursion and sorting early, or accelerating the pace of the course. This book provides a solid foundation in building and using abstract data types. The authors provide the basis for studying data structures by covering topics like container classes, pointers and linked lists, and time analysis and testing. In addition, the book contains an assortment of advanced topics such as B-trees for project building and graphs. [via]\n\nLong ago (1995), four object-orientation specialists came out with a book called Design Patterns. In it, the four--whose book became so famous that they became known as the Gang of Four--forwarded a convincing argument that most programming jobs fell into a couple of dozen general categories, and that generic solutions to these programming problems--design patterns--could carry the day a lot of the time. The book remains part of the Holy Writ of object orientation, and indeed if you study it carefully you can save yourself from having to reinvent the wheel every time you set about writing software.\n\nNot long ago (2003), Microsoft came out with a new programming language called C#. It's object oriented, and does lots of nifty stuff with networks. Design Patterns in C# shows you how to implement the 23 \"Gang of Four\" design patterns in this new language. Steven Metsker's approach is mostly architectural, with lots of object relationship diagrams and relatively little code. He says right up front: \"This book is for developers who know C# and want to improve their skills as designers.\" Among the most valuable parts of his coverage are his comparisons of similar patterns. These clarify, for example, when to use a Builder pattern, as opposed to a Factory or Abstract Factory. The approach helps you become a good C# architect. --David Wall\n\nTopics covered: How to implement the 23 classic Gamma-Helm-Johnson-Vlissides design patterns in C#. Questions scattered throughout the text help you improve your C# skills while you read about pattern architecture. [via]\n\nOne of the important benefits of programming in C++ is its reuse capabilities. Designing and Implementing Reusable C++ illustrates and enumerates all of the tradeoffs involved in writing reusable code. The authors discuss the topics related to the software development of code reusability in the design of interfaces, the efficiency of implementations, portability, and compatibility. The advantages and disadvantages of the alternatives are discussed in depth so that programmers can make informed decisions. Novice and experienced programmers alike will benefit from the ideas presented by the authors to produce reusable C++ code. 020151284XB04062001 [via]\n\nGenerative Programming (GP) offers the promise of moving from one-of-a-kind\" software systems to the semi-automated manufacture of wide varieties of software -- essentially an assembly line for software systems. GP's goal is to model software system families and build software modules such that given particular requirements specs highly customized and optimized intermediate or end products can be constructed on demand. This is the first book to cover Generative Programming in depth. The authors leaders in their field introduce the two-stage GP development cycle: one stage for designing and implementing a generative domain model and another for using the model to build concrete systems. They review key differences between generative modeling and processes used for \"one-of-a-kind\" systems. Next they introduce key GP concepts such as feature models [via]\n\nMore editions of Generative Programming: Methods, Tools, and Applications:After the success of the first edition of Introduction to Functional Programming, the authors have thoroughly updated and revised this bestselling title. This book is unusual amongst books on functional programming in that it is primarily directed towards the concepts of functional programming, rather than their realization in a specific programming language. The book clearly expounds the construction of functional programs as a process of mathematical calculation, but the mathematics is restricted to that relevant to the actual construction of programs.\n\nUsing a step-by-step approach that fosters self-teaching, Liang presents Java programming in four parts. The early chapters outline the conceptual basis for understanding Java. Subsequent chapters progressively present Java programming in detail, culminating with the development of comprehensive Java applications. Revised in every detail to enhance clarity, content, presentation, examples, and exercises. Updated to JSE 5.0 Features many new illustrations and short examples throughout to demonstrate concepts and techniques. Presents large examples in case studies with overall discussions and thorough line-by-line explanations. Expands treatment of Object-Oriented Programming and GUI Programming. Features excellent coverage of advanced topics in the new Comprehensive version, including: Exceptions, data structures, multithreading, JavaBeans, MVC, Containers, Advanced Swing, Database Programming, Servlets, JavaServer Pages, Networking, and Remote Method Invocation. Ideal tutorial/reference for programmers who want to learn more about Java.\n\n27114-8 The first true design book inspired by Java(tm) Meet Charlie and Zoe, two users with highly individual User Interface needs. Follow them through the process of designing complex systems that use the power of Java to create unique online solutions. They'll introduce you to the brand-new design paradigm made possible by Java. Explore new concepts in development on the theoretical level, then put them to work with Charlie and Zoe to see their practical applications. Java-inspired design has some basic maxims that are carried out throughout this book. *Interfaces: Java's most significant aspect for designers is its freedom. Object connections and scenario interactions don't need to be hardwired to a single class of objects anymore-learn to use this freedom to gain flexibility, extensibility, and pluggability in your designs. *Composition: Basing your Java designs on composition, rather than inheritance, allows you to maximize this free structure. Java Design offers a five-fold checklist for determining which strategy is \"the better one to apply.\" *Threads: Learn to manage multiple streams of program execution cleanly, efficiently, and safely.* Notification: Manage notification in ways that maximize the loose coupling supported by Java. Learn to identify the flaws in Java's own mechanism to keep your systems in sync. Java Design also includes a CD-ROM filled with cool code ready to use in your own apps, as well as a Strategies and Patterns Handbook with 177 strategies and 31 object-model patterns to guide your own app design. [via] capabilitiesThis is the greatly revised and greatly for Opengl Programming Guide: The Official Guide to Learning Opengl, Version 1.2:\n\nPair programming is a simple, straightforward concept. Two programmers work side-by-side at one computer, continuously collaborating on the same design, algorithm, code, and test. It produces a higher quality of code in about half the time than that produced by the summation of their solitary efforts. However, nothing is simple where people and personalities are involved--especially people who are accustomed to working alone. The leap to pair programming for a variety of software development projects is one that yields many benefits. However, it is also one that requires careful thought and planning. [via] and powerful illustration chock full of life lessons for all of us. [via]\n\nIn 1992, Yourdon wrote The Decline and Fall of the American Programmer, warning of impending loss of leadership by American software engineers. But a great deal has changed in three years, and Yourdon now sees a complete reversal of many of the trends he previously documented, as well as new trends such as the WWW, Java, \"Good Enough\" Software, and the enormous impact of Microsoft on the world of software and computing, that together signify the Resurrection of American software engineering. [via]\n\nThis one-stop resource for exceptions and exception handling in the Javalanguage provides a comprehensive reference for Java developers. The abilityto create code that will properly deal with error conditions is crucial todeveloping effective applications in any programming language. This bookdescribes exceptions and exception handling in Java. It provides a referencethat both describes how exceptions work in Java technology, and explains howto effectively use them in applications. Incorporating helpful topics as bestpractices and discussions about how specific APIs represent error conditions,this book discusses the practice of exception handling from softwaredevelopment up to system architecture. In addition, it provides informationabout how to use exceptions during the phases of software development whichfocus on testing and debugging. [via]\n\nMore editions of Robust Java: Exception Handling, Testing, and Debugging:\n\n45464-5 Scheme is a general purpose programming language descended from Algol and Lisp. Because it is conceptually clean and simple, it is an easy language to learn. At the same time, it is a powerful language, and full mastery of its power requires careful study and practice. Scheme is used widely in computing education and research as well as for a broad spectrum of industrial applications ranging from graphical user interfaces and language compilers to virtual reality engines, web navigators, and enterprise computing solutions. This revised edition of The Scheme Programming Language provides an introduction to the language for readers with some programming experience. Beginning with a gentle introduction for novice Scheme programmers, it leads the reader through a series of progressively more difficult examples that introduce each of the major features of the language. Advanced concepts and features are thoroughly covered with examples and exercises appropriate even for more experienced programmers. The introduction is followed by a set of reference chapters that cover Scheme's binding forms, control structures, operations on objects, input and output operations, and syntactic extension facilities. A final chapter is devoted to a collection of sample programs or packages and includes an overview of each package with additional examples and exercises. [via]\n\nIncluding the work of Hugo Award winner Larry Niven, William F. Nolan, Ron Goulart, and Paul Levinson - fourteen chilling tales pit supernatural sleuths and ghostly gumshoes against the ne'er-do-wells of the netherworld. [via]\n\nThe second edition of Unix Shells by Examples shows off basic commands and utilities in the three most popular Unix shells--C, Bourne, and Korn--with side-by-side examples. The new edition of this book is sure to be a worthy reference for Unix programmers for getting around their favorite shell.\n\nThe best thing in this new edition is that the author presents short, effective examples of using basic commands and utilities for each of the three major Unix shells. This comparative approach means that you can use this book on different flavors of Unix and even migrate scripts between different shells. For each shell, the author provides fundamentals, like accessing profiles, command-line histories, and shell programming. \"Lab sections\" let you develop your skills with short, hands-on exercises for each shell. As in the earlier edition, the author's short examples show you how to perform basic tasks quickly with common switches and options.\n\nOther sections here cover three major Unix utilities: grep (for searching), sed (for editing), and awk (for scripting and reporting). (The reference and tutorial on AWK programming is a notable feature here. There is also good coverage of regular expressions.)\n\nInstead of hunting down information in countless man pages, this book will save you valuable time every day with its efficient format and comparative approach--truly useful features for the beginning and intermediate Unix user. --Richard Dragan"}
{"text": "Preface\n\nSubmitted by admin on Sat, 2007-06-16 10:25\n\nDuring our life time, computers have been responsible for ushering in an unprecedented age of swift technological changes that have permeated every sphere of life. For more than three decades, the speed at which computers perform computations has been doubling every eighteen months following an informal \"law\" formulated in 1965 by Gordon Moore, a co-founder of the chip-making powerhouse, the Intel Corporation. Along with the phenomenal increase in power, speed and storage capacity of computers, the cost of CPU, memory chips, and peripherals such as printers, monitors and scanners have also been falling rapidly. These trends will continue if not accelerate in the years to come.\n\nExperts agree that for a long time, progress in computer software had lagged behind the enormous strides made in hardware. However, during the past decade, the revolutionary software product called the World Wide Web (WWW) came into our lives and quickly changed the world. The WWW, conceived by the European physicist Tim Berners-Lee in Switzerland in 1989, caught the world by storm. It has accelerated the rate at which the world is becoming a global village. Although many historians and economists believe that the current pace of technological change pales in comparison with the developments that took place in the last five decades of the nineteenth century, it is true that in a few years, the WWW has been able to penetrate into millions of homes and corporations around the world. Information on any conceivable topic is at our finger tips with a few key strokes and mouse clicks. People of all ages are spending countless hours chatting on the WWW, making friends and developing relationships. WWW-based commerce is already worth tens of billions of dollars and is growing by leaps and bounds every day. In a few years, the Web is probably destined to become the dominant medium for conducting business and personal communications.\n\nFrom its early days, Perl has been one of the dominant programming languages of choice in the context of the World Wide Web. Perl has been used extensively for CGI programming for providing dynamic Web pages. The extensive use of CGI programming encourages a lot of programmers to learn Perl. Perl also provides powerful tools for writing programs that communicate across the World Wide Web and that access network databases. One of Perl's strengths is its extra-ordinarily powerful pattern matching ability that can be used in looking for patterns in text including Web pages, thus making it suitable for data mining in many different areas such as business intelligence gathering and genomic studies."}
{"text": "Unlike any other books, computer books are usually bought by people who\naspire to know the book off by heart, and considering they are usually very\nverbose, and necessarily complex, it's usually wishful thinking. Bearing\nthat in mind, good computer books contain:\n\nFew pages - the less someone needs to get their point across, the more\nintelligent you can assume they are.\n\nTo the point - I've seen books on C that spend 80 pages on everything\nyou can do with arrays. An intelligent programmer needs a look at\nsome source code, and he is are sorted.\n\nRelevant pictures/figures/source code - I've seen \"Internet\" books with\nfull-page screenshots of Netscape with the caption \"This is a web\nbrowser\". These waste time, paper and brain energy.\n\nNo CD/floppy. I'll save the \u00a33 extra, and download the latest version\nmyself, thank you very much. A floppy/CD in a book these days is\nmarketing, nothing else.\n\nFor more on this, look around photo.net for Philip Greenspun's treatise on computer books.\n\nWith this all in mind, the \"Beginning GTK+/GNOME Programming\", by Peter\nWright, rates quite highly, on first impressions. It's not huge (though at\n600 pages, considering it's a \"beginners\" book, it's getting there), and so\nyou can read it on the bus, without feeling silly. The first touch I like\nis the \"index\" in the inside cover. It's a quick look at what you are in\nfor, and by the page numbers, how much he's devoting to each section.\n\nThe book starts with an \"intro to GTK+/GNOME\", which I liked. Peter writes\nwith the confidence of a tour guide, taking you through the sights,\nexplaining in an informal manner how to make up Makefiles that know where\nto get the various libraries, includes etc. that you will use in learning\nGTK+/GNOME. This is a big difference from Havoc Pennington's GTK+/GNOME\nbook, which assumed that if you bought his book, you knew your way around\nMakefiles. I thought it was nice of Peter to ease people in like this -\nafter all, a lot of people buying this book may be coming from a scripting\nor MS Windows programming background.\n\nThere is a diagram on the back of the book, that suggests a \"book path\" of\nsorts. This book comes after \"Beginning C\", and then \"Beginning Linux\nProgramming\". I think that those thinking \"I'd like to get into GNOME\nprogramming\" should start with one of those before moving onto this book,\nif they are new to programming in C on Unix.\n\nFirst, we get a flyby tour of \"GLib\". GLib is the All-Purpose C library\nthat the GIMP people implemented all their wheel-reinventing. It has hash\ntables, memory tracking, error reporting and loads of standard types, as\nwell as anything else they thought more than one person could use in a C\nprogram. It's huge. It's great. It's stable. And this book gives it 35\npages. It covers about 10% of GLib - just enough so you can get by enough\nto start solving syntax errors in GTK+ code that uses GLib types. But\nthat's all. I was less than impressed, but it's the author's call - this is\na \"beginners guide\", after all. Perhaps a return to GLib later would be in\norder - it's a very complex library that every C programmer on any\nplatform should use in their code.\n\nAll programming books contain source code. Some have ten/twenty pages of\ncode, to bore you to tears, some rip snippets out of context, and explain\nthem to you even if it's obvious what to do. Peter Wright seems to prefer a\nsprinkling of highlighted (so easy to skim/skip) commented code, with\ninstructions like \"type this in, or download it from our website\". I\nsuppose it's a tradeoff for not paying for a CD - he has to provide\ncomplete code on paper, for those that don't have Internet access.\nThankfully, most programs are small ones that just show a point - though he\ndoes have on large \"example application\", which has it's code hidden in an\nappendix at the back, so you don't have to go skipping through it, in the\nmiddle of the book.\n\nBeing a GUI book, I would excuse exhuberant pictures in the book. However,\nthey are quite restrained, usually just a widget on it's own, though\nocassionally, you do get \"This is the GNOME desktop\" type pictures, but\nthey are small, and don't take from the content of the book at all.\n\nThere are five appendices at the back, two of which are source code for\nsmall example applications that would have otherwise cluttered up the book.\nThe other three are reference sources for the GNOME API, Events, and\nCallbacks. I couldn't help think that they weren't that useful, really. The\n\"Amiga ROM Kernel Referece manuals\" had much of this sort of information -\nand they were larger than A4 so that you could read a lot of it at once.\nYou can't do that in a small book. I can't see myself reading those - I'll\nstick to looking through the header files on a 100 line tall terminal\nwindow. Still, if you like filler...\n\nOnto the meat of the book. After GLib, Peter concentrates sole on GTK+,\nstarting with compiling up a simple \"hello world\" program, how it works,\nexample makefiles etc. working up to using multiple complex widgets in an\napplication, and finishing the section with a whirlwind tour of GDK, the\n\"graphical abstraction\" part of GTK. Much like GLib can make any OS, Unix,\nBeOS or Windows have a common POSIX-like C API, GDK makes any graphical\nsystem look a lot like X windows. Again, complete knowledge of GDK isn't\nneeded for a beginner to get on their feet, so he sticks to useful bits of\nit, like fonts and colours.\n\nBy this \"halfway point\" in Havoc Pennington's book, a big explanation of\nthe GTK+ object system was given. Peter's book is written for beginners.\nHe seems to assume that most people really aren't interested in the details\nas to how the GIMP people made libraries which supported a proper OO system\nin C - Peter just explains what you need to know to get going. Although he\nis more verbose, there is a very strong feeling that you are being shown a\nlittle more of GTK each time, in managable chunks. By the time you get to\n\"Introducing GNOME\", anyone could make small applications, with simple\nwidgets.\n\nJust as the GTK+ section started with Makefiles, the GNOME section starts\nwith an explanation of how your source directories should look like. Though\nmany people don't know this (and many more don't follow it), the GNU\nproject has very strict guidelines as to what should be in a source code\ntarball. Peter explains that having an \"src\" directory with source,\nseparate from your \"INSTALL\", \"README\", \"COPYING\" files, as well as\ninternationalization files, and most importantly the \"configure\" script.\nAlthough he doesn't go into great depth explaining how autoconf/automake\nwork, he makes you aware of their existance. He also explains \"popt\" - the\ncommand line argument parser. It's little things like that that make this\nbook stand out in my mind.\n\nThe rest of the GNOME section concentrates on the various GNOME widgets,\nand downloading/compiling/using gIDE and GLADE (the GNOME Integrated\nDevelopment Environment and a VB-like GUI creation tool). Again, because he\nis writing a beginners book, he avoids advanced concepts like session\nmanagment, CORBA, Bonobo and the like. By the end of this section, you can\nmake GNOME-looking simple applications, and have at least played with\nGLADE, to see how powerful it could be.\n\nOverall, the book is a good beginners book. It avoids using complex C\nalgorithms, advanced GNOME concepts, and doesn't explain GLib or GDK in\ndepth. However, it does cover more important concepts like getting you\nstarted, how your programs should look, how your source should look, and\ngetting something on the screen, doing something pretty, which is the most\nimportant thing for starting someone off. I can just hope there would be a\ncompanion book \"Advanced GTK+/GNOME programming\", that would cover\n\u00fcber-cool stuff like Bonobo and Gnorba.\n\nIf you are looking for something a little more advanced, perhaps Havoc\nPennington's book is for you - it's not as well written, or as\ncomprehensive in what the author wishes to cover as this book, though it\nhas more complex concepts in it.\n\nMaintained by the ILUG website team. The aim of Linux.ie is to\nsupport and help commercial and private users of Linux in Ireland. You can\ndisplay ILUG news in"}
{"text": ">> Tuesday, May 25, 2010\n\nData Structures and Algorithms for Game Developers\n\nBy: Allen Sherrod\n\nPublisher: Course Technology PTR\n\nPub. Date: May 04, 2007\n\nPrint ISBN-10: 1-58450-495-1\n\nPrint ISBN-13: 978-1-58450-495-5\n\nPages in Print Edition: 540\n\nData Structures and Algorithms for Game Developers teaches the fundamentals of the data structures and algorithms used in game development. It provides programmers with a detailed reference to what data structures and algorithms are, and why they are so critical in game development. It teaches new game programmers, students, and aspiring game developers how to create data structures and write algorithms using C++. All key features of C++ are also covered, especially those related to game development. Additionally, a demo application is included in each chapter focusing on the data structure and/or algorithms presented in that chapter. The book covers many modern topics that game and graphics programmers must know to be successful, including geometry management techniques, and data structures and algorithms such as KD-Trees, Binary Space Partitioning Trees, Sphere Trees, etc. The code written in this book is not dependent on any specific hardware or operating system. Each chapter ends with questions, exercises, and challenges for the reader to complete in order to help them better understand and apply what they learn.\n\n>> Sunday, May 23, 2010\n\nMcGraw-Hill Science/Engineering/Math; 2 edition | ISBN: 0070131511 | 1056 pages | July 16, 2001 | CHM\nThe updated new edition of the classic Introduction to Algorithms is intended primarily for use in undergraduate or graduate courses in algorithms or data structures. Like the first edition, this text can also be used for self-study by technical professionals since it discusses engineering issues in algorithm design as well as the mathematical aspects.\nIn its new edition, Introduction to Algorithms continues to provide a comprehensive introduction to the modern study of algorithms. The revision has been updated to reflect changes in the years since the book's original publication. New chapters on the role of algorithms in computing and on probabilistic analysis and randomized algorithms have been included. Sections throughout the book have been rewritten for increased clarity, and material has been added wherever a fuller explanation has seemed useful or new information warrants expanded coverage.\n\nThis part will get you started in thinking about designing and analyzing algorithms. It is intended to be a gentle introduction to how we specify algorithms, some of the design strategies we will use throughout this book, and many of the fundamental ideas used in algorithm analysis. Later parts of this book will build upon this base. Chapter 1 is an overview of algorithms and their place in modern computing systems. This chapter defines what an algorithm is and lists some examples. It also makes a case that algorithms are a technology, just as are fast hardware, graphical user interfaces, object-oriented systems, and networks. In Chapter 2, we see our first algorithms, which solve the problem of sorting a sequence of n numbers. They are written in a pseudocode which, although not directly translatable to any conventional programming language, conveys the structure of the algorithm clearly enough that a competent programmer can implement it in the language of his choice. The sorting algorithms we examine are insertion sort, which uses an incremental approach, and merge sort, which uses a recursive technique known as \"divide and conquer.\" Although the time each requires increases with the value of n, the rate of increase differs between the two algorithms. We determine these running times in Chapter 2, and we develop a useful notation to express them. Chapter 3 precisely defines this notation, which we call asymptotic notation. It starts by defining several asymptotic notations, which we use for bounding algorithm running times from above and/or below. The rest of Chapter 3 is primarily a presentation of mathematical notation. Its purpose is more to ensure that your use of notation matches that in this book than to teach you new mathematical concepts."}
{"text": "The course is designed to help prepare students for 6.01 Introduction to EECS. 6.01 assumes some knowledge of Python upon entering; the course material for 6.189 has been specially designed to make sure that concepts important to 6.01 are covered.\n\nThis course is offered during the Independent Activities Period (IAP), which is a special 4-week term at MIT that runs from the first week of January until the end of the month.\n\nSince the Basic programming language has faded into obscurity, there is no single lingua franca across the entire PC user community to function as a default starter language, and among those distressed by Basic's passing is science fiction author David Brin. He laments that today the top one-tenth of 1 percent of students \"will go to summer camp and learn programming, but the rest may never know that the dots comprising their screens are positioned by logic, math, and human-written code.\" On the other hand, Tufts University professor Kathleen Fisher applauds the emergence of numerous programming languages. \"Different languages are good for different things, each has its own domain of discourse, and it is best if the application is in the language's domain,\" she says. Fisher cites Python as a language that is taking a vanguard position for introducing programming to a new generation of students, noting that the Massachusetts Institute of Technology and Carnegie Mellon University are using it. Python developer Vern Ceder notes that Indiana's Canterbury college prep school teaches Python \"because it is easier for kids to actually write productive code right away\n\nThe Enigma machines made their debut in short-lived peace, just following the first Great War. Enclosed in foldable wooden boxes, the devices featured series of protruding knobs and keys, resembling a cross between an antique typewriter and a laptop computer\n\nFirst, there was Mickey Mouse. Then came Mighty Mouse. Now, at the dawn of the 21st century, comes micromouse, the little robot that could. Actually, a total of 13 micromice visited the UC San Diego campus last month, for a competition pitting teams from eight universities. It was the first Southern California competition hosted by UCSD IEEE at the Jacobs School of Engineering, but Kansas State University joined in the fun too. Fittingly, UCSD teams took first and second place in the competition. UCLA came in third Hello World! provides a gentle but thorough introduction to the world of computer programming. It's written in language a 12-year-old can follow, but anyone who wants to learn how to program a computer\u2013e-mail, surfing the web, listening to music, and so forth. If you can start a program and save a file, you should have no trouble using this book.\n\nBill Hammack, also known as Engineer Guy, takes us on a detailed tour of the inner workings of the ubiquitous hard disk drive \u2014 from the Lorentz Force driven arm, to the head that floats a mere 10nm above the layered cobalt platters thanks to the wonders of aerodynamics"}
{"text": "Using Qt to Develop for Embedded Linux\n\nQt/Embedded extends the ease and speed of Qt to embedded application development.\n\nCollisions\n\nAt this stage you have a QMainWindow containing a QCanvasView\nwith a canvas that contains items, some of which may be moving. The\nnext step is to make your program more interesting by detecting\ncollisions between the items. You can get information about\ncollisions between QCanvasItems using\ncollidesWith() and\ncollisions(). collidesWith() is\nused to test if one item will collide with another particular item,\nand collisions() returns a list of all items with which a specific\nitem will collide. In the Snake game,\ncollisions() is used because the snake can collide with itself, the\nwall or the target. Listing 2 shows how collisions were handled in\nthe game.\n\nThe list of QCanvasItems that the head of the snake collides\nwith are assigned to a QCanvasItemList called ``l''. The false\nargument to collisions() specifies testing for collisions in\ninexact mode. This will return items that are near the head, but it\nworks much faster than exact mode. If the item is a useful\ncandidate, it is tested with collidesWith().\n\nThe ``for'' loop is used to iterate over the list l,\nassigning each item to a variable called ``item''. Each QCanvasItem\non the canvas can have a specified rtti() value, an integer that\nallows you to identify the items. The target's rtti() value is\n1,500, and this information was used in the if statement to test\nwhether the item in the list was the target. If it was the target,\nthe function returns; otherwise it moves on to the next if\nstatement to test whether the item is the wall. Note that this code\nsegment is for illustrative purposes only. In the actual\nSnake game, there are other if statements in\nthe for loop to handle other situations. The ``do something'' is\nreplaced with code.\n\nSignals and Slots\n\nAnother important consideration when developing any program\nis the design. Qt offers assistance with component\nprogramming--otherwise known as object-oriented\nprogramming--through its signals and slots mechanism. This is a\ngreat feature that saves a lot of time and effort, as it allows\neasy communication among the different objects in your program. It\nallows an object to emit a signal() that activates a slot() in\nanother object. Slots can be normal member functions, and\nparameters can be also be passed into them.\n\nI found this feature particularly useful when developing\nSnake. An example of the use of signals and\nslots occurs when the game ends. The snake object emits a dead()\nsignal when it collides with a wall. Then the snake's body, or the\nedges of the screen, connects to a gameOver() slot in the interface\nclass to end the game and begin a new one. The code for this is in\nsnake.cpp:\n\nIf the test of an application framework is the ability to\nquickly build professional, powerful and bug-free code, then\nQt/Embedded passes with flying colors. As an intern with fairly\nlimited programming experience, I was able to create a 2-D computer\ngame good enough to be included in the suite of applications for\nthe Qt Palmtop Environment. And I did it in under five weeks of\nactual development time. The tagline for Qt/Embedded is ``Small\nEnough for the Job''. I think that's pretty accurate. It was\npowerful, with a rich set of functionalities that made programming\nvery easy, and it took up an amazingly small amount of main memory\nand Flash. If the other tools I come across in my career are even\nhalf this good, I'll be one happy developer.\n\nNatalie Watson\n(nwatson04@optusnet.com.au) is currently a student at Griffith\nUniversity, where she is working toward a Bachelor degree in\nInformation Technology. Her programming experience includes Java\nand"}
{"text": "What are the Types of Software design Architecture?\n\nA solution that meets technical as well as operational needs while considering issues like security, manageability and performance is defined as software architecture. It is also defined as a set of rules that are needed to understand the system in terms of software elements and the relation between them. Computer science is complex. Choosing the right data structures and algorithms will initially solve the problem. But with increasing complexity in designs, the data structures and algorithms are not sufficient for a software system. Software architecture is required to design a complex system. Some common software architectural styles are pipe and filter, data abstraction and object-oriented organization, event based implicit implication, layered systems, repositories, blackboard, table-driven interpreters, heterogeneous architectures, interpreted program, client-server and peer-to-peer.\n\nWhat are the key principles of Software Architecture?\n\nSoftware architecture can be studied based on four key principles which are:\n\nEnvironment: Implementing a user-friendly environment to fix the architectural needs in all phases of a software lifecycle.\n\nExtensibility: This basically addresses the particular business needs of the user.\n\nReal Systems: Architectural diagrams are often neglected or even thrown away after the system is understood but the end result will not match the initial architecture. Hence software architecture should be able to describe the real time system and the end result must match the initial architect plan.\n\nArchitecture Styles: These can guide an architect for analyzing, building and even re-constructing a system.\n\nWhat is Pipe and Filter Architecture?\n\nIn this kind of architecture each component has a combination of inputs and outputs. The components are called filters. The input data is read and processed to form larger streams. The outputs become the inputs of the next filter in the pipeline. UNIX shell programs are the best example for pipe and filter architecture.\n\nWhat is Data Abstraction and Object-Oriented Organization?\n\nThe object-oriented approach is widely in use. Data operations and representations are encapsulated into an abstract data type or object. All the components in this architecture are represented as objects. The objects are invoked by functions and procedures. The representation is preserved by the object and it is hidden from other objects.\n\nWhat is Event-based Implicit Invocation Architecture?\n\nIn this kind of architecture, the routines or the functions are explicitly invoked for the components to interact with each other. An event can be registered by other components by connecting a procedure with the event. The system invokes all the registered procedures when an event is announced. The invocation of procedures is caused implicitly.\n\nWhat is Layered System Architecture?\n\nThis architecture operates hierarchically. Each layer only communicates with immediate layers \"above\" and \"below\" it. A few layered architecture systems have their inner layers hidden from the outer layers. But a few functions may have access to the inner layers. In these types of systems, a virtual machine is implemented at some layer. The protocols define the connectors based on the interaction of the layers.\n\nWhat is Repositories Style Architecture?\n\nThis architectural style can be classified as having two distinct types of components. The first one is the central data structure representing the present state, the other is the collection of components that are independent and operate on the central data store. Each system can have different interactions between the repository and the external components.\n\nWhat is Table-Driven Architecture?\n\nA virtual machine is produced as software in an interpreter organization. The pseudo-program includes the program and the interpreter's analog (activation record). The interpretation engine has both the definition of the interpretation engine and its current execution state. The interpreter has 4 components: an interpretation engine, a memory that contains the pseudo-code to be interpreted, a representation of the current state of the interpreter program and a representation of the interpretation engine in its control state.\n\nWhat is Heterogeneous Architecture?\n\nAll the different architectural styles can be combined to achieve heterogeneous style of architecture. Hierarchy helps to combine the architecture. The internal structure of a component may be completely different from the organized architectural style.\n\nWhat are the lesser-known Software Architectural Styles?\n\nThere are many more architectural styles; some are widely used while some are specific to the domains. The lesser-known architectural patterns can be classified as\n\nDistributed Processes: Multi-process systems are characterized by their topological feature such as the ring or the star organizations.\n\nDomain-Specific Software Architecture: These architectural styles are specifically used for vehicle management systems or avionics.\n\nMain/Subroutine Programs Organizations: Many systems are classified based on the primary language in which it is written. This may include many main programs and sub-routines.\n\nProcess Control Systems: This architecture helps to conceptualise systems that can provide dynamic control of a physical organization.\n\nState Transition Systems: A common group of architecture for the reactive systems"}
{"text": "Advances in 3D visualization and physics-based simulation technology make it possible for game developers to create compelling, visually immersive gaming environments that were only dreamed of years ago. But today's game players have grown in sophistication along with the games they play. It's no longer enough to wow your players with dazzling graphics; the next step in creating even more immersive games is improved artificial intelligence, or AI. Fortunately, advanced AI game techniques are within the grasp of every game developer--not just those who dedicate their careers to AI. If you're new to game programming or if you're an experienced game programmer who needs to get up to speed quickly on AI techniques, you'll find AI for Game Developers to be the perfect starting point for understanding and applying AI techniques to your games. Written for the novice AI programmer, AI for Game Developers introduces you to techniques such as finite state machines, fuzzy logic, neural networks, and many others, in straightforward, easy-to-understand language, supported with code samples throughout the entire book (written in C/C++). From basic techniques such as chasing and evading, pattern movement, and flocking to genetic algorithms, the book presents a mix of deterministic (traditional) and non-deterministic (newer) AI techniques aimed squarely at beginners AI developers. Other topics covered in the book include: Potential function based movements: a technique that handles chasing, evading swarming, and collision avoidance simultaneouslyBasic pathfinding and waypoints, including an entire chapter devoted to the A* pathfinding algorithmAI scriptingRule-based AI: learn about variants other than fuzzy logic and finite state machinesBasic probabilityBayesian techniques Unlike other books on the subject, AI for Game Developers doesn't attempt to cover every aspect of game AI, but to provide you with usable, advanced techniques you can apply to your games right now. If you've wanted to use AI to extend the play-life of your games, make them more challenging, and most importantly, make them more fun, then this book is for you.\n\nAI for Game Developers\n\nAuthor(s):\n\nDavid M Bourg\n\nGlenn Seemann\n\nPublisher:\n\nO'Reilly Media, Inc.\n\nPublication Date:\n\n23-Jul-2004\n\nEdition:\n\n1\n\nNumber of pages:\n\n400\n\nUser Name\n\nPassword\n\nPassword must be at least 6 characters with one alpha and one numeric characters.\n\n\"Logic will get you from A to B. Imagination will take you everywhere.\" - Albert Einstein"}
{"text": "One of the many ways that you can leverage technology to gain productivity is to bring different technologies together, such as a database and a CAD system. In the world of computer programming, this is often called integration. You might integrate your CAD system with a spreadsheet or a design program so they flow together seamlessly, or you might integrate a database into a drawing to create reports. The possibilities are only limited by the tools at your disposal and your imagination.\n\nI've been building integrated systems for a long time. It is not as easy as it often appears. There is always some subtle detail or twist that makes it a challenge. So how do you do it -- how do you get one program to talk to another program? In this edition of Harry's Code Class, I'll try to provide some direction.\n\nGetting Started\nWhen you set out to do custom programming to integrate two software platforms, the first order of business is to diagram how you want the data to flow. Draw a simple chart showing how one application will be used to supply specific data to another. This will clarify where the data is coming from (and going to) and will put a specific focus on what you need to accomplish. Sometimes the result will be just a transfer of some data in one direction. Other times you may need to interact between the applications sending some data one way, having it processed, then accepting new data back. The goal is to lay out the data interaction in a visual format that can be reviewed and studied.\n\nAfter determining which data you want to send back and forth, the next step is a little more tricky. You will need to figure out how to send and receive information between the applications. An experienced programmer will already know most of what is needed and can apply this information when describing the data flow chart. An inexperienced programmer may need to revisit the data flow chart after learning which interface tools are available, then apply any limitations discovered.\n\nIntegrating and Interfacing\nThe tools for interfacing data these days are quite wonderful. The primary tool is to pass data through files. One application writes a file that can be read by the other application. Integration is often just matter of creating a program to convert one file format to another for processing.\n\nIn the past decade, object-level interfacing has become the better solution. An object-level interface is one where a part of one application is exposed for access by other applications. That means you can literally run pieces of one program from inside another program. For example, you might link an Excel spreadsheet to AutoCAD by writing a program that opens the spreadsheet, searches it, and returns data. The tools to perform these feats are actually functions inside the Excel system that you can directly invoke, once a link has been established. For more information about incorporating libraries from other applications, see (VLAX-IMPORT-TYPE-LIBRARY) in AutoCAD's Visual LISP Help system.\n\nThe steps for object-level interfacing between AutoCAD and another application are the same no matter which programming language you are using. First you must establish a connection. Your choice of connections at this stage will depend on the other application but can be boiled down to either starting the other application fresh or finding it already running and ready.\n\nWhen a connection is established, your program will have access to an object that is used in turn to access the rest of the application. You can think of this object as a simple pointer to the other stuff. The goal is to get a pointer to what you need. That pointer may point to the other application, an open document inside the other application, or some other object buried deeper inside. From an AutoCAD perspective, think of a line in your drawing. That line is contained inside a block such as model or paper space, which in turn is inside a drawing document. The drawing document is referenced for the open documents collection inside the root AutoCAD application object. Sounds confusing, but it is like reading a road map once you get used to it.\n\nObjects are like trees, with one object holding another object like branches from a trunk. The base object is called the root. Navigating an object tree starts at the root, then climbs up the object tree to the items of interest. The items in an object tree will have properties and methods. Properties can be composed of further objects, and that is how the tree is traversed.\n\nDelving into Objects\nSo where do you look to learn more about the objects in an application? The first place is in the automation tool more commonly known as VBA (Visual BASIC for Applications).\n\nMany applications utilize VBA as a programming tool. AutoCAD is one of them. If you don't know VBA, don't despair. VBA is pretty easy to read and understand, and the Help files found in the VBA environment (just a click away when you're in AutoCAD) hold the information about the objects we are interested in learning about. Generally every VBA-related Help system has an object reference guide of some sort for the environment hosting it. Some are nicely drawn, as in AutoCAD's object model diagram found in the Help section, named ActiveX and VBA Reference. Now the issue is how to apply the information in the Help files to the language tool you are using for customization.\n\nWhen using a language that references objects in the same manner that VBA does, converting the Help file information into something your program can use is pretty easy. It simply requires that you understand how to access properties as well as invoke methods in the language you are using. The job becomes a bit more difficult when using a language that does not reference objects in the same manner. For example, Visual LISP does not support the dotted type of object referencing you see in VBA code. That does not mean Visual LISP cannot access objects -- it does have the ability to work with other object models. It is just different in how it looks, and that can slow you down at first.\n\nThere are two main areas of concern when switching the VBA-based Help information into Visual LISP. The first is to pay attention to where something exists on the object tree, and the second is to see exactly what kind of data it works with or requires. Because Visual LISP allows symbols to take on any value of any type at any time, it is easy to provide the wrong type of data when calling an externally defined method from your program. Solving the first issue -- getting the object tree linkage right -- is more direct. For that you use symbol references and add that as the first parameter to the function. The best way to learn about these things is to look for specific examples that are close to what you are trying to do. Cadalyst's new CAD Tips site has numerous examples -- try a keyword search for \"Excel\" or \"VLAX\" -- as do some of the references listed below.\n\nOne word of caution when looking at all this. It can be very version specific -- that is, upgrades of other programs could create difficulties and should be done with care. If you change a supporting module such as the spreadsheet version, you may have to update initial references (to the new folders) and some of the property or object names. The best trick is to isolate all the code that references the external object into a set of small routines that handle the basic operations. Then you can update just those isolated routines to get all your other automation utilities running after an upgrade to one of the supporting modules, such as the word processor or spreadsheet tool.\n\nLearning how to interface other applications using your knowledge of AutoCAD opens the door to other worlds. There's nothing more satisfying than watching a complete set of sheets get finished automatically by a program you created. And that may get your imagination going for even more fantastic interfaces.\n\nUntil next time, keep on programmin'.\n\nCheck out these other cool online resources that will help you understand application integration.\n\nAutodesk Technical Evangelist Lynn Allen guides you through a different AutoCAD"}
{"text": "CSE 505 Lecture Notes:\n\nAlgol\n\nIntroduction\n\nIn the late 50's, both ACM and GAMM (a European association) decided that a\nuniversal, machine-independent language would be desirable -- a language for\nthe expression of algorithms\n\nAlgol 58: an interim design. Followed by lots of discussions in the\nAlgol Bulletin\n\nAlgol 60: result of an intensive 6 day design effort by a committee in\nParis. A few revisions made; Algol 60 report published in CACM in Jan 1963.\n\nThe meetings were exhausting, interminable, and exhilarating. ... Progress\nwas steady and the output, ALGOL 60, was more racehorse than camel. This\nlanguage proved to be an object of stunning beauty. It was sufficiently\nperfect and complete so that ensuing implementations were able to append\nnecessities, such as input-output, in the style of ALGOL 60 but their\naddition propagated no significant changes in the body of the original\nlanguage.\n\nThe ALGOL 60 report (Nauer et al., 1960) was a fitting display for the\nlanguage. Nicely organized, tantalizingly incomplete, slightly ambiguous,\ndifficult to read, consistent in format, and brief, it was a perfect canvas\nfor a language that possessed those same properties. Like the Bible, it\nwas meant not merely to be read, but to be interpreted.\n\n-- Alan Perlis, \"The American Side of the Development of Algol,\"\nThe History of Programming Languages\n\nBlock Structure\n\nBlocks support structured programming:\nif x=3 then\nbegin\ny:=9; k:=10;\nend;\nIn Fortran, there can be only a single statement after a logical if:\nIF (X .NEQ. 3) GOTO 100\nY=9\nK=10\n100 ...\nAnywhere a single statement can be used, a block can be used instead.\n\nGeneral Issues/Problems\n\ngoal of machine independence led to free format\n(in contrast to assumption of 80 column punchcards in Fortran)\n\nindentation style; semicolon to separate statements\n\nUsing the semicolon as a separator is much more error prone than\nusing the semicolon as a statement terminator. (Ada takes the\nlatter approach.) For example, the following Algol code is syntactically\nincorrect:\n\nif x=4 then y:=5;\nelse y:=6;\n(The semicolon after the y:=5 actually puts a null statement\nafter the assignment, so that there are two statements after the \"then\",\nresulting in an error.)\n\n3 levels of representation:\n\nreference language (used in Algol 60 report)\n\npublication language (used for publishing algorithms -- usually\nthe same as the reference language\n\nExamples: number of characters in an identifier, number of dimensions in an\narray, number of arguments to a function\n\nAlgol obeys this principle much better than does Fortran\n\ndangling else problem\n\nif x=3 then if y=5 then z:=8 else z:=9;\nAlgol's solution: this statement illegal -- need to write\nif x=3 then\nbegin if y=5 then z:=8 else z:=9 end;\nor\nif x=3 then begin if y=5 then z:=8 end\nelse z:=9\nAnother ambiguity: are the bounds of a for loop evaluated once\nbefore executing the loop, or at the beginning of each loop execution? A\nliteral reading of the Report implies that they are evaluated\neach time; but this is inefficient and unclear.\n\nAs an example of the problems that can arise from such ambiguity, in the\nDEC System 20 implementation of SIMULA we used to have, in this loop the\nupper bound was evaluated once:\n\nfor i:=1 until n+1 do\n... but here it is in effect evaluated each time (since the code just\nreferences n directly):\nfor i:=1 until n do\nSee Donald Knuth, The Remaining Trouble Spots in ALGOL 60,\nCACM, Vol 10 No. 10, 1967.\n\nSome other problems: OWN variables, SWITCH, side effects in functions\n\nBNF developed to describe the syntax of Algol-60\n\nlabels, procedures, and strings are not first-class citizens\nin Algol 60\n\nno I/O statements\n\nEpilog\n\nAlgol-60 didn't achieve widespread use\n\nIn the USA,\nBurroughs supported Algol-60, but IBM supported FORTRAN\n\nAlgol-60 is extremely important language in the history of programming\nlanguages\n\nMany successors: Pascal, Modula-2, Ada, Euclid, Mesa, Emerald, ...\n\nLots of good work done on lexical analysis, parsing, compilation techniques.\nfor block-structured languages, etc; this is still relevant."}
{"text": "Description: This fast-paced course will equip you with the essentials of Android development. The course describes the fundamentals of Android architecture and works through core components of Android development using the Android tools. The course includes numerous labs to reinforce learning. The course concludes with a discussion on how to package and publish an Android Application in the Android Market or on a Web site.\n\nAudience: This course is for Java Developers interested in learning how to develop Android applications.\n\nPrerequisites: Java development proficiency and familiarity with Eclipse IDE.Familiarity with SQL is helpful but not required\n\nObjectives:\n\nLearn the essentials of the Android Platform.\n\nWork with the tools for Android development.\n\nUnderstand the Android application architecture.\n\nDevelop Android applications.\n\nAccess files and database storage in Android applications.\n\nLearn how to package and publish an Android application in the Android Market on a web site."}
{"text": "Cloud computing is often described as providing computing resources the way electric utilities provide energy. In theory, anyone with an adequate connection to the Internet should be able to tap into a cloud provider and get exactly the computing resources they want when they want it, just like plugging into the electricity grid and getting... more...\n\nOptimize code for multi-core processors with Intel's Parallel Studio Parallel programming is rapidly becoming a \"must-know\" skill for developers. Yet, where to start? This teach-yourself tutorial is an ideal starting point for developers who already know Windows C and C++ and are eager to add parallelism to their code. With a focus on applying tools,... more...\n\nConcurrent and Distributed Computing in Java addresses fundamental concepts in concurrent computing with Java examples. The book consists of two parts. The first part deals with techniques for programming in shared-memory based systems. The book covers concepts in Java such as threads, synchronized methods, waits, and notify to expose students to basic... more...\n\nThere is a significant difference between designing a new algorithm, proving its correctness, and teaching it to an audience. When teaching algorithms, the teacher's main goal should be to convey the underlying ideas and to help the students form correct mental models related to the algorithm. This process can often be facilitated by using suitable... more...\n\nIn this introductory text, the fundamental algorithms of numerical linear algebra are developed in a parallel context. Topics include direct and iterative methods for solving linear systems, numerical methods for the eigenvector/eigenvalue problem and applications to Monte Carlo methods. more...\n\nThis text provides an excellent balance of theory and application that enables you to deploy powerful algorithms, frameworks, and methodologies to solve complex optimization problems in a diverse range of industries. Each chapter is written by leading experts in the fields of parallel and distributed optimization. Collectively, the contributions serve... more...\n\nToday, parallel computing experts can solve problems previously deemed impossible and make the \"merely difficult\" problems economically feasible to solve. This book presents and synthesizes the recent experiences of reknown expert developers who design robust and complex parallel computing applications. They demonstrate how to adapt and implement... more...\n\nThis volume gives an overview of the state-of-the-art with respect to the development of all types of parallel computers and their application to a wide range of problem areas. The international conference on parallel computing ParCo97 (Parallel Computing 97) was held in Bonn, Germany from 19 to 22 September 1997. The first conference in this biannual... more...\n\nA comprehensive overview of the current evolution of research in algorithms, architectures and compilation for parallel systems is provided by this publication. The contributions focus specifically on domains where embedded systems are required, either oriented to application-specific or to programmable realisations. These are crucial in domains such... more...\n\nAdvances in Parallel Computing series presents the theory and use of of parallel computer systems, including vector, pipeline, array, fifth and future generation computers and neural computers. This volume features original research work, as well as accounts on practical experience with and techniques for the use of parallel computers. more..."}
{"text": "NOTE: Storytelling Alice is no longer supported. It is available for download because we still receive some requests and because it provides a glimpse of some of the ideas influencing the design of Alice 3. But, use at your own risk.\n\nJavaScript is the third and final pillar of modern web development (the other two being HTML and CSS). It's what makes the modern Web the interactive, animated, vibrant place that it is! No wonder so many web developers are finally getting around to learning it.\n\n(formerly BYOB) is a visual, drag-and-drop programming language. It is an extended reimplementation of Scratch (a project of the Lifelong Kindergarten Group at the MIT Media Lab) that allows you to Build Your Own Blocks. It also features first class lists, first class procedures, and continuations.\n\nAre you a student trying to learn the Java language or a professional seeking to expand your skill set? If you are feeling a bit overwhelmed by the breadth of the Java platform, here are a few suggested learning paths to help you get the most from your Java learning experience. New To Java"}
{"text": "So I've been palying around with the Android SDK. I've done a bit of developing before, but never in Java. The Android APIs are pretty well documented, but I'm missing the basics of Java programming (data types, declaring variables and constants, file operations, etc.).\n\nDoes anyone have any suggested references? I've been digging some myself but it's slow going.\n\nThe thing with programming textbooks is no one can ever agree on what book is \"best\". Some people like books that are basically just giant lists of functions and their syntaxes, some people like books with a lot of examples, some people like books that primarily explain the most basic functions in plain English. Some folks don't like to use books at all and learn programming purely from studying others' source code.\n\nA lot of the Java-specific books written in the past decade are written without requiring pre-existing knowledge of C++, which would be good if you have never programmed in any language before. I think the \"Headfirst Java\" volume is supposed to be well-regarded, but I can't say that from personal experience.\n\nOf course, you could always just find your local community college/adult school/vocational center and sign up for Java classes. Some community colleges might place Java far down in the CS track and make you take prerequisite courses. Depending on how the course is set up, what text it uses, and how much ground it intends to cover, it may or may not have prerequisites"}
{"text": "Hadoop Fundamentals LiveLessons (Video Training)\n\nApache Hadoop is a freely available open source tool-set that enables big data analysis. This Hadoop Fundamentals LiveLessons tutorial demonstrates the core components of Hadoop including Hadoop Distriuted File Systems (HDFS) and MapReduce. In addition, the tutorial demonstrates how to use Hadoop at several levels including the native Java interface, C++ pipes, and the universal streaming program interface.\n\niOS Auto Layout Demystified\n\nIn iOS Auto Layout Demystified, Erica Sadun, bestselling author of The Core iOS 6 Developer's Cookbook and The Advanced iOS 6 Developer's Cookbook, helps readers learn how to use Auto Layout effectively, even masterfully, by providing an abundance of examples alongside plenty of explanations and tips. Instead of struggling with class documentation, you learn in simple steps how the system works and why it's far more powerful than you first imagined.\n\nThe Web Game Developer's Cookbook: Using JavaScript and HTML5 to Develop Games\n\nWant to start building great web games with HTML5 and JavaScript? Moving from Flash or other game platforms? Already building HTML5 games and want to get better and faster at it? The Web Game Developer's Cookbook brings together everything you need: expert guidance, sample projects, and working code!"}
{"text": "\"Thinking in Java should be read cover to cover by every Java programmer, then kept close at hand for frequent reference. The exercises are challenging, and the chapter on Collections is superb! Not only did this book help me to pass the Sun Certified Java Programmer exam; it's also the first book I turn to whenever I have a Java question.\" --Jim Pleger, Loudoun County (Virginia) Government\"Much better than any... (more)\n\nPortable, powerful, and a breeze to use, Python is ideal for both standalone programs and scripting applications. With this hands-on book, you can master the fundamentals of the core Python language quickly and efficiently, whether you're new to programming or just new to Python. Once you finish, you will know enough about the language to use it in any application domain you choose. Learning Python is based on in Scala is the definitive book on Scala, the new language for the Java Platform that blends object-oriented and functional programming concepts into a unique and powerful tool for developers. Coauthored by the designer of the Scala language, this authoritative book will teach you, one step at a time, the Scala language and the ideas behind it. The book is carefullyThe world's leading programming author offers comprehensive coverage of the new Java release The definitive guide to Java has been fully expanded to cover every aspect of Java SE 6, the latest version of the world and the most popular Web programming language. This comprehensive resource contains everything you need to develop, compile, debug, and run Java applications and applets. This comprehensive reference... (more)\n\nThe new classic! C Primer Plus ,... (more)\n\nAlready the industry standard for Python users, Programming Python from O'Reilly just got even better. This third edition has been updated to reflect current best practices and the abundance of changes introduced by the latest version of the language, Python 2.5. Whether you're a novice or an advanced practitioner, you'll find this refreshed book more than lives up to its reputation. Programming ... (more)\n\nB> This best-selling guide to Prolog has been fully revised and extended to provide an even greater range of applications, enhancing its value as a stand-alone guide to Prolog, artificial intelligence, or AI programming. Ivan Bratko discusses natural language processing with grammar rules, planning, and machine learning. The coverage of meta-programming includes meta-interpreters and object-oriented... (more)\n\n3rd Edition.A new edition of this title is available, ISBN-10: 0672329387 ISBN-13: 9780672329388 For years, MySQL has been helping MySQL developers and database administrators learn their MySQL system inside and out. This newest edition has been updated to include information on MySQL 5 and it will prove itself again to you as being the most definitive reference guide to using, administering and... (more)\n\n55 Specific Ways to Improve Your Programs and Designs -- Steve Schirripa, Software Engineer, Google\"C++ and the C++ community have grown up in the last fifteen years, and the third edition of Effective C++ reflects this. The clear and... (more)\n\nThe second edition of Haskell: The Craft of Functional Programming is essential reading for beginners to functional programming and newcomers to the Haskell programming language. The emphasis is on the process of crafting programs and the text contains many examples and running case studies, as well as advice an program design, testing, problem solving and how to avoid common pitfalls. Building on the... (more)\n\nC++ in a Nutshell packs an enormous amount of information on C++ (and the many libraries used with it) in an indispensable quick reference for those who live in a deadline-driven world and need the facts but not the frills. The book's language reference is organized first by topic, followed by an alphabetical reference to the language's keywords, complete with syntax summaries and pointers to the topic... (more)\n\n35 New Ways to Improve Your Programs and Designs\n\nPraise for Scott Meyers' first book, Effective C++: \"I heartily recommend Effective C++, to anyone who aspires to mastery of C++ at the intermediate level or above.\" -- The C/C++ User's Journal From the author of the indispensable Effective C++, here are 35 new ways to improve your programs and designs. Drawing on years of experience, Meyers explains how to write software that is more effective: more efficient,... (more)\n\n50 Specific Ways to Improve Your Use of the Standard Template Library\n\n(Pearson Education) Explains STL, Standard Template Library, and how to use it. Offers STL programmes at varying levels of skill techniques to master the efficiency of STL and STL programs, with insights into functions, allocators, and iterators, among other concepts. Softcover. DLC: C++ (Computer program language).\n\nby Michel Goossens, Alexander Samarin, Frank Mittelbach\n\nThis companion to Lamport's LaTeX book introduces tools and techniques that will enhance your use of LaTeX and help you format documents more quickly and more efficiently. After positioning standard LaTeX in the framework of the TeX program and its associated utilities, the author shows how to customize commands and environments to suit your needs.\n\nProgramming in ANSI C, presents a detailed exposition of C in an extremely simple and lucid style that has now become the hallmark of this book. As always, the concept of 'learning by example' has been stressed throughout this book. The various features of the language have been systematically discussed including the new features added to C99.Salient features: * Codes with comments are provided... (more)"}
{"text": "He maintains a web site and support forum for Programming in Objective-C 2.0 at classroomm.com/objective-c\n\nTHE #1 BESTSELLING BOOK ON OBJECTIVE-C 2.0\n\nProgramming in Objective-C 2.0 provides the new programmer a complete, step-by-step introduction to Objective-C, the primary language used to develop applications for the iPhone, iPad, and Mac OS X platforms.\n\nThe book does not assume previous experience with either C or object-oriented programming languages, and it includes many detailed, practical examples of how to put Objective-C to use in your everyday iPhone/iPad or Mac OS X programming tasks.\n\nA powerful yet simple object-oriented programming language that's based on the C programming language, Objective-C is widely available not only on OS X and the iPhone/iPad platform but across many operating systems that support the gcc compiler, including Linux, Unix, and Windows systems.\n\nThe second edition of this book thoroughly covers the latest version of the language, Objective-C 2.0. And it shows not only how to take advantage of the Foundation framework's rich built-in library of classes but also how to use the iPhone SDK to develop programs designed for the iPhone/iPad platform.\n\nThis book is both comprehensive and easy to understand. The sequence of chapters chosen to be read chronologically is well thought out (e.g. having the reader use static data types before introducing the generic id type, or having the reader declare and implement accessor methods before introducing the property and synthesize directives). The end of chapter exercises are also short (i.e. quick to complete) but also thoughtfully designed.\n\nThe author chose to make this book serve not only as a reference, but as a tutorial. In other words, a bit like the \"... for Dummies\" series in its hand-holding (i.e. tutorial) style. However, this book is certainly not for \"dummies\" as the author does not assume the reader to be slow or requiring interjections of humor or casualness. Other books will have authors write things like \"Now grab a slice of pizza before we hit this really hard subject!\", but this author thankfully spares the reader of this. Kochan is concise and direct...\nRead more\n\nI am a web designer and developer and I've programmed in a lot of languages (i.e. HTML, javascript, actionscript, visual basic, etc.). I wanted to learn Objective-C as the quickly as I could. I quickly found out that not having experience in programming in C (the predecessor to Objective-C) made it hard to understand the reasoning behind the code syntax and finding resources that didn't assume I knew C was almost impossible...\n\nAfter going through the first three chapters of this book in less than an hour, my confidence in the language has increased exponentially. The book is roughly 624 pages, but I feel like I could code the samples and finish the book in just a few days...\n\nThe book is organized into four main sections: I: The Objective-C 2.0 Language II: The Foundation Framework III: Cocoa and the iPhone SDK IV: Appendixes\n\nThe separation of these main topics, Objective-C Language features and the Foundation Framework for example,...\nRead more\n\nNote: Typos have been fixed since the edition I originally purchased. I've kept my original review below, which was influenced by the number of typos and formatting glitches I encountered in the original edition. Now that it's all been rectified, there is NO BETTER BOOK for learning Objective-C 2.0 than this book.\n\nI'd love to recommend this book as the gateway to learning to program Mac OS X applications, but unfortunately I cannot. It contains more than a few typographical errors, especially in the first few chapters. Those new to programming in C may end up confused and unable to understand why their programs will not compile. This is unacceptable for this type of book.\n\nBeyond typos, my second gripe is the lack of exercise solutions. This book provides challenging exercises at the end of each chapter that are designed to hone your skills and solidify your understanding"}
{"text": "The book \"Foundational Theories of Classical and Constructive Mathematics\" is a book on the classical topic of foundations of mathematics. Its originality resides mainly in its treating at the same time foundations of classical and foundations of constructive mathematics. This confrontation of two kinds of foundations contributes to answering... more...\n\nA thorough, accessible, and rigorous presentation of the central theorems of mathematical logic . . . ideal for advanced students of mathematics, computer science, and logic Logic of Mathematics combines a full-scale introductory course in mathematical logic and model theory with a range of specially selected, more advanced theorems. Using a strict... more...\n\nThinking of making the switch from your PC to a Mac? Congratulations! You're in for a great, virus-free ride. And Switching to Mac For Dummies makes it smoother than you ever imagined. From buying the Mac that's right for you to transferring your files to breaking your old Windows habits and learning to do things the (much easier) Mac... more...Over 50 and thinking about getting your first computer? A user-friendly Mac is a great choice, and Macs For Seniors For Dummies walks you through choosing one and learning to use it. You won't even need your grandchildren to help! Macs For Seniors For Dummies introduces you to all the basic things you may not have encountered before\u2014how... more...\n\nKeep your Mac running smoothly with our easy maintenance program!, whether you use TigerThis book introduces SpecDB, an intelligent database created to represent and host software specifications in a machine-readable format, based on the principles of artificial intelligence and unit testing database operations. SpecDB is demonstrated via two automated intelligent tools. The first automatically generates database constraints from a rule-base... more..."}
{"text": "Data Structures Outside In with Java ( Uploaded - Rapidgator )\n\nThis innovative new book encourages readers to utilize the \"Outside-In\" approach to learning the use, design and implementation of data structures. The author introduces every data structure by first narrating its properties and use in applications (the \"outside\" view). This provides a clear introduction to data structures with realistic context where it is used. Venugopal then details how to build data structures (the \"inside\" view); readers learn how to evaluate usability, flexibility, extensibility, and performance in designing and implementing classic data structures.\n\nDiscover WTP, the New End-to-End Toolset for Java-Based Web Development The Eclipse Web Tools Platform (WTP) seamlessly integrates all the tools todays Java Web developer needs. WTP is both an unprecedented Open Source resource for working developers and a powerful foundation for state-of-the-art commercial products.\n\nThis book introduces programmers to objects at a gradual pace. The syntax boxes are revised to show typical code examples rather than abstract notation. This includes optional example modules using Alice and Greenfoot. The examples feature annotations with dos and donts along with cross references to more detailed explanations in the text. New tables show a large number of typical and cautionary examples. New programming and review problems are also presented that ensure a broad coverage of topics. In addition, Java 7 features are included to provide programmers with the most up-to-date information.\n\nGreenfoot is a programming environment that can be used by individuals, in schools or in introductory university courses to learn and teach the principles of programming. It is flexible enough to be suitable for teenagers as well as older students.\n\nSams Teach Yourself Java 6 in 21 Days ( Rapidgator - Uploaded )\n\nIn just 21 days, you can acquire the knowledge and skills necessary to develop three kinds of programs with Java: applications on your computer, servlets on a web server, and browser-launched Java Web Start applications.\n\nBy emphasizing the application of computer programming not only in success stories in the software industry but also in familiar scenarios in physical and biological science, engineering, and applied mathematics, Introduction to Programming in Java takes an interdisciplinary approach to teaching programming with the Java\u2122 programming language.\n\nA hands-on guide to creating Rich Internet Applications (RIA) using BlazeDS. BlazeDS enables you to easily connect to back-end distributed data and push data in real time to Adobe Flex and Adobe AIR applications in order to garner more responsive Rich Internet Application (RIA) experiences. It is a scalable option for Flex and Java integration and allows you to create excellent RIAs with both Flex and Java.\n\nA Little Java, A Few Patterns ( Rapidgator - Ul )LWUIT 1.1 for Java ME Developers ( Uploaded - Rapidgator )\n\n\u2022 Create great user interfaces for mobile devices \u2022 Make your applications stand out with dazzling graphics that look and behave the same on different mobile devices \u2022 Log information on the runtime behavior of your program \u2022 Write applications with attractive visual effects like transitions and animations \u2022 Use localization so that your applications can adapt to different languages and locales\n\nBuild and deploy powerful, useful, and professional Java mobile applications for BlackBerry smartphones, the fast and easy way. Develop professional, rich, and smart Java applications using BlackBerry SDK Discover the powerful components provided by the SDK to build a powerful user interface with a common look and feel Explore the complex, but important, topic of network communications Integrate with the standard applications on all BlackBerry Smartphone to make your application even more useful Packed with hands-on examples and clear explanations for better understanding\n\nData Structures with Java (2nd edition) ( Rapidgator - Uploaded )\n\nFortunately for you, theres Schaums Outlines. More than 40 million students have trusted Schaums to help them succeed in the classroom and on exams. Schaums"}
{"text": "Wikipedia in English\n\nWritten for any developer with just a little C/C++ knowledge, Apple Computer's Learning Carbon provides an excellent introduction to the world of Mac development using the Carbon C API--which underlies the new Mac OS X--for creating state-of-the-art applications on this exciting new platform.\n\nThe focus of this book is to introduce the key tools and APIs you'll need to start writing Mac programs in C. The authors use a (rather fanciful) \"Moon Travel Planner\" application as the focus of this text. Beginning with hand-drawn mockups of the various screens in this simple program, they walk the reader through the steps required to bring the design to life. While providing enough background material for various APIs, there are plenty of step-by-step, hands-on exercises here for getting you started with development on today's Mac OS X platform.\n\nEarly sections look at the organization of Mac applications using the Project Builder tool. From here, it's on to designing the look and feel of the application using the Interface Builder tool. You'll learn basic resource design, from setting window properties to adding basic controls and creating menus. While this is extremely friendly material, other sections look at the nitty-gritty of programming with Carbon events, which is more difficult. (The authors will help get you started successfully with event handling. An appendix contains a listing of Carbon events and constants.)\n\nSubsequent enhancements to the travel planner application include printing support (also an in-depth topic with sample code for basic printing support), file I/O (for saving and loading files), plus adding help files and even localization support (for bringing programs to international markets). Later sections cover the basics of integrating your new application into the desktop, including adding icons and properties.\n\nWhile Carbon programming is undoubtedly a huge topic, this lively introduction can help new C/C++ programmers get started with development on the new Mac OS X, with or without previous Macintosh experience. Always clearly presented, this book is a great place to start with programming for today's Mac. --Richard Dragan"}
{"text": "Detaljer om varen\n\nA brand new edition of the world's most admired,introduction to object-oriented analysis and design with UMLFully updated for UML 2 and the latest iterative/agile practicesIncludes an all-new case study illustrating many of the book's key points\n\n\"Applying UML and Patterns is the world's #1 business and college introduction to \"thinking in objects\"--and using that insight in real-world object-oriented analysis and design. Building on two widely acclaimed previous editions, Craig Larman has updated this book to fully reflect the new UML 2 standard, to help you master the art of object design, and to promote high-impact, iterative, and skillful agile modeling practices.\n\nDevelopers and students will learn object-orientedanalysis and design (OOA/D) through three iterations of two cohesive, start-to-finish case studies. These case studies incrementally introduce key skills, essential OO principles and patterns, UML notation, and best practices. You wo\n\n\"This edition contains Larman's usual accurate and thoughtful writing. It is a very good book made even better.\" --Alistair Cockburn, author, \"Writing Effective Use Cases and \"Surviving OO Projects\"\n\nToo few people have a knack for explaining things. Fewer still have a handle on software analysis and design. Craig Larman has both.\" --John Vlissides, author, \"Design Patterns and \"Pattern Hatching\"\n\nPeople often ask me which is the best book to introduce them to the world of OO design. Ever since I came across it Applying UML and Patterns has been my unreserved choice.\" --Martin Fowler, author, \"UML Distilled and \"Refactoring\"\n\nThis book makes learning UML enjoyable and pragmatic by incrementally introducing it as an intuitive language for specifying the artifacts of object analysis and design. It is a well written introduction to UML and object methods by an expert practitioner.\" --Cris Kobryn, Chair of the UML Revision Task Force and UML 2.0 Working Group\n\nForeword Preface I. INTRODUCTION 1. Object-Oriented Analysis and Design. What Will You Learn? Is it Useful?The Most Important Learning Goal?What is Analysis and Design?What is Object-Oriented Analysis and Design?A Short Example. What is the UML?Visual Modeling is a Good Thing. History. Recommended Resources. 2. Iterative, Evolutionary, and Agile. What is the UP? Are Other Methods Complementary?What is Iterative and Evolutionary Development?What About the Waterfall Lifecycle?How to do Iterative and Evolutionary Analysis and Design?What is Risk-Driven and Client-Driven Iterative Planning?What are Agile Methods and Attitudes?What is Agile Modeling?What is an Agile UP?Are There Other Critical UP Practices?What are the UP Phases?What are the UP Disciplines?How to Customize the Process? The UP Development Case. You Know You Didn't Understand Iterative Development or the UP When. History. Recommended Resources. 3. Case Studies. What is and isn't Covered in the Case Studies?Case Study Strategy: Iterative Development + Iterative Learning. Case One: The NextGen POS System. Case Two: The Monopoly Game System. II. INCEPTION. 4. Inception is Not the Requirements Phase. What is Inception?How Long is Inception?What Artifacts May Start in Inception?You Know You Didn't Understand Inception When. How Much UML During Inception?5. Evolutionary Requirements. Definition: Requirements. Evolutionary vs. Waterfall Requirements. What are Skillful Means to Find Requirements?What are the Types and Categories of Requirements?How are Requirements Organized in UP Artifacts?Does the Book Contain Examples of These Artifacts?Recommended Resources. 6. Use Cases. Example. Definition: What are Actors, Scenarios, and Use Cases?Use Cases and the Use-Case Model. Motivation: Why Use Cases?Definition: Are Use Cases Functional Requirements?Definition: What are Three Kinds of Actors?Notation: What are Three Common Use Case Formats?Example: Process Sale, Fully Dressed Style. What do the Sections Mean?Notation: Are There Other Formats? A Two-Column Variation. Guideline: Write in an Essential UI-Free Style. Guideline: Write Terse Use Cases. Guideline: Write Black-Box Use Cases. Guideline: Take an Actor and Actor-Goal Perspective. Guideline: How to Find Use Cases. Guideline: What Tests Can Help Find Useful Use Cases?Applying UML: Use Case Diagrams. Applying UML: Activity Diagrams. Motivation: Other Benefits of Use Cases? Requirements in Context. Example: Monopoly Game. Process: How to Work With Use Cases in Iterative Methods?History. Recommended Resources. 7. Other Requirements. How Complete are these Examples?Guideline: Should We Analyze These Thoroughly During Inception?Guideline: Should These Artifacts be at the Project Website?NextGen Example: (Partial) Supplementary Specification. Commentary: Supplementary Specification. NextGen Example: (Partial) Vision. Commentary: Vision. NextGen Example: A (Partial) Glossary. Commentary: Glossary (Data Dictionary). NextGen Example: Business Rules (Domain Rules). Commentary: Domain Rules. Process: Evolutionary Requirements in Iterative Methods. Recommended Resources. III. ELABORATION ITERATION 1-BASICS. 8. Iteration 1-Basics. Iteration 1 Requirements and Emphasis: Core OOA/D Skills. Process: In"}
{"text": "How Debuggers Work: Algorithms, Data Structures, and Architecture\n\nA total guide to debuggers: what they do, how they work, and how to use them to produce better programs\n\n\"Debuggers are the magnifying glass, the microscope, the logic analyzer, the profiler, and the browser with which a program can be examined.\"-Jonathan B. Rosenberg\n\nDebuggers are an indispensable tool in the development process. In fact, during the course of the average software project, more hours are spent debugging software than in compiling code. Yet, not many programmers really know how to constructively interpret the results they get back from debuggers. And even fewer know what makes these complex suites of algorithms and data structures tick. Now in this extremely accessible guide, Jonathan B. Rosenberg demystifies debuggers for programmers and shows them how to make better use of debuggers in their next projects.\n\nTaking a hands-on, problem-solving approach to a complex subject, Rosenberg explains how debuggers work and why programmers use them. Most importantly, he provides practical discussions of debugger algorithms and procedures for their use, accompanied by many practical examples. The author also discusses a wide variety of systems applications, from Microsoft's Win32 debug API to a large parallel architecture.\n\nVisit our Web site at: \n\nBiography\n\nJONATHAN B. ROSENBERG, author, manages the development of software tools at Borland International"}
{"text": "2013-05-19T08:13:25ZIntroducing Social Media\nTitle: Introducing Social Media\nAuthors: Spencer, Barry\nAbstract: Social media is a term that has established itself in our common vocabulary in recent years. Do you make use of social media in your private or business life perhaps both? How would you define social media though? For the answer to these and other questions please proceed.\nDescription: Essentially then, social media incorporates the online technologies and methods through which people can share content, personal opinions, swap different perspectives and insights into world issues and generally discuss the evolution of media in itself.2011-10-11T00:00:00ZExpressions and statements in Java\nTitle: Expressions and statements in Java\nAuthors: Spencer, Barry\nAbstract: A review with examples of statements and expressions associated with the Java language2011-03-31T00:00:00ZIntroducing Java Methods\nTitle: Introducing Java Methods\nAuthors: Spencer, Barry\nAbstract: An introduction to methods in Java2011-03-31T00:00:00ZIntroducing Java\nTitle: Introducing Java\nAuthors: Spencer, Barry\nAbstract: An introduction to the Java language2011-03-31T00:00:00Z"}
{"text": "PAscal Archive\n\nSome people truly have the fire in them, fire to do something new; and that changes the way future generations function. A generation back when any geek wanted to learn programming the first step towards learning programming was to learn Turbo Pascal and than slowly we got multiple languages and platforms but not to forget \u2013 Turbo Pascal was the revolution in itself and all modern languages drew inferences from working of Pascal. The man behind Pascal and some other commercially successful programming languages is none other than Anders Hejlsberg. Who is Anders Hejlsberg? Anders is a software engineer born...\n\nDifference Between Procedure Oriented Programming (POP) & Object Oriented Programming (OOP) Procedure Oriented Programming Object Oriented Programming Divided Into In POP, program is divided into small parts called functions. In OOP, program is divided into parts called objects. Importance In POP,Importance is not given to data but to functions as well as sequence of actions to be done. In OOP, Importance is given to the data rather than procedures or functions because it works as a real world. Approach POP follows Top Down approach. OOP follows Bottom Up approach. Access Specifiers POP does not have any access specifier. OOP has..."}
{"text": "OpenGL distilled, released March 2006, is a concise book about the essential, commonly used features of modern OpenGL. Considering OpenGL is the only graphics standard really widely used on Linux and Unix systems, where DirectX does not venture, such a guide is very useful indeed.\n\nOpenGL Distilled provides the fundamental information needed to start programming 3D graphics, from setting up an OpenGL development environment to creating realistic textures and shadows. This book teaches the essential and most-often-used features of OpenGL 2.0, as well as the best coding practices and troubleshooting tips."}
{"text": "Java 6 Programming Essentials Using Helios Eclipse\n\nSummary: This course will introduce the student to the Java programming language using the Java EE Helios Eclipse. Through hands-on exercises, the student will become familiar with the Java syntax and the object oriented approach that this language utilizes. It is based on the new Java 1.6\n\nDuration: 5 Days/Lecture & Lab\n\nAudience: This course is designed for new Java programmers who have not previously programmed in an object-oriented language. The course can also run in RAD, Java EE Helios Eclipse, WebLogic Workshop, and JDeveloper.\n\nTopics:\n\nBasic Java syntax (data types, operators, control statement)\n\nObject-oriented programming in Java\n\nUML notation - Class Diagram\n\nUsing Collections Framework\n\nUsing Exceptions\n\nNavigating Sun's API documentation\n\nGenerics and Collections Framework\n\nVarargs\n\nPrerequisites: The student must be familiar object oriented programming and with basic programming concepts with prior programming experience in at least one language (COBOL, Visual Basic, C, etc.)."}
{"text": "This is one among the fully grown up department with a state-of-the-art curriculum and unique study methodology. The department helps the students in grasping and enhancing the skills to survive today's complex and competitive world as software and hardware experts.\n\nLabs at a Glimpse\n\nSoftware Lab: Computer laboratory is well equipped with most modern software and multimedia facilities for catering the need for software maneuvering. All systems are interconnected through LAN with an HP net server working on Intel Xeon processor and Windows operating system.\n\nComputer LanguageLab: Students are introduced to the programming world with C. Theoretical sessions are arranged in parallel with it. Advanced concepts are separately handled by veterans in the field. Exposure to graphics using C makes each student aware of the core concept thoroughly.\n\nData Structure Lab: Using JAVA students maneuver the advanced concepts of data structures. Programs to perform all the basic operations on data structures are done. Apart from this each student is asked to submit a dozen of programs based on the same.\n\nCompiler Construction Lab: In this lab, the students master creations of compilers and assemblers. Lex and Yacc programs are written using the VI editor. As such the lab also gives a basic awareness of the Linux commands.\n\nOperating System Lab: This lab equipped with 50 Linux machines supported by a Linux server provides students training in client server programming and OS level programs like inter Process communication.\n\nOOP Lab: exposure to the fast growing and ever green Object Oriented world is given through this lab. Solid foundation in the field is given with C++ as the platform."}
{"text": "Millions of public Twitter streams harbor a wealth of data, and once you mine them, you can gain some valuable insights. This short and concise book offers a collection of recipes to help you extract nuggets of Twitter information using easy-to-learn Python tools. Each recipe offers a discussion of how and why the solution works, so you can quickly... more...\n\nGetting started with MongoDB is easy, but once you begin building applications with it, you'll face some complex issues. What are the tradeoffs between normalized and denormalized data? How do you handle replica set failure and failover? This collection of MongoDB tips, tricks, and hacks helps you resolve issues with everything from application design... more...\n\nA comprehensive reference for addressing in a TCP/IP environment. This volume presents an overview of the binary numbering system and detailed information on such topics as: subnetting; network address translation; and the transfiguration of workstations, servers and routers. more...,... more... ACT! 2006 For Dummies is the friendly new guide to the latest version of ACT! This straightforward,...Absolute Beginner's Guide to Databases brings the elements of a database together using easy to understand language, perfect for the true beginner. It not only gives specific hands on practice, but also provides an overview of designing, maintaining and using a database. This book covers what databases are used for, why databases are important,... more...\n\nMicrosoft Access 2002 is a powerful, relational database software package that makes it easy to create and manage complex databases. With Access, users can create a database quickly from scratch or by using an Access database Wizard. Once the database is created, Access provides all the tools needed to enter and manipulate data. With the help of the... more..."}
{"text": "Getting started with Cocos2d can seem a bit intimidating since there are so many things to learn.\n\nThis two part tutorial should help you tackle the Cocos2d learning curve and get you rolling towards creating an iPhone app you can publish in the Apple App store.\n\nOverview of this two-part tutorial: Getting Started with Cocos2d and Chipmunk\n\nPart 1: In part 1 (this post) you will learn how to get Cocos2d, install the Cocos2d Xcode templates, and create your first Cocos2d + Chipmunk app. We then walk though some of the basics of Cocos2d and Chipmunk.\n\nPart 2: In Part 2, you learn about how the basic building blocks work in Cocos2d such as sprites, buttons, and labels and how the basic Chipmunk building blocks such as bodies and shapes can be used. The complete code of the HelloWorld interface and implementation files of the app created in Part 1 are discussed in great detail.\n\nWhat is Cocos2d?\n\nCocos2d 2.0 is an open source video game engine capable of creating a large variety of genres of two dimensional video games. It is built on top of OpenGL ES 2.0 and is packed full of features.\n\nOne great thing about Cocos2d is that it is designed as a layer of abstraction between the developer and OpenGL ES and it is possible to create a great game without knowing anything about OpenGL.\n\nCocos2d is free to download and use for personal or commercial purposes. It requires that you have Xcode and are familiar with the Xcode integrated development environment and Objective C 2.0. You don't have to be a master at these to get up and running with Cocos2d, but a basic understanding is required. If you do not already have XCode or need a primer tutorial on using Xcode, check out this article about downloading and getting to know Apple's XCode integrated development environment.\n\nIt is important to note that at the time of this writing Cocos2d has branched into two versions: Cocos2d 1.0.1 and Cocos2d 2.0 rc2. The major differences between Cocos2d 1.0.1 and Cocos2d 2.0 rc2 is that the 1.0.1 version is based on OpenGL ES 1.1 and the Cocos2d 2.0 rc2 is based on OpenGL ES 2.0. The 2.0 version requires a minimum target iOS of 4.0. While version 2.0 is officially considered an unstable build, it will very soon be released as a stable version if no serious issues are identified with it. Heyalda has published the game All Star Rally using Cocos2d 2.0 rc2 as a foundation and the game is quite stable.\n\nNot related to this article, but worth mentioning, is that Cocos2d is built on top of OpenGL ES and it is possible to add 3d features to your game. This can be done via custom OpenGL ES code or by leveraging the Cocos3d add-on for Cocos2d that was created by The Brenwill Workshop.\n\nDownloading and setting up Cocos2d 2.0\n\nFor this series of articles on building a game with Cocos2d, the Cocos2d 2.0 rc2 version will be used.\n\nThe following steps can be followed to download Cocos2d 2.0 rc2 and install the Cocos2d Xcode 4 templates that enable Xcode to automatically create the baseline code for three different types of Cocos2d apps.\n\n1) Create a folder in a convenient location on your mac titled Cocos2d. When future updates of Cocos2d are released, you can repeat these steps to get the latest version.\n\n2) Download Cocos2d here. Be sure to get the Cocos2d 2.x version if you want to follow along in this tutorial.\n\n3) Move the cocos2d-iphone-2.0-rc2.tar.gz file to the Cocos2d folder created in step 1 and double-click the cocos2d-iphone-2.0-rc2.tar.gz file to un-tar and decompress it.\n\n4) Open a terminal window located in the Dock under Applications->Utilities->Terminal.app\n\n5) Drag the install-templates.sh file from the cocos2d-iphone-2.0-rc2 folder into the terminal and press return/enter key. This will install the Cocos2d Xcode templates.\n\nThe Cocos2d Xcode 4 templates are used by Xcode 4 when creating a new Cocos2d app. Three different templates exist at the time of this writing that automatically create the baseline code to get you started.\n\nThe first template is to create a Cocos2d app that does not use a physics engine. The second is used to create a Cocos2d app that uses the Box2d physics engine, and the third is used to create a Cocos2d app that uses the Chipmunk physics engine.\n\nWhile these templates are very helpful, they are not magic. What they do is copy the required class files for the type of app that you are creating and then add the basic code to get the app up and running. So technically you could start with the first Cocos2d template that does not use a physics engine and then manually copy the physics engine class files into your project and add the necessary initialization code. But if you are starting from scratch, the templates are very helpful.\n\nCreating Your First Cocos2d App\n\nThis next part of this tutorial may feel a bit like cheating since it is so easy to get a Cocos2d app up and running.\n\nFollow these steps to create a new Cocos2d game that uses the Chipmunk physics engine and then run it in the iPhone Simulator.\n\n1) If Xcode is already open, it is necessary to quit the application and start it again to enable the newly installed Cocos2d templates.\n\n2) Click the Xcode icon in the Dock to launch the XCode application.\n\n3) In the Welcome to Xcode dialog, click on Create a New Xcode Project. If for some reason the dialog does not appear and Xcode is open, you can create a new project by selecting the menu File -> Create a New Xcode Project in the upper left corner of the screen.\n\n4) In the Choose a template for your new project dialog that appears, under iOS on the left choose cocos2d and then select the cocos2d_chipmunk template and then click next.\n\n5) Assign a product name to the app. Do not add any spaces to the name or the template will not work properly. I recommend using camel caps to name the app something like TruckRacingGame. This name will not be visible to the end user if you were to publish this app.\n\n6) For the company identifier, use your reverse domain name format company identifer. Click next.\n\nQ: What is a company product name, company identifier, and bundle identifier?A: The combination of the Product Name and Company Identifier is called the Bundle Identifier and should be unique for each app. For this app I chose TruckRacingGame for the product name and my company identifier is com.heyalda. Xcode then puts these together to make the Bundle Identifer, which is com.heyalda.TruckRacingGame. The bundle identifier is used to determine where to copy an app that is being added to a device or in the simulator. So if the name is the same as another app, then it will overwrite the existing app on install. Also, if you publish an app to the Apple App store, having this configured properly for your company is a must.\n\n7) The next dialog should prompt you to select a folder to save the newly created project.\n\nQ: Where should I save my project?A: I recommend that you create a new folder to store this project. This will also be where you can store all of the resource for this project. Create a folder with an appropriate name and location.\n\nQ: What is Git?A: Git is a software source code management (source control) application created by Linus Torvalds that is included in Xcode. Git works great for version control and it is integrated into Xcode. I recommend clicking on the Create a local git repository for this project check box so that you can try it out.\n\n8) After selecting the folder to store your new Cocos2d project and choosing weather or not to enable git, click on the create button and you should now have your first Cocos2d app to play with.\n\n9) Verify that iPhone 5.1 (or newer) simulator is the selected target device as shown in the above image.\n\n10) Click the Run button in the upper left corner of Xcode. This will build and run your newly created Cocos2d app in the iPhone simulator. You should see the iOS simulator running the newly created Cocos2d-Chipmunk app shown in the following image. Tap the screen to add a new characters to the game world where each character is modeled by Chipmunk physics bodies, shapes and Cocos2d sprites. Pat yourself on the back for a job well done on creating your first Cocos2d app.\n\nA Note about Game Architecture\n\nThis tutorial covers getting a sample HelloWorld app up and running in Xcode.\n\nWhen an actual production game is created, a proper game architecture should be created by formulating requirements, carefully considering the use cases, flow and overall experience of the game and then take time to design and implement the game in a manner where the code, resources, scripting, and other components are easy to understand and support. This is a very important topic and will be covered in detail in a future blog post coming soon.\n\nGetting to Know Cocoos2d and Chipmunk Physics Engine\n\nGranted that this app is far from being a polished game, it is a good start in the direction of getting an understanding of how Cocos2d works.\n\nHowever, keep in mind that there are often multiple ways to accomplish a task in Cocos2d. Some of the ways that things are done in this sample app are not very practical or desirable ways of doing things in an actual production game. For example, a sprite sheet is loaded and the parsing of the sprite sheet is hard coded into the app. There are better ways to deal with loading a sprite sheet that will be briefly discussed in this article.\n\nFirst I will discuss the important fundamental concepts you should understand.\n\nImportant Cocos2d Concepts\n\nThe foundation of Cocos2d from a game developers perspective are the CCDirector, CCNode, CCScene, CCLayer, and CCSprite classes.\n\nThe cocos2d CCDirector class is subclass of Apple's Foundation Framework NSObject class (In the Cocos2d 2.0 release, the director is now a subclass of UIViewController). A singleton instance of the CCDirector effectively orchestrates each Cocos2d game. The singleton instance is the first Cocos2d object that is created when the game launches.\n\nThe CCDirector instance must be configured with some basic settings as will be seen in the code below. It is used to launch the first game scene, control scene transitions, and can provide low level details about how the game is running.\n\nThe cocos2dCCNode is a base class for several game objects in Cocos2d. The CCNode is a construct that contains read-write properties such as position, scale, skewX, skewY, rotation, contentSize, anchorPoint, visible and several others. The CCNode also contains many other details such as an array of child nodes, a pointer to a parent node if one exists, a pointer to custom user data, and various other functionality. To learn more about the functionality of the CCNode, in the project navigator expand the libs group and then the cocos2d group and click on the CCNode.h header file.\n\nThe cocos2dCCScene is a child class of the CCNode class. It only contains about 5 lines of code. The only customization code in the CCScene class is shown here.\n\nThe Scene is basically a CCNode but the size of the CCScene is set to match the main UIWindow of the app and the anchorPoint is set to the center of the main UIWindow.\n\nThe cocos2dCCLayer class is a subclass of the CCNode class. CCLayer adds UITouch and Accelerometer functionality.\n\nThe cocos2dCCSprite class is a subclass of CCNode and adds a lot of functionality to the CCNode, primarily related to adding textures and manipulating textures.\n\nThe cocos2d CCSpriteBatchNode class is a subclass of CCNode and is used to gain efficiencies in loading image files, storing images textures in RAM, and drawing sprites. This will be discussed further in part 2 of this tutorial series.\n\nAll Cocos2d games start by creating a CCScene and a CCLayer, then the CCLayer is added to the CCScene, and then the CCDirector runs the initial CCScene object.\n\nCCLayer is by default a delegate class for the touch and accelerometer events that Cocos2d manages for you. When you create sprites or sprite batch nodes you need to add them to a CCLayer (or CCNode) so that they will be drawn.\n\n-(void) update:(ccTime) delta{\n// Do the main game update logic here\n}\n\nThe objects discussed so far a just a very small sample of what can be done with Cocos2d. But lets move on to the Chipmunk Physics engine for now.\n\nImportant Chipmunk Physics Concepts\n\nChipmunk was created and is supported by Scott Lembcke and is written in C. There is an Objective C wrapper for Chipmunk that can downloaded from the creators of Chipmunk Physics. Since the C api is included with Cocos2d, this tutorial will discuss using the C api.\n\nThere is very detailed documentation about Chipmunk Physics engine that can be found here.\n\nEach class that uses Chipmunk must import the chipmunk.h header file with the following code near the top of either the interface file or implementation file.\n\n#import \"chipmunk.h\"\n\nSince Chipmunk is written in C, the objects (structs are not objective C objects, but they are objects) that are created are actually C structures known as structs. Don't let this intimidate you. They are easy to work with a quite efficient.\n\nThe cpSpace struct is created and configured to manage the physics simulation that will run in the game.\n\nThe cpBody structs are created to simulate bodies with a two dimensional size and mass in the form of a line segment, circle, or convex polygon. They are created and added to the single spSpace that is created for a game. Bodies do not interact with collision detection in the physics simulation. The geometric shape of a body is only relevant when calculating the moment of inertia that is assigned to the body. When the body object is created, it is assigned a mass and a moment of inertia.\n\nThe cpShape struct defines a segment, circle, box, or polygon shape that can be added to a body. Multiple shapes can be added to each body. Shapes interact with collision detection in the physics simulation. The shapes you choose to use can impact performance of the simulation. The segment shape is the most efficient collision detection shape, followed by the circle, the box, and then the more complex polygon.\n\nThe cpConstraint struct defines a relationship between cpBody objects. Multiple constraints can be assigned to a pair of bodies to create interesting interactions. Note that constraints are not used in the Chipmunk app we create above in this tutorial.\n\nExample: For an example of how these four structs could be used, consider creating a truck with a front and rear wheel. One body would represent each wheel and one body wold represent the rectangle of the truck. A cpSpace object would be crated and configured. The front wheel body, rear wheel body, and truck body would be added to the cpSpace object. Shapes for the wheels and the truck body would be created and added to the three body structs. A cpGrooveJoint and cpDampedSpring constraint would be combined to constrain the front wheel movement relative to the truck body. Another cpGrooveJoint and cpDampedSpring would be combined and applied between the rear wheel and truck body. If setup properly the physics would simulate quite nicely a truck with bouncy suspension connected to its wheels. A cpSimpleMotor joint could also be defined between each wheel and the truck body. The result would be a simulation of a four wheel drive truck.\n\nOverview of Code Created by the Cocos2d Chipmunk Template\n\nNow that you have a working Cocos2d app and some background about the fundamentals of Cocos2d and Chipmunk, you can begin to explore the code created by the template to get a better understanding of how Cocos2d and Chipmunk physics can be used to create a game.\n\nLets start by taking a look at what code was added to the project for you by the Cocos2d Chipmunk template.\n\nIn the project navigator, expand the group (looks like a yellow folder but is a group and not a folder reference) that is labeled with the product name that you selected when creating the app. You should see the AppDelegate, RootViewController, and HelloWorldLayer header files (.h) and implementation files (.m).\n\nThe AppDelegate is a standard class that all iOS apps have. It must conform the the UIApplicationDelegate protocol. These are all the 'applicationDid' and 'applicationWill' selectors you see in the AppDelege.m file. An instance of this class is created by the main.m file that can found in the Supporting Files group. The instance of AppDelegate is the first customized object that is created when the app launches. Click on the AppDelegate.m file to take a look at the - (void) applicationDidFinishLaunching:(UIApplication*)application selector. This is the first selector that is called when after the single instance of AppDelegate is created. This selector and its code are shown here.\n\nThe code here might seem a bit cryptic, but it is a good idea to have at least a basic understanding of what it does.\n\nThe line numbers referred to here are the line numbers of the above block of code, not the line numbers from the AppDelegeate.m source file.\n\nLine 6 creates the singleton instance of the Cocos2d CCDirector.\n\nLines 4, 9, and 10 create the UIWindow and the UIViewController that all iPhone and iPad apps are required to have. The RootViewController is a custom subclass of UIViewController that was copied into this project by the Cocos2d template.\n\nLines 18-21 create the main OpenGL view that is added to the instance of the RootViewController on line 37 and the view of the RootViewController is in turn added to the main UIWindow on line 40. No need to think much about these for now. Just know that they exist.\n\nYou will likely want to revisit pixelFormat setting of the EAGLView to try out different settings for the tradeoff between image quality and performance. The depthFormat settings can be useful if you choose to implement 3d objects into your game.\n\nRegarding pixel format, if the pixelFormat of the EAGLView is changed, you will likely want to also change the CCTexture2D's defaultAlphaPixelFormat (line 47) to the equivalent setting.\n\nLine 56 and 57 create an instance of the HellowWorldLayer, add it to a CCScene object, and then line 60 tells the director to run that scene.\n\nThis post covered a lot of information. If the topics discussed are new to you, take some time to dig around the code in the AppDelegate and HellowWorldLayer classes to get a sense of the structure of the sample app."}
{"text": "broad, yet in-depth coverage of C programming language, within the context of today's C programming style, makes this book as useful for practicing professionals as it is for beginning programmers. This study guide solves many sample problems using other programming languages so readers can compare several popular languages. It also includes clear explanations of most of the features in the current ANSI standard. The emphasis throughout is on designing clear, legible, modular and efficient programs.\n\nThe best book i've ever seen for beginners, it contains a lot of examples to learn the C programming language in an easy manner. You will understand this book even if you have no clue about programming.\n\nNote: it's also available in Spanish, known as \"Programaci\u00f3n en C\", the book is perfectly translated."}
{"text": "Java in a Nutshell, the image of the Javan tiger is independent of Sun Microsystems\n\nPreface\n\nThis book is a desktop Java quick reference, designed to sit faithfully by your keyboard while you program. Part I of the book is a fast-paced, \"no-fluff\" introduction to the Java programming language and the core APIs of the Java platform. Part II is a quick reference section that succinctly details most classes and interfaces of those\ncore\nAPIs. The book covers Java 1.0, 1.1, 1.2, 1.3, 1.4, and 5.0.\n\nChanges in the Fifth Edition\n\nThe fifth edition of this book covers Java 5.0. As its incremented version number attests, this new version of Java has a lot of new features. The three most significant new language features are generic types, enumerated types, and annotations, which are covered in a new chapter of their own. Experienced Java programmers who just want to learn about these new features can jump straight to Chapter 4.\n\nOther new language features of Java 5.0 are:\n\nThe\nfor/in\nstatement for easily iterating through arrays and collections (this statement is sometimes called \"foreach\").\n\nAutoboxing and autounboxing conversions to automatically convert back and forth between primitive values and their corresponding wrapper objects (such as\nint\nvalues and\nInteger\nobjects) as needed.\n\nVarargs methods to define and invoke\nmethods\nthat accept an arbitrary number of arguments.\n\nCovariant returns to allow a subclass to override a superclass method and narrow the return type of the method.\n\nThe\nimport static\ndeclaration to import the\nstatic\nmembers\nof a type into the namespace.\n\nAlthough each of these features is new in Java 5.0, none of them is large enough to merit a chapter of its own. Coverage of these features is integrated into Chapter 2.\n\nIn addition to these language changes, Java 5.0 also includes changes to the Java platform. Important enhancements include the following:\n\nThe\njava.util\ncollections classes have been converted to be generic types, providing support for\ntypesafe\ncollections. This is covered in Chapter 4.\n\nThe\njava.util\npackage also includes the new\nFormatter\nclass. This class enables C-style formatted text output with\nprintf( )\nand\nformat( )\nmethods. Examples are included in Chapter 5. The\njava.util.Formatter\nenTRy in the quick reference includes a detailed table of formatting options.\n\nThe new package\njava.util.concurrent\nincludes important utilities for threadsafe concurrent programming. Chapter 5 provides examples.\n\njava.lang\nhas three new subpackages:\n\njava.lang.annotation\n\njava.lang.instrument\n\njava.lang.management\n\nThese packages support Java 5.0 annotations and the instrumentation, management, and monitoring of a running Java interpreter. Although their position in the\njava.lang\nhierarchy marks these packages as very important, they are not commonly used. Annotation examples are provided in Chapter 4, and a simple instrumentation and management example is found in Chapter 5.\n\nNew packages have been added to the\njavax.xml\nhierarchy.\njavax.xml.validation\nsupports document validation with schemas.\njavax.xml.xpath\nsupports the XPath query language. And\njavax.xml.namespace\nprovides simple support for XML namespaces. Validation and XPath examples are in Chapter 5.\n\nIn a mostly futile attempt to make room for this new material, I've had to make some cuts. I've removed coverage of the packages\njava.beans\n,\njava.beans.\nbeancontext\n,\njava.security.acl\n, and\norg.ietf.jgss\nfrom the quick reference. JavaBeans standards have not caught on in\ncore\nJava APIs and now appear to be relevant only for Swing and\nrelated\ngraphical APIs. As such, they are no longer relevant in this book. The\njava.security.acl\npackage has been deprecated since Java 1.2 and I've taken this opportunity to remove it. And the\norg.ietf.jgss\npackage is of interest to only a very narrow subset of readers.\n\nAlong with removing coverage of\njava.beans\nfrom the quick reference section, I've also cut the chapter on JavaBeans from Part I of this book. The material on JavaBeans naming conventions from that chapter remains useful, however, and has been moved into Chapter 7."}
{"text": "Programmer's Toolbox Vectors--the last word by Jack W. Crenshaw\nEngineers and mathematicians have been encountering the zero vector for as long as vectors themselves have existed. Here's how to handle it when writing a computer program.\n\nBreak Points Consulting as a career by Jack G. Ganssle\nConsulting can be a very rewarding job, but be prepared: it's not for the faint of heart. Here's what you need for success."}
{"text": "OSdata.com\n\nstandards and variants\n\nsummary\n\nThe educational goal of this subchapter is to make the student aware that there are offcial versions of many programming languages, but that in practice there are a lot of variations (and that a programmer must be able to adapt to changes and variations).\n\nProgramming languages can meet official standards or come in variants and dialects.\n\nfree computer programming text book project\n\nstandards and variants\n\nProgramming languages have traditionally been developed either by a single author or by a committee.\n\nTypically after a new programming language is released, new features or modifications, called variants, start to pop-up. The different versions of a programming language are called dialects. Over time, the most popular of these variants become common place in all the major dialects.\n\nIf a programming language is popular enough, some international group or committee will create an official standard version of a programming language. The largest of these groups are ANSI (Ameican national Standards Institute) and ISO (International Orgnaization for Standardization).\n\nWhile variants and dialects may offer very useful features, the use of the non-standard features will lock the program into a particular development environment or compiler and often will lock the program into a specific operating system or even hardware platform.\n\nUse of official standaards allows for portability, which is the ability to move a program from one machine or operating system to another.\n\nWhile variants were traditionally introduced in an attempt to improve a programming language, Microsoft started the practice of intentionally creating variants to lock developers into using Microsoft products. In some cases the Microsoft variants offered no new features, but merely chaanged from the established standard for the sake of being different. Microsoft lost a lawsuit with Sun Microsystems for purposely creating variants to Java in hopes of killing off Java in favor of Microsoft languages"}
{"text": "Find millions of documents on Course Hero - Study Guides, Lecture Notes, Reference Materials, Practice Exams and more.\nCourse Hero has millions of course specific materials providing students with the best way to expand\ntheir education.\n\nMehran SahamiCS 106AHandout #31October 31, 2011Exam StrategiesBased on a handout originally written by Julie Zelinski and Chris PiechThe exams in the CS106 courses can be challenging and even a bit intimidating. Hopefully youhave been keeping up in\n\nMehran SahamiCS 106AHandout #32October 31, 2011ArrayLists Reference for HangmanBased on a handout by Patrick YoungThis handout gives you a quick reference for some of the concepts related to ArrayListsthat may be useful to you for implementing Part\n\nMehran SahamiCS 106AHandout #34November 7, 2011DebuggingThanks to Eric Roberts and Nick Parlante for portions of this handout.Much of your time as a computer programmer will likely be spent debugging. Thisphenomenon is best described by a quotation\n\nMehran SahamiCS 106AHandout #35November 7, 2011Section Handout #6: More Arrays and HashMapsPortions of this handout by Eric Roberts1. How Prime!In the third century B.C., the Greek astronomer Eratosthenes developed an algorithm forfinding all the\n\nMehran SahamiCS 106AHandout #39November 14, 2011Section Handout #7: Using InteractorsBased on a handout by Eric Roberts1. Using InteractorsThe purpose of this problem is to give you some practice using the kind of interactors youneed for the NameS\n\nMehran SahamiCS 106AHandout #39ANovember 16, 2011Solution to Section #7Based on a handout by Eric Roberts1. Using Interactors/ File: BoxDiagram.java/ This program allows the user to create a set of boxes with labels/ and then drag them around in\n\nMehran SahamiCS 106AHandout #41November 16, 2011MusicShop Program (ComponentListener Example)File: MusicShop.java/** File: MusicShop.java* -* This program handles the data management for a music* shop, showing which albums are carried and how man\n\nCLASS EXERCISE # 1 - 13 June 20051. (2 points) Determine the B and C components of a vector of magnitude 4.7 m in a direction 35 west of north. Be sure to include the correct signs! The angle of this vector is ) oe 90 35 oe 125 The B component is E cos )\n\nCLASS EXERCISE #2 - 14 June 2005The diagram below shows three charges which are identical in magnitude (same number of coulombs), one of which is positive and the other two negative S is positive, < is negative. The middle charge is exactly halfway betwe\n\nCLASS EXERCISE #3 - 15 June 2005Consider the electrical force between pairs of electric charges as shown. These are three independent problems, with different charges but the same separation < in each case. U represents the same number of coulombs in eac\n\nCLASS EXERCISE #4 - 16 June 2005Here are some statements about the electric force. Determine if each is true or false. If false, explain why, by giving a counterexample or correcting the statement. (1) The electric force between two electric charges is a\n\nCLASS EXERCISE #5 - 20 June 2005(1) Suppose that the electric field at a certain point is t I oe ( 1000 N/C, 500 N/C). (a) What is the electric force produced by that field on a charge of 15 .C? t t J oe ;I oe 15 , 106 C 1000 N/C, 500 N/C oe 0.015 N, 0.0\n\nCLASS EXERCISE #6 - June 21, 2005 (1) When two charges are separated by 4.0 m, their electric potential energy is 12 J. What can you tell, if anything, about the signs of these two charges? Since the electric potential energy is positive, the two charges\n\nCLASS EXERCISE # 7 - 27 JUNE 2005V 5H 3H 3H M 3A 2A 4A ?Z 15 V 6V 12 VAnswer these questions using Ohm's law and also fill out the table above: (1) Determine the potential difference across a 5-ohm resistor through which a current of 3 amperes is flowin\n\nCLASS EXERCISE #8 - 28 June 2005(a) What is the equivalent voltage of this circuit? The two batteries face the same way, so the equivalent voltage is the sum of their voltages: 6 V 12 V oe 18 V. (b) What is the equivalent resistance of this circuit? The\n\nCLASS EXERCISE #9 - 29 June 2005An electric circuit consists of a 23-V battery and a 4-V battery facing in opposite directions and two resistors, one 3 ohms and the other 2 ohms, all in series.(a) Draw this circuit, determine the current in this circuit\n\nCLASS EXERCISE #11 - 5 July 2005(1) Consider the six mutually-perpendicular directions north, east, south, west, up, and down. Determine the direction of the magnetic force on a current segment for these cases: (a) Current is north, magnetic field is eas\n\nCLASS EXERCISE #12 - 7 July 2005On your sheet, draw square or rectangular circuits (like this: ) with the current indicated and a uniform magnetic field shown. Then determine and show the direction of the force ( , , , , , OE or 0 if no force) on each si\n\nCLASS EXERCISE #16 - BASTILLE DAY(a) What is the direction of the magnetic field of the wave at that point at that time? t Using the right-hand rule with t north and I up, the magnetic field must be in the east direction. (b) What is the wavelength of th\n\nCLASS EXERCISE #17 - 18 July 2005Light at an angle of incidence of 40 strikes a horizontal interface between water (8 oe 1.33) and glass (8 oe 1.50), coming from the water side. (a) Draw a diagram showing the incident ray and then sketch the reflected an\n\nCLASS EXERCISE #18 - 19 July 2005A spherical mirror has a radius of curvature of 20 cm. An object is placed on the principal axis on the concave side a distance of 5.0 cm from the vertex of the mirror. Determine the focal length of this mirror and then m\n\nCLASS EXERCISE #19 - 20 July 2005You are supposed to make a slide projector using a single convergent lens. The projector projects an image of a slide (which is placed near the lens, in the projector). Suppose you want the slide to be magnified 100 times\n\nCLASS EXERCISE #20 - 25 July 2005Light of wavelength 500 nm is incident on a pair of slits. On a screen 2.0 m away, the interference maxima are found to be 2.0 mm apart. (a) Determine the angle ) (in radians and in degrees) corresponding to the first int\n\nCLASS EXERCISE #22 - 27 July 2005Initially unpolarized light passes through four different polarizers, all of them letting through light polarized in a horizontal plane (like polarizers sitting on an overhead projector). The first lets through light pola\n\nCLASS EXERCISE #23 - 28 July 2005Light of wavelength 520 nm is incident normally (perpendicularly) from air onto an interface with a thin oil film (8 oe 1.30) that is floating on water (8 oe 1.33). (a) What is the frequency of this light?0 oe - oe 3 , 1\n\nCLASS EXERCISE #24 - 1 August 2005 An atom undergoes a transition from a state of energy 14.7 eV to a state of energy 10.6 eV. Determine whether a photon was absorbed or emitted, and determine that photon's energy (in both eV and joules) and frequency. Th\n\nPHYSICS 112 - EXAM 4 (first part of final exam) - FALL 2003 Name _ Section _Use only a right-handed coordinate system ( B C D along thumb, forefinger, and middle finger of your right hand when these three fingers are perpendicular to one another). Show y\n\nP-1PHYSICS 112 SUMMER 2005 Homework for June 14, 2005 Due in recitation during the first five minutes; after that, worth only 50% as much.Name SectionIn parts (1a) through (1c), consider the two dimensionless vectors t t E oe (3.10, 2.40) and F oe ( 3.\n\nHomework Assignment #2 - Thursday June 16, 20051. (a) On a piece of graph paper (remember that some are available on the course web page) place a 3 .C charge at the origin and a 2.C at the point B oe 3.0 m C oe 0. (b) Determine the magnitude of the elect\n\nHOMEWORK #3 for Tuesday, June 21, 2005Name _ Section _ 1. A 4-.C charge is located at the point (0 m, 3 m), and a 5-.C charge is located at the point (0 m, 2 m). No other charges are around.A. What is the magnitude of the electrical force on the 4-.C ch\n\nHomework #4 for Thursday, June 23, 2005Name _ Section _The figure above shows a (rectangular) region of space with a uniform magnetic field: the electric field everywhere has the same magnitude and direction. The direction of the electric field is indic\n\nHOMEWORK - TUESDAY, JUNE 28, 20051. A piece of an electric circuit consists of five resistors connected as shown below. The electric potential at two points is shown.(a) Determine the electric current in this part of the circuit and show its direction o TUESDAY, JULY 5, 2005Determine the currents in the following circuits, and construct the V M ?Z T table for each circuit. Check that the powers are correct. Also, determine the electric potentials at the points marked.\n\nHOMEWORK for THURSDAY JULY 7, 2005 1. Determine the magnitude and direction of the magnetic force on the following charges in a magnetic field of 0.20 T directed east: (a) A charge ; oe 4.0 .C moving north at 35 m/s.(b) An electron moving vertically upwa\n\nHOMEWORK for TUESDAY, JULY 12, 2005For each of the following situations two circuit loops are shown in a uniform t external magnetic field F . Let the one on the left have a clockwise current and the one on the right have a counterclockwise current. Dete\n\nHOMEWORK for TUESDAY, JULY 12, 2005For each of the following situations two circuit loops are shown in a uniform t external magnetic field F ext . Let the one on the left have a clockwise current and the one on the right have a counterclockwise current.\n\nHomework for Thursday, July 14, 2005 (Bastille Day) Name _ Section _For each of the following situations a circuit loop is shown in a uniform t external magnetic field F . Determine in each case the direction (clockwise or counterclockwise) of the induce\n\nHOMEWORK FOR TUESDAY, JULY 19, 2005 In this problem we will consider the path of light rays from air into glass and vice versa. The glass has a flat, horizontal surface, and the air is above it. We want to determine the angles for the reflected and refrac\n\nHOMEWORK SOLUTIONS FOR JULY 21 1. An object is placed 10 cm from the vertex of a concave mirror of radius of curvature 12 cm. Find the image distance and the magnification, and characterize the image in the usual way. Check your results by ray tracing usi\n\nHOMEWORK ASSIGNMENT FOR JULY 26, 2005Consider the interference between two slits separated by a distance . on which light of wavelength - shines, producing a pattern of dark and bright fringes on a screen a distance H away from the slits. First draw a sk\n\nConsider the interference between two slits separated by a distance . on which light of wavelength - shines, producing a pattern of dark and bright fringes on a screen a distance H away from the slits. First draw a sketch of this physical situation, showi\n\nHOMEWORK FOR TUESDAY, AUGUST 2, 20051. Consider the atom denoted by 183 Au 79 The common name of this element is _. It has _ electrons, _ protons, _ neutrons, and _ quarks. This atom is radioactive and decays by alpha decay with a half-life of 49 seconds\n\n1. Consider the atom denoted by 183 Au 79 The common name of this element is: gold It has 79 electrons, 79 protons, and 183 79 oe 104 neutrons. This atom is radioactive and decays by alpha decay with a half-life of 49 seconds. Determine the fraction of it\n\nREFRACTION WORKSHEET \"Triangle\" Diagram: On other pages in this set you will find a large triangle that represents a triangular prism. We want to follow the path of a light ray striking one of the surfaces as it passes through the prism and exits one of t\n\nPHYSICS 112 - REVIEW FOR EXAM 3t MAGNETIC FLUX: The magnetic flux through a plane circuit is F oe FE cos ), where ) is the angle between F 2 and the normal ( perpendicular) to the plane of the circuit. Units: T-m . MAGNETIC INDUCTION The current induced\n\nPHYSICS 112 - SPRING 2003 - EXAM 1 - February 12, 2003 Name: _ Recitation Section Number: _ SHOW YOUR WORK! Although some of these problems are multiple-choice, full credit will be given only if you explain how you arrived at your answer. Either show your"}
{"text": "C++ Tutorial\n\nC++ is a middle-level programming language developed by Bjarne Stroustrup starting in 1979 at Bell Labs. C++ runs on a variety of platforms, such as Windows, Mac OS, and the various versions of UNIX.\n\nThis reference will take you through simple and practical approach while learning C++ Programming language.\n\nAudience\n\nThis reference has been prepared for the beginners to help them understand the basic to advanced concepts related to C++ Programming languages.\n\nPrerequisites\n\nBefore you start doing practice with various types of examples given in this reference, I'm making an assumption that you are already aware about what is a computer program and what is a computer programming language.\n\nCompile/Execute C++ Programs\n\nIf you are willing to learn the C++ programming on a Linux machine but you do not have a setup for the same, then do not worry. The compileonline.com is available on a high end dedicated server giving you real programming experience with a comfort of single click compilation and execution. Yes! it is absolutely free and its online.\n\n(1) C++ Basic Object Oriented Concepts\n\nJust go through these concepts to understand basic Object Oriented Terminology."}
{"text": "Hypertalk\n\nHypertalk, a computer programming language designed in 1985 as \"programming for the rest of us\" by American computer scientist Bill Atkinson for Apple's Macintosh. Using a simple English-like syntax, Hypertalk enabled anyone to combine text, graphics, and audio quickly into \"linked stacks\" that could be navigated by clicking with a mouse on standard buttons supplied by the program. Hypertalk was particularly popular among American educators in the 1980s and early '90s for classroom multimedia presentations. Although Hypertalk had many features of object-oriented programming, Apple did not develop it for other computer platforms and let it languish; as Apple's market share declined in the 1990s, a new cross-platform way of displaying multimedia left Hypertalk all but"}
{"text": "Java: An Introduction to Problem Solving and Programming\n\nThis lab manual is appropriate for any Introduction to Programming course that uses the Java programming language. Its hands-on exercises are intended to help students improve their understanding of the fundamental structures in Java. The order of the topics in this manual reflects an objects-first approach with the goal of helping students understand the object-oriented paradigm.This manual is divided into three parts. The first part presents the core of the Java language. These six sessions provide experience with core features and principles of the Java programming language. They provide enough breadth and depth for readers to learn more of Java on their own or in later courses. The second part of the manual helps students explore issues pertaining to algorithms. Recursion is considered here, as well important searching algorithms. Finally, methods of algorithm analysis are examined. The final part of the manual covers a number of additional topics that are not decribed in the core sessions such as graphics, inheritance, and object design.FeaturesIncludes eighteen laboratories, each with:Introductory MaterialNew Skills that students will develop in the exercisePrerequisite Skills to ensure students are prepared for the sessionRequired Files to use, modify, and extend in the exercisesDiscussion of topics covered in the laboratory sessionExperiments to reinforce the discussionPost-Laboratory Problems to enhance understandingNotes on selected problemsFocuses on applications, but includes optional material on appletsProvides an objects-first approach to working with JavaWritten on the Java 2 platformDesigned to work with any Java textbook0201612674B04062001--This text refers to an alternatePaperbackedition."}
{"text": "Product Description\n\nProduct Description\n\nThe independent developer has ascended, and the new business model demands agility. You have to be able to work on all aspects of game creation, and your team's game will publish directly to platforms like Android, iPhone, and Facebook. You'll use Unity, the hottest game engine out there, to do it. In order to earn your place on the elite development team, you must master both sides of the development coin: art and programming.\n\nHolistic Game Development with Unity is an authoritative guide to creating games in Unity. Taking you through game design, programming, and art, Penny de Byl uses a holistic approach to equip you with the multidisciplinary skills you need for the independent games industry. With this book, you will master essential digital art and design principles while learning the programming skills necessary to build interactivity into your games. The tutorials will put these skills into action. The companion website offers: source code for completed projects from the book, art assets, instructional videos, a forum, author blog and lesson plans and challenge questions for professors.\n\nExamines art and programming in unison-the only one-stop shop for individual developers and small teams looking to tackle both tasks.\n\nExamines art and programming in unison-the only one-stop shop for individual developers and small teams looking to tackle both tasks.\n\nTeaches, using proven, step-by-step tutorials, how to design and structure and entire game in Unity with art assets created in Blender.\n\nPresents a gentle introduction to essential 2D and 3D mathematical and physics concepts.\n\nProvides a portfolio of reusable game mechanics.\n\nCompanion website offers source code for completed projects featured in the book, art assets, instructional videos, author blog, and discussion forum, as well as lesson plans and challenge questions for professors.\n\nThis is definitely a beginner's book, beginning with the most basic concepts of 3D graphics. It explains the most basic but necessary mathematical concepts. It goes on to introduce programming mechanics, with chapters on character mechanics, environmental mechanics, and also the mechanics of utilizing mobile device features such as the accelerometers, the GPS and web services. There is also a very interesting chapter on game mechanics and game design, which you don't often find in this kind of book, identifying some of the key concepts used in all games.\n\nAll these concepts are illustrated with demonstrations of projects using the Unity engine, with all the required code listed in UnityScript. One thing it doesn't do, which for me was a disappointment, is explain line for line what the script is doing. While it would be out of the scope of the book to delve into object orientated programming, some form of explanation would have been helpful, instead of saying \"The code must be EXACTLY as it appears here\". Being new to programming, trying to decipher poorly documented code from demonstration projects is my biggest obstacle to learning it.\n\nThis book provides a good overview of games development, while at the same shows the reader how to use the Unity game engine. So it is good for both those things and definitely worth having. You will get the most out of it if you have a background in 3D modeling applications, such as Maya or 3D Studio Max, but have no knowledge of game creation and want to learn Unity3D as the way forward. Some knowledge in object orientated programming would also be an advantage. But you WILL need to find a good resource for learning Unity scripting to compliment it with.\n\nI am not a noob to computers, software or programming but I am a noob to 3d game design in general and Unity3d itself. This book simultaneously teaches you about 3d games in general and how to use this knowledge with Unity.\n\nIncluded are examples of each aspect of Unity in easy to follow steps. Each tutorial leaves you with enough understanding and scope of what you just achieved to play with parameters to further understanding. Thanks to Unity's structure an amazing amount can be achieved with very little effort. The author has used this to great affect.\n\nThe author's obvious deep interest in the mechanics of 3d game design and its application has also inspired me to study various aspects of mathematics that I now realise will massively help with my control of objects in the 3d environment.\n\nI think it is an excellent book and unlike a stack of other software reference books in my Kindle collection - this is not one I got 33% of the way through before thinking it a waste of money.\n\nThis book is a godsend for anyone looking to get an understanding into the various disciplines of game development. There's no messing around and the author jumps straight into pure meaty content with no opinionated bumpf. Various tricky subjects are explained quite clearly without paragraphs of dull and dry text."}
{"text": "Sams Teach Yourself Perl in 21 Days\n\nLaura Lemayis a member of the gregarious, brightly colored species of computer-book author known as tutorialis prolificus. Although she has been spotted writing in the wild for numerous years, more public sightings have occurred frequently since 1995, including several versions of Sams Teach Yourself HTML, Sams Teach Yourself Java in 21 Days, and The Official Marimba Guide to Castanet.When not writing books, her primary habitat is in Northern California. Should you encounter her in person, do not make any sudden movements. Further field notes may be found at  Colburnis a programmer and author working in North Carolina. His previous books include Sams Teach Yourself CGI in 24 Hours and Special Edition Using SQL. He also has a Web site at  that he updates often, and can be reached at rafe@rc3.org."}
{"text": "C++ Pocket Reference: by Kyle Loudon\n\nItem# 0596004966\n\nList price: $9.95\n\nSoftpro Price: $7.96 about, ensuring that it will always be at-hand when needed. Programmers will also appreciate the book's brevity; as much information as possible has been crammed into its small pages.\n\nC++ Pocket Reference is useful to Java and C programmers making the transition to C++, or who find themselves occasionally programming in C++. The three languages are often confusingly similar. This book enables programmers familiar with C or Java to quickly come up to speed on how a particular construct or concept is implemented in C++.\n\nTogether with its companion STL Pocket Reference, the C++ Pocket Reference forms one of the most concise, easily-carried, quick-references to the C++ language available"}
{"text": "Larry Seltzer\n\nWe All Use Dennis Ritchie's Programs\n\nBelow is an image from one of my favorite keepsakes: A copy of the famous, original, and once-authoritative The C Programming Language, autographed by the book's authors, Brian Kernighan and Dennis Ritchie. The book also is sometimes known as simply \"K&R\".\n\nDennis Ritchie, who passed away last week, was one of the great figures of computer science. Ritchie was famous for being one of the creators of both the UNIX operating system and the C programming language. Not only are both still very much in current use, but both had profound influence on almost every other operating system and programming language that followed. Ritchie, along with Kernighan and a few other computing pioneers at Bell Labs in the '60s and '70s, created these building blocks of our industry in an environment that was, by today's standards, more academic than commercial. Remember, this was when there was still a Bell System monopoly on telephony in the U.S.\n\nI'm not so much a UNIX guy but I made a living writing C code for many years. It's not a language for the casual programmer, or at least it shouldn't be. C was designed in an era when hardware was expensive and performance pitiful by today's standards. With simple constructs it lets you write very fast and lean programs. The flip side is that it lacks basic training wheels found in most modern languages, with the result that it's easy to make mistakes that are hard to debug.\n\nC lets you get down close to the metal of the computer. Once, just to prove it could be done, I wrote a DOS device driver completely in C (Borland Turbo C to be specific). There were a couple of embedded assembly statements that the compiler handled, but it was basically all in C. With rare exceptions the major operating systems in use today are written in C or C variants. It's not a good idea to use C to write just anything, but there's nothing you can't write in it.\n\nThat K&R, the second edition, is still in print and doing well is something of a mystery. It was relatively obsolete even back when it first came out. The first (1978) edition also remained popular for a long time, although in its time it was a more authoritative reference for how to implement the language. I had a first edition, which I can't find now. I got the second edition only in order to get it autographed.\n\nIt's interesting to compare the reactions to Ritchie's death to those of Steve Jobs, who died just a week before. No question they're both giants of the computer industry, but Ritchie was a behind-the-scenes guy and pretty obviously an engineer from the looks of him. Jobs was an out-front man who liked to be in charge. Much of the remembrance of Jobs refers to the things that he \"built\" or \"created,\" but he didn't really do that. Dennis Ritchie really did build things that we all use, often without knowing it.\n\nI have to thank my friend Jerry Ryan here. Jerry arranged the autographed book while he was at Bell Labs working with K&R. It helps to have friends in high places and few places were as special as Bell Labs once was"}
{"text": "CS 3 General Information, Spring 2005\n\nIntroduction\n\nWelcome to CS 3, \"Introduction to Symbolic Programming\". This\ncourse will introduce you to computer programming, using the Scheme\nprogramming language (a dialect of Lisp). Examples and programming\nassignments will be drawn from nonnumeric (\"symbolic\") applications.\n\nThe only prerequisite to CS 3 is high school algebra, specifically\nfamiliarity with variables and simple functions. We don't assume that\nyou have had any previous computing experience. If you have done some\nprogramming, specifically involving the technique of recursion, you\nshould seriously consider taking CS 61A instead of CS 3. Many people, however, find CS 3 a good precursor to CS 61A.\n\nYou learn programming by doing it rather than by listening to us\ntalk about it. Thus, CS 3 is organized to maximize your time designing\nand writing programs and experimenting with the programming environment.\nYou'll work hard, but learn a lot.\nThe lab sections and online activities are designed to help you get\nfeedback at the time you need it;\nwe hope to ensure that you're working productively rather than flailing around.\n\nStaff\n\nThe instructor is Nathaniel Titterton (nate@berkeley.edu). His administrative assistants are Cindy Palwick and Sue DeVries in 385 Soda.\n\nThe TAs are Clint Ryan, Paul Hale, and Ehlam Yavari; they will run the lab sessions. There are also reader(s), unidentified at press time, who grade your homework and lab assistants who work with you\nduring the lab sections.\nContact information for the staff will be posted on the class web site\nshortly.\n\nBooks and other course material\n\nThere are two required books for the course: Simply Scheme,\nby Brian Harvey and Matt Wright (second edition, MIT Press, 1999), is\navailable at local bookstores; CS 3 Readings is available at\nCopy Central, 2483 Hearst Avenue.\n\nClass activities and scheduling\n\nThere is a single lecture each week. It meets in Room 105 North Gate on Mondays, from 5pm to 6pm. There will be no video streams of lectures available on the internet (feel free to complain about this, since we need feedback to plead our case for these services in the future).\n\nYou are each assigned to a lab section that meets twice a week\nfor three hours each meeting. That's right, 6 hours a week.\n\nsection\n\ntime\n\nlecture\n\nM 5-6pm\n\n12\n\nTuTh 11am-2pm\n\n13\n\nTuTh 2-5pm\n\n14\n\nTuTh 5-8pm\n\n16\n\nWF 11am-2pm\n\nYou must attend the section to which you are assigned; if you want to\nmove to another lab section, you must get the approval of the T.A.s\nin charge of both the section you wish to leave and the one you wish\nto transfer to.\n\nAll sections will meet in room C30 Hearst Field Annex, between Barrows Hall and Bancroft Street.\n\nFor most of the semester, the typical lab period will involve a\nvariety of activities, all provided online.\nIt will start with a short quiz based on topics\ncovered on the homework or in the preceding class; each\nstart-of-period quiz will count toward your course grade, and you have to take (the majority of these) in the lab classroom. Following this, you'll\nbe reading, experimenting, brainstorming, evaluating each other's\nideas, and sometimes working with partners.\nIn the Thursday and Friday sections, T.A.s may set up impromptu discussion\nsections to clarify student confusion they've seen earlier in the week; please tell us what you would prefer on this issue, since we will respond to feedback.\nThere will be three \"mini-projects\" during the semester,\nto which some of the lab meetings will be devoted.\nThe last several weeks of the\nsemester will be less structured, as you'll be working\non a project program.\n\nA short set of homework exercises will be typically be assigned\nat the end of each lab. The exercises will involve writing or analyzing programs\nand contributing to online discussions about typical programming\nmisconceptions. Answers to the programming exercises and\ncontributions to the discussions will be submitted online.\nYou should expect\nto put in four or five hours of work per week outside of class.\nIf you finish the online exercises early, you may leave early\nor work on your homework.\nSome of the work later in the course, along with the project, may be done in\npartnership with other students in your section. (Cross-section\npartnerships will not be allowed.)\n\nLectures will introduce and motivate\nnew material or review confusion noticed during the previous week's lab sections.\n\nThere will also be three exams.\nTwo midterms will be during the normal lecture slot, from 5-6pm in room 105 North Gate, on Monday, February 28th and Monday, April 11th.\nThe other will be the final exam, on Thursday, May 19, from 5-8pm.\n\nIn CS 3, you will be using programming tools\nand course material devised by a research group of computer science\nand education researchers.\nTo determine the effectiveness of these tools and material,\nwe are gathering data on your background and performance,\nvia questionnaires, interviews, and analysis of your work.\nYou will be expected to take part in an hour-long interview\nwith a staff member, and to complete several surveys through\nthe course of the semester.\n\nComputing\n\nMost of your work for this course will be done in class\nin C30 Hearst Field Annex. Outside\nof class, you may work in any EECS lab room in which a lab section is\nnot meeting. You may also work at home, of course!\nYou may obtain a card key to work in C30 on\nweekends or late at night.\nIf you have a \"newer\" student ID that can double as a card\nkey, there is no charge; otherwise, there is a $25 fee ($15\nof which is refundable at the end of the semester)\nTo do work for this course on your own\ncomputer, you will need to use a recent Mozilla browser,\nwith a plugin that supports Java 1.3. Earlier versions of Netscape\nand any version of Internet Explorer will not work (or at least work well). If you use a\nMacintosh, it has to be running OS X.\n\nGrading\n\nThe various course activities will contribute points to your grade\nas follows.\n\nactivity\n\ncourse points\n\npercent of total grade\n\nproject\n\n20\n\n10%\n\nall mini-projects\n\n24 (8 each)\n\n12% (4% each)\n\nall other homework\n\nscaled to 24\n\n12%\n\nall on-line quizzes\n\nscaled to 16\n\n8%\n\nrandom on-line step\n\n10\n\n5%\n\nmidterm exams\n\n56 (28 each)\n\n28% (14% each)\n\nfinal exam\n\n50\n\n25%\n\nYou are expected to keep up with the classwork!\nThere will occasionally be time devoted in lab to helping you\ncatch up or solidify your understanding of the material.\nHomeworks assigned on Tuesday/Wednesday are due at the start of the\nThursday/Friday lab section; homework assigned on Thursday/Friday are due\nat the start of the Tuesday/Wednesday lab section.\nYou will at most earn half-credit for homework turned in after the due date but before the next lab meeting; you will not earn any credit for any homework exercise\nsubmitted more than one class meeting after it is due\n\nThere will be more than 24 points worth of scaled homework points to earn; your homework score, however, will be capped at 24. As such, you can miss some homework assignments and still earn the full amount that homework can count towards your final grade.\n\nQuizzes are online, and while they may be taken outside\nof the lab room, you will receive credit for at most four quizzes\ntaken outside of your lab section. You will not receive any credit for quizzes taken after the lab-section in which they were assigned, whether or not you take them in the lab room or out of the lab room.\n\nAs with homework assignments, there will be more than 16 points worth of scaled quiz points to earn, but at most 16 will count toward your course grade.\n\nEach week one of the steps in the on-line materials will count towards your grade. Which step this is won't be known to you (or to us, beforehand), but will generally be a step for which you are asked to answer a question or create a file, although it may be a simple reading step for which we will log requests from the UCWISE server. The purpose of grading this is to encourage you to keep up-to-date on the lab materials; generally, the grades for these steps will consider whether you attempted it, rather than whether you did it well.\n\nYour letter grade will be determined by total course points, as\nshown in the following table:\n\nPoints\n\nGrade\n\n185-200\n\nA+\n\n165-185\n\nA\n\n155-165\n\nA-\n\n145-155\n\nB+\n\n135-145\n\nB\n\n125-135\n\nB-\n\n115-125\n\nC+\n\n105-115\n\nC\n\n95-105\n\nC-\n\n75-95\n\nD\n\n< 75\n\nF\n\nIn other words, there is no curve; your grade will depend only on\nhow well you do, not on how well everyone else does.\n\nIncomplete grades will be granted only for dire medical or\npersonal emergencies that cause you to miss the final exam, and only\nif your work up to that point is satisfactory.\n\nCopying and presenting another person's work as your own\nconstitutes cheating. It will be penalized at least by a 0 on the\nwork in question and notification of the incident to the Office of\nStudent Conduct.\n\nApproximate topic/activity schedule\n\nCoverage will proceed roughly as follows.\n(Case studies are included in CS 3 Readings.) Make sure to check regularly the announcements calendar on the UCWISE course portal for the latest information, as topics and sequences may change somewhat.\n\nAlternative courses\n\nOther courses in which you can learn to program include CS 3S,\nCS 4, IDS 110, and CS 61A.\n\nCS 3S is the self-paced version of CS 3. Students may enroll\nfor fewer than four units of CS 3S, in order to take only a portion\nof the course or to spread the complete course over more than one semester.\n(You need only three units of CS 3S to prepare for CS 61A, and two units\nwould probably suffice.)\nThe textbooks used in CS 3S differ from those we'll use,\nso if there's a chance you might want to switch, you should think about\nswitching sooner rather than later.\nFor further information, contact the Self-Paced Center, 642-9920, in\nroom C10 Hearst Field Annex.\n\nCS 4 (or, CS39) is an introductory programming course for science and engineering students, although it is only in its earliest, experimental stages.\nIt is not offered this semester. Programming exercises and class examples\nare drawn mostly from numeric applications (as opposed to the nonnumeric\napplications covered in CS 3). The programming language used is Java.\n\nIn IDS 110, students use programming tools like spreadsheets\nand data base managers as well as write programs.\nProgramming in IDS 110 is done using Javascript.\nIDS 110 also has scheduled lab sections,\nheld in the Tolman Microcomputer Facility in 1535 Tolman.\nCourse staff make an effort to get students with similar interests\nto work together in discussion and lab sections.\nIDS 110 satisfies the computing course requirement for entry\ninto the School of Business Administration.\n\nCS 61A is the first of a sequence of courses aimed at students\nwith a particular interest in computer science. Its prerequisite\nis computing experience roughly equivalent to the first half of CS 3;\nthus students with no previous experience often take CS 3 or 3S to prepare for CS 61A.\nScheme is also used for programming in CS 61A. If you've done more than a little\nprogramming, particularly if your experience includes significant\nexposure to recursion, you should probably take CS 61A rather than CS 3.\nCS 61A is significantly more difficult than CS 3, however!"}
{"text": "This diploma provides traditional programmers with training in the object-oriented programming environment. Upon completion, students program in one language and are able to expand to other object-oriented programming languages."}
{"text": "This guide is an ideal learning tool and reference for Apache Pig, the open source engine for executing parallel data flows on Hadoop. With Pig, you can batch-process data without having to create a full-fledged application?making it easy for you to experiment with new datasets.\nProgramming Pig introduces new users to Pig, and provides experienced... more... that you can write a multilingual indexing application using Sphinx, this book... more...\n\nComputer programming is a skill that can bring great enjoyment from the creativity involved in designing and implementing a solution to a problem. This classroom-tested and easy-to-follow textbook teaches the reader how to program using Python, an accessible language which can be learned incrementally. Through an extensive use of examples and practical... more...\n\nThe current text provides a clear introduction to Computer Science concepts in a programming environment. It is designed as suitable use in freshman- or introductory level coursework in CS and provides the fundamental concepts as well as abstract theorems for solving computational problems. The Python language serves as a medium for illustrating... more...\n\nThe book begins with the very foundations of automated testing, and expands on them until the best-practice tools and techniques are fully covered. New concepts are illustrated with step-by-step hands-on exercises. Testing will be easier and more enjoyable with this beginner's guide. If you are a Python developer and want to write tests for your... more...\n\nP-Prolog is put forward as an alternative proposal to the difficulties faced in the main research areas of parallel logic programmings, which have been studied. P-Prolog provides the advantages of guarded Horn clauses while retaining don't know non-determinism where required. This monograph presents also an or-tree model and an implementation... more..."}
{"text": "Want to develop games for Xbox 360 and Windows Phone 7? This hands-on book will get you started with Microsoft's XNA 4.0 development framework right away -- even if you have no experience developing games. Although XNA includes several key concepts that can be difficult for beginning web developers to grasp, Learning XNA 4.0 shortens the learning curve by walking you through the framework in a clear and understandable step-by-step format.\n\nA system for untangling the confusion and reinfection that keeps guys stuck entirely, or stuck at a very underachieving level, created in a way where anyone can use it.Table of Contents/ List of Topics Covered:Content includes: How to develop focus so you can choose and redirect your thoughts, How to train your mind to spot anything, The power of emotional transmutation, The Sarge Review Process, How to quiet and clear your mind"}
{"text": "Programming Courses\n\nJava technology is a high-level programming and a platform independent language. Java is designed to work in the distributed environment on the Internet. Java has a GUI features that provides you better \"look and feel\". Java enable us to play online games, video, audio, chat with people around the world, Banking Application, view 3D image and [...]\n\nVaaYaaEdutech C++ is a statically typed, free-form, multi-paradigm, compiled,general-purpose programming language. It is regarded as an intermediate-level language, as it comprises a combination of both high-level and low-level language features. C++ is one of the most popular programming languages with application domains including systems software (such as Microsoft Windows), application software, device drivers, embedded software, [...]\n\nAndroid is a mobile operating system for mobile devices such as mobile Phones and tablet computers developed by the Open Handset Alliance led By Google. Android consists of a kernel based on the Linux kernel, with Middleware,libraries and APIswritten in C and application software Running on an application framework which includes Java-compatible Based on Apache [...]\n\nProgramming on the Web The Request/Response Cycle What Is Google App Engine? What Is a \"Cloud\"? Why Did Google Build App Engine and Give It Away for Free? What Is the Google Infrastructure Cloud? Enter the Application Engine Your Application Must Be a Good Citizen in the Google Cloud How the Cloud Runs Your Application [...]\n\nTwitter is a social networking and micro blogging service that allows you answer the question, \"What are you doing?\"by sending short text messages 140 characters in length, called \"tweets\", to your friends, or \"followers.\" Twitter Training At VaaYaaEdutech VaaYaa Edutech Twitter Training courses are flexible , easy to understand and affordable. TheTwitter training courses are thought by [...] Training At [...]\n\nNokia Apps Development Is Now Breathing Fresh Air..And Future Looks Bright Nokia and Microsoft already announced that they would deliver Symbian software updates called Microsoft Apps. These updates will add some serious business productivity tools for anyone buying a new Symbian Belle device, as well as anybody looking to upgrade from Symbian Anna to Symbian"}
{"text": "Category Indexes\n\n0.1 \u2014 Introduction to these tutorials\n\nBy Alex, on May 27th, 2007\n\nWelcome to the C++ tutorials! The tutorials in this section are aimed primarily at beginning level programmers, including those who have little to no prior programming experience. Intermediate level programmers will probably also find plenty of tips and tricks that may be of use in improving their programming skills.\n\nEach tutorial is broken down into sections, with each section containing a number of related subtopics. There is no suggested amount of time that you should spend with each section; progress through the material at a pace that is comfortable for you. Since the concepts from each section tend to build on those from previous sections, it is a good idea to ensure you generally understand each section before you move on.\n\nThe entire series of LearnCpp tutorials is provided free to you. We are hosted on a virtual private server to ensure these tutorials are consistently available any time you need them!\n\nBefore we get started, lets hit on a couple of important goals of these tutorials:\n\n1) Cover programming topics as well as C++. Traditional textbooks do a pretty good job of teaching the basics of a given programming language, but they often do not cover relevant programming topics that are incidental to the language. For example, books will omit sections on programming style, common pitfalls, debugging, good/bad programming practices, and testing. Consequently, by the time you finish the book, you understand how to program in a language, but you have a ton of bad habits that will come back to bite you later! One of the goals of these tutorials is to make sure that all of these incidental topics are covered along the way, in the sections where it naturally makes sense to discuss them. When you finish, you will not only know how to program in C++, you will know how NOT to program in C++, which is arguably as important.\n\n2) Provide a lot of examples. Most people learn as much or more from following the examples as they do from reading the text. It is often the case that the text will describe the theory of something, but the examples show how to apply it. This tutorial will endeavor to provide plenty of clear, concise examples to ensure that you are able to apply the concepts you're learning. We will also avoid the twin evils: the magic hand wave (also known as \u2026), where in the interest of space part of an example is omitted, and the unexplained new concept, where a new concept that is integral to the example is introduced without any mention of what it is or how it works. Both of these tend to lead to \"getting stuck\", which makes moving on to the next concept rather difficult.\n\n3) Provide practice programs. Unlike riding a bicycle, programming topics will fade from memory if not practiced. We strongly encourage you to not only read the examples, but compile and run them to see the result. If you are unsure how they work, use the debugger to walk through them line by line (we will cover how to do that in the appendix). Also, you can learn a lot by modifying the examples and recompiling them to see what happens. However, the best way to learn is to write your own program utilizing the concepts that you've learned. To encourage you to practice, the end of each section will contain some exercises that you can attempt to answer on your own, along with solutions. You can compare your solution against ours to see what we did differently, or, if you get stuck, how we solved the problem. Then you can go back and refocus on the areas you need more work on.\n\n4) Most importantly: have fun. Programming can be a lot of fun, and if you're not generally having fun, you're not in the right mindset to be programming. Tired or unhappy programmers make mistakes, and debugging code tends to take much longer than writing it correctly in the first place! Often you can save yourself some time by going to bed, getting a good night's sleep, and coming back to a problem in the morning. Tired or unhappy tutorial writers have many of the same issues. :)\n\nThank you so much Alex for all the tutorials here, very very helpful and constructive.\n\nBut just one thing\u2026\nyou have been used Hungarian Notation almost everywhere and that's quite painful for newbies like me to read your code, C++ is very hard to read and learn by itself, HN just make it more worst and I preferred to ignore it at all cost.\nComing from Python background and I learn to code in a human-readable way, Also C++11 is all about making C++ fun again, easier to learn, use and teach. I believe Hungarian-Notation is exact opposite to this ultimate goal and I'm not the only one against this \"obsolete\" style of coding.\n\nThis is only my personal opinion, thank you again and please keep it up Alex!\nRegards\nND\n\nWhen I click on that, a page is displayed in which Microsoft states their contract with the publisher has expired and the guide is no longer available. After 15secs, the page is automatically redirected to:\n\n\u2013>'Visual C++ Developer Center'\n\nThe link above takes you directly to the Visuall C++ Developer Center. At that point, under \"Get Started with Visual C++\" is a listing. Select:\n\n\u2013>'Creating Windows Applications'\n\nSelect the first entry under that category:\n\n\u2013>'Creating Win32-Based Applications (C++)'\n\nThis guide is very similar to what I was using for Borland's software. Having a copy of Microsoft's Visual C++ software isn't required to view the web based guide via the above link.\n\nHey I just figured I should show my appreciation really quick \u2013 this is an incredibly helpful tutorial. I came from a limited background (I knew what if-then, loop, and variables were, but not too much more) and learning C++ with this tutorial is easy and effective. Best tutorial out there for C++ (possibly for any language :) ). Thanks!!!\n\nYou probably won't read this but I just want you to know that you should not look at any haters that comment here, they're probably not interested in programming enough to take some effort and go though the material. I'm sure that there are many more people that read all this and learned a lot but didn't comment. Thank you very much for the effort you put in this site!"}
{"text": "Surveying the major programming languages that have hallmarked the evolution of computing, Programming Language Fundamentals by Example provides an understanding of the many languages and notations used in computer science, the formal models used to design phases, and the foundations of languages including linguistics. This textbook guides students through the process of implementing a simple interpreter with case-based exercises, questions, and a semester-long project that encompasses all of the concepts and theories presented in the book into one concrete example. It covers also such topics as formal grammars, automata, denotational and axiomatic semantics, and rule-based presentation.\n\nWritten in an informal yet informative style, Programming Language Fundamentals by Example uses active learning techniques, giving students a professional learning experience based on professional methods applied with professional standards. It provides an understanding of the many languages and notations used in computer science, the formal models used to design phases, and the foundations of languages including linguistics and logic. To give students a thorough, working knowledge of programming languages, this textbook uses a semester-long project in which students create a programming language. This project brings to life the concepts and theories fundamental to computer languages. The author incorporates \"thinking tools\" such as concept maps, matrices for analysis, and flowcharts. Designed for fourth year undergraduates and first year graduates with enough exposure to programming to absorb the technical foundations of languages, this textbook offers a unique approach to understanding how programming languages are created and function."}
{"text": "Developers, this book belongs on your desk!\n\nOnce you understand Objective-C and object-oriented programming, you can create apps for the hottest devices on the market\u2014Macs, iPhones, and iPads. And with this detailed guide, top Mac developer and author Jiva DeVoe will have you coding in no time, even if you're a programming newbie. Coverage ranges from a thorough introduction to Objective-C basics to advanced techniques used by professional coders. You'll learn Objective-C memory management, how frameworks fit together, the tricky business of thread safety, where Xcode fits in, and much more.\n\nUnderstand Objective-C syntax, runtimes, and Xcode\u00ae\u2014and write your first program\n\nCreate classes, work with properties, and learn about objects\n\nUse code blocks, threads, KVO, and protocols\n\nDefine and write macros, handle errors, and use frameworks in your projects\n\nVisit  for the latest on tools and techniques for Apple development, as well as code and project files from the book.\n\nAbout the Author\n\nJiva DeVoe is the founder of Random Ideas, LLC, a software company specializing in iPhone and Mac OS X applications. He has been writing software for nearly 25 years. His iPhone apps have been featured as Apple staff picks and in Apple ads. He is also the author of Cocoa Touch for iPhone OS 3 Developer Reference. Contact Jiva through his blog at"}
{"text": "Teaching F#\n\nFoundation\n\nF# is a mature, open source, functional-first programming language which empowers\nusers and organizations to tackle complex computing problems with simple,\nmaintainable and robust code. It is used in a wide range of application areas\nand is available across multiple platforms.\n\nF# runs on Linux, Mac OS X, Android, iOS, Windows as well as HTML5 and GPUs. F# is free to\nuse and has an OSI-approved open-source license.\n\nF# is supported by industry leading companies providing professional tools,\nand by an active open source community.\n\nThe F# Software Foundation exists to promote, protect, and advance F#, and to\nsupport and foster the growth of a diverse international community of F# users.\n\nNews feed\n\nAbout The F# Software Foundation\n\nThe mission of the F# Software Foundation is to promote, protect, and advance the F# programming language, and to support and facilitate the growth of a diverse and international community of F# programmers.\n\nThe FSSF maintains a core open-source F# code repository and distributions made available to the public free of charge for use across multiple platforms. This includes the F# compiler, F# language specification, the F# core library and assorted tools and applications."}
{"text": "Abstract:\nRoles of variables is a new concept that captures tacit\nexpert knowledge in a form that can, e.g. be taught in introductory\nprogramming courses. A role describes some\nstereotypic use of variables, and only ten roles are needed\nto cover 99 % of all variables in novice-level programs.\n\nThis paper presents the first results of an experiment\nwhere roles were introduced to novices learning Pascal programming.\nStudents were divided into three groups that\nwere instructed differently: in the traditional way with no\ntreatment of roles; using roles throughout the course; and\nusing a role-based program animator in addition to using\nroles in teaching. The results suggest that the introduction\nof roles improves program comprehension and program\nwriting skills. Moreover, the use of the animator affects the\nway students describe programs: they stress data-related\nissues concerning the deep structure of a program, as opposed\nto directly visible operations and control structures."}
{"text": "LEARNprogramming by visualizing code execution\n\nOnline Python Tutor is a\nfree educational tool that helps students overcome a fundamental\nbarrier to learning programming: understanding what happens as the\ncomputer executes each line of a program's source code. Using this\ntool, a teacher or student can write a Python program directly in the web\nbrowser and visualize what the computer is doing step-by-step as it\nexecutes the program.\n\nFor example, I wrote the following Python program to recursively\nfind the sum of a linked list of numbers. Click the\n\"Forward\" button to see what happens as the computer\nexecutes one line of code at a time.\n\nSo far, over 200,000 people have used Online Python Tutor to\nunderstand and debug their programs, often as a supplement to learning\nfrom textbooks, lecture notes, and online programming tutorials.\n\nIn addition, instructors in over a dozen universities such as MIT, UC\nBerkeley, UC Davis, the University of\nWashington, the University of Toronto, the University of Waterloo, Luther College, and Swarthmore\nCollege have used it for teaching introductory computer science and\nprogramming courses.\n\nWatch\na video demo and interview with the instructor of UC Berkeley's\nintroductory CS course.\n\nI am actively seeking partnerships with\neducators at all grade levels to deploy and improve this tool. Email\nme, Philip Guo, at philip@pgbovine.net if you are interested in collaborating.\n\nEMBEDvisualizations in digital textbooks\n\nUsing a single line of JavaScript code, you can embed an Online Python Tutor\nvisualization within your web page (as shown in the \"Learn\"\nbox above). The screenshot below shows a few of these visualizations\nembedded within the online textbook for the introductory CS course at UC\nBerkeley (CS61A):\n\nSHAREvisualizations online\n\nTo share your current visualization, click the \"Generate\nURL\" button (at the bottom of this\npage) and paste that URL link in an email, social networking\npost, or forum question. When recipients click on that link, they will\nsee your exact visualization. This feature is a more effective way for\nstudents to seek assistance than copying-and-pasting code snippets.\n\nFor example, clicking this\nlink brings you directly to step 44 of 57 in a program that finds\nprime numbers using the Python for-else construct.\n\nIn the near future, I plan to add an online authoring environment so\nthat you can save code examples and then create annotations,\ndiscussion threads, lessons, and interactive exercises on top of your\nvisualizations.\n\nMore Details:\n\nOnline Python Tutor supports Python 2.7 and 3.3, hosted on either\na CGI-capable web server or on Google App Engine\n\nWant to help out? I have ideas for student thesis projects or\nfor anyone else who loves to hack. Email philip@pgbovine.net for\nmore info.\n\nJoin the pythontutor-users\nmailing list to participate in user discussions and pythontutor-announce\nto receive occasional announcements.\n(Your name and email address will be kept private; only the list owner can see them.)"}
{"text": "Programming\n\nScheme is a general-purpose programming language, descended from Algol and Lisp, widely used in computing education and research and a broad range of industrial applications. This thoroughly updated edition of The Scheme Programming Language provides an introduction to Scheme and a definitive reference for standard Scheme, presented in a clear and concise manner.\n\nThis text is the first comprehensive presentation of reduction semantics in one volume; it also introduces the first reliable and easy-to-use tool set for such forms of semantics. Software engineers have long known that automatic tool support is critical for rapid prototyping and modeling, and this book is addressed to the working semantics engineer (graduate student or professional language designer). The book comes with a prototyping tool suite to develop, explore, test, debug, and publish semantic models of programming languages.\n\nHundreds of programming languages are in use today\u2014scripting languages for Internet commerce, user interface programming tools, spreadsheet macros, page format specification languages, and many others. Designing a programming language is a metaprogramming activity that bears certain similarities to programming in a regular language, with clarity and simplicity even more important than in ordinary programming. This comprehensive text uses a simple and concise framework to teach key ideas in programming language design and implementation.\n\nThis book provides students with a deep, working understanding of the essential concepts of programming languages. Most of these essentials relate to the semantics, or meaning, of program elements, and the text uses interpreters (short programs that directly analyze an abstract representation of the program text) to express the semantics of many essential language elements in a way that is both clear and executable. The approach is both analytical and hands-on.\n\nIn the early days of computer science, the interactions of hardware, software, compilers, and operating system were simple enough to allow students to see an overall picture of how computers worked. With the increasing complexity of computer technology and the resulting specialization of knowledge, such clarity is often lost. Unlike other texts that cover only one aspect of the field, The Elements of Computing Systems gives students an integrated and rigorous picture of applied computer science, as its comes to play in the construction of a simple yet powerful computer system.\n\n\"I hope that readers will learn to use the full expressibility and power of OpenMP. This book should provide an excellent introduction to beginners, and the performance section should help those with some experience who want to push OpenMP to its limits.\"\n\u2014from the foreword by David J. Kuck, Intel Fellow, Software and Solutions Group, and Director, Parallel and Distributed Solutions, Intel Corporation\n\nInteractive systems and devices, from mobile phones to office copiers, do not fulfill their potential for a wide variety of reasons\u2014not all of them technical. Press On shows that we can design better interactive systems and devices if we draw on sound computer science principles. It uses state machines and graph theory as a powerful and insightful way to analyze and design better interfaces and examines specific designs and creative solutions to design problemsAfter completing this self-contained course on server-based Internet applications software, students who start with only the knowledge of how to write and debug a computer program will have learned how to build web-based applications on the scale of Amazon.com. Unlike the desktop applications that most students have already learned to build, server-based applications have multiple simultaneous users. This fact, coupled with the unreliability of networks, gives rise to the problems of concurrency and transactions, which students learn to manage by using the relational database system."}
{"text": "Books/Subjects/Computing & Internet/Digital Lifestyle/Online Shopping/Amazon Without comprehensive testing, it is impossible to create successful and reliable software. This guide is for students, experienced programmers, project and test managers and...\nMore\n\nBooks/Subjects/Computing & Internet/General Presents accounts of the application of software engineering practices (which may be principles, techniques, tools, methods, or processes) to a specific domain or to the development of a significant...\nMore\n\nThis Fourth Revised Edition ofComputer Organization and Designincludes a complete set of updated and new exercises, along with improvements and changes suggested by instructors and students. Focusing on the revolutionary change taking place in industry...\nMore\n\nSoftware can be very expensive... but only if you make the mistake of buying it! Most computer users need a variety of software to handle tasks such as word processing, crunching numbers in a spreadsheet, handling their email, or managing personal...\nMore\n\nBooks/Subjects/Computing & Internet/Computer Science/Architecture & Microprocessors/Architecture & Logic Software patterns have revolutionized the way developer's and architects think about how software is designed, built and documented. This new title...\nMore\n\nStarting an e-commerce business can be done successfully with a very small investment, but unexpected costs can blow the budget if you're not careful. Fortunately, there is a free tool for just about every job an e-commerce store owner must perform...\nMore\n\nBe smarter than your computer If you don't understand computers, you can quickly be left behind in today's fast-paced, machine-dependent society. Computer Science Made Simpleoffers a straightforward resource for technology novices and advanced techies...\nMore"}
{"text": "Published by Microsoft Press (\n\nIn this lively, eye-opening, hands-on book, all you need is a computer and the desire to learn how to program with Visual Basic 2008 Express Edition. Featuring a full edition of the software, this fun and highly visual guide walks you through a complete programming project\u2014a desktop weather-reporting application\u2014from start to finish. You'll get an introduction to the Microsoft Visual Studio\u00ae development environment and learn how to put the lightweight, easy-to-use tools in Visual Basic Express Edition to work right away\u2014creating, compiling, testing, and delivering your first ready-to-use program. You'll get expert tips, coaching, and visual examples at each step of the way, along with pointers to additional learning resources."}
{"text": "Training\n\nThis in an introductory course to\nmultiprocessing and Parallel Computing. This does not mean that the\ncontent is for beginner programmers. This course introduces the\nbasic concepts of Parallel Computing such as Resources, Ownership,\nTasks, Locks, Events, Polling, Multicore, Blocking and Non-Blocking\noperations, Queues, Atomic Operations, and more.\n\nThis course covers the traps and pitfalls of\nparallel computing. Once you have a working system you may find\nyourself facing numerous problems that are unique for parallel code\nand parallel systems. First step is to be aware of these potential\nproblems. The next step is to be able to identify these successfully\nand learn how to avoid them by utilizing correct design\nmethodologies. This course does not deal with design patterns\nbecause there are too many. Instead the course provides the tools\nfor understanding these problems and provides best practices and\ndesign methodologies.\n\nOperating systems provide a wide variety of\nAPI sets designed for parallel computing but most developers today\nfind it difficult to decide which API technology to use and when to\nuse it. This course provides design patterns for parallel computing\nthat are based on available operating system API sets.\n\nMicrosoft .Net Framework runs over a virtual\nprocessor. This processor is not related to the physical processor\non the system which means that .Net based applications do not see\nthe CPU cores available. Most of the common Win32 API are reflected\nas classes in the .Net Framework, others have even language support.\nThe course covers these tools so that developers and designers know\nwhat tools are available for them. The second part of the course is\ndedicated for the .Net Parallel Extensions library and design\nmethodologies that come with it.\n\nOperating systems provide a wide variety of\nAPI sets designed for parallel computing but most developers today\nfind it difficult to decide which API technology to use and when to\nuse it. This course introduces the available Win32 API sets and\ntechnologies\nthat can be useful for parallel applications."}
{"text": "In undergraduate computer-science classes, homework assignments are usually to write programs, and students are graded on whether the programs do what they're supposed to. Harried professors and teaching assistants can look over the students' code and flag a few common and obvious errors, but they rarely have the time to coach the students on writing clear and concise code.\n\nIn the real world, however, code clarity is as important as software performance. Large software projects can involve hundreds of programmers, each working on a small corner of an application, and over the course of a project, personnel turnover can be high. Testing, revising and updating software may require people to review code that they had no hand in writing. If the code isn't intelligible, engineers can waste a huge amount of time just figuring out how an existing program does what it does.\n\nProfessors of computer science Charles E. Leiserson and Saman Amarasinghe, who co-teach a class called Performance Engineering of Software Systems, believe that undergraduates should be taught to write clear code, not just running code. So this fall, for the second year in a row, students in the class won't just have their projects graded by their teaching assistants; they'll also have their code reviewed by senior programmers from the Boston area, who volunteer their time through a program that Amarasinghe and Leiserson call Masters in the Practice of Software Systems Engineering, or MITPOSSE.\n\nThe roughly 70 students in the class work on four major projects a semester, in two-person teams. After each project is submitted, students from separate teams are paired, and each pair meets with one of the professional programmers for a code review. The code review lasts between 60 and 90 minutes, and each of the 20-odd professionals meets with two pairs of students. The code reviews don't count toward the students' final grades, but they are mandatory.\n\nThe mother of invention\n\nLeiserson and Amarasinghe introduced the class, which they teach only in the fall, three years ago. The first year, enrollment was lower than it is now, and the professors decided to hold their own half-hour code reviews with individual students after each project. \"That killed us,\" Leiserson says. \"Even though we had a small class at the time, it was clearly not scalable.\" So in the summer of 2009, Amarasinghe and Leiserson put the word out among friends and colleagues, former students, and members of the Computer Science and Artificial Intelligence Laboratory's Industry Affiliates Program that they were recruiting seasoned programmers to serve as mentors to their students in the fall. \"We got a tremendous response,\" Leiserson says. Indeed, in both 2009 and 2010, the professors had to turn away applicants to the program. To Amarasinghe and Leiserson's knowledge, theirs is the first computer science class in the country to incorporate code review with professional software engineers.\n\nAccording to Amarasinghe, the chief purpose of the MITPOSSE program is to help students develop their own programming styles. By \"style\" he means things like selecting names for variables, so that it's clear to later readers what they refer to; avoiding the use of so-called \"magic numbers,\" numerals that are simply inserted into equations without explanation (the better practice, Amarasinghe explains, is to assign the number a name that indicates its purpose, and then use the name in subsequent equations); indenting lines of code; and, most important, adding comments \u2014 lines of text that appear next to the program code and explain what it's doing, but which the computer ignores when converting code into an executable program.\n\nIn many computer-science classes, Amarasinghe says, professors trying to preserve intelligibility will insist on a particular style of coding, which may not be natural for some students and, he says, can actually lead to bad code. \"The way we look at programming, it's like writing an English paper,\" he says. \"If you are in English class, there's no set way of writing.\" What's important is that a programmer's style be consistent, not that it slavishly ape some model.\n\nLess is more\n\nOf course, all computer-science professors emphasize the importance of good comments, but busy students usually try to get their programs working and then stick in comments in whatever time they have left. Reid Kleckner, who took Amarasinghe and Leiserson's class as an undergraduate last year and, as a master's candidate, is a teaching assistant this year, says that the MITPOSSE reviews can help some students get a better grasp of the purpose of comments. \"Usually, students hear, 'Comment your code,' and they say okay, line by line, 'This is what this line does, this is what this line does.'\" But, Kleckner explains, comments are in fact more useful when they are spare and descriptive. A program might, for instance, include some clever but obscure procedure that makes it run more efficiently. Simply commenting in the margin that, say, the procedure rounds a number up to the nearest power of two may be all the information the reader needs. \"You don't need to say, here are the arithmetic operations that I am performing, and they achieve this result. Here's my mathematical proof,\" Kleckner says.\n\nMoreover, Kleckner says, with the MITPOSSE approach, \"It's not just graduate students telling you how to write code. It's coming from a figure of authority, in some sense.\" He laughs and adds, \"Not that the T.A. is not a figure authority.\" But a T.A. is not a prospective employer.\n\nIndeed, for the mentors, some of the appeal of volunteering for the program may very well be the opportunity to scout talent. So Leiserson and Amarasinghe have drawn up a set of rules that the mentors agree to abide by, including \"no recruiting, hints at job opportunities, offers of summer internships, lab tours, free dinners, etc.,\" until \"the semester is over and no power relationship exists.\"\n\nBut many of the mentors simply find the work intrinsically satisfying. Barry Perlman, who as an independent software consultant doesn't have any job vacancies to fill, volunteered with the program last year and came back again this year. \"I felt like I was doing something useful,\" he says. \"The world doesn't need more software engineers; the world needs better software engineers.\" Andrew Lamb, too, has joined the MITPOSSE for a second year in a row. He works for a small software company, which isn't looking for dozens of new engineers every year. But, Lamb says, \"when they have some question and I'm able to answer it, and their eyes light up, and they say, 'I get it, I get it,' that's very cool.\"\n\nI believe that making code readable and maintainable is only a secondary purpose of comments and well-chosen symbol names. Their primary purpose is to clarify in the mind of the programmer what (s)he is about to do. Documentation (comments and design docs) written after the code has already been written are of limited value. Their big payoff is the thought process required to write them. The most valuable code comments are completions of the sentence \"The purpose of this {function/class/structure} is ...\"\n\nIf a programmer has trouble naming a function or variable, then its purpose is probably unclear and deserves further thought. Regarding maintainability, while a competent programmer can reverse-engineer code to determine what it DOES, only a comment can convey what it is SUPPOSED to do, which in my experience is often painfully (expensively) unclear.\n\ngoofdup\n- Contrarian\n\n2010-10-29 07:37:59\n\nI disagree, Barry. The comment is for the understanding of others and your future self.\n\nWriting a test is what ensures clarity of purpose prior to programming the function.\n\nz3r0c00l\n- Agree\n\n2010-11-01 07:21:46\n\nAgree with Barry. Clear concise comments which serve both objectives.\n\nPrimary objective: aiding the developer in recalling where they were in the flow when taking breaks, recalling logic, and mapping thoughts real time.\n\nSecondary Objective: helping the next developer with understanding the purpose, and how this code fits logically.\n\nSnoopDougieDoug\n- Write with purpose\n\n2010-11-01 07:15:53\n\nI've documented SDKs for companies as a contract programmer/writer for over 20 years. Good comments are hard to write, but virtually impossible to do later. You should be able to describe what your function/procedure/method does in two sentences. If not, you are doing something wrong. I also love the bit about \"no magic numbers\". Create a static value with a descriptive name and you are half-way home. And please, please, please initialize them with some sane value. Don't trust a language default value. You never know when some goofy \"feature\" will make it something other than what you expect. Be careful of side effects. If you change the value of an input parameter, make sure you point it out, even if you think it is obvious. No surprises, that's how you make friends."}
{"text": "Author\nTopic: Programming language (Read 598 times)Flash uses the ActionScript langauge. Android uses Java. I dont know a lot about ASM except its a really difficult langauge to learn and there are probably a bunch of tutorials around on the internet for any langauge you might want to learn, a quick google will help you find tutorials and resources"}
{"text": "Chapter 1: Graphics\n\nCocos2d is first and foremost a rich graphical API which allows a game developer easy access to a broad range of functionality. In this chapter we will go over some more advanced features of Cocos2d and how you can use these features to serve a variety of different purposes. We'll also explain advanced techniques that are not yet part of the Cocos2d source.\n\nFor the purposes of this chapter Graphics can be considered an umbrella term. We will also go over advanced techniques using Actions and Particles."}
{"text": "Fancy Footwork\nA technology called R++, developed by AT&T's Bell Labs, should help bridge the gap between object-oriented and rules-based programming. Developers are increasingly focused on implementing business rules in software, and applications written to incorporate business rules can more appropriately respond to situations in which multiple conditions are necessary to trigger a particular action or set of actions. For example, a loan-analysis application could apply rules to determine whether a particular loan request should be granted or rejected.\n\nR++ was developed in the mid-1990s but has languished during the past couple of years because of an ownership dispute between AT&T and its former Bell Labs unit, which is now part of Lucent Technologies Inc. That dispute has been resolved, and it looks like R++ could soon be licensed for noncommercial distribution.\n\nR++ is an extension to C++ and supports the integration of data-driven rules with C++ objects. A rule acts in much the same way as an \"if-then\" statement that's triggered wherever a particular set of data is changed. The benefits of R++ include the ability to write more kinds or more complex business applications that separate procedural logic from data that's most appropriately expressed as rules. Its creators also say R++ should shorten the time involved in identifying application requirements and design because policies can be expressed as rules.\n\nThe syntax and semantics of R++ conform to C++ conventions, and rule-containing files are translated into C++, allowing familiar software development tools to be used. R++ rules can operate directly on C++ objects. There are already quite a few commercial rules systems for C++ and Java that are more or less integrated with the C++ object model. Some of those systems create their own set of objects that aren't really C++ objects. This situation is less than desirable.\n\nThe idea behind R++ wasn't just to implement a rules system in an object-oriented language, but to make sure the object lives and breathes like a C++ object. With R++, the Bell Labs team tried hard to make the rules part of the object model.\n\nThe rules are essentially just new elements that are a part of the object. They are inherited and can be overridden. To effectively implement data rules in C++, three issues must be addressed, according to Peter Patel-Schneider, a member of the technical staff at Bell Labs. One is to implement rules in such a way that application developers don't have to check on them too often.\n\nThe second issue is that most applications need to run as fast as possible. There's definitely a performance penalty with the application of rules. The R++ team tried to make the performance penalty as small as possible, but R++ does add overhead. Bell Labs tried to make reasonable trade-offs there, Patel-Schneider says.\n\nThe third issue is the desirability of having an integrated development environment. When programming in a language such as C++, a debugging environment and many other things are necessary to be able to see what's happening. \"We couldn't do much along those lines because we didn't have control of any C++ environment,\" Patel-Schneider says.\n\nIt's important to note that R++ is not a commercial piece of software, so a fair amount of hands-on work will still be required.\n\nWho's Running The Web Site\nToo often, the job of running a business Web site falls to the graphics department. But Equilibrium Technologies Inc. hopes to put an end to that with its upcoming MediaRich Publishing Platform, a database application or hosted service that automates media publishing on the Web.\n\n\"Artists create compelling content, but what needs to be generated on the Web site is a business decision,\" says Rocky Offner, Equilibrium's VP of engineering. These days, business managers may have to wait days or weeks before the art department can do all the graphics prep work needed to make content changes on an image-rich Web site.\n\nThe MediaRich platform will make controlling Web-site content trivial. And Web artists, who spend as much as 80% of their time on post-production work, will be able to spend all their time on creative pursuits.\n\nRather than process each image individually, MediaRich uses the MediaScript language to modify images that are stored on the server using the standards and templates that have been created by the production department. \"You create a media-rich site that's dynamically driven from any database,\" Offner says. This enables thousands of images to be generated and deployed automatically. The software integrates with existing content-creation applications, HTML authoring tools, content-management systems, and content-delivery networks. It's available in standalone and enterprise editions.\n\nNextOffice.com Inc., a business furniture sales site and beta customer, uses the technology to let customers look at furnishings online and view a variety of product options in real time. The software also supports zooming and panning of images. NextOffice.com had the system up and running in two days.\n\nAn automobile buying site did something similar but spent more than $1 million and took three months to custom-develop the capabilities; it created every possible combination of images in advance rather than use a template that makes instantaneous changes to images."}
{"text": "TI-Basic Programs\n\nOverview\n\nThis book is a collection of TI-BASIC programs and their codes. By copying the code into your own TI-83+/TI-84 calculator, you will be able to use any of these programs on your own.\n\nWriting a Program\n\nThere are just a few steps to follow in order to write a program onto your TI-83+ or TI-84 calculator using TI-BASIC.\n\nTurn on your calculator and press the PRGM button.\n\nPress the right arrow button twice to move to NEW.\n\nPress Enter to select Create New.\n\nName the program. If the program is of your own creation, give it whatever name you would like it to have using the letters above each button or any of the numbers 0-9. If you are copying a program from this book, type in the name already given.\n\nWrite the code of the program by using the digits and commands found on the calculator and by using the PRGM sub-menus while within the program code. These menus contain lists of many of the most vital programming commands, such as If, Then, End, While, Menu(, and many others. Other helpful menus of commands are the MATH, TEST, and DRAW command lists.\n\nNote: Some of the programs in this book use lower-case letters in their program codes. In order for a TI calculator user to type in lower-case letters you must have MirageOS on your calculator. You must also check the checkbox for Enable Lowercase in Miscellaneous Options on the Options screen within MirageOS. The Options screen can be opened by pressing the ALPHA key in MirageOS. RAOSX is also useful for enabling lowercase letters and other common assembly functions."}
{"text": "Note: Some 6.170 students have\nacquired Repetitive Strain Injuries (RSI) over the course of the\nfinal project in the past.\nDon't let it happen to you. It hurts.\nPlease\nread the MIT web site about RSI before embarking on the final project.\n\nIntroduction\n\nThis handout describes one of the two final project choices you\nhave this term, Gizmoball. For information on RSS Client, the other\nproject, refer to handout devoted to it.\n\nThe goal of the project is to design, document, build, and test a\nprogram that plays Gizmoball. Gizmoball is a version of pinball, an\narcade game in which the object is to keep a ball moving around in the\ngame, without falling off the bottom of the playing area. The player\ncontrols a set of flippers that can bat at the ball as it falls.\n\nThe advantage of Gizmoball over a traditional pinball machine is\nthat Gizmoball allows users to construct their own machine layout by\nplacing gizmos (such as bumpers, flippers, and absorbers) on the\nplaying field. These machine layouts may also form complicated \"Rube Goldberg\" contraptions\nthat are intended to be watched rather than played. (If you don't know\nwhat a Rube Goldberg machine is, see \nor \nAs an optional extension (after you have designed, documented,\nimplemented, and tested all required functionality), you may create\nnew varieties of gizmos that can be placed on a playing field.\n\nGizmoball Overview\n\nBecause this project is in part a design exercise, the assignment\nspecifies what the user should be able to do and leaves it up to you\nto figure out what modules and interfaces are appropriate. This\nsection gives an overview of Gizmoball. A more detailed specification\nis given in Appendix 1. To enable\nautomated testing, your implementation must support a XML file format\n(defined in Appendix 2), in addition to the\nloosely-specified graphical user interface.\n\nGizmoball has a graphical user interface with two modes, building\nmode and running mode.\n\nIn building mode, a user can:\n\ncreate and edit square, circular, and triangular bumpers\non the playing surface,\n\ncreate and edit flippers,\n\nconnect the action of flippers and bumpers to triggers,\nsuch as a keyboard key being hit or one of the bumpers being bumped,\nand\n\nsave and load the user's game configuration to and from\na file.\n\nIn running mode, the user can play the game.\n\nA screenshot of one implementation of Gizmoball. Your\nimplementation will look different (depending on your choice of user\ninterface), and your ball motion may not match the animation given\nexactly.\n\nThe picture above illustrates the most important features of\nGizmoball.\n\nThe gizmo palette on the side provides the user with a variety\nof operations (square, circle, triangle, flipper) for placing\ngizmos in the playing area.\n\nThe \"modifications\" toolbar on the bottom provides the user\nwith a variety of operations (move, delete, rotate) for\nediting the gizmos in the playing area.\n\nThe modifications toolbar also provides a connect button\nthat connects the trigger of one gizmo to the action of another.\nAfter this button is pressed the user can connect gizmos\ntogether. For example, the user might press the connect button, then\nclick on one of the circular bumpers, and then click on one of the\nflippers. As a result, every time the bumper's trigger is activated\n(which occurs when a ball hits the bumper), the flipper's action (to\nrotate around its pivot) will occur. Alternatively, the user might\npress the connect button, then press a key, then answer a question\nabout whether the up or down keypress is of interest, then click on\none of the flippers. As a result, every time the user depresses (or,\nrespectively, releases) that key, the flipper will move. Several\ntriggers may activate the same gizmo.\n\nThe purple bar across the bottom of the playing area is the\nabsorber gizmo. When a ball enters the absorber, the ball stops\nmoving and is held in the absorber's lower right-hand corner. The\nabsorber gizmo's action is to shoot a ball it is holding (if any)\nstraight up in the direction of the top of the playing area.\nConnecting the absorber to itself allows the game to loop continually:\nevery time a ball enters the absorber, it is immediately shot out\nagain.\n\nThe menu at the top of the window allows the user to save\nor load game configurations and to run or stop\nthe game. In the animation, a game is in progress: the ball is the\nsmall blue circle which started in the lower right-hand corner. The\nball bounces off the red, green, and blue bumpers, and is hit by the\nyellow flippers.\n\nEach team may enter its Gizmoball implementation into a class\ncontest for one or more of the following awards:\n\nBest Design: Awarded for the project with the best\nabstraction, modularity, extensibility, simplicity, etc. The quality\nof the final report is also considered.\n\nBest Gizmoball Game/Usability: Awarded for the project with the best\ngame-play and best user interface. Part of your submission for this\nprize should be an input\nfile that sets up the playing area; the prize is for the playable game\nitself, not for the construction kit.\n\nMost Artistic: Awarded for the project that is the most beautiful\nor fascinating to watch. Part of your submission for this prize should\nbe an input file that sets up the playing area. When run with this\ninput file, the ball or balls should bounce around forever without the\nuser needing to press any keys.\n\nWhether your program implements only the basic required functionality\norextra gizmos etc. will not be considered when making the\ndesign award. However extra functionality that improves game-play or\n\"Rube Goldberg\" artistry will be an asset in competing for the other\ntwo awards.\n\nEach team will receive a single grade for the final project, determined as follows:\n\nCategory\n\nDeliverable\n\nDue date\n\n% project grade\n\nGraded on\n\nDesign\n\nPreliminary design document\n\nWed. Nov. 9 at 12 noon\n\n15%\n\nAre key issues identified?\n\nFinal design document\n\nMon. Dec. 5 at 12 noon\n\n15%\n\nIs design clean, robust and flexible?\n\nTeam work\n\nWeekly meetings\n\nweekly\n\n10%\n\nDid team work well together? Did all members participate constructively?\n\nPackaging\n\nUser Manual\n\nMon. Dec. 5 at 12 noon\n\n8%\n\nIs the tool easy to use? Is the user manual clear and helpful?\n\nWebstart delivery of executable\n\nMon. Dec. 5 at 12 noon\n\n2%\n\nIs the client packaged correctly?\n\nImplementation\n\nSpecifications, preliminary\n\nMon. Nov. 21 at 12 noon\n\n5%\n\nAre important interfaces identified and crucial parts well documented in Javadoc?\n\nSpecifications, final\n\nMon. Dec. 5 at 12 noon\n\n5%\n\nAre important interfaces well documented in Javadoc?\n\nUnit tests, preliminary\n\nMon. Nov. 21 at 12 noon\n\n5%\n\nAre there good unit tests for non-trivial classes?\n\nUnit tests, final\n\nMon. Dec. 5 at 12 noon\n\n5%\n\nAre there good unit tests for non-trivial classes?\n\nSource code, preliminary\n\nMon. Nov. 21 at 12 noon\n\n15%\n\nIs the code clean and well structured? Basic functionality working?\n\nSource code, final\n\nMon. Dec. 5 at 12 noon\n\n15%\n\nIs the code clean, well-structured and low in defects?\n\nHere is what each of the deliverables should contain:\n\nPreliminary design document: includes basic decomposition,\nrationale (succinct informal narrative\nexplaining why certain design decisions were made, and what\nalternatives were considered and rejected); and work allocation and\nmilestones (how tasks will be divided amongst team members, and the\ndates on which tasks are expected to be completed). You should also\ninclude sketches of what your GUI will look like (if you draw by hand,\nmake arrangements with your TA for turning that sketch in).It should\nbe possible to read the document linearly, so you should minimize the\nuse of forward references, and should provide enough overview and\nexplanatory material to make the design artifacts comprehensible.\nThe purpose in preparing the preliminary design is to identify and\nexplore important issues, so the document will be judged on how well\nit does this, rather than on the quality of the design per se.\n\nFinal design document: includes basic decomposition,\nrationale (succinct informal narrative\nexplaining why certain design decisions were made, and what\nalternatives were considered and rejected); a brief description of\nyour strategy for testing and validation; and a post mortem (a\ndiscussion of which design decisions turned out well, and which turned\nout badly, and why; whether the milestones were met, and what you did\nwhen they were not). Any changes between the preliminary and final\ndesign should be noted and explained.\n\nUser manual: a standard user manual, intended for users not\nfamiliar with any of the course material. The better the design of the\nuser interface of your client, the less you will need to explain in\nthe user manual.\n\nSpecifications: every public method should have at least a\nminimal Javadoc specification. A careful pre-post specification should\nbe written for any subtle or important method.\n\nUnit tests: each test should have a brief comment\nexplaining its purpose.\n\nPreliminary Source code: will be judged by its correctness,\nclarity of structure, and the judicious use of runtime assertions and\nrepresentation invariants.\n\nFinal Source Code: will be judged by its correctness,\nclarity of structure, and the judicious use of runtime assertions and\nrepresentation invariants. You will also need to package your\napplication using the Java Web Start (JAWS) tool. See the Final Project Tools\nhandout for more information on JAWS.\n\nSome general points:\n\nThe work you hand in for the preliminary design and release should\ndiffer from that of the final release in its state of completeness,\nnot in its quality. It's very important to get into the habit of\nworking methodically. If you just hack like mad, and hope to make your\ncode clean and elegant at the end, you won't succeed.\n\nFor the preliminary release, you will be expected to demonstrate\nsome basic functionality. Here is the minimum that we expect:\n\nDemonstrate key-press triggering of a flipper on the\nscreen. When a key is pressed, the flipper should rotate 90\ndegrees; after the key is released, the flipper should rotate back\nto its original position. You should be able to trigger it a second\nor third time by pressing the key again after it has returned to\nthe original position. (You need not demonstrate connecting the key\nto the flipper in build mode.)\n\nDemonstrate a working absorber, ball motion, gravity, and\nfriction. In running mode, with no bumpers or flippers on the\nscreen and the ball sitting still in the absorber, you should be\nable to press a key, observe the ball shoot up out of the absorber,\nslow down as it rises, fall back to the absorber, and return to its\noriginal position. Also demonstrate that you can shoot it out a\nsecond time. (Note that you do not yet need to support configurable gravity\nor friction constants.)\n\nHandle ball collisions with bumpers and the walls. Proper\nhandling of ball-flipper collision is not required at this\nstage. During running mode, a ball shot out of the absorber must\nbehave properly when it collides with bumpers or with the outer\nwalls.\n\nDemonstrate loading files in the standard format. Given a test\nfile, your implementation should display the gizmos specified in\nthat file at the specified locations on the screen. You should be\nable to load and display all the standard gizmos.\n\nYour animation in run mode should be smooth and adequate to\ndemonstrate the features required above.\n\nYour TA will judge the usability and correctness of your client\nlargely during a demo at the end of term. You will have about 15\nminutes to show off your work, to be followed by about 30 minutes of\nquestions and discussion directed by your TA.\n\nAfter the preliminary release, we will give you an\namendment: a request for an additional feature. How easy it is\nto accommodate it will depend on well you have designed your client to\nanticipate reasonable increments of functionality. In judging your\nfinal release, the new feature will be considered one of the required\nfeatures.\n\nAll deliverables should be handed in electronically and (with the\nexception of the code) as hardcopy to your TA (double sided and\nstapled). Late handins will be heavily penalized; for the final\nrelease, because of end-of-term constraints, late handins will not be\naccepted.\n\nWeekly Meetings with TA\n\nEach team will meet with its TA once a week for an hour. You should\ncontack your TA to schedule these meetings. To receive full\nparticipation credit:\n\nAll team members must be present at all meetings.\n\nAll team members must answer questions and participate in the\ndiscussion at each meeting.\n\nA clear progress document that is useful for productive\ndiscussions must be handed in each week at the meeting. At the first\nmeeting a draft of the Preliminary Design will serve as the progress\ndocument.\n\nAlthough the progress document must be clear, it is short and\ninformal. This document will form the basis of discussion during the\nmeeting, and the TA will keep it on file as a record of progress\nmade. The team should bring multiple copies to the meeting, one for\neach team member and one for the TA. This progress document should\ninclude the following information:\n\nA description of all the new issues that have been discovered\nduring the previous week. This includes both a list of newly\ndiscovered bugs, and a list of unresolved design issues.\n\nA description of all the issues that have been solved over the\npast week. This includes a list of bugs that were fixed, and how they\nwere fixed, and a list of design issues that were resolved, and how\nthey were resolved.\n\nA list of all the issues from previous weeks that are still\nunresolved.\n\nA plan for the next week, with specific actions and goals for each\nteam member.\n\nAn assessment of success at meeting the previous week's plan.\n\nThe document may also contain any other material that you feel\ndescribes your progress, such as object model or MDD fragments showing\nchanges to the design.\n\nResources\n\nThis section is full of information and links that will help you\ncomplete your final project.\n\nAnimations in Java are quite challenging. You will use the\njava.awt and javax.swing packages to\nconstruct your graphical user interface (GUI). We have provided you\nwith a demonstration program in Example.java that shows how to animate the\nmovement of a ball bouncing around the window. It also demonstrates\nhow to get your program to listen to user events, such as clicking on\na toolbar button, pressing a key or dragging the mouse. All members of\nyour group should be able to compile and execute this demo GUI.\n\nWe have also provided you with a library of physics routines (see Appendix\n3) for calculating the dynamics of elastic collisions. You are\nwelcome to use this code as is, or modify it in any way that you like.\n\nHints\n\nGeneral\n\nDesign\n\nA careful design will save you a lot of time in the long run. It's\nwell known that a small mistake made early in a project can become a\nbig problem if it's not caught until much later. The preliminary\ndesign is a major part of the project (more so than its proportion of\nthe grade might indicate). Do it very carefully, trying to anticipate\nproblems that may arise. Then the rest of your project will be more\nstraightforward and more fun.\n\nPrototype\n\nOne of the largest challenges for this kind of design problem is\nfiguring out where the \"gotchas\" are. If you are having difficulty\nimagining how to structure one part of the design it sometimes helps\nto build a small prototype. Plan to throw away your prototypes. Once\nyou've figured out how to do design something correctly, it rarely\nmakes sense to try to retrofit a hacked up, broken version.\n\nValidate early and often\n\nValidation shouldn't be an afterthought! You may choose a design\nbecause its implementation will be easier to test. Make sure you\nvalidate your code as you implement.\n\nDocument early and often\n\nIncomplete documentation is better than no documentation at all. If\na potential problem or subtlety occurs to you, but you don't have time\n(or are unable) to formulate it properly, then just add a few\nsentences in your document describing the issue. Later, if you have\ntime, you can go back and fix it.\n\nDon't overdocument\n\nDon't include any redundant material. For example, there's no need\nto explain the difference between black-box and glass-box\ntesting. Just indicate which of your test cases fall in each\ncategory. Similarly, being rigorous is not the same as belaboring the\nobvious. You can assume that your TA knows what a set or a stack\nis. There's no need to explain something from scratch when you can use\nstandard terms and notions.\n\nHave fun being on a team\n\nEnjoy being part of a team. Run new ideas past your partners, and\ndiscuss problems with them. Read and discuss each others code. A good\nway to find a bug is to ask someone else to look at your code. Start\nearly!\n\nCommunicate effectively\n\nEach meeting you hold with your team members (or your TA) should\nhave\n\nan agenda. Don't get together unless you know the reason.\nThis will help you avoid wasting time.\n\na designated leader to facilitate the meeting. The leader\nensures that the meeting stays on track, encourages all group\nmembers to participate, and helps to resolve problems.\n\na secretary who takes notes and distributes them to the\nremainder of the group afterward. These notes highlight the\nimportant decisions made, issues resolved (and not resolved),\netc. They ensure that all decisions are agreed upon by everyone and\nthat everyone is aware of the issues raised at the meeting.\n\nThe roles should rotate among the group members; in 6.170, no one\nindividual should perform any of the roles disproportionately\noften.\n\nPrioritize\n\nWe had fun putting together this project. Our goal was to provide\nyou with a project that is both very challenging and offers many\nopportunities for you to be creative. We encourage you to\nexperiment. Make your implementation of Gizmoball as beautiful to\nwatch, and as fun to play as possible. That said, make sure you get\nthe basic functionality working before you add bells and\nwhistles. The best way to approach extensions to the project is to\nmake your initial design flexible and extensible.\n\nCoding\n\nYou should acquire background knowledge\nabout Swing before attempting to code your GUI. You can see Sun's Swing\ntutorial (particularly the quick tour).\n\nDo not try to use the realtime clock in order to determine timing\ninformation. Instead, arrange to receive a timer event every\n1/framesPerSecond and proceed to do the simulation and screen updates\nin response to this event. If you get behind and time slows down, so\nbe it. A simple way to set this up is do use the javax.swing.Timer\nclass, as in the example GUI. Using\nthis approach will simplify the implementation of your code and will\nalso avoid the need to deal with synchronization issues in a\nmulti-threaded program.\n\nIf you are using Swing and wish to paint your own component, as you\nwill need to do in order to actually draw the board, gizmos, and ball,\nyou should extend javax.swing.JComponent\nand implement your own paint routines. In order to do this you will\nneed to override the paint\nmethod of your JComponent to paint the board. The\npainting is done by calling methods on the supplied java.awt.Graphics\nobject. Unless you explicitly turn it off, Swing components are\nautomatically double-buffered to reduce flicker. If you do not\nunderstand this, do not worry about it. In addition to\nGraphics Java has an alternative graphics context\njava.awt.Graphics2D\nwhich provides more sophisticated capabilities than the traditional\nGraphics object. Note that the calls your components\nreceive to paint(Graphics) will always have a\nGraphics2D passed as the argument, so if you want to work\nwith Graphics2D, you may simply cast the\nGraphics object. You may implement Gizmoball using either\nstyle of graphics, but here are some differences which you might want\nto consider:\n\nThe Graphics object works in terms of integer values\nfor pixels allowing you to more directly control which pixels are\nupdated.\n\nGraphics2D, on the other hand, accepts\nfloating point values to define geometric shapes to be rendered and\nperforms the rasterization itself. This is somewhat more automatic,\nbut also makes it more difficult to directly set individual\npixels.\n\nThe Graphics2D class also allows\nAffineTransforms to be applied to it. (An affine\ntransform is a geometric transform that preserves parallel lines.)\n\nKeypress\n\nThe specifications for handling keyboard input in Gizmoball require\nthat an object connected to a key is triggered when that key is\npressed or released. This provides behavior similar to that\nof a real pinball game: hitting the button causes the flipper to swing\nupward and releasing the button causes the flipper to return to its\nrest position.\n\nKeyboard events\n\nThe Java specifications for java.awt.event.KeyEvent\ndescribe three types of key events, KEY_PRESSED,\nKEY_TYPED, and KEY_RELEASED. The\ndocumentation suggests that KEY_PRESSED events occur when\na key is actually depressed by the user and KEY_RELEASED\nevents occur when the key is released. It would therefore seem\nreasonable to trigger when receiving a KEY_PRESSED or\nKEY_RELEASED event for a given key bound to a gizmo.\n\nUnfortunately, most Java runtime environments fire multiple\nKEY_PRESSED and in some cases multiple\nKEY_RELEASED events when the user has only pressed the\nkey once. Additionally, in some environments you may never receive the\nKEY_RELEASED events for an upstroke. This is because the\nbehavior of KEY_PRESSED and KEY_RELEASED is\nsystem dependent. The behavior occurs through an interaction with the\noperating system's handling of key repeats that occur when you hold\ndown a key for a period of time.\n\nOn Windows and MacOS\n\nOn Windows and MacOS, Java will produce multiple KEY_PRESSED\nevents as the key is held down and only one KEY_RELEASED\nwhen the key is actually released. For example, holding down the 'A'\nkey will generate these events:\n\nPRESSED 'A'\nPRESSED 'A'\n...\nRELEASED 'A'\n\nOn Unix\n\nOn Unix, multiple pairs of KEY_PRESSED and\nKEY_RELEASED are received as the key is held down:\n\nSolutions\n\nYou should feel free to handle this nuance of the Java API as you\nsee fit. One easy solution is to shut off the operating system's\nautomatic\nkey press repeat mechanism and thereby cause the KEY_PRESSED\nand KEY_RELEASED events to more closely correspond to the\nactual actions of the user.\n\nWindows:\nGo to the Control Panel's Accessibility Options applet.\nOn the Keyboard tab select the Settings...\nbutton for FilterKeys.\nSelect Ignore quick keystrokes and slow down the repear rate.\nSelect the Settings... button next to that option.\nMake sure No keyboard repeat is selected.\nSlide the SlowKeys slider to Short (0.00).\nPress OK twice.\nCheck Use FilterKeys and press OK. To enable and disable\nthese changes, simply check or uncheck the UseFilterKeys\ncheckbox.\n\nMacOS:\nGo to System Preferences and select Keyboard and Mouse. Select Keyboard.\nDrag the Delay Until Repeat slider to the Off position.\n\nAsking the end user to perform settings such as these is acceptable,\nbut should be included in your Gizmoball documentation.\n\nAn alternative solution\nis to take advantage of a special key listener\ndecorator provided by the staff. The class is available in compiled\nform in the gizmo.jar file as\nstaffui.MagicKeyListener. Refer to the\ndocumentation for\nMagicKeyListener or use the\nprovided source\ncode as your own starting point.\n\nAppendix 1: Detailed Requirements\n\nGeneral\n\nYour implementation must support two modes of execution:\nbuilding and running. In building mode, the user can add\ngizmos to the playing area and can modify the existing ones. In\nrunning mode, a ball moves around the playing area and interacts with\nthe gizmos.\n\nPlaying Area\n\nTo describe dimensions in the playing area, we define L be the\nbasic distance unit, equal to the edge length of a square bumper.\nCorresponding to standard usage in the graphics community, the origin\nis in the UPPER left-hand corner with coordinates increasing to the\nright and DOWN.\n\nThe playing area must be at least 20 L wide by 20 L high. That is,\n400 square bumpers could be placed on the playing area without\noverlapping. The upper left corner is (0,0) and the lower right\ncorner is (20,20). When we say a gizmo is at a particular location,\nthat means that the gizmo's origin is at that location. The origin of\neach of the standard gizmos is the upper left-hand corner of its\nbounding box, so the location furthest from the origin at which a\ngizmo may be placed is (19,19) on a 20L x 20L board. The origin of a\nball is at its center.\n\nDuring building mode, Gizmos should \"snap\" to a 1 L by 1 L grid.\nThat is, a user may only place gizmos at locations (0,0), (0,1),\n(0,2), and so on.\n\nDuring running mode the animation grid may be no coarser than 0.05\nL by 0.05 L. Suppose that the ball is at (1,1) and is moving in the\n(1,0) direction -- that is, left to right -- at a rate of .05L per\nframe redraw. Then the ball should be displayed at least in positions\n(1,1), (1.05,1), (1.10,1), and can be displayed at more positions if\nyou wish the animation to be smoother. Rotating flippers can be\nanimated somewhat more coarsely; see the precise description of flippers below. If the ball is moving faster than\nthe animation grid size per frame redraw, it need not be redrawn in\neach animation grid position.\n\nBuilding Mode\n\nIn building mode the user can:\n\nAdd any of the available types of gizmos toMove a gizmo from one place to another onApply a 90 degree clockwise rotation to any gizmo.\n\nRotation has no effect on gizmos with rotational symmetry. For\nexample, circular bumpers look and act the same, no matter how\nmany times they have been rotated by 90 degrees.\n\nConnect a particular gizmo's trigger to a particular gizmo's\naction.\n\nThe standard gizmos produce a trigger when hit by the\nball, and exhibit at most one action (for example, moving a\nflipper, shooting the ball out of an absorber, or changing the\ncolor of a bumper). The trigger that a gizmo produces can be\nconnected to the actions of many gizmos. Likewise, a gizmo's\naction can be activated by many triggers. The required triggers and actions for the\nbasic gizmos are described below.\n\nNote that triggers do not \"chain\". That is, when A is\nconnected to B and B is connected to C, a ball hitting A should\nonly cause the action of B to be triggered.\n\nConnect a key-press trigger to the action of a gizmo.\n\nEach keyboard key generates a unique trigger when pressed. As\nwith gizmo-generated triggers, key-press triggers can also be\nconnected to the actions of many gizmos.\n\nDelete a gizmo from the playing area.\n\nAdd a ball to the playing area.\n\nThe user should be able to specify a position and\nvelocity.\n\nAn attempt to place the ball in such a way that it overlaps a\npreviously placed gizmo or the boundary of the playing area should\nbe rejected (i.e., it should have no effect). There is one\nexception in the standard gizmo\nset: a stationary ball may be placed inside an absorber.\n\nSave to a file named by the user.\n\nYou must be able to save to a file in the standard format given in Appendix 2. You may, if you wish, define\nan extension to the standard format that handles special features\nof your implementation. If you do so, the user must have the\nchoice of saving in the standard format or in your special\nformat.\n\nThe saved file must include information about all the gizmos\ncurrently in the playing area, all of the connections between\ntriggers and actions, and the current position and velocity of the\nball.\n\nLoad from a file named by the user. You must be able to load a\ngame saved in the standard format.\n\nSwitch to running mode.\n\nQuit the application.\n\nRunning Mode\n\nIn running mode, the user can:\n\nPress keys, thereby generating triggers that may be connected to\nthe actions of gizmos.\n\nSwitch to building mode at any time.\n\nIf the user requests to switch to building mode while a\nflipper is in motion, it is acceptable to delay switching until\nthe flipper has reached the end of its trajectory.\n\nSimilar short delays in order to finish transitional states of\ngizmos you create are also acceptable.\n\nQuit the application.\n\nIn running mode, Gizmoball should:\n\nProvide visually smooth animation of the motion of the ball.\n\nThe ball by default must have a diameter of approximately 0.5L.\n\nBall velocities must range at least from 0.01 L/sec to 200\nL/sec and can\ncover a larger range if you wish. 0 L/sec (stationary) must also be\nsupported.\n\nAn acceptable frame rate should be used to generate a smooth\nanimation.\nWe have found that 20 frames per second tends to work well across\na reasonably wide range of platforms.\n\nProvide intuitively reasonable interactions between the ball and\nthe\ngizmos\nin the playing area. That is, the ball should bounce in the direction\nand\nwith the resulting velocity that you would expect it to bounce in a\nphysical\npinball game.\n\nContinually modify the velocity of the ball to account for the\neffects\nof gravity.\n\nYou should support the\nstandard gravity value of 25 L/sec2, which resembles a\npinball game with a slightly tilted playing surface.\n\nContinually modify the velocity of the ball to account for the\neffects\nof friction.\n\nYou should model friction by\nscaling the velocity of the ball using the frictional constants mu\nand mu2. For sufficiently small delta_t's\nyou can\nmodel friction as Vnew = Vold *\n(1 - mu * delta_t - mu2 * |Vold|\n* delta_t).\n\nThe default value of mu\nshould be 0.025 per second.\n\nThe default value of mu2 should be 0.025\nper L.\n\nStandard Gizmos\n\nThere are seven standard gizmos that must be supported: bumpers\n(square,\ncircular, and triangular), flippers (left and right), absorbers, and\nouter walls.\n\nA coefficient of reflection of 1.0 means that the energy of the ball\nleaving the bumper is equal to the energy with which it hit the bumper,\nbut\nthe ball is traveling in a different direction. As an extension, you\nmay\nsupport bumpers with coefficients above or below 1.0 as well.\n\nFlippers are required to come in two different varieties, left\nflippers and right flippers. A left flipper begins its rotation in a\ncounter-clockwise and a right flipper begins its rotation in a\nclockwise direction.\n\nDuring run mode, a flipper should never extend outside its bounding\nbox.\nIn edit mode the flipper should not be permitted to be placed in any\nway\nwhich would cause the flipper to extend outside of its bounding box\nduring\nrun mode, or would cause the flipper's bounding box to overlap with\n(the\nbounding box of) another gizmo.\n\nThe below pictures show flipper\nplacements for various initial\nrotations. In run-mode, when a flipper is first triggered, it sweeps\n90\u00b0 in the direction indicated by the arrows. If triggered\nagain, the flipper sweeps back 90\u00b0 to the initial position.\n\nIn the pictures, the shape and design of the flippers are for\nillustrative\npurpose only -- your final design may differ.\n\nFlipper initial placements and initial directions of rotation.\n\nAs with the three standard bumpers, a flipper generates a trigger\nwhenever the ball hits it.\n\nWhen a flipper's action is triggered, the flipper rotates at a\nconstant\nangular velocity of 1080 degrees per second to a position 90 degrees\naway\nfrom its starting position. When its action is triggered a second time,\nthe flipper rotates back to its original position at an angular\nvelocity\nof 1080 degrees per second.\n\nIf its action is triggered while the flipper is rotating, the exact\nbehavior is at your discretion. Here are some suggestions, but you\nare not limited to these options:\n\nIgnore triggers while the flipper is in motion.\nThis behavior may be undesirable for the user because a single\npress and release of a key might not cause the flipper to return to its\noriginal position.\n\nWait until the flipper finishes rotating (and responding to any\npreviously-received triggers) before responding to the action.\nThis behavior may be undesirable for the user because several\nquick keypresses in a row could cause the flipper to flip\nrepeatedly for a long period of time.\n\nQueue at most one trigger during the initial forward motion and\nhave\nno queue during the return motion. With this model, a keypress which\ngenerated two triggers would cause the flipper to flip and return,\nbut quick repeated keypresses would not tie up the flipper for\na long time.\n\nRespond to all triggers immediately. If a flipper is in a forward\nmotion and is triggered, it will immediately switch to a backward\nmotion. In this way, flippers with a key up and down as triggers\nwill behave most like flippers in a real-world pinball game.\n\nThe standard coefficient of reflection for a flipper is 0.95. However,\nwhen computing the behavior of a ball bouncing off the flipper, you\nmust\naccount for the linear velocity of the part of the flipper that\ncontacts\nthe ball; therefore the ball may leave the flipper with a higher energy\nthan it had when it reached it.\n\nAbsorber\n\nA rectangle with integral-length sides\nTrigger: generated whenever the ball hits it\nAction: shoots out a stored ball (see below)\nCoefficient of reflection: not applicable; the ball is captured\n\nWhen a ball hits an absorber, the absorber stops the ball and holds\nit\n(unmoving) in the bottom right-hand corner of the absorber. The\nball's center is .25L from the bottom of the absorber and .25L from\nthe right side of the absorber.\n\nIf the absorber is holding a ball, then the action of an\nabsorber, when it is triggered, is to shoot the ball straight upwards\nin the direction of the top of the playing area. By default, the\ninitial velocity of the ball should be 50L/sec. (With the default\ngravity and the default values for friction, the value of 50L/sec\ngives the ball enough energy to lightly collide with the top wall, if\nthe bottom of the absorber is at y=20L.) If the absorber is not\nholding the ball, or if the previously ejected ball has not yet left\nthe absorber, then the absorber takes no action when it receives a\ntrigger signal.\n\nOuter Walls\n\nA Gizmoball game supports exactly one set of outer walls.\nThe user\ncannot move, delete, or rotate the outer walls. The outer walls lie\njust\noutside the playing area:\n\nThere is one horizontal wall just above the y=0L coordinate.\n\nThere is one horizontal wall just below the y=20L coordinate.\n\nThere is one vertical wall just to the left of the x=0L\ncoordinate.\n\nThere is one vertical wall just to the right of the x=20L\ncoordinate.\n\nIt is not required that the user be able to use the GUI to\nconnect\nthe trigger produced by the outer walls with any of the other gizmos.\nHowever, the standard file formatdoes\nsupport this kind of connection.\n\nAppendix 2: The Gizmoball File Format\n\nInformal Description\n\nGame files will be stored in a text file format known as XML which stands for eXtensible\nMarkup Language. XML has a well-defined, treelike structure;\nthus, it is straightforward to check if an XML document is well-formed\n(as compared to an arbitary tab- or space- delimited file format).\nBecause of XML's popularity, there are numerous parsers out there that\nconvert the plain text of an XML file into usable objects. You can use\nthe Xerces\nparser to read in the various xml files and create Java objects.\n\nBut before Xerces can create these Java objects,\nit makes sure that the file it is reading in validates against\nan XML Schema. An XML Schema is a file written in XML that\ndefines the desired format for other XML files.\n\nWe provide you with an XML Schema gb_level.xsd that defines the text format for\na level of gizmoball that your application must be able to load and\nsave to. Any XML file that does not validate against the schema\nshould be rejected by your application, and an appropriate error\nmessage should be displayed to the user.\n\nThe ball tag specifies the initial position and velocity\nof the ball. Because the ball can be at intermediate points within a\nparticular square, the coordinates are specified as floating point\nnumbers. For example:\n\nplaces a ball with name Ball,\ncenter at (1.8,4.5), and an initial velocity of 3.4L per second to\nthe left and 2.3L per second upward.\n\nEach gizmo has a name and a location (x and\ny coordinates) where it will be placed. The\ntriangleBumper and the flippers all require an\norientation. This orientation can be \"0\", \"90\",\n\"180\", or \"270\" degrees, and refers to the clockwise rotation of the\ngizmo.\n\nTriggers can be connected to actions with the connect tag.\nIn the example above, FlipL's action will be triggered whenever the\nball hits the bumper named Square.\n\nThe keyConnect tag specifies that the action of a gizmo is\nassociated with a particular key being pressed or released. For\nexample:\n\n<keyConnect key=\"32\" keyDirection=\"up\" targetGizmo=\"Abs\" />\n\nspecifies that the gizmo named \"Abs\" should be activated whenever the\nspace bar key is released (\"32\" is the decimal number that represents\na space in ascii). Type man ascii and scroll down to the\n\"Decimal\" section to view all the mappings from decimal numbers to\nascii characters).\n\nBecause you might also want to allow the outer walls to\ntrigger various actions, the special identifier \"OuterWalls\" is\nreserved for it:\n\n<connect sourceGizmo=\"OuterWalls\" targetGizmo=\"GIZ\" />\n\nThis command would cause the ball hitting any of the\nouter walls trigger the action of the gizmo named by \"GIZ\".\n\nThe main board\ntag can optionally take arguments for gravity and friction. If the\nboard was described with:\n\n<board gravity=\"16.0\" friction1=\"0.0\" friction2=\"0.0\">\n\nthe gravity in the game would be reduced to only 16L/sec2\nand all\neffects of friction would be removed.\n\nHere are the contents of\nthe gizmoball file for the example shown at the beginning of this document.\nIt specifies a triangular bumper in the upper right-hand corner, a\nbunch of circular and square bumpers, and a few flippers. The actions\nof the upper flippers are triggered by the \"space\" (ascii 32) key, the\nactions of the lower flippers are triggered by the \"q\" (ascii 81) and\n\"w\" (ascii 87) keys, and also by hitting some of the circular\nbumpers. The action of the absorber is triggered both by the \"delete\"\nkey (ascii 127) and also by the absorber itself! This allows\nthe game to run continuously. Every time the ball hits the absorber,\nthe absorber immediately shoots the ball back upwards again.\n\nSemantics\n\nWe now describe each element defined in the specification, in turn.\n\n<board gravity=\"FLOAT\" friction1=\"FLOAT\" friction2=\"FLOAT\">\n\nDefines a board. There must be exactly one of these tags in a\nvalid\ngizmoball level file. The gravity of the board is set to gravity\nL/sec2 (default 25.0) in the downward\ndirection. The global friction constants are set such that mu and mu2\n(as described in the friction formula)\nare friction1 and friction2, respectively (both\nhave\na default value of 0.025).\nThe board tag encloses zero or one ball tags,\nfollowed by a gizmos tag and a connections tag.\n\nCreates the given gizmo with its upper left-corner at\n(x,y) and with the given orientation. Within the\nfile, the name must be unique, and may be used later to refer\nto this specific gizmo. The \"0\" orientation for each orientable gizmo\nis:\n\ntriangleBumper\n\nOne corner in the north-east, one corner in the\nnorth-west, and the last corner in the south-west. The diagonal goes\nfrom the south-west corner to north-east corner.\n\nleftFlipper\n\npivot in north-west corner, other end in\nsouth-west corner\n\nrightFlipper\n\npivot in north-east corner, other end in\nsouth-east corner\n\nWhen specified, the orientation attributed indicates a\nclockwise rotation of the whole gizmo compared to its default\norientation.\n\nCreates an absorber with its upper left-hand corner at\n(x,y) that is width wide and height\ntall. width and height must\nboth\nbe greater or equal to 1 and must not cause the absorber to extend off\nof the board.\nWithin the file, the name must be unique, and may be used\nlater to refer to this specific absorber.\n\n<connections />\n\nA tag that has no attributes. It is just a container for zero or\nmore connections and keyConnections.\n\n<connect sourceGizmo=\"STRING\" targetGizmo=\"STRING\" />\n\nMakes the gizmo named by targetGizmo a consumer of the\ntriggers\nproduced by the gizmo described by sourceGizmo. That is, every\ntime a ball hits sourceGizmo, targetGizmo's action\nwill happen.\n\nMakes the item named by targetGizmo a consumer of the\ntrigger\nproduced when the key represented by key is pressed (or\nreleased, respectively).\n\nThe formal definition of the file format can be found in the schema\ngb_level.xsd.\nBasically, the schema defines which elements it expects to see\nin an XML file and notes where the format may be extended. (These\nextension points are denoted by either\n<xs:any> or <anyAttribute>.) You\ndon't have to understand the schema unless you want to extend it to\nsupport any new Gizmoball features you've designed. If you want\nto extend\nthe schema, the\nXML Schema\nTutorial will be helpful.\n\nAppendix 3: The physics package\n\nThe provided physics library consists of\nimmutable abstract data types such as\nAngle, Vect, LineSegment,\nand\nCircle,\nas well as a class\nGeometry\nthat contains static\nmethods to model the physics of elastic collisions between balls and\nother circles and line segments. You are welcome to use or not use\nthis code as you please, and to modify it to meet your needs.\n\nSource for the physics library can be found\nin here.\nThe jar file of our code is available here.\nWhile this source is provided in the event that you wish to examine or\nmodify it, we strongly discourage you from modifying it. In the past,\nstudents who have not used the physics library as-is have had poor\nresults on their projects. Most groups will not need to copy\nthe source code to their own directories, add it to their CVS\nrepositories, or compile it, but will just use the gizmo.jar\nfile and examine the specifications."}
{"text": "examines the entire game development process and all the unique challenges associated with creating a game. An excellent introduction to game architecture, you will explore all the major subsystems of modern game engines and learn professional techniques used in actual games. This third edition features expanded content and coverage of the latest and most exciting new game programming techniques including AI, multiprogramming, working with scripting languages such as Lua, and writing C# tools like your level editor. All the code and examples presented have been tested and used in commercial video games, and the book is full of invaluable best practices, professional tips and tricks, and cautionary advice"}
{"text": "Last Upload eBooks\n\nRaspberry Pi: A Quick-Start Guide gives you everything you need to get the Raspberry Pi up and running and doing cool stuff. You'll get started by learning what additional hardware you need and how to connect it, install Debian Linux and configure it...\n\nThis concise book delivers the insight and tools you need to make intelligent decisions about cloud computing and effectively manage the transition to this new paradigm. Bill Williams explains how cloud computing platforms are transforming business I...\n\nThe IT Essentials: PC Hardware and Software Companion Guide supplements and complements the IT Essentials I: PC Hardware and Software v4.0 online curriculum offered by the Cisco Networking Academy Program.\nThe Companion Guide is designed as a supp...\n\nEnd-to-End Network Security is designed to counter the new generation of complex threats. Adopting this robust security strategy defends against highly sophisticated attacks that can occur at multiple locations in your network. The ultimate goal is t...\n\nGet a head start on building apps for Windows 8. With a series of examples, this hands-on guide takes you through the process of creating complete touch-enabled apps that respond to native sensors. Through the course of the book, you'll learn how to ...\n\nDive into the RStudio Integrated Development Environment (IDE) for using and programming R, the popular open source software for statistical computing and graphics. This concise book provides new and experienced users with an overview of RStudio, as ...\n\nIf you're interested in JRuby, you probably don't need a turorial on Ruby, Rails, or Java - you just need to know how to get things done. This Cookbook offers practical solutions for using the Java implementation of the Ruby language, with targeted r...\n\nTo help you take full advantage of Active Directory, this fourth edition of this bestselling book gives you a thorough grounding in Microsoft's network directory service. With Active Directory, you'll learn how to design, manage, and maintain an AD i...\n\nPortable, powerful, and a breeze to use, Python is the popular open source object-oriented programming language used for both standalone programs and scripting applications. It is now being used by an increasing number of major organizations, includi...With the comple...\n\nResponsive Web Design is redefining the way websites are designed, enabling you to craft websites that deliver exceptional experiences to your users - whether they happen to be using a desktop PC, tablet or mobile device.\nUse media queries to maxi...\n\nThis short SitePoint book provides readers with a fun and yet practical introduction to Sinatra, a framework that makes web development with Ruby extremely simple. It's not intended to be a completely comprehensive guide to the framework or an in-dep...\n\nNode.js is changing the way web apps are built. As Node.js apps are written in JavaScript, you can quickly and simply use your front-end skills to develop staggeringly fast, scalable real-time web applications.\nPlus discover how to use Twitter Boo...\n\nA practical and concise introduction to CoffeeScript, a programming language that compiles into JavaScript and that makes working with JavaScript easier. The book lays out the basics of the language, its syntax, and the interesting features that set ...\n\nPhotoshop CS6 Unlocked is a full-color question-and-answer book for web designers who want to use Photoshop to create better looking websites.\nCreating text effects, texturing and shadowing text, wrapping text around a curve, and more; Adjusting I...\n\nThe Web Designer's Roadmap is a full-color book about the creative process and the underlying principles that govern that process.\nWhile other books cover the nuts 'n' bolts\u009d of how to design the elements that make up websites, this book outlines...\n\nThe CSS3 Anthology: 101 Essential Tips, Tricks & Hacks is a compilation of best-practice solutions to the most challenging CSS problems. The fourth edition of this best-selling full-color book has been completely revised and updated to cover newe...\n\nPHP Master is tailor-made for the PHP developer who's serious about taking their server-side applications to the next level and who wants to really keep ahead of the game by adhering to best practice, employing the most effective object-oriented prog...\n\nAlmost every web site created today is built using CSS, which is why a thorough knowledge of this technology is mandatory for every web designer. There are plenty of good resources to help you learn the basics, but if you're ready to truly master the...\n\nSitting at the foundation of every site is HTML. It's the only language that's essential to a web site's very existence. On the surface HTML may seem simple but there's much more to it that meets the eye. With different versions, many infrequently us..."}
{"text": "All Titles\n\nNeed to master database programming in C#? Database Programming with C# is your ultimate resource! You will learn to create database details like tables, constraints, projects, stored procedures, views, triggers, and more. You will build on example code from the book's beginning, wrapping up in the final chapter.\n\nThis complete text provides in-depth coverage on how to write effective data entry and validation code. Most books deal only with the individual pieces of .NET, such as the controls or how the .NET Framework works. This comprehensive guide brings together all this knowledge and shows readers how to build real programs.\n\nDevelopers migrating to C# will find this a quick and easy-to-use reference, and new programmers will take home deeper understanding of the concepts necessary to apply C# to real-world programming needs.\n\nThe mission of this book is to provide you with a critical understanding of designing classes, making you better equipped to take full advantage of C#'s power to create robust, flexible, reusable classes.\n\nBuilding XNA 2.0 Games: A Practical Guide for Independent Game Development is an in-depth and exclusive look into the entire XNA game development process and includes the creation of a software game masterpiece\n\nWith detailed information on how to develop for the 837 EDI standard - covering mapping, trading partner configuration, AS2, SFTP, data extraction, data routing, and batching - you will find this to be a goldmine of information to aid you in a successful implementation.\n\nWith Beginning XML with C# 2008, you'll learn everything you need to know, from the basics of reading and writing XML data to using the DOM, from LINQ and SQL Server integration to SOAP and web services."}
{"text": "Programming -- Principles and Practice Using C++\n\nAddison-Wesley ISBN 978-0321543721. December 2008.\n\nNo, this is not the 4th Edition of\nThe C++ Programming Language\n(see the\nC++11 FAQ).\nIt is an introduction to programming for people who has never programmed before.\nIt will also be useful for people who have programmed a bit and want to improve\ntheir style and technique - or simply learn modern C++.\nIt is designed for classroom use, but written with an eye on self study.\nDrafts have been used as the basis for first programming classes for electrical engineer,\ncomputer engineer, and computer science students at Texas A&M University\nfor three years now.\n\nBack cover copy\n\nAn Introduction to Programming by the inventor of C++\n\nPreparation for Programming in the Real World\nThe book assumes that you aim eventually to write non-trivial programs,\nwhether for work in software development or in some other technical field.\n\nFocus on Fundamental Concepts and Techniques\nThe book explains fundamental concepts and techniques in greater depth\nthan traditional introductions. This approach will give you a solid\nfoundation for writing useful, correct, maintainable, and efficient code.\n\nProgramming with Today's C++\nThe book is an introduction to programming in general, including\nobject-oriented programming and generic programming. It is also a solid\nintroduction to the C++ programming language, one of the most widely\nused languages for real-world software. The book presents modern C++\nprogramming techniques from the start, introducing the C++ standard\nlibrary to simplify programming tasks.\n\nFor Beginners -- And Anyone Who Wants to Learn Something New\nThe book is primarily designed for people who have never programmed\nbefore, and it has been tested with more than 1,000 first-year\nuniversity students. However, practitioners and advanced students will\ngain new insight and guidance by seeing how a recognized master\napproaches the elements of his art.\n\nProvides a Broad View\nThe first half of the book covers a wide range of essential concepts,\ndesign and programming techniques, language features, and libraries.\nThose will enable you to write programs involving input, output,\ncomputation, and simple graphics. The second half explores more\nspecialized topics, such as text processing and testing, and provides\nabundant reference material. Source code and support supplements are\navailable from the author's website."}
{"text": "Computer Programing\n\nC++ Programming exercises Appendix Purpose and Scope This Appendix to the C++ Programming book will attempt to provide users a complementary understanding of the C++ programming language . It will be interconnected and dependent on the lessons and theoretical content already presented on the C++ Programming book but at the same time will attempt to remain as self contained as possible to enable the series of exercises and problems to be used alone in practical/laboratory classes. This is an open work, if you find any problems with terms or concepts you can help by contribute to it , your participation is needed and welcomed!\n\nPosted on October 17th, 2010 in Abstracts . Tags: abstract , design , hair , line , photoshop , tutorial In this tutorial, I will show you the process of creating Beautiful Hair-like Abstract Lines to Decorate Your Design in Photoshop.\n\nsorting\n\nAll Articles WebMatrix 3 Preview How-To Articles 3/6/2013 Read the full article... WebMatrix 3 Preview Release Notes 3/6/2013 Read the full article... How to Publish a Website from WebMatrix 3/5/2013 Version 3 Preview This tutorial walks you through how to publish a website from WebMatrix. Read the full article...\n\nA good programmer is someone who looks both ways before crossing a one-way street. -- Doug Linder, systems administrator A most important, but also most elusive, aspect of any tool is its influence on the habits of those who train themselves in its use. If the tool is a programming language this influence is, whether we like it or not, an influence on our thinking habits. -- Edsger Dijkstra, computer scientist\n\nWhat is Visual Cryptography Visual Cryptography is a special encryption technique to hide information in images in such a way that it can be decrypted by the human vision if the correct key image is used. The technique was proposed by Naor and Shamir in 1994. Visual Cryptography uses two transparent images. One image contains random pixels and the other image contains the secret information.\n\nNOTE: If you would like some Python development done, my company, Stochastic Technologies , is available for consulting. This tutorial is available as a short ebook . The e-book features extra content from follow-up posts on various Python best practices, all in a convenient, self-contained format. All future updates are free for people who purchase it."}
{"text": "Programming Microsoft LINQ 1.0 (iOS)\n\nBy Marco Russo, Paolo PialorsiPublished by Microsoft Press ( comprehensive guidance for using the Microsoft Language Integrated Query (LINQ) Projectwith in-depth insights from two experienced developers. Data-rich applications can be difficult to create because of the tremendous differences between query languages used to access data and the programming languages commonly used to write applications. This practical guide covers the intricacies of LINQ, a set of extensions to the Visual C# and Visual Basic programming languages. Instead of traversing different language syntaxes required for accessing data from relational and hierarchical data sources, developers will learn how to write queries natively in Visual C# or Visual Basichelping reduce complexity and boost productivity. Written by two experienced developers with strong ties to the developer teams at Microsoft, this book describes the LINQ architecture and classes, details the new language features in both Visual C# and Visual Basic, and provides code samples in both languages."}
{"text": "Using Programming Language Concepts to Teach General Thinking Skills\n\nThe programming language field has developed in response to an unprecedented situation in human history - the need to communicate with entities (such as computers), if every aspect of the computation and information representation is specified explicitly and completely. The availability of an immediate and automated feedback through appropriate interaction with a computer enhances the accessibility of concepts and promotes a fully rigorous approach that makes it difficult for a student to slide by with only a partial understanding. This paper focuses on three elementary concepts: Multiple Formal Perspectives, Automation and Translation & Abstraction (more precise and sophisticated), that radically increase a person's ability to conceptualize, understand and see other worldly aspects of the scholarly and physical world. The programming languages field provides a uniquely favorable context for teaching certain fundamental concepts in modern human endeavors like - Understanding the central role that one's perspective plays in the entire quandary conceptualization, formulation, and solution process; multiple perspectives are available for different problems; improving human productivity and that there is an appropriate division of tasks between automated systems and humans, and Understanding a precise notion of abstraction. This approach can therefore provide part of the solid, foundational understanding that all individuals, and not just computer scientists, need to think clearly and be truly effective in whatever endeavor they choose to pursue."}
{"text": "Tools\n\n\"... Abstract ...\"\n\nAbstract language, it is fairly easy to \"extend\" the language by defining an interpreter run, which will take a program prog, and some input data d, and return the result of applying prog to d: run prog d Hence, in this way the programmer can include in his program pieces written in the language implemented by run. run is usually said to give an operational semantics for the language thus defined. Unfortunately, an interpreter written in a straightforward way is likely to introduce a considerable overhead. However, the overhead can be reduced by refactoring a na\u00efve interpreter in such a way that it becomes more similar to a compiler. The refactoring is based on replacing some first-order functions with higher-order ones. 2 An example interpreter For the user to feel comfortable, run should accept programs written in humanoriented form, which can be achieved with the aid of quotation/antiquotation mechanism as usually implemented by Standard ML implementations. The techniques of translating programs from the \"concrete \" syntax into the abstract syntax are well known, and will not be considered in this paper. Hence, for the sake"}
{"text": "Compiler Engineering Using PASCAL (Computer Science)\n\nThis book is concerned with the implementation of computer languages. It aims to describe the design and construction of language compilers in sufficient detail for the reader to be able to implement a language. The main language considered is PASCAL, but consideration is given to other languages where appropriate. It is assumed that the reader is familiar with PASCAL. Knowledge of an assembly language, though not essential, will aid understanding of the compiled code sequences in the later chapters. The authors have tried to present a systematic, engineered but practical approach to compiler writing. An attempt is made to give a balanced view of the total problem facing the computer writer and practical examples and suggestions for both paper exercises and coursework on the computer are provided. The first part of the text presents a complete compiler for a simple language. The simple language is a small subset of PASCAL and the compiler is written in standard PASCAL. These chapters form a self contained introduction to compilers and can be read independently from the rest of the book. In the remainder of the book, the organization of the algorithms used in and the form of compiled code generated by a complete PASCAL system are considered in some detail. The ideas introduced in the simple compiler are developed and applied to the construction of a PASCAL compiler. Each phase of the compiling process is considered in turn. The hope is that at the end of this text the reader will have gained a thorough comprehension of the correspondence between high level programming language statements and machine instructions, and that she/he will also understand how high level language constructs are transformed or translated into machine instructions and be able to tackle a compiler construction project."}
{"text": "TI-89/92 Advanced Programming Manual An advanced version of my original programming guide. Covers some more advanced topics in TI programming. Written for primarily the 89, but can be used with slight modifications on the 92. Enjoy!\n\nTI-89/92 Programming Manual This is an update of the popular programming guide for 89/92/92+ BASIC language. Most of the basics are covered, and I've added an FAQ for some of the more advanced questions.\n\nCalling 8xp Subroutines from within BASIC Programs This informational text explains the calling of subroutines from within TI-83 plus BASIC programs without the use of an asm routine. (can apply to other platforms as well)\n\nRun Around the MirageOS Password Contains information on howto work around the MirageOS password. It will work without a doubt. Contains info other MirageOS hacks do not have, but some info others do. Happy Cracking!\n\nStart Assembly Step by step instructions on how to get the assembly programs to work... Assembly's hard, getting the stuff to assemble is even harder... Read this tutorial for tips. Website:  (click on the NLabs link at the bottom of the page)\n\nAssembly Theory This is an essay I threw together for an English outcome when I was struggling for a topic. It is \"dumbed-down\" for an English-teacher audience, but it might be useful for new Assembly programmers.\n\nBasicbuilder 2.1 Tutorial This document is a step-by-step tutorial on creating Flash applications for the TI-83/84 Plus from TI-BASIC programs and pictures by using the Windows utility, Basicbuilder (current version 2.1).\n\nTI-83+/84+ BASIC Programming Tutorials Whether you're new to programming or you just want to improve your skills, these are the tutorials for you! Each tutorial includes sections on commands, how to use those commands, sample codes, explanations, and tons of screenshots. Fifteen in-depth tutorials cover displaying text, menus & branching, using variables, conditional statements, drawing commands, loops, getKey, pictures, lists, matrices, strings, custom menus, animation, scrolling homescreen maps, and an intro to z80 assembly. The tutorials are \"complete\", but I will be updating/adding appendices in the coming weeks and may update/add tutorials. Documents are in Microsoft Word format. New in this update: Character/wall detection added in tutoraial on scrolling homescreen maps.\n\nDisable On-key break in BASIC for 68k calculators This is a tutorial to show how to disable (In BASIC!!!) the ON_BREAK that has always made BASIC security flawed. It shows how and why it works. Also includes example password program\n\nTI-89 and TI-92 BASIC Guide The complete guide to BASIC for the TI-89 and TI-92. Includes many of the tips and tricks you may not know. This guide is in response to growing demand on the TI-BASIC mailing list.\n\nBASIC 83 Guru v2.5 **Update** Special release version 2.5. Version 2.5 does not have any new tutorials in it. There are still 23 tutorials, a game, and a project. What Version 2.5 does have is screen shots of what your outputs should look like. There is at least one screen shot after each set of code to show you what the program should look like after you have run it. I have also fixed Goto.html, which is in the Archive Contents. Now it actually goes to BASIC Guru Online, the online version of this help file. The online version contains the same information, but has more features including easier navigation between tutorials and other web pages and faster updates. The help file only gets update after each version is finished (about 11 or 12 tutorials), while the website is updated after every tutorial is finished. Use the help file or the website. Both will make you a better programmer. Click on the HTML file in the Archive Contents and it will automatically link you to the website. Also, inside the help file are links to the website. The combination of BASIC 83 Guru, the help file, and BASIC Guru Online, the website, create the best opportunity for anyone to learn BASIC programming for the TI-83 or TI-83 Plus.\n\nBASIC Calc Freeze/ROM clearer Yes, believe it or not you can clear your memory, but that's not it either. I've found a way with just a few lines of code to clear your memory(or friends :-) ), freeze your calculator(no key can exit, not even [on]), even clear the whole calc(RAM and ROM, everything but the OS) without doing any damage. Can be executed from the homescreen or a program. So do it to a friend or integrate it in a program incase someone tries to cheat or something. Enjoy! Give me some feed back if you like this or found it usefull in a program, or even if you have a funny story about what you did to your friends/enemys. email=fava15@msn.com\n\nBasic Conversion Between 82, 83s, 85, and 86 Describes in detail about how to convert basic programs between the 82, 83, 83 plus, 85, and 86. Includes a discussion of nearly all I/O and CTL commands listed in the programming section of TI guidebooks with URL to basic programs ported to the 82, 83, 83 plus, 85, and 86.\n\n83+ TI-Basic Code Timings In this guide, the most useful TI-Basic instructions are tested and compared. I demystified some tricks, and added new ones, all speed-tested, so now, your basic programs will run faster and maybe even smaller.\n\nThe BASIC Elite Newsletter Volume I, Number 1 This introductory edition of the brand-new, semi-monthly newsletter introduces the publication and explains what it's all about. The BASIC Elite is a loose conglomeration of programmers and programming groups who are interested in producing higher-quality BASIC programs and ensuring the value of their programs. The newsletter discusses projects currently underway by members, singles out extraordinary programs in the community for review, and publishes relevant news articles. In this issue, two BASIC programs for the 83/84 series are reviewed and several useful tips and tricks for BASIC programming are listed from the popular 1337 Guide to BASIC Programming. Enjoy, and look for upcoming issues at \n\nCALCnet 2.2 Whitepaper This technical report details the CALCnet 2.2 networking protocol for graphing calculators. It begins with an overview of the motivations and inspirations for CALCnet, then reviews the existing alternatives for two-calculator linking, namely the TI-OS, BELL by Tim \"Timendus\" Franssen, and TachyonLink by Michael Vincent, and n-calc linking, namely CLAP by Mr. Franssen. It goes on to introduce the electrical systems in the calculator for linking, then proceeds to an in-depth section explaining the bit-level, byte-level, and frame-level protocols for one-to-one and broadcast frames. Although the average CALCnet 2.2 user or even programmer does not need to know any of that, it might help in case a coder wants to write CALCnet 2.2 drivers for another platform (Arduino? libticables?). Next is the meat of the manual for end programmers, how to send and receive data via CALCnet 2.2. I include a full experimental results and benchmarking section, detailing the maximum speeds of CALCnet, the overhead incurred by the protocol, effects of frame size on burst throughput, an effectiveness of collision detection and delivery guarantees. It concludes with information on logos and branding, a survey of possible future work, and a summary of CALCnet2.2's strengths and features.\n\nCalculator security information This document (and included programs) will explain you how to build an waterproof security wall into your calc. The only way of getting past it is resending the OS. Hook kills and stuff are dealt with.\n\nStatistics: Enable Mode on 83/84 There are Mean and Median functions in the 83/84s, but did you know that it's possible to find Mode as well? An exhaustive guide on one technique to find mode. The first time it's ever been done in TI-BASIC I think.\n\nTI-Basic 68k Cross Compatibility (89, 92+, V200) This is for the idiots I see constanly uploading crap for the 89 that's not graphically compatible for the 92+ or V200. It centers around the getConfg() command, which is also central to many of my programs.\n\nC tutorial This tutorial is for beginners who want to learn how to program in C. This tutorial is very good for programming for games, C language is for programming in 89. This is a must have for all programmers.\n\nDoors CS 7 SDK Doors\n\nDying Eyes Walkthrough Are you stuck in the game Dying Eyes? Or do you want to find out just where the Faith Armor is? Or do you simply want to know more about the game? Well, with this new walkthrough from M-Possible Productions, you can find out everything you ever wanted to know about playing that great calculator game, Dying Eyes!\n\nAES (Rijndael) Encryption for m68k calculators This file contains a patch against Brian Gladman's AES implementation available here:  It contains minimal changes that should patch fine against newer releases, or if not can be manually merged easily. You'll also have to edit aesopts.h to disable static lookup tables, since if they are included your program will hit the 64k limit almost instantly. Thereafter, you can reduce the code size to under 15k if you disable loop unrolling or 35-40k if you use partial loop unrolling. When your program is compiled with dynamic tables and loop unrolling, you should have about 20k to work with for your own code. Just remember to call gen_tabs() before using library functions.\n\nTI-83 Plus Basic Optimization Some quick tips/tricks to help you optimize that 83+ TI-BASIC code, making it faster, smaller, and more convinent (NOT interface stuff). Mainly for people with moderate experience with this language.\n\nMoka SDK API v1.16 Moka is a powerful tool that converts Java source code into a TIGCC project. These are some of the strong features of Moka : * Fast converter, compatible with any version of Windows (TM) and with the GNU/Linux operating system. * Compatible with TIGCC 0.95 and the upcoming TIGCC 0.96. * Compiles fast native object oriented programs executable on any 68K calculator. * Encapsulates some awkward features of the C language (strings, link I/O, keystroke reading, etc.) into classes to ease their use. * Offers a rich API including numerous JDK(TM) classes such as Vector and StringTokeniser. * Supports grayscale graphic programming. * Supports programming of multiple windows application (MWA) with user friendly interface. This file features the MDK API documentation in javadoc html format alone.\n\nTip on disabling \"BREAK\" in Dialog or Text command. This is a tip that helps you how to prevent the \"break\" error to occured during a Dialog or Text sessions in BASIC programs. This can prevent people to exit their current program accidently.\n\nThe no-Lib Guide to Ti-Basic Maps and Sprites A lengthy and detailed guide to programming sprites and maps in ti-basic without the use of Asm-libs. examples are for the 83+ series, but it can be applied to the other calcs as well\n\nUsing Moka to assemble programs An Object Oriented Programming Third Edition. This book is dedicated to the object oriented paradigm and the Moka object oriented language. The first section (\"The object oriented paradigm\") relates to the object oriented concepts, the second to the Moka language as a general purpose language, the third to Moka as an object oriented language, the fourth to the Moka API and the fifth to the advanced features of Moka. The second section can be read before the first, it could be advisable for someone that don't have a strong programming language because the \"Moka, a general purpose programming language\" chapter of this section introduces the programming concepts as if the reader has no or a little programming experience.\n\nPicture Paper v1.0 This is a useful file, used for sketching ideas for pictures without filling up your calc's RAM. Print out a copy of the paper and then fill out all nescessary information. Take a pencil and fill in the boxes to represent pixels. Start in the top left corner. If you are using BASIC, do not color in the far right column. Do not color in the bottom row at because it is the 64th row (not available on the calculator) and only use the 63rd row if using asm. Try it out!\n\nUsing pxl-test( in ti-83+ BASIC This (short) documentary goes over the bsics of using the pxl-test command in Ti-BASIC. It is designed for the '83+, but is also compatable with all of the other calculators that have the Pxl-test command.\n\nImplementation of Reverse Polish Notation - Tutorial to implement Reverse Polish Notation - example implemented in VB - should be portable to z80 - will be updated - may be used in conjunction with Pretty Print\n\nRandom number algorithm explanation Ever wonder how you calculator's random number generator works? Downloaded a file but didnt understand it? This is an informational file explaining CLEARLY how it works, going into the mathematics behind the code. This is a text so click and read in browser now!\n\nScientific Calculator Comparison A comparison of entry level scientific calculators including the TI-30XII, TI-34II and HP-30S. Chances are, someone will need a cheap calculator with lots of functions at some point in time. This document can help you chooose more informed about the different calculators.\n\nThermodynamic Enthalpy Calculator This program can calculate Cp/R for a very long list of gases, liquids and solids, it also shows the quantity of energy given the initial and final temperature or gives one of them if the energy is known. There is another program in the pack \"CFORM\" that shows a complete table of reaction enthalpies for the given compound (in the right agregation state)\n\nTI83 BASIC Optimization - Lesson 2 Lesson two on TI83 BASIC optimization. Explains such things as the simulated function, and the condition-expression. Many of these other \"code shrinking\" guides explain optimization techniques briefly, but this guide goes into depth, including examples of actual code. 12/19/00 Update: Made a few grammatical corrections.\n\nTI-89 Basic Optimization Tips 6 tips, divided into beginner, intermediate, and advanced, designed to make your TI-89 (and other 68k calc) programs smaller and faster. Made some formatting changes in this version.\n\nMemory Addition This is a documented text of how to add over 65K of memory on your ti89 version 1.0 and 1.05 calcs. (update number2) Added: this now also explains each step a lot better. It also includes some info on 2.03 calculators. It shows you how to get to the self diag screen. To learn all about your calc. and to see if it really is working correctly. :)\n\nBasic on TI-82-83+SE This is a tutorial on the TI-BASIC language. It was witten for TI-83, but you will also found documentation for TI-80 or TI-89, since it does not really change ;-) These tutorials were just copied from my website so you can watch 'em without being online ;-) When you've read all the tut, you'd be able to program whatever you want in Basic. Oh, and I forgot : I am sorry but these tutorials are entirely in french :-/ I hope it does not matter.\n\nVista TI-Connect information This is a PDF file that explains compatibility of TI-Connect on the Windows Vista operating system and what link cables work. TI says it can't be done...so I did it. Update: I now have Service Pack 1 and updated the directions (nothing changed there). I have also received compatibility feedback and updated my directions accordingly.\n\nTI-GraphLink 83 Vista Setup While it's not 100% compatible, this shows you how to install TI-GraphLink 83 Plus software on Windows Vista so you can edit programs. UPDATE: Now includes instructions for fixing shortcut icons and file association (advanced users)\n\nTI-GraphLink 89 Vista Setup While it's not 100% compatible, this shows you how to install TI-GraphLink 89 software on Windows Vista so you can edit programs. UPDATE: Now includes instructions for fixing shortcut icons and file association (advanced users)\n\nPICAXE-08/08M TI Link Functions Here's a pair of routines for the PICAXE-08/08M series microcontroller (see  for getting and sending bytes in the TI byte transfer protocol. The PICAXE-08 is a cheap (\u00a31.50 for the highest spec chip) microcontroller programmable in BASIC with a host of useful routines (IR comms, serial comms, &c). They do not need a PIC programmer, they can be directly programmed with two wires from a serial cable. The software for doing so is free. All in all, an excellent low-cost way to interface hardware with the TI!\n\nVTI vs Ti Flash Debbuger -> Help No Rom Image! If Your Having Trouble With Getting A ROM Image The READ This File. If Have MORE That Just A READING File It Also Has PICTURES To Help You Throught The 12 Easy Steps. I Prefer That EVERYBODY View This File!\n\nTI-86 Basic and Assembly Tutorial This has a few lessons and some awesome appendices for TI-86 Basic and Assembly. Please give feedback if you'd like to see certain material in the near future. What's new: much higher concentration of information (just let your mouse hover)\n\nVista TI-GraphLink Association Fix This is a fix for TI-GraphLink software on Windows Vista, it includes registry entries for file association and a icon file to make the shortcuts look like they should. Applies to: TI-GraphLink 83 Plus TI-GraphLink 89\n\nHow to make and play a full song on a 83 (SE) Ever wanted to have real music on your 83+ (SE)? Well here's a guide that gives you a step-by-step guide to converting a full .wav file into a .8xp file. Note- contains 2 versions- a 1 document fersion and a step-by-step guide.\n\nWindows 7 TI connect compatibility info Windows 7 came out in October, and some of you may be wondering if TI-Connect works with the 32bit and 64 bit of all versions of Windows 7. Well no need to worry because this document includes step by step instructions to help you install TI-Connect on ANY version of Windows 7 (this incluses 32bit and 64bit). (This also includes how to install the new TI-Connect update). Plus this document contains helpful pictures for those of you who wish to see the installation with explanations of what to do. Also, for those who still have Windows 7 RC1, I have also included the previous document that has info useful for anyone that wishes to install XP Mode (previously called Virtual XP) and use TI-Connect through that. Download today for the complete info on Windows 7 and TI-Connect compatibility, and decide if you are ready from the switch to Windows 7 from Vista or XP. (However, if you wish to stick with Vista or XP, this file will still be useful for installation on those operating systems including 64bit XP and Vista 64bit."}
{"text": "Interactive products designed for children?whether toys, games, educational products, or websites?are increasingly embedded in children?s lives and school experiences. Making these products safe, effective, and entertaining requires new methodologies for carrying out sound and unbiased evaluations for these users with unique requirements, environments,... more...\n\nGoogle Apps Deciphered Compute in the Cloud to Streamline Your Desktop Use Google Apps to Improve Productivity and Collaboration, Reduce Costs, and Eliminate Technology Hassles! Google Apps gives you virtually all the business and productivity software you need?all of it free, or available at extremely low cost. Because... more...\n\nThis book provides thorough knowledge of Linux TCP/IP stack and kernel framework for its network stack, including complete knowledge of design and implementation. Starting with simple client-server socket programs and progressing to complex design and implementation of TCP/IP protocol in linux, this book provides different aspects of socket programming...The utility simply known as make is one of the most enduring features of both Unix and other operating systems. First invented in the 1970s, make still turns up to this day as the central engine in most programming projects; it even builds the Linux kernel. In the third edition of the classic Managing Projects with GNU make , readers will learn... more...\n\nFor many users, working in the UNIX environment means using vi, a full-screen text editor available on most UNIX systems. Even those who know vi often make use of only a small number of its features.\nThe vi Editor Pocket Reference is a companion volume to O'Reilly's updated sixth edition of Learning the vi Editor , a complete guide to text... more...\n\nThis easy-to-follow reference shows a variety of professionals how to use the Concurrent Versions System (CVS), the open source tool that lets you manage versions of anything stored in files. Ideal for software developers tracking different versions of the same code, this new edition has been expanded to explain common usages of CVS for system administrators,... more...\n\nOne of the fastest ways to learn Linux is with this perennial favorite Eight previous top-selling editions of Linux For Dummies can't be wrong. If you've been wanting to migrate to Linux, this book is the best way to get there. Written in easy-to-follow, everyday terms, Linux For Dummies 9th Edition gets you started by concentrating on two distributions... more..."}
{"text": "quest4tech.net\n\nVHDL is a language used to describe digital electronic circuits. VHDL is an abbreviation for VHSIC Hardware Description Language, where VHSIC is an abbreviation for Very High Speed Integrated Circuit. VHDL is used in the processes of designing, simulating, synthesizing, placing and routing, and verifying a digital electronic circuit.\n\nAppropriate for a first or second course in digital logic design. Blends academic precision and practical experience in an authoritative introduction to basic principles of digital design and practical requirements. With over 30 years of experience in both industrial and university settings, the author covers the most widespread logic design practices while building a solid foundation of theoretical and engineering principles for students to use as they go forward in this fast moving field. sections forLogicWorks is the schematic drawing and interactive digital simulation package that has set the standard for demonstrating logic design principles and practices while producing professional results. LogicWorks 5 helps the reader understand the concepts of using these tools in a variety of design situations in electrical and computer engineering and computer science. Features a subset of the industry-standard VHDL language and fully mixes high-level language and structural design methods. Displays any values in a simulation using the preformatted HTML. Simplifies the creation of component simulations. For anyone interested in learning more about digital design, electrical engineering and computer technology."}
{"text": "Chapter 19. Advanced Function Topics\n\nThis chapter introduces a collection of more advanced\nfunction-related topics: recursive functions, function attributes and\nannotations, the lambda expression,\nand functional programming tools such as map and filter. These are all somewhat advanced tools\nthat, depending on your job description, you may not encounter on a\nregular basis. Because of their roles in some domains, though, a basic\nunderstanding can be useful; lambdas,\nfor instance, are regular customers in GUIs.\n\nPart of the art of using functions lies in the interfaces between\nthem, so we will also explore some general function design principles\nhere. The next chapter continues this advanced theme with an exploration\nof generator functions and expressions and a revival of list\ncomprehensions in the context of the functional tools we will study\nhere."}
{"text": "Free Books on Technology Subjects\n\nAgile Development, in particular, eXtreme Programming (XP), has been gaining a lot of momentum because it can effectively address the problems plaguing software development such as mis-understanding customers' requirements, missing deadlines, over-budget, conflicts between customers and developers and poor maintainability of legacy systems.\n\nThe FreeBSD newcomer will find that the first section of this book guides the user through the FreeBSD installation process and gently introduces the concepts and conventions that underpin UNIX. Working through this section requires little more than the desire to explore, and the ability to take on board new concepts as they are introduced. Once you have traveled this far, the second, far larger, section of the Handbook is a comprehensive reference to all manner of topics of interest to FreeBSD system administrators. Some of these chapters may recommend that you do some prior reading, and this is noted in the synopsis at the beginning of each chapter.\n\nCreating XPCOM Components is about Gecko and about creating XPCOM components for Gecko-based applications. The book is principally a long tutorial that describes the steps you take to make your C++ code into a component that can be used in Gecko, but it also discusses all of the tools, techniques, and technologies that make up XPCOM.\n\nThe book is arranged so that you can follow along and create your own components or learn about different XPCOM topics individually, as in a reference work.\n\nFor example, the introduction includes a discussion of components and what they are, and the first chapter-in which you compile the basic code and register it with Mozilla-prompts a discussion of the relationship between components and modules, of XPCOM interfaces, and of the registration process in general.\n\nWeb courses and Web-based course supplements have popped up all over the world. No central force has yet emerged which dominates the field. Indeed, nearly every college, from the large to the small, has become a player. Tremendous, broad-based Web-delivery activity has characterized the last few years of the 20th century. Elementary students publish Web-sites. Teachers use Web-pages to communicate with parents. Web-commerce has flourished. The wave of Web-commerce has paled that of Web-teaching. The infrastructure that is emerging to support Web-commerce ultimately will permit piggybacking of Web-teaching. We can expect fast Web access to be available in students' homes.\n\nFrom the user's perspective, XForms revolutionizes the way business critical information is collected and published on the Web. A key consequence of this evolution is that information technologists can continue to model business data using abstract structures that are amenable to machine processing; XForms binds a user-friendly Web browser interface to such abstract XML models, thereby empowering the end-user to edit and update these abstract structures. In this sense, XForms enables a standard Web browser to associate editable views to the underlying XML models. This ability to view and edit XML documents from within a standard Web browser is likely to prove a key empowering technology.\n\nThe material in this book has been the basis of MIT's entry-level computer science subject since 1980. We had been teaching this material for four years when the first edition was published, and twelve more years have elapsed until the appearance of this second edition. We are pleased that our work has been widely adopted and incorporated into other texts. We have seen our students take the ideas and programs in this book and build them in as the core of new computer systems and languages. In literal realization of an ancient Talmudic pun, our students have become our builders. We are lucky to have such capable students and such accomplished builders.\n\nDominic Giampaolo - file system design, online PDF book, provides details of file systems, low to high-level, topics related as the disk cache, file system, interface to the kernel, user-level APIs which use features of the file system\n\nThis book stems in part from courses taught at the University of Kentucky and at the University of Wisconsin\u2013Madison on programming language design. There are many good books that deal with the subject at an undergraduate level, but there are few that are suitable for a one-semester graduate level course. This book is my attempt to fill that gap. The goal of this course, and hence of this book, is to expose first-year graduate students to a wide range of programming language paradigms and issues, so that they can understand the literature on programming languages.\n\nYou will have a thorough mastery of the ins and outs of PHP programming and development-related tasks, with particularly strong knowledge of forms, databases, and multimedia. You'll be able to design, develop, and deploy complex web-based solutions across several platforms. You'll have a good understanding of the uses PHP can be put to above and beyond handling forms.\n\nI started writing this book six years ago in response to a publisher's inquiry about Lisp books. Part of their submission process involved my filling out what amounted to a market research form that disclosed all of the Lisp books I knew about, their publication dates, and a brief synopsis of the strengths and weaknesses of each.\n\nOver the part ten years, object-oriented technology has started to have a significant impact in industry. Despite its many positive aspects, there have been some problems in successfully applying the technology to large projects, and in achieving adequate levels of flexibilitly and software reuse. Based on the research of the Object Systems Group in Geneva, this book looks at a range of issues, from programming languages and systems through to tools, frameworks and methods.\n\nThis 320-page book treats parsing in its own right, in greater depth than is found in most computer science and linguistics books. It offers a clear, accessible, and thorough discussion of many different parsing techniques with their interrelations and applicabilities, including error recovery techniques. Unlike most books, it treats (almost) all parsing methods, not just the popular ones.\n\nMastering Enterprise JavaBeans 3.0\n\n(currently not available) Published in July 2006, Mastering EJB is now in its 4th edition including chapters on session beans and message-driven beans, EJB-Java EE integration and advanced persistence concepts. Java Persistence API and using POJO entities with EJB is also covered extensively. This book aims you give you a deep understanding of EJB 3.0.\n\nWeb scripting is a high-demand occupation with vast accessibility. Often, PHP programmers learn from the ground up with little or no guidance, resulting in undeveloped coding methods and practices. Taken from the companion print book, \"PHP In a Nutshell,\" this Wiki-based guide allows for rapid dissemination of the right and wrong ways to author PHP programs. It covers beginner and advanced topics, including XSLT and Multimedia applications, and allows for fast navigation and use thanks to the Wiki platform.\n\nThe technological world is full of acronyms and abbreviations. In the words of an anonymous prophet, \"If it is computer oriented and if it doesn't have an acronym, then it doesn't exist.\" From ANSI to ZOO, understanding the fundamental concepts behind various languages, file types, and hardware requires knowing what those catchy terms represent. \"Babel\" is a comprehensive, handbook resource designed for the programmer or tech enthusiast with a need-to-know basis on everything related to the computer world. The printed edition allows for fast, handy access to a resource that has served the tech community well for nearly 20 years.\n\nAlgorithms are the heart of any application used to sort and manipulate large amounts of data. If you're looking to brush up on the most efficient algorithms for various tasks, the \"Handbook of Algorithms and Data Structures\" is a great resource. Algorithms for basic operations, searches and sorts, arithmetic and direct selection are covered along with mass text manipulation and discussion of derived algorithms. Digesting this book can help a programmer become more adept at authoring their own effective algorithms in less time and with greater efficiency.\n\n\"How to Design Programs\" tackles the very basics of computer programming. Ranging from basic concepts such as conditional expressions to advanced programming techniques such as mutating structures, the book covers a variety of computer science and programming concepts. A tough read for those not acquainted with advanced mathematics, it is suited for those with some basic understanding of fundamental computer science principles\n\nE-book is famous, focusing on key components that make up Visual Studio .NET and the .NET Framework. Well planned and comprehensive with chapters are laid out to finish the book in 21 days. E- book chapters are well-organized with summary, quiz, exercises at the end, with weekly glance and reviews at the end of each week. All the chapters include examples in both Visual Basic .NET and C# with some snapshots, making it useful for readers.\n\nMehdi Achour, Friedhelm Betz, Antony Dovgal, Nuno Lopes, Philip Olson, Georg Richter, Damien Seguy,\nJakub Vrana, and others - \"PHP: Hypertext Preprocessor\" is a general purpose scripting language used for website development and can be used with HTML. This free book is ike a reference guide, which contains installation details, language reference, PHP features and PHP function references. The books chapters have concise descriptions and code examples. For advanced programmers it can be good source of reference.\n\nAlphabetical summary of free internet tech books found on TechBooks4Free home page. Thank you for visiting and be sure to your bookmark or short cut to Tech Books 4 Free site for future free computer book search and free computer science books reference."}
{"text": "Operating Systems\n\nOPERATING SYSTEMS This exam tests introductory-level knowledge of operating systems. Topics include: what operating systems are; what they do; how they do it; how their performance can be evaluated; how they compare with each other.\n\n3 Operating Systems 3.1 ORIGINS OF \"OPERATING SYSTEMS\" Back in the early 1950s there were very few computers. Large universities might have one, as might government research laboratories, and a few big companies.\n\n3 Although this observation was made in 1981, this is still roughly valid after two decades. In this paper, we shall also follow the similar approach and discuss the history of operating systems roughly along the decades.\n\nOct-03 2 Course Introduction \u00d1 This course will provide an overview of most Operating Systems. \u00d1 It describes the requirements of most Operating Systems and the common techniques used to achieve these requirements. \u00d1 Course is split up in lectures followed by a test (50%) and a coursework (50 ..."}
{"text": "Objectives\n\nWith the emerging use of multi-core processors in today\u00b4s computers it is very important for software developers to understand and master different forms of parallelism. The course will cover different types of parallel programming languages, parallel algorithms, and parallel hardware, and how these concepts interact with each other. Special focus will be given on how to write parallel software which makes use of underlying parallel hardware in an efficient and scalable way.\n\nLearning objectives\n\nAfter passing the course the student should be able to:\n- Identify the inherent parallelism in a given problem and construct a suitable parallel solution.\n- Write parallel programs using the programming languages covered during the course.\n- Describe, reason about, and compare the parallel programming languages concepts covered during the course.\n- Understand, make use of, and reason about the parallel algorithms covered during the course.\n- Describe and reason about the different type of parallelism found in modern computer architectures.\n- Write software that makes use of parallel hardware in an efficient and scalable way.\n- Use analytical methods to make judgments of expected performance of parallel solutions.\n- Use different types of performance measurements for evaluating parallel solutions.\n\nCourse content\n\n- Concepts and measures for reasoning about parallelism.\n- Parallel algorithms and algorithmic techniques.\n- Different models for parallel computations.\n- Different types of parallel programming languages.\n- Different form of parallelism found in hardware.\n\nTeaching methods\n\nThe teaching of the course will be conducted as lectures, laboratory works, and project.\nTeachers will conduct the lectures, and do supervision of laboratory work and project.\nThe students are also expected to work independently, without supervision, for parts of the laboratory work and parts of the project. During the laboratory- and the project work the students should make use of the theories covered during the lectures.\n\nPrerequisites\n\nAt least 15 ECTS credits programming (C, C#, C++ or Java), Data structures, algorithms and program development 7,5 ECTS credits and Computer architecture 7,5 ECTS credits or corresponding and a TOEFL test result (PBT) at least 530, TWE score 4, (iBT) at least 72, TWE score 17 or IELTS test score for academic purposes with an overall band score of minimum 5.5 and no band score below 5.0. The English test is COMPULSORY for all applicants except citizens of Australia, Canada, Ireland, New Zealand, United Kingdom and USA. The TOEFL code you must use is SWEDEN 9520."}
{"text": "We know from the success of titles such as Web Standards Solutions , Cascading Style Sheets: Separating Content from Presentation, and the Web Designer's Reference that web designers are increasingly concerned with making sites that don't just look pretty, but are also built using current best practices. There are three main technologies married together to create usable, standards-compliant web designs: XHTML... (more) Whether you're a novice or an advanced practitioner, you'll find this refreshed book more than lives up to its reputation. Programming ... (more)\n\nPHP is an easy-to-use scripting language perfect for quickly creating the Web features you need. Once you know the basics of how the language works, wouldn't it be great to have a collection of useful scripts that solve those tricky problems and add interesting functionality to your site? We thought so, too. Instead of starting at \"Hello World,\" Wicked Cool PHP assumes that you're familiar with the language... (more)\n\nEverything you need to learn JavaScript from Scratch! Packed with full-color examples, Simply JavaScript is a step-by-step introduction to programming in JavaScript the right way. Learn how easy it is to use JavaScript to solve real-world problems, build smarter forms, track user events (such as mouse clicks and key strokes), and design eye-catching animations. Then move into more powerful techniques using... (more) ocean of variations in Unix commands and standards. bash... (more)\n\nPraise for Core Python Programming \"The long-awaited second edition of Wesley Chun's Core Python Programming proves to be well worth the wait\u2014its deep and broad coverage and useful exercises will help readers learn and practice good Python.\" \u2014Alex Martelli, author of Python in a Nutshell and editor of Python Cookbook \"There has been lot of good buzz around Wesley Chun's Core Python... (more)\n\n\"Learning Perl,\" better known as \"the Llama book,\" Perl is the language for people who want to get work done. It started as a tool for Unix... (more)\n\nThe goal of this book is to teach computational scientists how to develop tailored, flexible, and human-efficient working environments built from small programs (scripts) written in the easy-to-learn, high-level language Python. The focus is on examples and applications of relevance to computational scientists: gluing existing applications and tools, e.g. for automating simulation, data analysis, and... (more)\n\nA Beginner's Guide to HTML, Graphics, and Beyond\n\nIn Learning Web Design , author Jennifer Niederst shares the knowledge she's gained from years of web design experience, both as a designer and a teacher. This book starts from the beginning-- defining the Internet, the Web, browsers, and URLs-- so you don't need to have any previous knowledge about how the Web works. After reading this book, you'll have a solid foundation in HTML, graphics, and design... (more)\n\nBuild Your Own Database-Driven Website Using PHP & MySQL is a practical guide for first-time users of PHP & MySQL that teaches readers by creating a fully working Content Management System, Shopping Cart and other real-world applications. There has been a marked increase in the adoption of PHP, most notably in the beginning to intermediate levels. PHP now boasts over 30% of the server side scripting... (more)\n\nby Harry Fuecks\n\nAs a PHP developer, there are certain problems you're almost guaranteed to face. Generating charts and graphs, converting HTML documents to PDF format\u2014PHP is equipped to handle all of these, but coming up with the best implementation can be tricky! Now, instead of trawling through message boards and mailing lists for the answer, you can just crack open The PHP Anthology! The PHP Anthology is a complete... (more)With the proliferation of Linux as both a server and desktop operating system, users are looking for more advanced methods of getting up and running quickly and efficiently solving problems. The most powerful way of achieving this is to employ the command line interface known as the shell. Bash, the Bourne Again Shell, is the most popular Linux shell today. Linux Shell Scripting with Bash emphasizes... (more)\n\nBuildings and cities grow, are transformed and dissolve. How can this evolution be generated, controlled, enhanced or imagined? Is our environment programmable? How does the fusion of natural and artificial materials produce new architectural organisms, new environments, new natures? How does technology animate space and how do users and programs animate matter? Because everything grows, especially cities, the... (more)\n\nThere's a lot to be said for going back to basics. Not only does this Bible give you a quick refresher on the structure of open-source Linux software, it also shows you how to bypass the hefty graphical user interface on Linux systems and start interacting the fast and efficient way?with command lines and automated scripts. You'll learn how to manage files on the filesystem, start and stop programs, use databases,... (more)\n\nPraise for Mark Sobell's Books \"I keep searching for books that collect everything you want to know about a subject in one place, and keep getting disappointed. Usually the books leave out some important topic, while others go too deep in some areas and must skim lightly over the others. A Practical Guide to Red Hat(R) Linux(R) is one of those rare books that actually pulls it off. Mark G. Sobell has created a... (more)\n\n* Written by New York graphic design professional Chandler McWilliams, this is the first book about Adobe Photoshop and Illustrator design scripting on the market * Discusses scripting procedures and techniques for Photoshop and Illustrator using JavaScript * Explains how to automate tasks such as linking graphics to a database, transforming images, and performing batch processes * Features more than... (more)\n\nThe Internet is bigger and better than what a mere browser allows. Webbots, Spiders, and Screen Scrapers is for programmers and businesspeople who want to take full advantage of the vast resources available on the Web. There's no reason to let browsers limit your online experience--especially when you can easily automate online tasks to suit your individual needs. Learn how to write webbots and spiders that... (more)\n\nEmergence is an important new concept in artificial intelligence, information theory, digital technology, economics, climate studies, material science and biometric engineering. It is a development which is set to inform not only the construction of buildings, but also the composition of new materials. As a new science, coupled with material and technological innovations, it is set to enter architecture... (more)"}
